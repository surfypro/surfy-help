"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/isArguments.js"(exports2, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = /* @__PURE__ */ __name(function isArguments(value) {
      var str = toStr.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
      }
      return isArgs;
    }, "isArguments");
  }
});

// node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/implementation.js
var require_implementation = __commonJS({
  "node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/implementation.js"(exports2, module2) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({
        toString: null
      }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = /* @__PURE__ */ __name(function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      }, "equalsConstructorPrototype");
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = /* @__PURE__ */ __name(function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      }, "equalsConstructorPrototypeIfNotBuggy");
      keysShim = /* @__PURE__ */ __name(function keys(object) {
        var isObject2 = object !== null && typeof object === "object";
        var isFunction = toStr.call(object) === "[object Function]";
        var isArguments = isArgs(object);
        var isString2 = isObject2 && toStr.call(object) === "[object String]";
        var theKeys = [];
        if (!isObject2 && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString2 && object.length > 0 && !has.call(object, 0)) {
          for (var i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object.length > 0) {
          for (var j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object) {
            if (!(skipProto && name === "prototype") && has.call(object, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      }, "keys");
    }
    var has;
    var toStr;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module2.exports = keysShim;
  }
});

// node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/.pnpm/object-keys@1.1.1/node_modules/object-keys/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? /* @__PURE__ */ __name(function keys(o) {
      return origKeys(o);
    }, "keys") : require_implementation();
    var originalKeys = Object.keys;
    keysShim.shim = /* @__PURE__ */ __name(function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = /* @__PURE__ */ __name(function keys(object) {
            if (isArgs(object)) {
              return originalKeys(slice.call(object));
            }
            return originalKeys(object);
          }, "keys");
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    }, "shimObjectKeys");
    module2.exports = keysShim;
  }
});

// node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", {
          value: 1
        });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  "node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js"(exports2, module2) {
    "use strict";
    module2.exports = Object.getOwnPropertyDescriptor;
  }
});

// node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = /* @__PURE__ */ __name(function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    }, "defineDataProperty");
  }
});

// node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = /* @__PURE__ */ __name(function hasPropertyDescriptors2() {
      return !!$defineProperty;
    }, "hasPropertyDescriptors");
    hasPropertyDescriptors.hasArrayLengthDefineBug = /* @__PURE__ */ __name(function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", {
          value: 1
        }).length !== 1;
      } catch (e) {
        return true;
      }
    }, "hasArrayLengthDefineBug");
    module2.exports = hasPropertyDescriptors;
  }
});

// node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/.pnpm/define-properties@1.2.1/node_modules/define-properties/index.js"(exports2, module2) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = /* @__PURE__ */ __name(function(fn) {
      return typeof fn === "function" && toStr.call(fn) === "[object Function]";
    }, "isFunction");
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = /* @__PURE__ */ __name(function(object, name, value, predicate) {
      if (name in object) {
        if (predicate === true) {
          if (object[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
      } else {
        defineDataProperty(object, name, value);
      }
    }, "defineProperty");
    var defineProperties = /* @__PURE__ */ __name(function(object, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
      }
    }, "defineProperties");
    defineProperties.supportsDescriptors = !!supportsDescriptors;
    module2.exports = defineProperties;
  }
});

// node_modules/.pnpm/es-object-atoms@1.0.0/node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  "node_modules/.pnpm/es-object-atoms@1.0.0/node_modules/es-object-atoms/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Object;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  "node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/abs.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.abs;
  }
});

// node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  "node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/floor.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.floor;
  }
});

// node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  "node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/max.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.max;
  }
});

// node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  "node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/min.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.min;
  }
});

// node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  "node_modules/.pnpm/math-intrinsics@1.0.0/node_modules/math-intrinsics/pow.js"(exports2, module2) {
    "use strict";
    module2.exports = Math.pow;
  }
});

// node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = /* @__PURE__ */ __name(function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _ in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = (
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym)
        );
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    }, "hasSymbols");
  }
});

// node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = /* @__PURE__ */ __name(function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    }, "hasNativeSymbols");
  }
});

// node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = /* @__PURE__ */ __name(function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    }, "concatty");
    var slicy = /* @__PURE__ */ __name(function slicy2(arrLike, offset2) {
      var arr = [];
      for (var i = offset2 || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    }, "slicy");
    var joiny = /* @__PURE__ */ __name(function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    }, "joiny");
    module2.exports = /* @__PURE__ */ __name(function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = /* @__PURE__ */ __name(function() {
        if (this instanceof bound) {
          var result = target.apply(this, concatty(args, arguments));
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(that, concatty(args, arguments));
      }, "binder");
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = /* @__PURE__ */ __name(function Empty2() {
        }, "Empty");
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    }, "bind");
  }
});

// node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation2();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionCall.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.call;
  }
});

// node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/functionApply.js"(exports2, module2) {
    "use strict";
    module2.exports = Function.prototype.apply;
  }
});

// node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/reflectApply.js"(exports2, module2) {
    "use strict";
    module2.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  }
});

// node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/actualApply.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module2.exports = $reflectApply || bind.call($call, $apply);
  }
});

// node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module2.exports = /* @__PURE__ */ __name(function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== "function") {
        throw new $TypeError("a function is required");
      }
      return $actualApply(bind, $call, args);
    }, "callBindBasic");
  }
});

// node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js
var require_get = __commonJS({
  "node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js"(exports2, module2) {
    "use strict";
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
      [].__proto__ === Array.prototype;
    } catch (e) {
      if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
        throw e;
      }
    }
    var desc = !!hasProtoAccessor && gOPD && gOPD(
      Object.prototype,
      /** @type {keyof typeof Object.prototype} */
      "__proto__"
    );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module2.exports = desc && typeof desc.get === "function" ? callBind([
      desc.get
    ]) : typeof $getPrototypeOf === "function" ? (
      /** @type {import('./get')} */
      /* @__PURE__ */ __name(function getDunder(value) {
        return $getPrototypeOf(value == null ? value : $Object(value));
      }, "getDunder")
    ) : false;
  }
});

// node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/.pnpm/get-intrinsic@1.2.6/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/.pnpm/get-intrinsic@1.2.6/node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor2 = require_floor();
    var max = require_max();
    var min = require_min();
    var pow = require_pow();
    var $Function = Function;
    var getEvalledConstructor = /* @__PURE__ */ __name(function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    }, "getEvalledConstructor");
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = /* @__PURE__ */ __name(function() {
      throw new $TypeError();
    }, "throwTypeError");
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getDunderProto = require_get();
    var getProto = typeof Reflect === "function" && Reflect.getPrototypeOf || $Object.getPrototypeOf || getDunderProto;
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": $Object,
      "%Object.getOwnPropertyDescriptor%": $gOPD,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet,
      "%Function.prototype.call%": $call,
      "%Function.prototype.apply%": $apply,
      "%Object.defineProperty%": $defineProperty,
      "%Math.abs%": abs,
      "%Math.floor%": floor2,
      "%Math.max%": max,
      "%Math.min%": min,
      "%Math.pow%": pow
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = /* @__PURE__ */ __name(function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    }, "doEval");
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
      ],
      "%ArrayPrototype%": [
        "Array",
        "prototype"
      ],
      "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
      ],
      "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
      ],
      "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
      ],
      "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
      ],
      "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
      ],
      "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
      ],
      "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
      ],
      "%BooleanPrototype%": [
        "Boolean",
        "prototype"
      ],
      "%DataViewPrototype%": [
        "DataView",
        "prototype"
      ],
      "%DatePrototype%": [
        "Date",
        "prototype"
      ],
      "%ErrorPrototype%": [
        "Error",
        "prototype"
      ],
      "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
      ],
      "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
      ],
      "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
      ],
      "%FunctionPrototype%": [
        "Function",
        "prototype"
      ],
      "%Generator%": [
        "GeneratorFunction",
        "prototype"
      ],
      "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
      ],
      "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
      ],
      "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
      ],
      "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
      ],
      "%JSONParse%": [
        "JSON",
        "parse"
      ],
      "%JSONStringify%": [
        "JSON",
        "stringify"
      ],
      "%MapPrototype%": [
        "Map",
        "prototype"
      ],
      "%NumberPrototype%": [
        "Number",
        "prototype"
      ],
      "%ObjectPrototype%": [
        "Object",
        "prototype"
      ],
      "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
      ],
      "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
      ],
      "%PromisePrototype%": [
        "Promise",
        "prototype"
      ],
      "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
      ],
      "%Promise_all%": [
        "Promise",
        "all"
      ],
      "%Promise_reject%": [
        "Promise",
        "reject"
      ],
      "%Promise_resolve%": [
        "Promise",
        "resolve"
      ],
      "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
      ],
      "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
      ],
      "%RegExpPrototype%": [
        "RegExp",
        "prototype"
      ],
      "%SetPrototype%": [
        "Set",
        "prototype"
      ],
      "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
      ],
      "%StringPrototype%": [
        "String",
        "prototype"
      ],
      "%SymbolPrototype%": [
        "Symbol",
        "prototype"
      ],
      "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
      ],
      "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
      ],
      "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
      ],
      "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
      ],
      "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
      ],
      "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
      ],
      "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
      ],
      "%URIErrorPrototype%": [
        "URIError",
        "prototype"
      ],
      "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
      ],
      "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
      ]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = /* @__PURE__ */ __name(function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match2, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match2;
      });
      return result;
    }, "stringToPath");
    var getBaseIntrinsic = /* @__PURE__ */ __name(function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    }, "getBaseIntrinsic");
    module2.exports = /* @__PURE__ */ __name(function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
          0,
          1
        ], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    }, "GetIntrinsic");
  }
});

// node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = /* @__PURE__ */ __name(function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    }, "setFunctionLength");
  }
});

// node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/applyBind.js
var require_applyBind = __commonJS({
  "node_modules/.pnpm/call-bind-apply-helpers@1.0.1/node_modules/call-bind-apply-helpers/applyBind.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var actualApply = require_actualApply();
    module2.exports = /* @__PURE__ */ __name(function applyBind() {
      return actualApply(bind, $apply, arguments);
    }, "applyBind");
  }
});

// node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var setFunctionLength = require_set_function_length();
    var $defineProperty = require_es_define_property();
    var callBindBasic = require_call_bind_apply_helpers();
    var applyBind = require_applyBind();
    module2.exports = /* @__PURE__ */ __name(function callBind(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength(func, 1 + (adjustedLength > 0 ? adjustedLength : 0), true);
    }, "callBind");
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", {
        value: applyBind
      });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// node_modules/.pnpm/es-object-atoms@1.0.0/node_modules/es-object-atoms/RequireObjectCoercible.js
var require_RequireObjectCoercible = __commonJS({
  "node_modules/.pnpm/es-object-atoms@1.0.0/node_modules/es-object-atoms/RequireObjectCoercible.js"(exports2, module2) {
    "use strict";
    var $TypeError = require_type();
    module2.exports = /* @__PURE__ */ __name(function RequireObjectCoercible(value) {
      if (value == null) {
        throw new $TypeError(arguments.length > 0 && arguments[1] || "Cannot call method on " + value);
      }
      return value;
    }, "RequireObjectCoercible");
  }
});

// node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/.pnpm/call-bind@1.0.8/node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = /* @__PURE__ */ __name(function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    }, "callBoundIntrinsic");
  }
});

// node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/implementation.js"(exports2, module2) {
    "use strict";
    var RequireObjectCoercible = require_RequireObjectCoercible();
    var callBound = require_callBound();
    var $isEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var $push = callBound("Array.prototype.push");
    module2.exports = /* @__PURE__ */ __name(function entries(O) {
      var obj = RequireObjectCoercible(O);
      var entrys = [];
      for (var key in obj) {
        if ($isEnumerable(obj, key)) {
          $push(entrys, [
            key,
            obj[key]
          ]);
        }
      }
      return entrys;
    }, "entries");
  }
});

// node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/polyfill.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation3();
    module2.exports = /* @__PURE__ */ __name(function getPolyfill() {
      return typeof Object.entries === "function" ? Object.entries : implementation;
    }, "getPolyfill");
  }
});

// node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/shim.js
var require_shim = __commonJS({
  "node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/shim.js"(exports2, module2) {
    "use strict";
    var getPolyfill = require_polyfill();
    var define = require_define_properties();
    module2.exports = /* @__PURE__ */ __name(function shimEntries() {
      var polyfill = getPolyfill();
      define(Object, {
        entries: polyfill
      }, {
        entries: /* @__PURE__ */ __name(function testEntries() {
          return Object.entries !== polyfill;
        }, "testEntries")
      });
      return polyfill;
    }, "shimEntries");
  }
});

// node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/index.js
var require_object = __commonJS({
  "node_modules/.pnpm/object.entries@1.1.8/node_modules/object.entries/index.js"(exports2, module2) {
    "use strict";
    var define = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation3();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module2.exports = polyfill;
  }
});

// node_modules/.pnpm/warning@4.0.3/node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/.pnpm/warning@4.0.3/node_modules/warning/warning.js"(exports2, module2) {
    "use strict";
    var __DEV__ = process.env.NODE_ENV !== "production";
    var warning = /* @__PURE__ */ __name(function() {
    }, "warning");
    if (__DEV__) {
      printWarning = /* @__PURE__ */ __name(function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      }, "printWarning");
      warning = /* @__PURE__ */ __name(function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (!condition) {
          printWarning.apply(null, [
            format
          ].concat(args));
        }
      }, "warning");
    }
    var printWarning;
    module2.exports = warning;
  }
});

// node_modules/.pnpm/node-polyglot@2.6.0/node_modules/node-polyglot/index.js
var require_node_polyglot = __commonJS({
  "node_modules/.pnpm/node-polyglot@2.6.0/node_modules/node-polyglot/index.js"(exports2, module2) {
    "use strict";
    var entries = require_object();
    var warning = require_warning();
    var has = require_hasown();
    var warn = /* @__PURE__ */ __name(function warn2(message) {
      warning(false, message);
    }, "warn");
    var defaultReplace = String.prototype.replace;
    var split = String.prototype.split;
    var delimiter = "||||";
    var russianPluralGroups = /* @__PURE__ */ __name(function(n2) {
      var lastTwo = n2 % 100;
      var end = lastTwo % 10;
      if (lastTwo !== 11 && end === 1) {
        return 0;
      }
      if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {
        return 1;
      }
      return 2;
    }, "russianPluralGroups");
    var defaultPluralRules = {
      // Mapping from pluralization group plural logic.
      pluralTypes: {
        arabic: /* @__PURE__ */ __name(function(n2) {
          if (n2 < 3) {
            return n2;
          }
          var lastTwo = n2 % 100;
          if (lastTwo >= 3 && lastTwo <= 10) return 3;
          return lastTwo >= 11 ? 4 : 5;
        }, "arabic"),
        bosnian_serbian: russianPluralGroups,
        chinese: /* @__PURE__ */ __name(function() {
          return 0;
        }, "chinese"),
        croatian: russianPluralGroups,
        french: /* @__PURE__ */ __name(function(n2) {
          return n2 >= 2 ? 1 : 0;
        }, "french"),
        german: /* @__PURE__ */ __name(function(n2) {
          return n2 !== 1 ? 1 : 0;
        }, "german"),
        russian: russianPluralGroups,
        lithuanian: /* @__PURE__ */ __name(function(n2) {
          if (n2 % 10 === 1 && n2 % 100 !== 11) {
            return 0;
          }
          return n2 % 10 >= 2 && n2 % 10 <= 9 && (n2 % 100 < 11 || n2 % 100 > 19) ? 1 : 2;
        }, "lithuanian"),
        czech: /* @__PURE__ */ __name(function(n2) {
          if (n2 === 1) {
            return 0;
          }
          return n2 >= 2 && n2 <= 4 ? 1 : 2;
        }, "czech"),
        polish: /* @__PURE__ */ __name(function(n2) {
          if (n2 === 1) {
            return 0;
          }
          var end = n2 % 10;
          return 2 <= end && end <= 4 && (n2 % 100 < 10 || n2 % 100 >= 20) ? 1 : 2;
        }, "polish"),
        icelandic: /* @__PURE__ */ __name(function(n2) {
          return n2 % 10 !== 1 || n2 % 100 === 11 ? 1 : 0;
        }, "icelandic"),
        slovenian: /* @__PURE__ */ __name(function(n2) {
          var lastTwo = n2 % 100;
          if (lastTwo === 1) {
            return 0;
          }
          if (lastTwo === 2) {
            return 1;
          }
          if (lastTwo === 3 || lastTwo === 4) {
            return 2;
          }
          return 3;
        }, "slovenian"),
        romanian: /* @__PURE__ */ __name(function(n2) {
          if (n2 === 1) {
            return 0;
          }
          var lastTwo = n2 % 100;
          if (n2 === 0 || lastTwo >= 2 && lastTwo <= 19) {
            return 1;
          }
          return 2;
        }, "romanian"),
        ukrainian: russianPluralGroups
      },
      // Mapping from pluralization group to individual language codes/locales.
      // Will look up based on exact match, if not found and it's a locale will parse the locale
      // for language code, and if that does not exist will default to 'en'
      pluralTypeToLanguages: {
        arabic: [
          "ar"
        ],
        bosnian_serbian: [
          "bs-Latn-BA",
          "bs-Cyrl-BA",
          "srl-RS",
          "sr-RS"
        ],
        chinese: [
          "id",
          "id-ID",
          "ja",
          "ko",
          "ko-KR",
          "lo",
          "ms",
          "th",
          "th-TH",
          "zh"
        ],
        croatian: [
          "hr",
          "hr-HR"
        ],
        german: [
          "fa",
          "da",
          "de",
          "en",
          "es",
          "fi",
          "el",
          "he",
          "hi-IN",
          "hu",
          "hu-HU",
          "it",
          "nl",
          "no",
          "pt",
          "sv",
          "tr"
        ],
        french: [
          "fr",
          "tl",
          "pt-br"
        ],
        russian: [
          "ru",
          "ru-RU"
        ],
        lithuanian: [
          "lt"
        ],
        czech: [
          "cs",
          "cs-CZ",
          "sk"
        ],
        polish: [
          "pl"
        ],
        icelandic: [
          "is",
          "mk"
        ],
        slovenian: [
          "sl-SL"
        ],
        romanian: [
          "ro"
        ],
        ukrainian: [
          "uk",
          "ua"
        ]
      }
    };
    function langToTypeMap(mapping) {
      var ret = {};
      var mappingEntries = entries(mapping);
      for (var i = 0; i < mappingEntries.length; i += 1) {
        var type = mappingEntries[i][0];
        var langs = mappingEntries[i][1];
        for (var j = 0; j < langs.length; j += 1) {
          ret[langs[j]] = type;
        }
      }
      return ret;
    }
    __name(langToTypeMap, "langToTypeMap");
    function pluralTypeName(pluralRules, locale) {
      var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);
      return langToPluralType[locale] || langToPluralType[split.call(locale, /-/, 1)[0]] || langToPluralType.en;
    }
    __name(pluralTypeName, "pluralTypeName");
    function pluralTypeIndex(pluralRules, pluralType, count) {
      return pluralRules.pluralTypes[pluralType](count);
    }
    __name(pluralTypeIndex, "pluralTypeIndex");
    function createMemoizedPluralTypeNameSelector() {
      var localePluralTypeStorage = {};
      return function(pluralRules, locale) {
        var pluralType = localePluralTypeStorage[locale];
        if (pluralType && !pluralRules.pluralTypes[pluralType]) {
          pluralType = null;
          localePluralTypeStorage[locale] = pluralType;
        }
        if (!pluralType) {
          pluralType = pluralTypeName(pluralRules, locale);
          if (pluralType) {
            localePluralTypeStorage[locale] = pluralType;
          }
        }
        return pluralType;
      };
    }
    __name(createMemoizedPluralTypeNameSelector, "createMemoizedPluralTypeNameSelector");
    function escape(token) {
      return token.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    __name(escape, "escape");
    function constructTokenRegex(opts) {
      var prefix2 = opts && opts.prefix || "%{";
      var suffix = opts && opts.suffix || "}";
      if (prefix2 === delimiter || suffix === delimiter) {
        throw new RangeError('"' + delimiter + '" token is reserved for pluralization');
      }
      return new RegExp(escape(prefix2) + "(.*?)" + escape(suffix), "g");
    }
    __name(constructTokenRegex, "constructTokenRegex");
    var memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();
    var defaultTokenRegex = /%\{(.*?)\}/g;
    function transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules, replaceImplementation) {
      if (typeof phrase !== "string") {
        throw new TypeError("Polyglot.transformPhrase expects argument #1 to be string");
      }
      if (substitutions == null) {
        return phrase;
      }
      var result = phrase;
      var interpolationRegex = tokenRegex || defaultTokenRegex;
      var replace = replaceImplementation || defaultReplace;
      var options = typeof substitutions === "number" ? {
        smart_count: substitutions
      } : substitutions;
      if (options.smart_count != null && phrase) {
        var pluralRulesOrDefault = pluralRules || defaultPluralRules;
        var texts = split.call(phrase, delimiter);
        var bestLocale = locale || "en";
        var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);
        var pluralTypeWithCount = pluralTypeIndex(pluralRulesOrDefault, pluralType, options.smart_count);
        result = defaultReplace.call(texts[pluralTypeWithCount] || texts[0], /^[^\S]*|[^\S]*$/g, "");
      }
      result = replace.call(result, interpolationRegex, function(expression, argument) {
        if (!has(options, argument) || options[argument] == null) {
          return expression;
        }
        return options[argument];
      });
      return result;
    }
    __name(transformPhrase, "transformPhrase");
    function Polyglot3(options) {
      var opts = options || {};
      this.phrases = {};
      this.extend(opts.phrases || {});
      this.currentLocale = opts.locale || "en";
      var allowMissing = opts.allowMissing ? transformPhrase : null;
      this.onMissingKey = typeof opts.onMissingKey === "function" ? opts.onMissingKey : allowMissing;
      this.warn = opts.warn || warn;
      this.replaceImplementation = opts.replace || defaultReplace;
      this.tokenRegex = constructTokenRegex(opts.interpolation);
      this.pluralRules = opts.pluralRules || defaultPluralRules;
    }
    __name(Polyglot3, "Polyglot");
    Polyglot3.prototype.locale = function(newLocale) {
      if (newLocale) this.currentLocale = newLocale;
      return this.currentLocale;
    };
    Polyglot3.prototype.extend = function(morePhrases, prefix2) {
      var phraseEntries = entries(morePhrases || {});
      for (var i = 0; i < phraseEntries.length; i += 1) {
        var key = phraseEntries[i][0];
        var phrase = phraseEntries[i][1];
        var prefixedKey = prefix2 ? prefix2 + "." + key : key;
        if (typeof phrase === "object") {
          this.extend(phrase, prefixedKey);
        } else {
          this.phrases[prefixedKey] = phrase;
        }
      }
    };
    Polyglot3.prototype.unset = function(morePhrases, prefix2) {
      if (typeof morePhrases === "string") {
        delete this.phrases[morePhrases];
      } else {
        var phraseEntries = entries(morePhrases || {});
        for (var i = 0; i < phraseEntries.length; i += 1) {
          var key = phraseEntries[i][0];
          var phrase = phraseEntries[i][1];
          var prefixedKey = prefix2 ? prefix2 + "." + key : key;
          if (typeof phrase === "object") {
            this.unset(phrase, prefixedKey);
          } else {
            delete this.phrases[prefixedKey];
          }
        }
      }
    };
    Polyglot3.prototype.clear = function() {
      this.phrases = {};
    };
    Polyglot3.prototype.replace = function(newPhrases) {
      this.clear();
      this.extend(newPhrases);
    };
    Polyglot3.prototype.t = function(key, options) {
      var phrase, result;
      var opts = options == null ? {} : options;
      if (typeof this.phrases[key] === "string") {
        phrase = this.phrases[key];
      } else if (typeof opts._ === "string") {
        phrase = opts._;
      } else if (this.onMissingKey) {
        var onMissingKey = this.onMissingKey;
        result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules, this.replaceImplementation);
      } else {
        this.warn('Missing translation for key: "' + key + '"');
        result = key;
      }
      if (typeof phrase === "string") {
        result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules, this.replaceImplementation);
      }
      return result;
    };
    Polyglot3.prototype.has = function(key) {
      return has(this.phrases, key);
    };
    Polyglot3.transformPhrase = /* @__PURE__ */ __name(function transform(phrase, substitutions, locale) {
      return transformPhrase(phrase, substitutions, locale);
    }, "transform");
    module2.exports = Polyglot3;
  }
});

// node_modules/.pnpm/global@4.4.0/node_modules/global/window.js
var require_window = __commonJS({
  "node_modules/.pnpm/global@4.4.0/node_modules/global/window.js"(exports2, module2) {
    "use strict";
    var win;
    if (typeof window !== "undefined") {
      win = window;
    } else if (typeof global !== "undefined") {
      win = global;
    } else if (typeof self !== "undefined") {
      win = self;
    } else {
      win = {};
    }
    module2.exports = win;
  }
});

// node_modules/.pnpm/dom-walk@0.1.2/node_modules/dom-walk/index.js
var require_dom_walk = __commonJS({
  "node_modules/.pnpm/dom-walk@0.1.2/node_modules/dom-walk/index.js"(exports2, module2) {
    "use strict";
    var slice = Array.prototype.slice;
    module2.exports = iterativelyWalk;
    function iterativelyWalk(nodes, cb) {
      if (!("length" in nodes)) {
        nodes = [
          nodes
        ];
      }
      nodes = slice.call(nodes);
      while (nodes.length) {
        var node = nodes.shift(), ret = cb(node);
        if (ret) {
          return ret;
        }
        if (node.childNodes && node.childNodes.length) {
          nodes = slice.call(node.childNodes).concat(nodes);
        }
      }
    }
    __name(iterativelyWalk, "iterativelyWalk");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-comment.js
var require_dom_comment = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-comment.js"(exports2, module2) {
    "use strict";
    module2.exports = Comment;
    function Comment(data, owner) {
      if (!(this instanceof Comment)) {
        return new Comment(data, owner);
      }
      this.data = data;
      this.nodeValue = data;
      this.length = data.length;
      this.ownerDocument = owner || null;
    }
    __name(Comment, "Comment");
    Comment.prototype.nodeType = 8;
    Comment.prototype.nodeName = "#comment";
    Comment.prototype.toString = /* @__PURE__ */ __name(function _Comment_toString() {
      return "[object Comment]";
    }, "_Comment_toString");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-text.js
var require_dom_text = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-text.js"(exports2, module2) {
    "use strict";
    module2.exports = DOMText;
    function DOMText(value, owner) {
      if (!(this instanceof DOMText)) {
        return new DOMText(value);
      }
      this.data = value || "";
      this.length = this.data.length;
      this.ownerDocument = owner || null;
    }
    __name(DOMText, "DOMText");
    DOMText.prototype.type = "DOMTextNode";
    DOMText.prototype.nodeType = 3;
    DOMText.prototype.nodeName = "#text";
    DOMText.prototype.toString = /* @__PURE__ */ __name(function _Text_toString() {
      return this.data;
    }, "_Text_toString");
    DOMText.prototype.replaceData = /* @__PURE__ */ __name(function replaceData(index, length, value) {
      var current = this.data;
      var left = current.substring(0, index);
      var right = current.substring(index + length, current.length);
      this.data = left + value + right;
      this.length = this.data.length;
    }, "replaceData");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event/dispatch-event.js
var require_dispatch_event = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event/dispatch-event.js"(exports2, module2) {
    "use strict";
    module2.exports = dispatchEvent;
    function dispatchEvent(ev) {
      var elem = this;
      var type = ev.type;
      if (!ev.target) {
        ev.target = elem;
      }
      if (!elem.listeners) {
        elem.listeners = {};
      }
      var listeners = elem.listeners[type];
      if (listeners) {
        return listeners.forEach(function(listener) {
          ev.currentTarget = elem;
          if (typeof listener === "function") {
            listener(ev);
          } else {
            listener.handleEvent(ev);
          }
        });
      }
      if (elem.parentNode) {
        elem.parentNode.dispatchEvent(ev);
      }
    }
    __name(dispatchEvent, "dispatchEvent");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event/add-event-listener.js
var require_add_event_listener = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event/add-event-listener.js"(exports2, module2) {
    "use strict";
    module2.exports = addEventListener;
    function addEventListener(type, listener) {
      var elem = this;
      if (!elem.listeners) {
        elem.listeners = {};
      }
      if (!elem.listeners[type]) {
        elem.listeners[type] = [];
      }
      if (elem.listeners[type].indexOf(listener) === -1) {
        elem.listeners[type].push(listener);
      }
    }
    __name(addEventListener, "addEventListener");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event/remove-event-listener.js
var require_remove_event_listener = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event/remove-event-listener.js"(exports2, module2) {
    "use strict";
    module2.exports = removeEventListener;
    function removeEventListener(type, listener) {
      var elem = this;
      if (!elem.listeners) {
        return;
      }
      if (!elem.listeners[type]) {
        return;
      }
      var list = elem.listeners[type];
      var index = list.indexOf(listener);
      if (index !== -1) {
        list.splice(index, 1);
      }
    }
    __name(removeEventListener, "removeEventListener");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/serialize.js
var require_serialize = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/serialize.js"(exports2, module2) {
    "use strict";
    module2.exports = serializeNode;
    var voidElements = [
      "area",
      "base",
      "br",
      "col",
      "embed",
      "hr",
      "img",
      "input",
      "keygen",
      "link",
      "menuitem",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ];
    function serializeNode(node) {
      switch (node.nodeType) {
        case 3:
          return escapeText(node.data);
        case 8:
          return "<!--" + node.data + "-->";
        default:
          return serializeElement(node);
      }
    }
    __name(serializeNode, "serializeNode");
    function serializeElement(elem) {
      var strings = [];
      var tagname = elem.tagName;
      if (elem.namespaceURI === "http://www.w3.org/1999/xhtml") {
        tagname = tagname.toLowerCase();
      }
      strings.push("<" + tagname + properties(elem) + datasetify(elem));
      if (voidElements.indexOf(tagname) > -1) {
        strings.push(" />");
      } else {
        strings.push(">");
        if (elem.childNodes.length) {
          strings.push.apply(strings, elem.childNodes.map(serializeNode));
        } else if (elem.textContent || elem.innerText) {
          strings.push(escapeText(elem.textContent || elem.innerText));
        } else if (elem.innerHTML) {
          strings.push(elem.innerHTML);
        }
        strings.push("</" + tagname + ">");
      }
      return strings.join("");
    }
    __name(serializeElement, "serializeElement");
    function isProperty(elem, key) {
      var type = typeof elem[key];
      if (key === "style" && Object.keys(elem.style).length > 0) {
        return true;
      }
      return elem.hasOwnProperty(key) && (type === "string" || type === "boolean" || type === "number") && key !== "nodeName" && key !== "className" && key !== "tagName" && key !== "textContent" && key !== "innerText" && key !== "namespaceURI" && key !== "innerHTML";
    }
    __name(isProperty, "isProperty");
    function stylify(styles) {
      if (typeof styles === "string") return styles;
      var attr = "";
      Object.keys(styles).forEach(function(key) {
        var value = styles[key];
        key = key.replace(/[A-Z]/g, function(c) {
          return "-" + c.toLowerCase();
        });
        attr += key + ":" + value + ";";
      });
      return attr;
    }
    __name(stylify, "stylify");
    function datasetify(elem) {
      var ds = elem.dataset;
      var props = [];
      for (var key in ds) {
        props.push({
          name: "data-" + key,
          value: ds[key]
        });
      }
      return props.length ? stringify(props) : "";
    }
    __name(datasetify, "datasetify");
    function stringify(list) {
      var attributes = [];
      list.forEach(function(tuple) {
        var name = tuple.name;
        var value = tuple.value;
        if (name === "style") {
          value = stylify(value);
        }
        attributes.push(name + '="' + escapeAttributeValue(value) + '"');
      });
      return attributes.length ? " " + attributes.join(" ") : "";
    }
    __name(stringify, "stringify");
    function properties(elem) {
      var props = [];
      for (var key in elem) {
        if (isProperty(elem, key)) {
          props.push({
            name: key,
            value: elem[key]
          });
        }
      }
      for (var ns in elem._attributes) {
        for (var attribute in elem._attributes[ns]) {
          var prop = elem._attributes[ns][attribute];
          var name = (prop.prefix ? prop.prefix + ":" : "") + attribute;
          props.push({
            name,
            value: prop.value
          });
        }
      }
      if (elem.className) {
        props.push({
          name: "class",
          value: elem.className
        });
      }
      return props.length ? stringify(props) : "";
    }
    __name(properties, "properties");
    function escapeText(s2) {
      var str = "";
      if (typeof s2 === "string") {
        str = s2;
      } else if (s2) {
        str = s2.toString();
      }
      return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
    __name(escapeText, "escapeText");
    function escapeAttributeValue(str) {
      return escapeText(str).replace(/"/g, "&quot;");
    }
    __name(escapeAttributeValue, "escapeAttributeValue");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-element.js
var require_dom_element = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-element.js"(exports2, module2) {
    "use strict";
    var domWalk = require_dom_walk();
    var dispatchEvent = require_dispatch_event();
    var addEventListener = require_add_event_listener();
    var removeEventListener = require_remove_event_listener();
    var serializeNode = require_serialize();
    var htmlns = "http://www.w3.org/1999/xhtml";
    module2.exports = DOMElement;
    function DOMElement(tagName, owner, namespace) {
      if (!(this instanceof DOMElement)) {
        return new DOMElement(tagName);
      }
      var ns = namespace === void 0 ? htmlns : namespace || null;
      this.tagName = ns === htmlns ? String(tagName).toUpperCase() : tagName;
      this.nodeName = this.tagName;
      this.className = "";
      this.dataset = {};
      this.childNodes = [];
      this.parentNode = null;
      this.style = {};
      this.ownerDocument = owner || null;
      this.namespaceURI = ns;
      this._attributes = {};
      if (this.tagName === "INPUT") {
        this.type = "text";
      }
    }
    __name(DOMElement, "DOMElement");
    DOMElement.prototype.type = "DOMElement";
    DOMElement.prototype.nodeType = 1;
    DOMElement.prototype.appendChild = /* @__PURE__ */ __name(function _Element_appendChild(child) {
      if (child.parentNode) {
        child.parentNode.removeChild(child);
      }
      this.childNodes.push(child);
      child.parentNode = this;
      return child;
    }, "_Element_appendChild");
    DOMElement.prototype.replaceChild = /* @__PURE__ */ __name(function _Element_replaceChild(elem, needle) {
      if (elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
      var index = this.childNodes.indexOf(needle);
      needle.parentNode = null;
      this.childNodes[index] = elem;
      elem.parentNode = this;
      return needle;
    }, "_Element_replaceChild");
    DOMElement.prototype.removeChild = /* @__PURE__ */ __name(function _Element_removeChild(elem) {
      var index = this.childNodes.indexOf(elem);
      this.childNodes.splice(index, 1);
      elem.parentNode = null;
      return elem;
    }, "_Element_removeChild");
    DOMElement.prototype.insertBefore = /* @__PURE__ */ __name(function _Element_insertBefore(elem, needle) {
      if (elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
      var index = needle === null || needle === void 0 ? -1 : this.childNodes.indexOf(needle);
      if (index > -1) {
        this.childNodes.splice(index, 0, elem);
      } else {
        this.childNodes.push(elem);
      }
      elem.parentNode = this;
      return elem;
    }, "_Element_insertBefore");
    DOMElement.prototype.setAttributeNS = /* @__PURE__ */ __name(function _Element_setAttributeNS(namespace, name, value) {
      var prefix2 = null;
      var localName = name;
      var colonPosition = name.indexOf(":");
      if (colonPosition > -1) {
        prefix2 = name.substr(0, colonPosition);
        localName = name.substr(colonPosition + 1);
      }
      if (this.tagName === "INPUT" && name === "type") {
        this.type = value;
      } else {
        var attributes = this._attributes[namespace] || (this._attributes[namespace] = {});
        attributes[localName] = {
          value,
          prefix: prefix2
        };
      }
    }, "_Element_setAttributeNS");
    DOMElement.prototype.getAttributeNS = /* @__PURE__ */ __name(function _Element_getAttributeNS(namespace, name) {
      var attributes = this._attributes[namespace];
      var value = attributes && attributes[name] && attributes[name].value;
      if (this.tagName === "INPUT" && name === "type") {
        return this.type;
      }
      if (typeof value !== "string") {
        return null;
      }
      return value;
    }, "_Element_getAttributeNS");
    DOMElement.prototype.removeAttributeNS = /* @__PURE__ */ __name(function _Element_removeAttributeNS(namespace, name) {
      var attributes = this._attributes[namespace];
      if (attributes) {
        delete attributes[name];
      }
    }, "_Element_removeAttributeNS");
    DOMElement.prototype.hasAttributeNS = /* @__PURE__ */ __name(function _Element_hasAttributeNS(namespace, name) {
      var attributes = this._attributes[namespace];
      return !!attributes && name in attributes;
    }, "_Element_hasAttributeNS");
    DOMElement.prototype.setAttribute = /* @__PURE__ */ __name(function _Element_setAttribute(name, value) {
      return this.setAttributeNS(null, name, value);
    }, "_Element_setAttribute");
    DOMElement.prototype.getAttribute = /* @__PURE__ */ __name(function _Element_getAttribute(name) {
      return this.getAttributeNS(null, name);
    }, "_Element_getAttribute");
    DOMElement.prototype.removeAttribute = /* @__PURE__ */ __name(function _Element_removeAttribute(name) {
      return this.removeAttributeNS(null, name);
    }, "_Element_removeAttribute");
    DOMElement.prototype.hasAttribute = /* @__PURE__ */ __name(function _Element_hasAttribute(name) {
      return this.hasAttributeNS(null, name);
    }, "_Element_hasAttribute");
    DOMElement.prototype.removeEventListener = removeEventListener;
    DOMElement.prototype.addEventListener = addEventListener;
    DOMElement.prototype.dispatchEvent = dispatchEvent;
    DOMElement.prototype.focus = /* @__PURE__ */ __name(function _Element_focus() {
      return void 0;
    }, "_Element_focus");
    DOMElement.prototype.toString = /* @__PURE__ */ __name(function _Element_toString() {
      return serializeNode(this);
    }, "_Element_toString");
    DOMElement.prototype.getElementsByClassName = /* @__PURE__ */ __name(function _Element_getElementsByClassName(classNames) {
      var classes = classNames.split(" ");
      var elems = [];
      domWalk(this, function(node) {
        if (node.nodeType === 1) {
          var nodeClassName = node.className || "";
          var nodeClasses = nodeClassName.split(" ");
          if (classes.every(function(item2) {
            return nodeClasses.indexOf(item2) !== -1;
          })) {
            elems.push(node);
          }
        }
      });
      return elems;
    }, "_Element_getElementsByClassName");
    DOMElement.prototype.getElementsByTagName = /* @__PURE__ */ __name(function _Element_getElementsByTagName(tagName) {
      tagName = tagName.toLowerCase();
      var elems = [];
      domWalk(this.childNodes, function(node) {
        if (node.nodeType === 1 && (tagName === "*" || node.tagName.toLowerCase() === tagName)) {
          elems.push(node);
        }
      });
      return elems;
    }, "_Element_getElementsByTagName");
    DOMElement.prototype.contains = /* @__PURE__ */ __name(function _Element_contains(element) {
      return domWalk(this, function(node) {
        return element === node;
      }) || false;
    }, "_Element_contains");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-fragment.js
var require_dom_fragment = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/dom-fragment.js"(exports2, module2) {
    "use strict";
    var DOMElement = require_dom_element();
    module2.exports = DocumentFragment;
    function DocumentFragment(owner) {
      if (!(this instanceof DocumentFragment)) {
        return new DocumentFragment();
      }
      this.childNodes = [];
      this.parentNode = null;
      this.ownerDocument = owner || null;
    }
    __name(DocumentFragment, "DocumentFragment");
    DocumentFragment.prototype.type = "DocumentFragment";
    DocumentFragment.prototype.nodeType = 11;
    DocumentFragment.prototype.nodeName = "#document-fragment";
    DocumentFragment.prototype.appendChild = DOMElement.prototype.appendChild;
    DocumentFragment.prototype.replaceChild = DOMElement.prototype.replaceChild;
    DocumentFragment.prototype.removeChild = DOMElement.prototype.removeChild;
    DocumentFragment.prototype.toString = /* @__PURE__ */ __name(function _DocumentFragment_toString() {
      return this.childNodes.map(function(node) {
        return String(node);
      }).join("");
    }, "_DocumentFragment_toString");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event.js
var require_event = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/event.js"(exports2, module2) {
    "use strict";
    module2.exports = Event;
    function Event(family) {
    }
    __name(Event, "Event");
    Event.prototype.initEvent = /* @__PURE__ */ __name(function _Event_initEvent(type, bubbles, cancelable) {
      this.type = type;
      this.bubbles = bubbles;
      this.cancelable = cancelable;
    }, "_Event_initEvent");
    Event.prototype.preventDefault = /* @__PURE__ */ __name(function _Event_preventDefault() {
    }, "_Event_preventDefault");
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/document.js
var require_document = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/document.js"(exports2, module2) {
    "use strict";
    var domWalk = require_dom_walk();
    var Comment = require_dom_comment();
    var DOMText = require_dom_text();
    var DOMElement = require_dom_element();
    var DocumentFragment = require_dom_fragment();
    var Event = require_event();
    var dispatchEvent = require_dispatch_event();
    var addEventListener = require_add_event_listener();
    var removeEventListener = require_remove_event_listener();
    module2.exports = Document;
    function Document() {
      if (!(this instanceof Document)) {
        return new Document();
      }
      this.head = this.createElement("head");
      this.body = this.createElement("body");
      this.documentElement = this.createElement("html");
      this.documentElement.appendChild(this.head);
      this.documentElement.appendChild(this.body);
      this.childNodes = [
        this.documentElement
      ];
      this.nodeType = 9;
    }
    __name(Document, "Document");
    var proto = Document.prototype;
    proto.createTextNode = /* @__PURE__ */ __name(function createTextNode(value) {
      return new DOMText(value, this);
    }, "createTextNode");
    proto.createElementNS = /* @__PURE__ */ __name(function createElementNS(namespace, tagName) {
      var ns = namespace === null ? null : String(namespace);
      return new DOMElement(tagName, this, ns);
    }, "createElementNS");
    proto.createElement = /* @__PURE__ */ __name(function createElement(tagName) {
      return new DOMElement(tagName, this);
    }, "createElement");
    proto.createDocumentFragment = /* @__PURE__ */ __name(function createDocumentFragment() {
      return new DocumentFragment(this);
    }, "createDocumentFragment");
    proto.createEvent = /* @__PURE__ */ __name(function createEvent(family) {
      return new Event(family);
    }, "createEvent");
    proto.createComment = /* @__PURE__ */ __name(function createComment(data) {
      return new Comment(data, this);
    }, "createComment");
    proto.getElementById = /* @__PURE__ */ __name(function getElementById(id) {
      id = String(id);
      var result = domWalk(this.childNodes, function(node) {
        if (String(node.id) === id) {
          return node;
        }
      });
      return result || null;
    }, "getElementById");
    proto.getElementsByClassName = DOMElement.prototype.getElementsByClassName;
    proto.getElementsByTagName = DOMElement.prototype.getElementsByTagName;
    proto.contains = DOMElement.prototype.contains;
    proto.removeEventListener = removeEventListener;
    proto.addEventListener = addEventListener;
    proto.dispatchEvent = dispatchEvent;
  }
});

// node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/index.js
var require_min_document = __commonJS({
  "node_modules/.pnpm/min-document@2.19.0/node_modules/min-document/index.js"(exports2, module2) {
    "use strict";
    var Document = require_document();
    module2.exports = new Document();
  }
});

// node_modules/.pnpm/global@4.4.0/node_modules/global/document.js
var require_document2 = __commonJS({
  "node_modules/.pnpm/global@4.4.0/node_modules/global/document.js"(exports2, module2) {
    "use strict";
    var topLevel = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
    var minDoc = require_min_document();
    var doccy;
    if (typeof document !== "undefined") {
      doccy = document;
    } else {
      doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
      if (!doccy) {
        doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc;
      }
    }
    module2.exports = doccy;
  }
});

// node_modules/.pnpm/thenby@1.3.4/node_modules/thenby/thenBy.module.js
var require_thenBy_module = __commonJS({
  "node_modules/.pnpm/thenby@1.3.4/node_modules/thenby/thenBy.module.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      function identity(v) {
        return v;
      }
      __name(identity, "identity");
      function ignoreCase(v) {
        return typeof v === "string" ? v.toLowerCase() : v;
      }
      __name(ignoreCase, "ignoreCase");
      function makeCompareFunction(f, opt) {
        opt = typeof opt === "object" ? opt : {
          direction: opt
        };
        if (typeof f != "function") {
          var prop = f;
          f = /* @__PURE__ */ __name(function(v1) {
            return !!v1[prop] ? v1[prop] : "";
          }, "f");
        }
        if (f.length === 1) {
          var uf = f;
          var preprocess = opt.ignoreCase ? ignoreCase : identity;
          var cmp = opt.cmp || function(v1, v2) {
            return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;
          };
          f = /* @__PURE__ */ __name(function(v1, v2) {
            return cmp(preprocess(uf(v1)), preprocess(uf(v2)));
          }, "f");
        }
        const descTokens = {
          "-1": "",
          desc: ""
        };
        if (opt.direction in descTokens) return function(v1, v2) {
          return -f(v1, v2);
        };
        return f;
      }
      __name(makeCompareFunction, "makeCompareFunction");
      function tb(func, opt) {
        var x = typeof this == "function" && !this.firstBy ? this : false;
        var y = makeCompareFunction(func, opt);
        var f = x ? function(a, b) {
          return x(a, b) || y(a, b);
        } : y;
        f.thenBy = tb;
        return f;
      }
      __name(tb, "tb");
      tb.firstBy = tb;
      return tb;
    }();
  }
});

// src/surfy-help/index.ts
var surfy_help_exports = {};
__export(surfy_help_exports, {
  I18NHelpContext: () => I18NHelpContext,
  ObjectTypeIndexViewHelp: () => ObjectTypeIndexViewHelp,
  PropertyTypeLabel: () => PropertyTypeLabel,
  PropertyTypeMandatoryLabel: () => PropertyTypeMandatoryLabel,
  SetupRecoilContext: () => SetupRecoilContext,
  appVersion: () => appVersion,
  getObjectTypeDefinitionByName: () => getObjectTypeDefinitionByName,
  getPropertyTypeByCode: () => getPropertyTypeByCode,
  getPropertyTypeByName: () => getPropertyTypeByName,
  isTenantObjectType: () => isTenantObjectType,
  useFlattenDeterminants: () => useFlattenDeterminants,
  useTranslation: () => useTranslation,
  versionCookieKeyName: () => versionCookieKeyName
});
module.exports = __toCommonJS(surfy_help_exports);

// src/core/utils/arrayUtils.ts
function sortOnLevel(a, b) {
  return a.level - b.level;
}
__name(sortOnLevel, "sortOnLevel");
function sortOnName(a, b) {
  return a.name.localeCompare(b.name);
}
__name(sortOnName, "sortOnName");

// src/core/generated/objectTypeDefinitions/occupancyStatus.ts
var occupancyStatusObjectTypeDefintion = {
  "name": "occupancyStatus",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "occupancyStatus",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "occupancyStatus",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "occupancyStatus",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "occupancyStatus",
      "type": "color",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "occupancyStatus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "occupancyStatus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "occupancyStatus",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "occupancyStatus",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "occupancyStatusId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "occupancyStatuses",
  "camelized": {
    "singular": "occupancyStatus",
    "plural": "occupancyStatuses",
    "id": "occupancyStatusId"
  },
  "capitalized": {
    "singular": "OccupancyStatus",
    "plural": "OccupancyStatuses",
    "id": "OccupancyStatusId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "room"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/user.ts
var userObjectTypeDefintion = {
  "name": "user",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "user",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "email": {
      "name": "email",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "firstname": {
      "name": "firstname",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "lastname": {
      "name": "lastname",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "user",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "sub": {
      "name": "sub",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "user",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "user",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanies": {
      "name": "userCompanies",
      "objectTypeName": "user",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanies",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "users",
  "camelized": {
    "singular": "user",
    "plural": "users",
    "id": "userId"
  },
  "capitalized": {
    "singular": "User",
    "plural": "Users",
    "id": "UserId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userCompany"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/userRefreshToken.ts
var userRefreshTokenObjectTypeDefintion = {
  "name": "userRefreshToken",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRefreshToken",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "refreshToken": {
      "name": "refreshToken",
      "objectTypeName": "userRefreshToken",
      "type": "password",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRefreshToken",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRefreshToken",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRefreshToken",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userId": {
      "name": "userId",
      "objectTypeName": "userRefreshToken",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    },
    "user": {
      "name": "user",
      "objectTypeName": "userRefreshToken",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "userRefreshTokens",
  "camelized": {
    "singular": "userRefreshToken",
    "plural": "userRefreshTokens",
    "id": "userRefreshTokenId"
  },
  "capitalized": {
    "singular": "UserRefreshToken",
    "plural": "UserRefreshTokens",
    "id": "UserRefreshTokenId"
  },
  "hidden": true,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/companyType.ts
var companyTypeObjectTypeDefintion = {
  "name": "companyType",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "companyType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "companyType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "billable": {
      "name": "billable",
      "objectTypeName": "companyType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "companyType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "companyType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "companyType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companies": {
      "name": "companies",
      "objectTypeName": "companyType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyTypeId",
        "targetModelName": "company",
        "propertyTypeName": "companies",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "companyTypes",
  "camelized": {
    "singular": "companyType",
    "plural": "companyTypes",
    "id": "companyTypeId"
  },
  "capitalized": {
    "singular": "CompanyType",
    "plural": "CompanyTypes",
    "id": "CompanyTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "company"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/company.ts
var companyObjectTypeDefintion = {
  "name": "company",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "company",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "company",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "logoPath": {
      "name": "logoPath",
      "objectTypeName": "company",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "iconPath": {
      "name": "iconPath",
      "objectTypeName": "company",
      "type": "square-image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "proxyImages": {
      "name": "proxyImages",
      "objectTypeName": "company",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "workingDaysCount": {
      "name": "workingDaysCount",
      "objectTypeName": "company",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "enablePathfinding": {
      "name": "enablePathfinding",
      "objectTypeName": "company",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "planningNumberOfDays": {
      "name": "planningNumberOfDays",
      "objectTypeName": "company",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 14
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "company",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "company",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "company",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companyTypeId": {
      "name": "companyTypeId",
      "objectTypeName": "company",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyTypeId",
        "targetModelName": "companyType",
        "propertyTypeName": "companyType",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyType": {
      "name": "companyType",
      "objectTypeName": "company",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyTypeId",
        "targetModelName": "companyType",
        "propertyTypeName": "companyType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanies": {
      "name": "userCompanies",
      "objectTypeName": "company",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingTypes": {
      "name": "buildingTypes",
      "objectTypeName": "company",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "company",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "companies",
  "camelized": {
    "singular": "company",
    "plural": "companies",
    "id": "companyId"
  },
  "capitalized": {
    "singular": "Company",
    "plural": "Companies",
    "id": "CompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userCompany",
      "buildingType",
      "building"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/campus.ts
var campusObjectTypeDefintion = {
  "name": "campus",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "campus",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "campus",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "campus",
      "type": "color",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "address": {
      "name": "address",
      "objectTypeName": "campus",
      "type": "address",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "campus",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "campus",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "campus",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "campus",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "campus",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "campus",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "campus",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "campus",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "campus",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "campus",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "campus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "campus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "campus",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "campus",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "campus",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "campus",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "campus",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "campus",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "campusId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "campus",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "campus",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "campuses",
  "camelized": {
    "singular": "campus",
    "plural": "campuses",
    "id": "campusId"
  },
  "capitalized": {
    "singular": "Campus",
    "plural": "Campuses",
    "id": "CampusId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomConnectorType.ts
var roomConnectorTypeObjectTypeDefintion = {
  "name": "roomConnectorType",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomConnectorType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomConnectorType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomConnectorType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomConnectorType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomConnectorType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomConnectors": {
      "name": "roomConnectors",
      "objectTypeName": "roomConnectorType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorTypeId",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnectors",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "roomConnectorTypes",
  "camelized": {
    "singular": "roomConnectorType",
    "plural": "roomConnectorTypes",
    "id": "roomConnectorTypeId"
  },
  "capitalized": {
    "singular": "RoomConnectorType",
    "plural": "RoomConnectorTypes",
    "id": "RoomConnectorTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomConnector"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/roomConnector.ts
var roomConnectorObjectTypeDefintion = {
  "name": "roomConnector",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomConnector",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomConnector",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "waitTime": {
      "name": "waitTime",
      "objectTypeName": "roomConnector",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "timePerFloor": {
      "name": "timePerFloor",
      "objectTypeName": "roomConnector",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomConnector",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomConnector",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomConnector",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomConnectorTypeId": {
      "name": "roomConnectorTypeId",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomConnectorTypeId",
        "targetModelName": "roomConnectorType",
        "propertyTypeName": "roomConnectorType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomConnectorType": {
      "name": "roomConnectorType",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorTypeId",
        "targetModelName": "roomConnectorType",
        "propertyTypeName": "roomConnectorType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "roomConnector",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomConnectors",
  "camelized": {
    "singular": "roomConnector",
    "plural": "roomConnectors",
    "id": "roomConnectorId"
  },
  "capitalized": {
    "singular": "RoomConnector",
    "plural": "RoomConnectors",
    "id": "RoomConnectorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "room"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/userCompany.ts
var userCompanyObjectTypeDefintion = {
  "name": "userCompany",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userCompany",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userCompany",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "campusCreatedBies": {
      "name": "campusCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "campus",
        "propertyTypeName": "campusCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "campusUpdatedBies": {
      "name": "campusUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "campus",
        "propertyTypeName": "campusUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomConnectorCreatedBies": {
      "name": "roomConnectorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnectorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomConnectorUpdatedBies": {
      "name": "roomConnectorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnectorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userId": {
      "name": "userId",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    },
    "user": {
      "name": "user",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBies": {
      "name": "userCompanyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBies": {
      "name": "userCompanyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyCreatedBies": {
      "name": "personCompanyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompanyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyUpdatedBies": {
      "name": "personCompanyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompanyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingTypeCreatedBies": {
      "name": "buildingTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingTypeUpdatedBies": {
      "name": "buildingTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationCreatedBies": {
      "name": "organizationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "organization",
        "propertyTypeName": "organizationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationUpdatedBies": {
      "name": "organizationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "organization",
        "propertyTypeName": "organizationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeFamilyCreatedBies": {
      "name": "itemTypeFamilyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamilyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeFamilyUpdatedBies": {
      "name": "itemTypeFamilyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamilyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "manufacturerCreatedBies": {
      "name": "manufacturerCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturerCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "manufacturerUpdatedBies": {
      "name": "manufacturerUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturerUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeCreatedBies": {
      "name": "itemTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeUpdatedBies": {
      "name": "itemTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingOwners": {
      "name": "buildingOwners",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyOwnerId",
        "targetModelName": "building",
        "propertyTypeName": "buildingOwners",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingCreatedBies": {
      "name": "buildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "building",
        "propertyTypeName": "buildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingUpdatedBies": {
      "name": "buildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "building",
        "propertyTypeName": "buildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "mapScaleCreatedBies": {
      "name": "mapScaleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScaleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "mapScaleUpdatedBies": {
      "name": "mapScaleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScaleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structureCreatedBies": {
      "name": "structureCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "structure",
        "propertyTypeName": "structureCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structureUpdatedBies": {
      "name": "structureUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "structure",
        "propertyTypeName": "structureUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structurePointCreatedBies": {
      "name": "structurePointCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "structurePoint",
        "propertyTypeName": "structurePointCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structurePointUpdatedBies": {
      "name": "structurePointUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "structurePoint",
        "propertyTypeName": "structurePointUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "floorCreatedBies": {
      "name": "floorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "floor",
        "propertyTypeName": "floorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "floorUpdatedBies": {
      "name": "floorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "floor",
        "propertyTypeName": "floorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "distributionCostTypeCreatedBies": {
      "name": "distributionCostTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "distributionCostTypeUpdatedBies": {
      "name": "distributionCostTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeCreatedBies": {
      "name": "roomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomType",
        "propertyTypeName": "roomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeUpdatedBies": {
      "name": "roomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomType",
        "propertyTypeName": "roomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupToRoomTypeCreatedBies": {
      "name": "roomTypeGroupToRoomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupToRoomTypeUpdatedBies": {
      "name": "roomTypeGroupToRoomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupFloorCreatedBies": {
      "name": "roomTypeGroupFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupFloorUpdatedBies": {
      "name": "roomTypeGroupFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupBuildingCreatedBies": {
      "name": "roomTypeGroupBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupBuildingUpdatedBies": {
      "name": "roomTypeGroupBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterCreatedBies": {
      "name": "costCenterCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenterCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterUpdatedBies": {
      "name": "costCenterUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenterUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterBuildingCreatedBies": {
      "name": "costCenterBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterBuildingUpdatedBies": {
      "name": "costCenterBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterFloorCreatedBies": {
      "name": "costCenterFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterFloorUpdatedBies": {
      "name": "costCenterFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomCreatedBies": {
      "name": "roomCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "room",
        "propertyTypeName": "roomCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomUpdatedBies": {
      "name": "roomUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "room",
        "propertyTypeName": "roomUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointCreatedBies": {
      "name": "roomPointCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointUpdatedBies": {
      "name": "roomPointUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRoomCreatedBies": {
      "name": "roomPointRoomCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRoomCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRoomUpdatedBies": {
      "name": "roomPointRoomUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRoomUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointSegmentCreatedBies": {
      "name": "roomPointSegmentCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointSegmentUpdatedBies": {
      "name": "roomPointSegmentUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypePointCreatedBies": {
      "name": "itemTypePointCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemTypePoint",
        "propertyTypeName": "itemTypePointCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypePointUpdatedBies": {
      "name": "itemTypePointUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemTypePoint",
        "propertyTypeName": "itemTypePointUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeCreatedBies": {
      "name": "dimensionTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeUpdatedBies": {
      "name": "dimensionTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionCreatedBies": {
      "name": "dimensionCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimension",
        "propertyTypeName": "dimensionCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionUpdatedBies": {
      "name": "dimensionUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimension",
        "propertyTypeName": "dimensionUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionRoomCreatedBies": {
      "name": "dimensionRoomCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRoomCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionRoomUpdatedBies": {
      "name": "dimensionRoomUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRoomUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionFloorCreatedBies": {
      "name": "dimensionFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionFloorUpdatedBies": {
      "name": "dimensionFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionBuildingCreatedBies": {
      "name": "dimensionBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionBuildingUpdatedBies": {
      "name": "dimensionBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factTypeCreatedBies": {
      "name": "factTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "factType",
        "propertyTypeName": "factTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factTypeUpdatedBies": {
      "name": "factTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "factType",
        "propertyTypeName": "factTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factCreatedBies": {
      "name": "factCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "fact",
        "propertyTypeName": "factCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factUpdatedBies": {
      "name": "factUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "fact",
        "propertyTypeName": "factUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personStateCreatedBies": {
      "name": "personStateCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personState",
        "propertyTypeName": "personStateCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personStateUpdatedBies": {
      "name": "personStateUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personState",
        "propertyTypeName": "personStateUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personSecurityProfileCreatedBies": {
      "name": "personSecurityProfileCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfileCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personSecurityProfileUpdatedBies": {
      "name": "personSecurityProfileUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfileUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCreatedBies": {
      "name": "personCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "person",
        "propertyTypeName": "personCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personUpdatedBies": {
      "name": "personUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "person",
        "propertyTypeName": "personUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonTypeCreatedBies": {
      "name": "personToPersonTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonTypeUpdatedBies": {
      "name": "personToPersonTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonCreatedBies": {
      "name": "personToPersonCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonUpdatedBies": {
      "name": "personToPersonUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomAffectationCreatedBies": {
      "name": "roomAffectationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomAffectationUpdatedBies": {
      "name": "roomAffectationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeCreatedBies": {
      "name": "workplaceTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeUpdatedBies": {
      "name": "workplaceTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeItemTypeCreatedBies": {
      "name": "workplaceTypeItemTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeItemTypeUpdatedBies": {
      "name": "workplaceTypeItemTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceCreatedBies": {
      "name": "workplaceCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaceCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceUpdatedBies": {
      "name": "workplaceUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaceUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemCreatedBies": {
      "name": "itemCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "item",
        "propertyTypeName": "itemCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemUpdatedBies": {
      "name": "itemUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "item",
        "propertyTypeName": "itemUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceAffectationCreatedBies": {
      "name": "workplaceAffectationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceAffectationUpdatedBies": {
      "name": "workplaceAffectationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationFloorCreatedBies": {
      "name": "organizationFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationFloorUpdatedBies": {
      "name": "organizationFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationBuildingCreatedBies": {
      "name": "organizationBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationBuildingUpdatedBies": {
      "name": "organizationBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeFloorCreatedBies": {
      "name": "roomTypeFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeFloorUpdatedBies": {
      "name": "roomTypeFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeBuildingCreatedBies": {
      "name": "roomTypeBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeBuildingUpdatedBies": {
      "name": "roomTypeBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemToPersonCreatedBies": {
      "name": "itemToPersonCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPersonCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemToPersonUpdatedBies": {
      "name": "itemToPersonUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPersonUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToBuildingCreatedBies": {
      "name": "personToBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToBuildingUpdatedBies": {
      "name": "personToBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionToPersonCreatedBies": {
      "name": "dimensionToPersonCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPersonCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionToPersonUpdatedBies": {
      "name": "dimensionToPersonUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPersonUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeToBuildingCreatedBies": {
      "name": "dimensionTypeToBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeToBuildingUpdatedBies": {
      "name": "dimensionTypeToBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personWorkingLocationCreatedBies": {
      "name": "personWorkingLocationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personWorkingLocationUpdatedBies": {
      "name": "personWorkingLocationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToWorkplaceBookingCreatedBies": {
      "name": "personToWorkplaceBookingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToWorkplaceBookingUpdatedBies": {
      "name": "personToWorkplaceBookingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToRoomBookingCreatedBies": {
      "name": "personToRoomBookingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToRoomBookingUpdatedBies": {
      "name": "personToRoomBookingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToDimensionBookingCreatedBies": {
      "name": "personToDimensionBookingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToDimensionBookingUpdatedBies": {
      "name": "personToDimensionBookingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemTypeCreatedBies": {
      "name": "personCompanyToItemTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemTypeUpdatedBies": {
      "name": "personCompanyToItemTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToRoomTypeCreatedBies": {
      "name": "personCompanyToRoomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToRoomTypeUpdatedBies": {
      "name": "personCompanyToRoomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemCreatedBies": {
      "name": "personCompanyToItemCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItemCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemUpdatedBies": {
      "name": "personCompanyToItemUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItemUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "legendCreatedBies": {
      "name": "legendCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "legend",
        "propertyTypeName": "legendCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "legendUpdatedBies": {
      "name": "legendUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "legend",
        "propertyTypeName": "legendUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "openerPostMessageHostCreatedBies": {
      "name": "openerPostMessageHostCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "openerPostMessageHost",
        "propertyTypeName": "openerPostMessageHostCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "openerPostMessageHostUpdatedBies": {
      "name": "openerPostMessageHostUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "openerPostMessageHost",
        "propertyTypeName": "openerPostMessageHostUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleCreatedBies": {
      "name": "contentRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleUpdatedBies": {
      "name": "contentRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUserCompanyToJupRoles": {
      "name": "jupUserCompanyToJupRoles",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUserCompanyToJupRoleCreatedBies": {
      "name": "jupUserCompanyToJupRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUserCompanyToJupRoleUpdatedBies": {
      "name": "jupUserCompanyToJupRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToBuildingCreatedBies": {
      "name": "contentRoleToBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToBuildingUpdatedBies": {
      "name": "contentRoleToBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToUserCompanies": {
      "name": "contentRoleToUserCompanies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToUserCompanyCreatedBies": {
      "name": "contentRoleToUserCompanyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToUserCompanyUpdatedBies": {
      "name": "contentRoleToUserCompanyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToFloorCreatedBies": {
      "name": "contentRoleToFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToFloorUpdatedBies": {
      "name": "contentRoleToFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerApiCredentialCreatedBies": {
      "name": "partnerApiCredentialCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerApiCredential",
        "propertyTypeName": "partnerApiCredentialCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerApiCredentialUpdatedBies": {
      "name": "partnerApiCredentialUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerApiCredential",
        "propertyTypeName": "partnerApiCredentialUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserCreatedBies": {
      "name": "apiUserCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUserCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserUpdatedBies": {
      "name": "apiUserUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUserUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToJupRoleCreatedBies": {
      "name": "apiUserToJupRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToJupRoleUpdatedBies": {
      "name": "apiUserToJupRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToContentRoleCreatedBies": {
      "name": "apiUserToContentRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToContentRoleUpdatedBies": {
      "name": "apiUserToContentRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUiTenantOperationCreatedBies": {
      "name": "jupUiTenantOperationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUiTenantOperationUpdatedBies": {
      "name": "jupUiTenantOperationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToJupUiTenantOperationCreatedBies": {
      "name": "contentRoleToJupUiTenantOperationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToJupUiTenantOperationUpdatedBies": {
      "name": "contentRoleToJupUiTenantOperationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleCreatedBies": {
      "name": "userRegistrationTenantRuleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRuleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleUpdatedBies": {
      "name": "userRegistrationTenantRuleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRuleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToJupRoleCreatedBies": {
      "name": "userRegistrationTenantRuleToJupRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToJupRoleUpdatedBies": {
      "name": "userRegistrationTenantRuleToJupRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToContentRoleCreatedBies": {
      "name": "userRegistrationTenantRuleToContentRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToContentRoleUpdatedBies": {
      "name": "userRegistrationTenantRuleToContentRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationCreatedBies": {
      "name": "partnerExportMappingConfigurationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfigurationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationUpdatedBies": {
      "name": "partnerExportMappingConfigurationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfigurationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingCreatedBies": {
      "name": "partnerExportMappingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMappingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingUpdatedBies": {
      "name": "partnerExportMappingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMappingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingToRoomTypeCreatedBies": {
      "name": "partnerExportMappingToRoomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingToRoomTypeUpdatedBies": {
      "name": "partnerExportMappingToRoomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationToFloorCreatedBies": {
      "name": "partnerExportMappingConfigurationToFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationToFloorUpdatedBies": {
      "name": "partnerExportMappingConfigurationToFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemFactCreatedBies": {
      "name": "itemFactCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemFact",
        "propertyTypeName": "itemFactCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemFactUpdatedBies": {
      "name": "itemFactUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemFact",
        "propertyTypeName": "itemFactUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureFamilyCreatedBies": {
      "name": "featureFamilyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamilyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureFamilyUpdatedBies": {
      "name": "featureFamilyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamilyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureGroupCreatedBies": {
      "name": "featureGroupCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroupCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureGroupUpdatedBies": {
      "name": "featureGroupUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroupUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureCreatedBies": {
      "name": "featureCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "feature",
        "propertyTypeName": "featureCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureUpdatedBies": {
      "name": "featureUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "feature",
        "propertyTypeName": "featureUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userCompanies",
  "camelized": {
    "singular": "userCompany",
    "plural": "userCompanies",
    "id": "userCompanyId"
  },
  "capitalized": {
    "singular": "UserCompany",
    "plural": "UserCompanies",
    "id": "UserCompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "campus",
      "roomConnector",
      "userCompany",
      "personCompany",
      "buildingType",
      "organization",
      "itemTypeFamily",
      "manufacturer",
      "itemType",
      "building",
      "mapScale",
      "structure",
      "structurePoint",
      "floor",
      "distributionCostType",
      "roomType",
      "roomTypeGroupToRoomType",
      "roomTypeGroupFloor",
      "roomTypeGroupBuilding",
      "costCenter",
      "costCenterBuilding",
      "costCenterFloor",
      "room",
      "roomPoint",
      "roomPointRoom",
      "roomPointSegment",
      "itemTypePoint",
      "dimensionType",
      "dimension",
      "dimensionRoom",
      "dimensionFloor",
      "dimensionBuilding",
      "factType",
      "fact",
      "personState",
      "personSecurityProfile",
      "person",
      "personToPersonType",
      "personToPerson",
      "roomAffectation",
      "workplaceType",
      "workplaceTypeItemType",
      "workplace",
      "item",
      "workplaceAffectation",
      "organizationFloor",
      "organizationBuilding",
      "roomTypeFloor",
      "roomTypeBuilding",
      "itemToPerson",
      "personToBuilding",
      "dimensionToPerson",
      "dimensionTypeToBuilding",
      "personWorkingLocation",
      "personToWorkplaceBooking",
      "personToRoomBooking",
      "personToDimensionBooking",
      "personCompanyToItemType",
      "personCompanyToRoomType",
      "personCompanyToItem",
      "legend",
      "openerPostMessageHost",
      "contentRole",
      "jupUserCompanyToJupRole",
      "contentRoleToBuilding",
      "contentRoleToUserCompany",
      "contentRoleToFloor",
      "partnerApiCredential",
      "apiUser",
      "apiUserToJupRole",
      "apiUserToContentRole",
      "jupUiTenantOperation",
      "contentRoleToJupUiTenantOperation",
      "userRegistrationTenantRule",
      "userRegistrationTenantRuleToJupRole",
      "userRegistrationTenantRuleToContentRole",
      "partnerExportMappingConfiguration",
      "partnerExportMapping",
      "partnerExportMappingToRoomType",
      "partnerExportMappingConfigurationToFloor",
      "itemFact",
      "featureFamily",
      "featureGroup",
      "feature"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personGender.ts
var personGenderObjectTypeDefintion = {
  "name": "personGender",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personGender",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personGender",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personGender",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personGender",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personGender",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personGender",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personGenderId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "personGenders",
  "camelized": {
    "singular": "personGender",
    "plural": "personGenders",
    "id": "personGenderId"
  },
  "capitalized": {
    "singular": "PersonGender",
    "plural": "PersonGenders",
    "id": "PersonGenderId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/personCompany.ts
var personCompanyObjectTypeDefintion = {
  "name": "personCompany",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompany",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personCompany",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "comment": {
      "name": "comment",
      "objectTypeName": "personCompany",
      "type": "text-md",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "contact": {
      "name": "contact",
      "objectTypeName": "personCompany",
      "type": "text-md",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "documents": {
      "name": "documents",
      "objectTypeName": "personCompany",
      "type": "url",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompany",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItemTypes": {
      "name": "personCompanyToItemTypes",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToRoomTypes": {
      "name": "personCompanyToRoomTypes",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItems": {
      "name": "personCompanyToItems",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItems",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanies",
  "camelized": {
    "singular": "personCompany",
    "plural": "personCompanies",
    "id": "personCompanyId"
  },
  "capitalized": {
    "singular": "PersonCompany",
    "plural": "PersonCompanies",
    "id": "PersonCompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person",
      "personCompanyToItemType",
      "personCompanyToRoomType",
      "personCompanyToItem"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/jupUiLayout.ts
var jupUiLayoutObjectTypeDefintion = {
  "name": "jupUiLayout",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiLayout",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiLayout",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiLayout",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "jupUiLayout",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiLayouts": {
      "name": "jupRoleToJupUiLayouts",
      "objectTypeName": "jupUiLayout",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupRoleToJupUiLayout",
        "propertyTypeName": "jupRoleToJupUiLayouts",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiLayouts",
  "camelized": {
    "singular": "jupUiLayout",
    "plural": "jupUiLayouts",
    "id": "jupUiLayoutId"
  },
  "capitalized": {
    "singular": "JupUiLayout",
    "plural": "JupUiLayouts",
    "id": "JupUiLayoutId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building",
      "jupRoleToJupUiLayout"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/buildingType.ts
var buildingTypeObjectTypeDefintion = {
  "name": "buildingType",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "buildingType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "buildingType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "buildingType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "buildingType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "buildingType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "buildingType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "buildingType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "buildingType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "buildingType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "buildingType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "buildingType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "buildingType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "buildingType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "buildingType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingTypeId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "buildingTypes",
  "camelized": {
    "singular": "buildingType",
    "plural": "buildingTypes",
    "id": "buildingTypeId"
  },
  "capitalized": {
    "singular": "BuildingType",
    "plural": "BuildingTypes",
    "id": "BuildingTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/organization.ts
var organizationObjectTypeDefintion = {
  "name": "organization",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "organization",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "organization",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "organization",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "organization",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "organization",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "organization",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "organization",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizations": {
      "name": "organizations",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organizations",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationFloors": {
      "name": "organizationFloors",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationBuildings": {
      "name": "organizationBuildings",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "organizations",
  "camelized": {
    "singular": "organization",
    "plural": "organizations",
    "id": "organizationId"
  },
  "capitalized": {
    "singular": "Organization",
    "plural": "Organizations",
    "id": "OrganizationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "organization",
      "room",
      "person",
      "workplace",
      "organizationFloor",
      "organizationBuilding"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/itemTypeFamily.ts
var itemTypeFamilyObjectTypeDefintion = {
  "name": "itemTypeFamily",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemTypeFamily",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "itemTypeFamily",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "itemTypeFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemTypeFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemTypeFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemTypeFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemTypeFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemTypeFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemTypeFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemTypeFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypes": {
      "name": "itemTypes",
      "objectTypeName": "itemTypeFamily",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeFamilyId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemTypeFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemTypeFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemTypeFamilies",
  "camelized": {
    "singular": "itemTypeFamily",
    "plural": "itemTypeFamilies",
    "id": "itemTypeFamilyId"
  },
  "capitalized": {
    "singular": "ItemTypeFamily",
    "plural": "ItemTypeFamilies",
    "id": "ItemTypeFamilyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/manufacturer.ts
var manufacturerObjectTypeDefintion = {
  "name": "manufacturer",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "manufacturer",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "manufacturer",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "website": {
      "name": "website",
      "objectTypeName": "manufacturer",
      "type": "url",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "manufacturer",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "manufacturer",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "manufacturer",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "manufacturer",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "manufacturer",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "manufacturer",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "manufacturer",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypes": {
      "name": "itemTypes",
      "objectTypeName": "manufacturer",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "manufacturerId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "manufacturer",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "manufacturer",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "manufacturers",
  "camelized": {
    "singular": "manufacturer",
    "plural": "manufacturers",
    "id": "manufacturerId"
  },
  "capitalized": {
    "singular": "Manufacturer",
    "plural": "Manufacturers",
    "id": "ManufacturerId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/object3dModel.ts
var object3dModelObjectTypeDefintion = {
  "name": "object3dModel",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "object3dModel",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "type": {
      "name": "type",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "obj"
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "object3dModel",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "origin": {
      "name": "origin",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "X"
      }
    },
    "model": {
      "name": "model",
      "objectTypeName": "object3dModel",
      "type": "model3d",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "object3dModel",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "object3dModel",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypes": {
      "name": "itemTypes",
      "objectTypeName": "object3dModel",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "object3dModelId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypes",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "object3dModels",
  "camelized": {
    "singular": "object3dModel",
    "plural": "object3dModels",
    "id": "object3dModelId"
  },
  "capitalized": {
    "singular": "Object3dModel",
    "plural": "Object3dModels",
    "id": "Object3dModelId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemType"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/itemType.ts
var itemTypeObjectTypeDefintion = {
  "name": "itemType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "itemType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "itemType",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "displayItemReferenceInMap": {
      "name": "displayItemReferenceInMap",
      "objectTypeName": "itemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "itemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "icon": {
      "name": "icon",
      "objectTypeName": "itemType",
      "type": "icon",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "itemType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "#FFFFFF"
      }
    },
    "height": {
      "name": "height",
      "objectTypeName": "itemType",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "centimeter"
        },
        "defaultValue": 0
      }
    },
    "zIndex": {
      "name": "zIndex",
      "objectTypeName": "itemType",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "description": {
      "name": "description",
      "objectTypeName": "itemType",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "price": {
      "name": "price",
      "objectTypeName": "itemType",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "itemType",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "itemType",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "iconShape": {
      "name": "iconShape",
      "objectTypeName": "itemType",
      "type": "icon-shape",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "circle"
      }
    },
    "iconBackgroundColor": {
      "name": "iconBackgroundColor",
      "objectTypeName": "itemType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "#000000"
      }
    },
    "iconBorderColor": {
      "name": "iconBorderColor",
      "objectTypeName": "itemType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isAffectable": {
      "name": "isAffectable",
      "objectTypeName": "itemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "excludeFromPathfinding": {
      "name": "excludeFromPathfinding",
      "objectTypeName": "itemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypeFamilyId": {
      "name": "itemTypeFamilyId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeFamilyId",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemTypeFamily": {
      "name": "itemTypeFamily",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeFamilyId",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "manufacturerId": {
      "name": "manufacturerId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "manufacturerId",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturer",
        "options": {
          "readOnly": false
        }
      }
    },
    "manufacturer": {
      "name": "manufacturer",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "manufacturerId",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturer",
        "options": {
          "readOnly": false
        }
      }
    },
    "object3dModelId": {
      "name": "object3dModelId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "object3dModelId",
        "targetModelName": "object3dModel",
        "propertyTypeName": "object3dModel",
        "options": {
          "readOnly": false
        }
      }
    },
    "object3dModel": {
      "name": "object3dModel",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "object3dModelId",
        "targetModelName": "object3dModel",
        "propertyTypeName": "object3dModel",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypePoints": {
      "name": "itemTypePoints",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemTypePoint",
        "propertyTypeName": "itemTypePoints",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceTypeItemTypes": {
      "name": "workplaceTypeItemTypes",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "items": {
      "name": "items",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "item",
        "propertyTypeName": "items",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItemTypes": {
      "name": "personCompanyToItemTypes",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemTypes",
  "camelized": {
    "singular": "itemType",
    "plural": "itemTypes",
    "id": "itemTypeId"
  },
  "capitalized": {
    "singular": "ItemType",
    "plural": "ItemTypes",
    "id": "ItemTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemTypePoint",
      "workplaceTypeItemType",
      "item",
      "personCompanyToItemType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/building.ts
var buildingObjectTypeDefintion = {
  "name": "building",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "building",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "building",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "building",
      "type": "color",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "surface": {
      "name": "surface",
      "objectTypeName": "building",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "leaseStartDate": {
      "name": "leaseStartDate",
      "objectTypeName": "building",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "leaseEndDate": {
      "name": "leaseEndDate",
      "objectTypeName": "building",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "purchaseDate": {
      "name": "purchaseDate",
      "objectTypeName": "building",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "documents": {
      "name": "documents",
      "objectTypeName": "building",
      "type": "url",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "building",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "regulatoryCapacity": {
      "name": "regulatoryCapacity",
      "objectTypeName": "building",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "parkingSpaceCount": {
      "name": "parkingSpaceCount",
      "objectTypeName": "building",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "constructionYear": {
      "name": "constructionYear",
      "objectTypeName": "building",
      "type": "year",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyCondominiumFees": {
      "name": "yearlyCondominiumFees",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyRent": {
      "name": "yearlyRent",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyParkingRent": {
      "name": "yearlyParkingRent",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyTaxFees": {
      "name": "yearlyTaxFees",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyExploitationFees": {
      "name": "yearlyExploitationFees",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "rentReferenceIndex": {
      "name": "rentReferenceIndex",
      "objectTypeName": "building",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "securityDeposit": {
      "name": "securityDeposit",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "building",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "building",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "building",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "building",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "building",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "building",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "building",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "building",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "building",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "building",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "dimensionPeopleCount": {
      "name": "dimensionPeopleCount",
      "objectTypeName": "building",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "address": {
      "name": "address",
      "objectTypeName": "building",
      "type": "address",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "building",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "building",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "building",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingTypeId": {
      "name": "buildingTypeId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingTypeId",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingType": {
      "name": "buildingType",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingTypeId",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyOwnerId": {
      "name": "userCompanyOwnerId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyOwnerId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyOwner",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyOwner": {
      "name": "userCompanyOwner",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyOwnerId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyOwner",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiLayoutId": {
      "name": "jupUiLayoutId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiLayout": {
      "name": "jupUiLayout",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "campusId": {
      "name": "campusId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "campusId",
        "targetModelName": "campus",
        "propertyTypeName": "campus",
        "options": {
          "readOnly": false
        }
      }
    },
    "campus": {
      "name": "campus",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "campusId",
        "targetModelName": "campus",
        "propertyTypeName": "campus",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "floors": {
      "name": "floors",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "floor",
        "propertyTypeName": "floors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroupBuildings": {
      "name": "roomTypeGroupBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterBuildings": {
      "name": "costCenterBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionBuildings": {
      "name": "dimensionBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "facts": {
      "name": "facts",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "fact",
        "propertyTypeName": "facts",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationBuildings": {
      "name": "organizationBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeBuildings": {
      "name": "roomTypeBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToBuildings": {
      "name": "personToBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeToBuildings": {
      "name": "dimensionTypeToBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToBuildings": {
      "name": "contentRoleToBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "buildings",
  "camelized": {
    "singular": "building",
    "plural": "buildings",
    "id": "buildingId"
  },
  "capitalized": {
    "singular": "Building",
    "plural": "Buildings",
    "id": "BuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building",
      "floor",
      "roomTypeGroupBuilding",
      "costCenterBuilding",
      "dimensionBuilding",
      "fact",
      "organizationBuilding",
      "roomTypeBuilding",
      "personToBuilding",
      "dimensionTypeToBuilding",
      "contentRoleToBuilding"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/mapScale.ts
var mapScaleObjectTypeDefintion = {
  "name": "mapScale",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "mapScale",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "mapScale",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "p1": {
      "name": "p1",
      "objectTypeName": "mapScale",
      "type": "point2d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": {
          "x": 0,
          "y": 0
        }
      }
    },
    "p2": {
      "name": "p2",
      "objectTypeName": "mapScale",
      "type": "point2d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": {
          "x": 0,
          "y": 0
        }
      }
    },
    "length": {
      "name": "length",
      "objectTypeName": "mapScale",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "meter"
        },
        "defaultValue": 0
      }
    },
    "ratio": {
      "name": "ratio",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "strokeWidth": {
      "name": "strokeWidth",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "roomTextSize": {
      "name": "roomTextSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 18
      }
    },
    "workplaceTextSize": {
      "name": "workplaceTextSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 12
      }
    },
    "segmentDistanceTextSize": {
      "name": "segmentDistanceTextSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 6
      }
    },
    "itemTypeIconSize": {
      "name": "itemTypeIconSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 12
      }
    },
    "roomIconSize": {
      "name": "roomIconSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 64
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "mapScale",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "mapScale",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "mapScale",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "mapScale",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "mapScale",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "mapScale",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "mapScale",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "floors": {
      "name": "floors",
      "objectTypeName": "mapScale",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "mapScaleId",
        "targetModelName": "floor",
        "propertyTypeName": "floors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "mapScale",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "mapScale",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "mapScales",
  "camelized": {
    "singular": "mapScale",
    "plural": "mapScales",
    "id": "mapScaleId"
  },
  "capitalized": {
    "singular": "MapScale",
    "plural": "MapScales",
    "id": "MapScaleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "floor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/structure.ts
var structureObjectTypeDefintion = {
  "name": "structure",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "structure",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "structure",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "transform": {
      "name": "transform",
      "objectTypeName": "structure",
      "type": "transform",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "structure",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "structure",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "structure",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "structure",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "structure",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "structure",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "structure",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "structurePoints": {
      "name": "structurePoints",
      "objectTypeName": "structure",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structurePoint",
        "propertyTypeName": "structurePoints",
        "options": {
          "readOnly": false
        }
      }
    },
    "floors": {
      "name": "floors",
      "objectTypeName": "structure",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "floor",
        "propertyTypeName": "floors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "structure",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "structure",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "structures",
  "camelized": {
    "singular": "structure",
    "plural": "structures",
    "id": "structureId"
  },
  "capitalized": {
    "singular": "Structure",
    "plural": "Structures",
    "id": "StructureId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "structurePoint",
      "floor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/structurePoint.ts
var structurePointObjectTypeDefintion = {
  "name": "structurePoint",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "structurePoint",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "x": {
      "name": "x",
      "objectTypeName": "structurePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "y": {
      "name": "y",
      "objectTypeName": "structurePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "sortIndex": {
      "name": "sortIndex",
      "objectTypeName": "structurePoint",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "structurePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "structurePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "structurePoint",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "structureId": {
      "name": "structureId",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "structure": {
      "name": "structure",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "structurePoints",
  "camelized": {
    "singular": "structurePoint",
    "plural": "structurePoints",
    "id": "structurePointId"
  },
  "capitalized": {
    "singular": "StructurePoint",
    "plural": "StructurePoints",
    "id": "StructurePointId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/floor.ts
var floorObjectTypeDefintion = {
  "name": "floor",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "floor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "floor",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "level": {
      "name": "level",
      "objectTypeName": "floor",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "height": {
      "name": "height",
      "objectTypeName": "floor",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "centimeter"
        },
        "defaultValue": 240
      }
    },
    "regulatoryCapacity": {
      "name": "regulatoryCapacity",
      "objectTypeName": "floor",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "floor",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "floor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "floor",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "floor",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "floor",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "floor",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "floor",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "backgroundLayout": {
      "name": "backgroundLayout",
      "objectTypeName": "floor",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "backgroundLayoutOpacity": {
      "name": "backgroundLayoutOpacity",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "pathfindingGraph": {
      "name": "pathfindingGraph",
      "objectTypeName": "floor",
      "type": "floor-navigation-graph",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "floor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "floor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "floor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "mapScaleId": {
      "name": "mapScaleId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "mapScaleId",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScale",
        "options": {
          "readOnly": false
        }
      }
    },
    "mapScale": {
      "name": "mapScale",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "mapScaleId",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScale",
        "options": {
          "readOnly": false
        }
      }
    },
    "structureId": {
      "name": "structureId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "structure": {
      "name": "structure",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupFloors": {
      "name": "roomTypeGroupFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterFloors": {
      "name": "costCenterFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPoints": {
      "name": "roomPoints",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPoints",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionFloors": {
      "name": "dimensionFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationFloors": {
      "name": "organizationFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeFloors": {
      "name": "roomTypeFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToFloors": {
      "name": "contentRoleToFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfigurationToFloors": {
      "name": "partnerExportMappingConfigurationToFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "floors",
  "camelized": {
    "singular": "floor",
    "plural": "floors",
    "id": "floorId"
  },
  "capitalized": {
    "singular": "Floor",
    "plural": "Floors",
    "id": "FloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomTypeGroupFloor",
      "costCenterFloor",
      "room",
      "roomPoint",
      "dimensionFloor",
      "organizationFloor",
      "roomTypeFloor",
      "contentRoleToFloor",
      "partnerExportMappingConfigurationToFloor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/distributionCostType.ts
var distributionCostTypeObjectTypeDefintion = {
  "name": "distributionCostType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "distributionCostType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "distributionCostType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "distributionCostType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "distributionCostType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "distributionCostType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "distributionCostType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "distributionCostType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "distributionCostType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "distributionCostType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "distributionCostType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypes": {
      "name": "roomTypes",
      "objectTypeName": "distributionCostType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "distributionCostType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "distributionCostType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "distributionCostType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "distributionCostTypes",
  "camelized": {
    "singular": "distributionCostType",
    "plural": "distributionCostTypes",
    "id": "distributionCostTypeId"
  },
  "capitalized": {
    "singular": "DistributionCostType",
    "plural": "DistributionCostTypes",
    "id": "DistributionCostTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomType",
      "room"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomTypeGroup.ts
var roomTypeGroupObjectTypeDefintion = {
  "name": "roomTypeGroup",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroup",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomTypeGroup",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "roomTypeGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "roomTypeGroup",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "exclude": {
      "name": "exclude",
      "objectTypeName": "roomTypeGroup",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupToRoomTypes": {
      "name": "roomTypeGroupToRoomTypes",
      "objectTypeName": "roomTypeGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroupFloors": {
      "name": "roomTypeGroupFloors",
      "objectTypeName": "roomTypeGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroupBuildings": {
      "name": "roomTypeGroupBuildings",
      "objectTypeName": "roomTypeGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "roomTypeGroups",
  "camelized": {
    "singular": "roomTypeGroup",
    "plural": "roomTypeGroups",
    "id": "roomTypeGroupId"
  },
  "capitalized": {
    "singular": "RoomTypeGroup",
    "plural": "RoomTypeGroups",
    "id": "RoomTypeGroupId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomTypeGroupToRoomType",
      "roomTypeGroupFloor",
      "roomTypeGroupBuilding"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/roomType.ts
var roomTypeObjectTypeDefintion = {
  "name": "roomType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "roomType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "icon": {
      "name": "icon",
      "objectTypeName": "roomType",
      "type": "icon",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color3d": {
      "name": "color3d",
      "objectTypeName": "roomType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "roomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "displayWallsOn3d": {
      "name": "displayWallsOn3d",
      "objectTypeName": "roomType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": true
      }
    },
    "cadence": {
      "name": "cadence",
      "objectTypeName": "roomType",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isBookable": {
      "name": "isBookable",
      "objectTypeName": "roomType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "distributionCostTypeId": {
      "name": "distributionCostTypeId",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "distributionCostType": {
      "name": "distributionCostType",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupToRoomTypes": {
      "name": "roomTypeGroupToRoomTypes",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeFloors": {
      "name": "roomTypeFloors",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeBuildings": {
      "name": "roomTypeBuildings",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToRoomTypes": {
      "name": "personCompanyToRoomTypes",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingToRoomTypes": {
      "name": "partnerExportMappingToRoomTypes",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypes",
  "camelized": {
    "singular": "roomType",
    "plural": "roomTypes",
    "id": "roomTypeId"
  },
  "capitalized": {
    "singular": "RoomType",
    "plural": "RoomTypes",
    "id": "RoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomTypeGroupToRoomType",
      "room",
      "roomTypeFloor",
      "roomTypeBuilding",
      "personCompanyToRoomType",
      "partnerExportMappingToRoomType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomTypeGroupToRoomType.ts
var roomTypeGroupToRoomTypeObjectTypeDefintion = {
  "name": "roomTypeGroupToRoomType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupId": {
      "name": "roomTypeGroupId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroup": {
      "name": "roomTypeGroup",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeGroupToRoomTypes",
  "camelized": {
    "singular": "roomTypeGroupToRoomType",
    "plural": "roomTypeGroupToRoomTypes",
    "id": "roomTypeGroupToRoomTypeId"
  },
  "capitalized": {
    "singular": "RoomTypeGroupToRoomType",
    "plural": "RoomTypeGroupToRoomTypes",
    "id": "RoomTypeGroupToRoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomTypeGroupFloor.ts
var roomTypeGroupFloorObjectTypeDefintion = {
  "name": "roomTypeGroupFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupId": {
      "name": "roomTypeGroupId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroup": {
      "name": "roomTypeGroup",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeGroupFloors",
  "camelized": {
    "singular": "roomTypeGroupFloor",
    "plural": "roomTypeGroupFloors",
    "id": "roomTypeGroupFloorId"
  },
  "capitalized": {
    "singular": "RoomTypeGroupFloor",
    "plural": "RoomTypeGroupFloors",
    "id": "RoomTypeGroupFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomTypeGroupBuilding.ts
var roomTypeGroupBuildingObjectTypeDefintion = {
  "name": "roomTypeGroupBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupId": {
      "name": "roomTypeGroupId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroup": {
      "name": "roomTypeGroup",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeGroupBuildings",
  "camelized": {
    "singular": "roomTypeGroupBuilding",
    "plural": "roomTypeGroupBuildings",
    "id": "roomTypeGroupBuildingId"
  },
  "capitalized": {
    "singular": "RoomTypeGroupBuilding",
    "plural": "RoomTypeGroupBuildings",
    "id": "RoomTypeGroupBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/costCenter.ts
var costCenterObjectTypeDefintion = {
  "name": "costCenter",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "costCenter",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "costCenter",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "costCenter",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "info": {
      "name": "info",
      "objectTypeName": "costCenter",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "distributeByFloor": {
      "name": "distributeByFloor",
      "objectTypeName": "costCenter",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "distributeByBuilding": {
      "name": "distributeByBuilding",
      "objectTypeName": "costCenter",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "costCenter",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "costCenter",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "costCenter",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "costCenter",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "costCenter",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "costCenter",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "costCenter",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "costCenter",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterBuildings": {
      "name": "costCenterBuildings",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterFloors": {
      "name": "costCenterFloors",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "costCenter",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "costCenter",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "costCenters",
  "camelized": {
    "singular": "costCenter",
    "plural": "costCenters",
    "id": "costCenterId"
  },
  "capitalized": {
    "singular": "CostCenter",
    "plural": "CostCenters",
    "id": "CostCenterId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "costCenterBuilding",
      "costCenterFloor",
      "room",
      "person",
      "workplace"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/costCenterBuilding.ts
var costCenterBuildingObjectTypeDefintion = {
  "name": "costCenterBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "costCenterBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "costCenterBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "costCenterBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "costCenterBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "costCenterBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "costCenterBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "costCenterBuildings",
  "camelized": {
    "singular": "costCenterBuilding",
    "plural": "costCenterBuildings",
    "id": "costCenterBuildingId"
  },
  "capitalized": {
    "singular": "CostCenterBuilding",
    "plural": "CostCenterBuildings",
    "id": "CostCenterBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/costCenterFloor.ts
var costCenterFloorObjectTypeDefintion = {
  "name": "costCenterFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "costCenterFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "costCenterFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "costCenterFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "costCenterFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "costCenterFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "costCenterFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "costCenterFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "costCenterFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "costCenterFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "costCenterFloors",
  "camelized": {
    "singular": "costCenterFloor",
    "plural": "costCenterFloors",
    "id": "costCenterFloorId"
  },
  "capitalized": {
    "singular": "CostCenterFloor",
    "plural": "CostCenterFloors",
    "id": "CostCenterFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/room.ts
var roomObjectTypeDefintion = {
  "name": "room",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "room",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "prettyName": {
      "name": "prettyName",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "area": {
      "name": "area",
      "objectTypeName": "room",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false
      }
    },
    "perimeter": {
      "name": "perimeter",
      "objectTypeName": "room",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "meter"
        },
        "defaultValue": 0
      }
    },
    "textAnchor": {
      "name": "textAnchor",
      "objectTypeName": "room",
      "type": "textAnchor",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "capacity": {
      "name": "capacity",
      "objectTypeName": "room",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "room",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "room",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "room",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "room",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "room",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "room",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "room",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "room",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "room",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "info": {
      "name": "info",
      "objectTypeName": "room",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "bookingEmail": {
      "name": "bookingEmail",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "externalId2": {
      "name": "externalId2",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "room",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "keyCylinderCode": {
      "name": "keyCylinderCode",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "livePeopleCount": {
      "name": "livePeopleCount",
      "objectTypeName": "room",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "room",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "room",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "occupancyStatusId": {
      "name": "occupancyStatusId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "occupancyStatusId",
        "targetModelName": "occupancyStatus",
        "propertyTypeName": "occupancyStatus",
        "options": {
          "readOnly": false
        }
      }
    },
    "occupancyStatus": {
      "name": "occupancyStatus",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "occupancyStatusId",
        "targetModelName": "occupancyStatus",
        "propertyTypeName": "occupancyStatus",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "distributionCostTypeId": {
      "name": "distributionCostTypeId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "distributionCostType": {
      "name": "distributionCostType",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomConnectorId": {
      "name": "roomConnectorId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomConnectorId",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnector",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomConnector": {
      "name": "roomConnector",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorId",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnector",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRooms": {
      "name": "roomPointRooms",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionRooms": {
      "name": "dimensionRooms",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomAffectations": {
      "name": "roomAffectations",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "items": {
      "name": "items",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "item",
        "propertyTypeName": "items",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToRoomBookings": {
      "name": "personToRoomBookings",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "rooms",
  "camelized": {
    "singular": "room",
    "plural": "rooms",
    "id": "roomId"
  },
  "capitalized": {
    "singular": "Room",
    "plural": "Rooms",
    "id": "RoomId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomPointRoom",
      "dimensionRoom",
      "roomAffectation",
      "workplace",
      "item",
      "personToRoomBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomPoint.ts
var roomPointObjectTypeDefintion = {
  "name": "roomPoint",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPoint",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "x": {
      "name": "x",
      "objectTypeName": "roomPoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "y": {
      "name": "y",
      "objectTypeName": "roomPoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPoint",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRooms": {
      "name": "roomPointRooms",
      "objectTypeName": "roomPoint",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointId",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointSegmentStarts": {
      "name": "roomPointSegmentStarts",
      "objectTypeName": "roomPoint",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointStartId",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentStarts",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointSegmentEnds": {
      "name": "roomPointSegmentEnds",
      "objectTypeName": "roomPoint",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointEndId",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentEnds",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomPoints",
  "camelized": {
    "singular": "roomPoint",
    "plural": "roomPoints",
    "id": "roomPointId"
  },
  "capitalized": {
    "singular": "RoomPoint",
    "plural": "RoomPoints",
    "id": "RoomPointId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomPointRoom",
      "roomPointSegment"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomPointRoom.ts
var roomPointRoomObjectTypeDefintion = {
  "name": "roomPointRoom",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPointRoom",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "sortIndex": {
      "name": "sortIndex",
      "objectTypeName": "roomPointRoom",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPointRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPointRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPointRoom",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointId": {
      "name": "roomPointId",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPoint",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPoint": {
      "name": "roomPoint",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPoint",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomPointRooms",
  "camelized": {
    "singular": "roomPointRoom",
    "plural": "roomPointRooms",
    "id": "roomPointRoomId"
  },
  "capitalized": {
    "singular": "RoomPointRoom",
    "plural": "RoomPointRooms",
    "id": "RoomPointRoomId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomPointSegmentType.ts
var roomPointSegmentTypeObjectTypeDefintion = {
  "name": "roomPointSegmentType",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPointSegmentType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomPointSegmentType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "roomPointSegmentType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPointSegmentType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPointSegmentType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPointSegmentType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomPointSegments": {
      "name": "roomPointSegments",
      "objectTypeName": "roomPointSegmentType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointSegmentTypeId",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegments",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "roomPointSegmentTypes",
  "camelized": {
    "singular": "roomPointSegmentType",
    "plural": "roomPointSegmentTypes",
    "id": "roomPointSegmentTypeId"
  },
  "capitalized": {
    "singular": "RoomPointSegmentType",
    "plural": "RoomPointSegmentTypes",
    "id": "RoomPointSegmentTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomPointSegment"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/roomPointSegment.ts
var roomPointSegmentObjectTypeDefintion = {
  "name": "roomPointSegment",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPointSegment",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "reversePoints": {
      "name": "reversePoints",
      "objectTypeName": "roomPointSegment",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "displayBothSides": {
      "name": "displayBothSides",
      "objectTypeName": "roomPointSegment",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPointSegment",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPointSegment",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPointSegment",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomPointSegmentTypeId": {
      "name": "roomPointSegmentTypeId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointSegmentTypeId",
        "targetModelName": "roomPointSegmentType",
        "propertyTypeName": "roomPointSegmentType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointSegmentType": {
      "name": "roomPointSegmentType",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointSegmentTypeId",
        "targetModelName": "roomPointSegmentType",
        "propertyTypeName": "roomPointSegmentType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointStartId": {
      "name": "roomPointStartId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointStartId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointStart",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointStart": {
      "name": "roomPointStart",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointStartId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointStart",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointEndId": {
      "name": "roomPointEndId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointEndId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointEnd",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointEnd": {
      "name": "roomPointEnd",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointEndId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointEnd",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomPointSegments",
  "camelized": {
    "singular": "roomPointSegment",
    "plural": "roomPointSegments",
    "id": "roomPointSegmentId"
  },
  "capitalized": {
    "singular": "RoomPointSegment",
    "plural": "RoomPointSegments",
    "id": "RoomPointSegmentId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/itemTypePoint.ts
var itemTypePointObjectTypeDefintion = {
  "name": "itemTypePoint",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemTypePoint",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "x": {
      "name": "x",
      "objectTypeName": "itemTypePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "y": {
      "name": "y",
      "objectTypeName": "itemTypePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "sortIndex": {
      "name": "sortIndex",
      "objectTypeName": "itemTypePoint",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemTypePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemTypePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemTypePoint",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemTypePoints",
  "camelized": {
    "singular": "itemTypePoint",
    "plural": "itemTypePoints",
    "id": "itemTypePointId"
  },
  "capitalized": {
    "singular": "ItemTypePoint",
    "plural": "ItemTypePoints",
    "id": "ItemTypePointId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimensionType.ts
var dimensionTypeObjectTypeDefintion = {
  "name": "dimensionType",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "dimensionType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "dimensionType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "order": {
      "name": "order",
      "objectTypeName": "dimensionType",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "description": {
      "name": "description",
      "objectTypeName": "dimensionType",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensions": {
      "name": "dimensions",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimensions",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionRooms": {
      "name": "dimensionRooms",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionFloors": {
      "name": "dimensionFloors",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionBuildings": {
      "name": "dimensionBuildings",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeToBuildings": {
      "name": "dimensionTypeToBuildings",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionTypes",
  "camelized": {
    "singular": "dimensionType",
    "plural": "dimensionTypes",
    "id": "dimensionTypeId"
  },
  "capitalized": {
    "singular": "DimensionType",
    "plural": "DimensionTypes",
    "id": "DimensionTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "dimension",
      "dimensionRoom",
      "dimensionFloor",
      "dimensionBuilding",
      "dimensionTypeToBuilding"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimension.ts
var dimensionObjectTypeDefintion = {
  "name": "dimension",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimension",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "dimension",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "dimension",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "value": {
      "name": "value",
      "objectTypeName": "dimension",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "dimension",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "dimension",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "manualPeopleCount": {
      "name": "manualPeopleCount",
      "objectTypeName": "dimension",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprintPerMeter": {
      "name": "carbonFootprintPerMeter",
      "objectTypeName": "dimension",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimension",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimension",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimension",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionRooms": {
      "name": "dimensionRooms",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionFloors": {
      "name": "dimensionFloors",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionBuildings": {
      "name": "dimensionBuildings",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionToPeople": {
      "name": "dimensionToPeople",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToDimensionBookings": {
      "name": "personToDimensionBookings",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensions",
  "camelized": {
    "singular": "dimension",
    "plural": "dimensions",
    "id": "dimensionId"
  },
  "capitalized": {
    "singular": "Dimension",
    "plural": "Dimensions",
    "id": "DimensionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "dimensionRoom",
      "dimensionFloor",
      "dimensionBuilding",
      "dimensionToPerson",
      "personToDimensionBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimensionRoom.ts
var dimensionRoomObjectTypeDefintion = {
  "name": "dimensionRoom",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionRoom",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionRoom",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionRooms",
  "camelized": {
    "singular": "dimensionRoom",
    "plural": "dimensionRooms",
    "id": "dimensionRoomId"
  },
  "capitalized": {
    "singular": "DimensionRoom",
    "plural": "DimensionRooms",
    "id": "DimensionRoomId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimensionFloor.ts
var dimensionFloorObjectTypeDefintion = {
  "name": "dimensionFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "dimensionFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "dimensionFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "dimensionFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "dimensionFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "dimensionFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionFloors",
  "camelized": {
    "singular": "dimensionFloor",
    "plural": "dimensionFloors",
    "id": "dimensionFloorId"
  },
  "capitalized": {
    "singular": "DimensionFloor",
    "plural": "DimensionFloors",
    "id": "DimensionFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimensionBuilding.ts
var dimensionBuildingObjectTypeDefintion = {
  "name": "dimensionBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionPeopleCount": {
      "name": "dimensionPeopleCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "dimensionBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "dimensionBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionBuildings",
  "camelized": {
    "singular": "dimensionBuilding",
    "plural": "dimensionBuildings",
    "id": "dimensionBuildingId"
  },
  "capitalized": {
    "singular": "DimensionBuilding",
    "plural": "DimensionBuildings",
    "id": "DimensionBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/factType.ts
var factTypeObjectTypeDefintion = {
  "name": "factType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "factType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "factType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "factType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "factType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "factType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "factType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "factType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "factType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "factType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "factType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "facts": {
      "name": "facts",
      "objectTypeName": "factType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "factTypeId",
        "targetModelName": "fact",
        "propertyTypeName": "facts",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "factType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "factType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "factTypes",
  "camelized": {
    "singular": "factType",
    "plural": "factTypes",
    "id": "factTypeId"
  },
  "capitalized": {
    "singular": "FactType",
    "plural": "FactTypes",
    "id": "FactTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "fact"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/fact.ts
var factObjectTypeDefintion = {
  "name": "fact",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "fact",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "value": {
      "name": "value",
      "objectTypeName": "fact",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "date": {
      "name": "date",
      "objectTypeName": "fact",
      "type": "date",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "fact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "fact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "fact",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "factTypeId": {
      "name": "factTypeId",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "factTypeId",
        "targetModelName": "factType",
        "propertyTypeName": "factType",
        "options": {
          "readOnly": false
        }
      }
    },
    "factType": {
      "name": "factType",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "factTypeId",
        "targetModelName": "factType",
        "propertyTypeName": "factType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "facts",
  "camelized": {
    "singular": "fact",
    "plural": "facts",
    "id": "factId"
  },
  "capitalized": {
    "singular": "Fact",
    "plural": "Facts",
    "id": "FactId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personState.ts
var personStateObjectTypeDefintion = {
  "name": "personState",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personState",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personState",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personState",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personState",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personState",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personState",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personState",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personState",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personState",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personState",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personStateId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personState",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personState",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personStates",
  "camelized": {
    "singular": "personState",
    "plural": "personStates",
    "id": "personStateId"
  },
  "capitalized": {
    "singular": "PersonState",
    "plural": "PersonStates",
    "id": "PersonStateId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personSecurityProfile.ts
var personSecurityProfileObjectTypeDefintion = {
  "name": "personSecurityProfile",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personSecurityProfile",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personSecurityProfile",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "personSecurityProfile",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "icon": {
      "name": "icon",
      "objectTypeName": "personSecurityProfile",
      "type": "icon",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personSecurityProfile",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personSecurityProfile",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personSecurityProfile",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personSecurityProfile",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personSecurityProfile",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personSecurityProfile",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personSecurityProfile",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personSecurityProfile",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSecurityProfileId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personSecurityProfile",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personSecurityProfile",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personSecurityProfiles",
  "camelized": {
    "singular": "personSecurityProfile",
    "plural": "personSecurityProfiles",
    "id": "personSecurityProfileId"
  },
  "capitalized": {
    "singular": "PersonSecurityProfile",
    "plural": "PersonSecurityProfiles",
    "id": "PersonSecurityProfileId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/person.ts
var personObjectTypeDefintion = {
  "name": "person",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "person",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "firstname": {
      "name": "firstname",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "lastname": {
      "name": "lastname",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "fullname": {
      "name": "fullname",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false
      }
    },
    "email": {
      "name": "email",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "person",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "title": {
      "name": "title",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "monitorReference": {
      "name": "monitorReference",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "computerReference": {
      "name": "computerReference",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "telephone": {
      "name": "telephone",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "cellphone": {
      "name": "cellphone",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "badgeNumber": {
      "name": "badgeNumber",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "badgeRestaurant": {
      "name": "badgeRestaurant",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "boxNumber": {
      "name": "boxNumber",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "registrationNumber": {
      "name": "registrationNumber",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "startDate": {
      "name": "startDate",
      "objectTypeName": "person",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDate": {
      "name": "endDate",
      "objectTypeName": "person",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "info": {
      "name": "info",
      "objectTypeName": "person",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "notAffectable": {
      "name": "notAffectable",
      "objectTypeName": "person",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "person",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "person",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanies": {
      "name": "userCompanies",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "personStateId": {
      "name": "personStateId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personStateId",
        "targetModelName": "personState",
        "propertyTypeName": "personState",
        "options": {
          "readOnly": false
        }
      }
    },
    "personState": {
      "name": "personState",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personStateId",
        "targetModelName": "personState",
        "propertyTypeName": "personState",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSecurityProfileId": {
      "name": "personSecurityProfileId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personSecurityProfileId",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfile",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSecurityProfile": {
      "name": "personSecurityProfile",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSecurityProfileId",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfile",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personGenderId": {
      "name": "personGenderId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personGenderId",
        "targetModelName": "personGender",
        "propertyTypeName": "personGender",
        "options": {
          "readOnly": false
        }
      }
    },
    "personGender": {
      "name": "personGender",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personGenderId",
        "targetModelName": "personGender",
        "propertyTypeName": "personGender",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonSources": {
      "name": "personToPersonSources",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSourceId",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonSources",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToPersonTargets": {
      "name": "personToPersonTargets",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personTargetId",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonTargets",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomAffectations": {
      "name": "roomAffectations",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceAffectations": {
      "name": "workplaceAffectations",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemToPeople": {
      "name": "itemToPeople",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToBuildings": {
      "name": "personToBuildings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionToPeople": {
      "name": "dimensionToPeople",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocations": {
      "name": "personWorkingLocations",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocations",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToWorkplaceBookings": {
      "name": "personToWorkplaceBookings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToRoomBookings": {
      "name": "personToRoomBookings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToDimensionBookings": {
      "name": "personToDimensionBookings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "people",
  "camelized": {
    "singular": "person",
    "plural": "people",
    "id": "personId"
  },
  "capitalized": {
    "singular": "Person",
    "plural": "People",
    "id": "PersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userCompany",
      "personToPerson",
      "roomAffectation",
      "workplaceAffectation",
      "itemToPerson",
      "personToBuilding",
      "dimensionToPerson",
      "personWorkingLocation",
      "personToWorkplaceBooking",
      "personToRoomBooking",
      "personToDimensionBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personToPersonType.ts
var personToPersonTypeObjectTypeDefintion = {
  "name": "personToPersonType",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToPersonType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "labelForward": {
      "name": "labelForward",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "labelBackward": {
      "name": "labelBackward",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToPersonType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToPersonType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToPersonType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToPersonType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToPersonType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToPersonType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPeople": {
      "name": "personToPeople",
      "objectTypeName": "personToPersonType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personToPersonTypeId",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToPersonType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToPersonType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToPersonTypes",
  "camelized": {
    "singular": "personToPersonType",
    "plural": "personToPersonTypes",
    "id": "personToPersonTypeId"
  },
  "capitalized": {
    "singular": "PersonToPersonType",
    "plural": "PersonToPersonTypes",
    "id": "PersonToPersonTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personToPerson"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personToPerson.ts
var personToPersonObjectTypeDefintion = {
  "name": "personToPerson",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToPerson",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToPerson",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personToPersonTypeId": {
      "name": "personToPersonTypeId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personToPersonTypeId",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToPersonType": {
      "name": "personToPersonType",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personToPersonTypeId",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSourceId": {
      "name": "personSourceId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personSourceId",
        "targetModelName": "person",
        "propertyTypeName": "personSource",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSource": {
      "name": "personSource",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSourceId",
        "targetModelName": "person",
        "propertyTypeName": "personSource",
        "options": {
          "readOnly": false
        }
      }
    },
    "personTargetId": {
      "name": "personTargetId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personTargetId",
        "targetModelName": "person",
        "propertyTypeName": "personTarget",
        "options": {
          "readOnly": false
        }
      }
    },
    "personTarget": {
      "name": "personTarget",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personTargetId",
        "targetModelName": "person",
        "propertyTypeName": "personTarget",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToPeople",
  "camelized": {
    "singular": "personToPerson",
    "plural": "personToPeople",
    "id": "personToPersonId"
  },
  "capitalized": {
    "singular": "PersonToPerson",
    "plural": "PersonToPeople",
    "id": "PersonToPersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomAffectation.ts
var roomAffectationObjectTypeDefintion = {
  "name": "roomAffectation",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomAffectation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomAffectation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomAffectations",
  "camelized": {
    "singular": "roomAffectation",
    "plural": "roomAffectations",
    "id": "roomAffectationId"
  },
  "capitalized": {
    "singular": "RoomAffectation",
    "plural": "RoomAffectations",
    "id": "RoomAffectationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/workplaceType.ts
var workplaceTypeObjectTypeDefintion = {
  "name": "workplaceType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplaceType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "workplaceType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "zIndex": {
      "name": "zIndex",
      "objectTypeName": "workplaceType",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "workplaceType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "#FFFFFF"
      }
    },
    "center": {
      "name": "center",
      "objectTypeName": "workplaceType",
      "type": "point3d",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "size": {
      "name": "size",
      "objectTypeName": "workplaceType",
      "type": "size",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplaceType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplaceType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplaceType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplaceType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplaceType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplaceType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplaceType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeItemTypes": {
      "name": "workplaceTypeItemTypes",
      "objectTypeName": "workplaceType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "workplaceType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplaceType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplaceType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaceTypes",
  "camelized": {
    "singular": "workplaceType",
    "plural": "workplaceTypes",
    "id": "workplaceTypeId"
  },
  "capitalized": {
    "singular": "WorkplaceType",
    "plural": "WorkplaceTypes",
    "id": "WorkplaceTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "workplaceTypeItemType",
      "workplace"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/workplaceTypeItemType.ts
var workplaceTypeItemTypeObjectTypeDefintion = {
  "name": "workplaceTypeItemType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplaceTypeItemType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "position": {
      "name": "position",
      "objectTypeName": "workplaceTypeItemType",
      "type": "point3d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "physicalInventory": {
      "name": "physicalInventory",
      "objectTypeName": "workplaceTypeItemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "workplaceTypeItemType",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "zIndex": {
      "name": "zIndex",
      "objectTypeName": "workplaceTypeItemType",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "workplaceTypeItemType",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplaceTypeItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplaceTypeItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "workplaceTypeId": {
      "name": "workplaceTypeId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceType": {
      "name": "workplaceType",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaceTypeItemTypes",
  "camelized": {
    "singular": "workplaceTypeItemType",
    "plural": "workplaceTypeItemTypes",
    "id": "workplaceTypeItemTypeId"
  },
  "capitalized": {
    "singular": "WorkplaceTypeItemType",
    "plural": "WorkplaceTypeItemTypes",
    "id": "WorkplaceTypeItemTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/workplace.ts
var workplaceObjectTypeDefintion = {
  "name": "workplace",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplace",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "position": {
      "name": "position",
      "objectTypeName": "workplace",
      "type": "point3d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": {
          "x": 0,
          "y": 0,
          "z": 0
        }
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "workplace",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "isFlex": {
      "name": "isFlex",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "isTransit": {
      "name": "isTransit",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "isShared": {
      "name": "isShared",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "textAnchor": {
      "name": "textAnchor",
      "objectTypeName": "workplace",
      "type": "textAnchor",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "workplace",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "workplaceAffectationsCalculatedRateSum": {
      "name": "workplaceAffectationsCalculatedRateSum",
      "objectTypeName": "workplace",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplaceAffectationsCount": {
      "name": "workplaceAffectationsCount",
      "objectTypeName": "workplace",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "comment": {
      "name": "comment",
      "objectTypeName": "workplace",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isBookable": {
      "name": "isBookable",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplace",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplace",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplace",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "workplaceTypeId": {
      "name": "workplaceTypeId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceType": {
      "name": "workplaceType",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "items": {
      "name": "items",
      "objectTypeName": "workplace",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "item",
        "propertyTypeName": "items",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceAffectations": {
      "name": "workplaceAffectations",
      "objectTypeName": "workplace",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToWorkplaceBookings": {
      "name": "personToWorkplaceBookings",
      "objectTypeName": "workplace",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaces",
  "camelized": {
    "singular": "workplace",
    "plural": "workplaces",
    "id": "workplaceId"
  },
  "capitalized": {
    "singular": "Workplace",
    "plural": "Workplaces",
    "id": "WorkplaceId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "item",
      "workplaceAffectation",
      "personToWorkplaceBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/item.ts
var itemObjectTypeDefintion = {
  "name": "item",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "item",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "item",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "reference": {
      "name": "reference",
      "objectTypeName": "item",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "purchaseDate": {
      "name": "purchaseDate",
      "objectTypeName": "item",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "position": {
      "name": "position",
      "objectTypeName": "item",
      "type": "point3d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "item",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "textAnchor": {
      "name": "textAnchor",
      "objectTypeName": "item",
      "type": "textAnchor",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "price": {
      "name": "price",
      "objectTypeName": "item",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "itemAffectationsCount": {
      "name": "itemAffectationsCount",
      "objectTypeName": "item",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "item",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "item",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "item",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceId": {
      "name": "workplaceId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplace": {
      "name": "workplace",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemToPeople": {
      "name": "itemToPeople",
      "objectTypeName": "item",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItems": {
      "name": "personCompanyToItems",
      "objectTypeName": "item",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItems",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemFacts": {
      "name": "itemFacts",
      "objectTypeName": "item",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "itemFact",
        "propertyTypeName": "itemFacts",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "items",
  "camelized": {
    "singular": "item",
    "plural": "items",
    "id": "itemId"
  },
  "capitalized": {
    "singular": "Item",
    "plural": "Items",
    "id": "ItemId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemToPerson",
      "personCompanyToItem",
      "itemFact"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/workplaceAffectation.ts
var workplaceAffectationObjectTypeDefintion = {
  "name": "workplaceAffectation",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplaceAffectation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "rate": {
      "name": "rate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "calculatedRate": {
      "name": "calculatedRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 1
      }
    },
    "mondayRate": {
      "name": "mondayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "tuesdayRate": {
      "name": "tuesdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "wednesdayRate": {
      "name": "wednesdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "thursdayRate": {
      "name": "thursdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "fridayRate": {
      "name": "fridayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "saturdayRate": {
      "name": "saturdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sundayRate": {
      "name": "sundayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplaceAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplaceAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplaceAffectation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceId": {
      "name": "workplaceId",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplace": {
      "name": "workplace",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaceAffectations",
  "camelized": {
    "singular": "workplaceAffectation",
    "plural": "workplaceAffectations",
    "id": "workplaceAffectationId"
  },
  "capitalized": {
    "singular": "WorkplaceAffectation",
    "plural": "WorkplaceAffectations",
    "id": "WorkplaceAffectationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/organizationFloor.ts
var organizationFloorObjectTypeDefintion = {
  "name": "organizationFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "organizationFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "organizationFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "organizationFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "organizationFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "organizationFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "organizationFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "organizationFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "organizationFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "organizationFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "organizationFloors",
  "camelized": {
    "singular": "organizationFloor",
    "plural": "organizationFloors",
    "id": "organizationFloorId"
  },
  "capitalized": {
    "singular": "OrganizationFloor",
    "plural": "OrganizationFloors",
    "id": "OrganizationFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/organizationBuilding.ts
var organizationBuildingObjectTypeDefintion = {
  "name": "organizationBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "organizationBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "organizationBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "organizationBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "organizationBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "organizationBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "organizationBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "organizationBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "organizationBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "organizationBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "organizationBuildings",
  "camelized": {
    "singular": "organizationBuilding",
    "plural": "organizationBuildings",
    "id": "organizationBuildingId"
  },
  "capitalized": {
    "singular": "OrganizationBuilding",
    "plural": "OrganizationBuildings",
    "id": "OrganizationBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomTypeFloor.ts
var roomTypeFloorObjectTypeDefintion = {
  "name": "roomTypeFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeFloors",
  "camelized": {
    "singular": "roomTypeFloor",
    "plural": "roomTypeFloors",
    "id": "roomTypeFloorId"
  },
  "capitalized": {
    "singular": "RoomTypeFloor",
    "plural": "RoomTypeFloors",
    "id": "RoomTypeFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/roomTypeBuilding.ts
var roomTypeBuildingObjectTypeDefintion = {
  "name": "roomTypeBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeBuildings",
  "camelized": {
    "singular": "roomTypeBuilding",
    "plural": "roomTypeBuildings",
    "id": "roomTypeBuildingId"
  },
  "capitalized": {
    "singular": "RoomTypeBuilding",
    "plural": "RoomTypeBuildings",
    "id": "RoomTypeBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/itemToPerson.ts
var itemToPersonObjectTypeDefintion = {
  "name": "itemToPerson",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemToPerson",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemToPerson",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemId": {
      "name": "itemId",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "item": {
      "name": "item",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemToPeople",
  "camelized": {
    "singular": "itemToPerson",
    "plural": "itemToPeople",
    "id": "itemToPersonId"
  },
  "capitalized": {
    "singular": "ItemToPerson",
    "plural": "ItemToPeople",
    "id": "ItemToPersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personToBuilding.ts
var personToBuildingObjectTypeDefintion = {
  "name": "personToBuilding",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "addToPeopleCount": {
      "name": "addToPeopleCount",
      "objectTypeName": "personToBuilding",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToBuildings",
  "camelized": {
    "singular": "personToBuilding",
    "plural": "personToBuildings",
    "id": "personToBuildingId"
  },
  "capitalized": {
    "singular": "PersonToBuilding",
    "plural": "PersonToBuildings",
    "id": "PersonToBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimensionToPerson.ts
var dimensionToPersonObjectTypeDefintion = {
  "name": "dimensionToPerson",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionToPerson",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionToPerson",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionToPeople",
  "camelized": {
    "singular": "dimensionToPerson",
    "plural": "dimensionToPeople",
    "id": "dimensionToPersonId"
  },
  "capitalized": {
    "singular": "DimensionToPerson",
    "plural": "DimensionToPeople",
    "id": "DimensionToPersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/dimensionTypeToBuilding.ts
var dimensionTypeToBuildingObjectTypeDefintion = {
  "name": "dimensionTypeToBuilding",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionTypeToBuildings",
  "camelized": {
    "singular": "dimensionTypeToBuilding",
    "plural": "dimensionTypeToBuildings",
    "id": "dimensionTypeToBuildingId"
  },
  "capitalized": {
    "singular": "DimensionTypeToBuilding",
    "plural": "DimensionTypeToBuildings",
    "id": "DimensionTypeToBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/workingLocation.ts
var workingLocationObjectTypeDefintion = {
  "name": "workingLocation",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workingLocation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "workingLocation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "workingLocation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workingLocation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personWorkingLocations": {
      "name": "personWorkingLocations",
      "objectTypeName": "workingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocations",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "workingLocations",
  "camelized": {
    "singular": "workingLocation",
    "plural": "workingLocations",
    "id": "workingLocationId"
  },
  "capitalized": {
    "singular": "WorkingLocation",
    "plural": "WorkingLocations",
    "id": "WorkingLocationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personWorkingLocation"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/personWorkingLocation.ts
var personWorkingLocationObjectTypeDefintion = {
  "name": "personWorkingLocation",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personWorkingLocation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "date": {
      "name": "date",
      "objectTypeName": "personWorkingLocation",
      "type": "date",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "daySlotType": {
      "name": "daySlotType",
      "objectTypeName": "personWorkingLocation",
      "type": "day-slot",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": null
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personWorkingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personWorkingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personWorkingLocation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "workingLocationId": {
      "name": "workingLocationId",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workingLocationId",
        "targetModelName": "workingLocation",
        "propertyTypeName": "workingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "workingLocation": {
      "name": "workingLocation",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workingLocationId",
        "targetModelName": "workingLocation",
        "propertyTypeName": "workingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToWorkplaceBookings": {
      "name": "personToWorkplaceBookings",
      "objectTypeName": "personWorkingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToRoomBookings": {
      "name": "personToRoomBookings",
      "objectTypeName": "personWorkingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToDimensionBookings": {
      "name": "personToDimensionBookings",
      "objectTypeName": "personWorkingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personWorkingLocations",
  "camelized": {
    "singular": "personWorkingLocation",
    "plural": "personWorkingLocations",
    "id": "personWorkingLocationId"
  },
  "capitalized": {
    "singular": "PersonWorkingLocation",
    "plural": "PersonWorkingLocations",
    "id": "PersonWorkingLocationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personToWorkplaceBooking",
      "personToRoomBooking",
      "personToDimensionBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personToWorkplaceBooking.ts
var personToWorkplaceBookingObjectTypeDefintion = {
  "name": "personToWorkplaceBooking",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "startDatetime": {
      "name": "startDatetime",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDatetime": {
      "name": "endDatetime",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceId": {
      "name": "workplaceId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplace": {
      "name": "workplace",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocationId": {
      "name": "personWorkingLocationId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocation": {
      "name": "personWorkingLocation",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToWorkplaceBookings",
  "camelized": {
    "singular": "personToWorkplaceBooking",
    "plural": "personToWorkplaceBookings",
    "id": "personToWorkplaceBookingId"
  },
  "capitalized": {
    "singular": "PersonToWorkplaceBooking",
    "plural": "PersonToWorkplaceBookings",
    "id": "PersonToWorkplaceBookingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personToRoomBooking.ts
var personToRoomBookingObjectTypeDefintion = {
  "name": "personToRoomBooking",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToRoomBooking",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "startDatetime": {
      "name": "startDatetime",
      "objectTypeName": "personToRoomBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDatetime": {
      "name": "endDatetime",
      "objectTypeName": "personToRoomBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToRoomBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToRoomBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToRoomBooking",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocationId": {
      "name": "personWorkingLocationId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocation": {
      "name": "personWorkingLocation",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToRoomBookings",
  "camelized": {
    "singular": "personToRoomBooking",
    "plural": "personToRoomBookings",
    "id": "personToRoomBookingId"
  },
  "capitalized": {
    "singular": "PersonToRoomBooking",
    "plural": "PersonToRoomBookings",
    "id": "PersonToRoomBookingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personToDimensionBooking.ts
var personToDimensionBookingObjectTypeDefintion = {
  "name": "personToDimensionBooking",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToDimensionBooking",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "startDatetime": {
      "name": "startDatetime",
      "objectTypeName": "personToDimensionBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDatetime": {
      "name": "endDatetime",
      "objectTypeName": "personToDimensionBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToDimensionBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToDimensionBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToDimensionBooking",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocationId": {
      "name": "personWorkingLocationId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocation": {
      "name": "personWorkingLocation",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToDimensionBookings",
  "camelized": {
    "singular": "personToDimensionBooking",
    "plural": "personToDimensionBookings",
    "id": "personToDimensionBookingId"
  },
  "capitalized": {
    "singular": "PersonToDimensionBooking",
    "plural": "PersonToDimensionBookings",
    "id": "PersonToDimensionBookingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personCompanyMission.ts
var personCompanyMissionObjectTypeDefintion = {
  "name": "personCompanyMission",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyMission",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personCompanyMission",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyMission",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyMission",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyMission",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyToItemTypes": {
      "name": "personCompanyToItemTypes",
      "objectTypeName": "personCompanyMission",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToRoomTypes": {
      "name": "personCompanyToRoomTypes",
      "objectTypeName": "personCompanyMission",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "personCompanyMissions",
  "camelized": {
    "singular": "personCompanyMission",
    "plural": "personCompanyMissions",
    "id": "personCompanyMissionId"
  },
  "capitalized": {
    "singular": "PersonCompanyMission",
    "plural": "PersonCompanyMissions",
    "id": "PersonCompanyMissionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personCompanyToItemType",
      "personCompanyToRoomType"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/personCompanyToItemType.ts
var personCompanyToItemTypeObjectTypeDefintion = {
  "name": "personCompanyToItemType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyToItemType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyToItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyToItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyToItemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMissionId": {
      "name": "personCompanyMissionId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMission": {
      "name": "personCompanyMission",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanyToItemTypes",
  "camelized": {
    "singular": "personCompanyToItemType",
    "plural": "personCompanyToItemTypes",
    "id": "personCompanyToItemTypeId"
  },
  "capitalized": {
    "singular": "PersonCompanyToItemType",
    "plural": "PersonCompanyToItemTypes",
    "id": "PersonCompanyToItemTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personCompanyToRoomType.ts
var personCompanyToRoomTypeObjectTypeDefintion = {
  "name": "personCompanyToRoomType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyToRoomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMissionId": {
      "name": "personCompanyMissionId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMission": {
      "name": "personCompanyMission",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanyToRoomTypes",
  "camelized": {
    "singular": "personCompanyToRoomType",
    "plural": "personCompanyToRoomTypes",
    "id": "personCompanyToRoomTypeId"
  },
  "capitalized": {
    "singular": "PersonCompanyToRoomType",
    "plural": "PersonCompanyToRoomTypes",
    "id": "PersonCompanyToRoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/personCompanyToItem.ts
var personCompanyToItemObjectTypeDefintion = {
  "name": "personCompanyToItem",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyToItem",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "datetime": {
      "name": "datetime",
      "objectTypeName": "personCompanyToItem",
      "type": "datetime",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "comment": {
      "name": "comment",
      "objectTypeName": "personCompanyToItem",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyToItem",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyToItem",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyToItem",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemId": {
      "name": "itemId",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "item": {
      "name": "item",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanyToItems",
  "camelized": {
    "singular": "personCompanyToItem",
    "plural": "personCompanyToItems",
    "id": "personCompanyToItemId"
  },
  "capitalized": {
    "singular": "PersonCompanyToItem",
    "plural": "PersonCompanyToItems",
    "id": "PersonCompanyToItemId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/legend.ts
var legendObjectTypeDefintion = {
  "name": "legend",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "legend",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "legend",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "configuration": {
      "name": "configuration",
      "objectTypeName": "legend",
      "type": "legend-configuration",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "legend",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "legend",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "legend",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "legend",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "legend",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "legend",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "legend",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "legend",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "legend",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "legends",
  "camelized": {
    "singular": "legend",
    "plural": "legends",
    "id": "legendId"
  },
  "capitalized": {
    "singular": "Legend",
    "plural": "Legends",
    "id": "LegendId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/openerPostMessageHost.ts
var openerPostMessageHostObjectTypeDefintion = {
  "name": "openerPostMessageHost",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "openerPostMessageHost",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "host": {
      "name": "host",
      "objectTypeName": "openerPostMessageHost",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "description": {
      "name": "description",
      "objectTypeName": "openerPostMessageHost",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "openerPostMessageHost",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "openerPostMessageHost",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "openerPostMessageHost",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "openerPostMessageHost",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "openerPostMessageHost",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "openerPostMessageHost",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "openerPostMessageHost",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "openerPostMessageHost",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "openerPostMessageHost",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "openerPostMessageHosts",
  "camelized": {
    "singular": "openerPostMessageHost",
    "plural": "openerPostMessageHosts",
    "id": "openerPostMessageHostId"
  },
  "capitalized": {
    "singular": "OpenerPostMessageHost",
    "plural": "OpenerPostMessageHosts",
    "id": "OpenerPostMessageHostId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/jupObjectType.ts
var jupObjectTypeObjectTypeDefintion = {
  "name": "jupObjectType",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupObjectType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupObjectType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupObjectType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiViews": {
      "name": "jupUiViews",
      "objectTypeName": "jupObjectType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupUiView",
        "propertyTypeName": "jupUiViews",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupObjectTypes": {
      "name": "jupRoleToJupObjectTypes",
      "objectTypeName": "jupObjectType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupRoleToJupObjectType",
        "propertyTypeName": "jupRoleToJupObjectTypes",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupObjectTypes",
  "camelized": {
    "singular": "jupObjectType",
    "plural": "jupObjectTypes",
    "id": "jupObjectTypeId"
  },
  "capitalized": {
    "singular": "JupObjectType",
    "plural": "JupObjectTypes",
    "id": "JupObjectTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupUiView",
      "jupRoleToJupObjectType"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupUiView.ts
var jupUiViewObjectTypeDefintion = {
  "name": "jupUiView",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiView",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiView",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isDefaultView": {
      "name": "isDefaultView",
      "objectTypeName": "jupUiView",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "false"
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiView",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupObjectTypeId": {
      "name": "jupObjectTypeId",
      "objectTypeName": "jupUiView",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupObjectType": {
      "name": "jupObjectType",
      "objectTypeName": "jupUiView",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiViews": {
      "name": "jupRoleToJupUiViews",
      "objectTypeName": "jupUiView",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiViewId",
        "targetModelName": "jupRoleToJupUiView",
        "propertyTypeName": "jupRoleToJupUiViews",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiViews",
  "camelized": {
    "singular": "jupUiView",
    "plural": "jupUiViews",
    "id": "jupUiViewId"
  },
  "capitalized": {
    "singular": "JupUiView",
    "plural": "JupUiViews",
    "id": "JupUiViewId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupRoleToJupUiView"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupRole.ts
var jupRoleObjectTypeDefintion = {
  "name": "jupRole",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "jupRole",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUserCompanyToJupRoles": {
      "name": "jupUserCompanyToJupRoles",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiViews": {
      "name": "jupRoleToJupUiViews",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiView",
        "propertyTypeName": "jupRoleToJupUiViews",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupObjectTypes": {
      "name": "jupRoleToJupObjectTypes",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupObjectType",
        "propertyTypeName": "jupRoleToJupObjectTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiOptions": {
      "name": "jupRoleToJupUiOptions",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiOption",
        "propertyTypeName": "jupRoleToJupUiOptions",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiOperations": {
      "name": "jupRoleToJupUiOperations",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiOperation",
        "propertyTypeName": "jupRoleToJupUiOperations",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUserToJupRoles": {
      "name": "apiUserToJupRoles",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRuleToJupRoles": {
      "name": "userRegistrationTenantRuleToJupRoles",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiLayouts": {
      "name": "jupRoleToJupUiLayouts",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiLayout",
        "propertyTypeName": "jupRoleToJupUiLayouts",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoles",
  "camelized": {
    "singular": "jupRole",
    "plural": "jupRoles",
    "id": "jupRoleId"
  },
  "capitalized": {
    "singular": "JupRole",
    "plural": "JupRoles",
    "id": "JupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupUserCompanyToJupRole",
      "jupRoleToJupUiView",
      "jupRoleToJupObjectType",
      "jupRoleToJupUiOption",
      "jupRoleToJupUiOperation",
      "apiUserToJupRole",
      "userRegistrationTenantRuleToJupRole",
      "jupRoleToJupUiLayout"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupUiOption.ts
var jupUiOptionObjectTypeDefintion = {
  "name": "jupUiOption",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiOption",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiOption",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "scope": {
      "name": "scope",
      "objectTypeName": "jupUiOption",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiOption",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupRoleToJupUiOptions": {
      "name": "jupRoleToJupUiOptions",
      "objectTypeName": "jupUiOption",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOptionId",
        "targetModelName": "jupRoleToJupUiOption",
        "propertyTypeName": "jupRoleToJupUiOptions",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiOptions",
  "camelized": {
    "singular": "jupUiOption",
    "plural": "jupUiOptions",
    "id": "jupUiOptionId"
  },
  "capitalized": {
    "singular": "JupUiOption",
    "plural": "JupUiOptions",
    "id": "JupUiOptionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupRoleToJupUiOption"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupUiOperation.ts
var jupUiOperationObjectTypeDefintion = {
  "name": "jupUiOperation",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiOperation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupRoleToJupUiOperations": {
      "name": "jupRoleToJupUiOperations",
      "objectTypeName": "jupUiOperation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOperationId",
        "targetModelName": "jupRoleToJupUiOperation",
        "propertyTypeName": "jupRoleToJupUiOperations",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiOperations",
  "camelized": {
    "singular": "jupUiOperation",
    "plural": "jupUiOperations",
    "id": "jupUiOperationId"
  },
  "capitalized": {
    "singular": "JupUiOperation",
    "plural": "JupUiOperations",
    "id": "JupUiOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupRoleToJupUiOperation"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/contentRole.ts
var contentRoleObjectTypeDefintion = {
  "name": "contentRole",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "contentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToBuildings": {
      "name": "contentRoleToBuildings",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToUserCompanies": {
      "name": "contentRoleToUserCompanies",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToFloors": {
      "name": "contentRoleToFloors",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUserToContentRoles": {
      "name": "apiUserToContentRoles",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToJupUiTenantOperations": {
      "name": "contentRoleToJupUiTenantOperations",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperations",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRuleToContentRoles": {
      "name": "userRegistrationTenantRuleToContentRoles",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoles",
  "camelized": {
    "singular": "contentRole",
    "plural": "contentRoles",
    "id": "contentRoleId"
  },
  "capitalized": {
    "singular": "ContentRole",
    "plural": "ContentRoles",
    "id": "ContentRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "contentRoleToBuilding",
      "contentRoleToUserCompany",
      "contentRoleToFloor",
      "apiUserToContentRole",
      "contentRoleToJupUiTenantOperation",
      "userRegistrationTenantRuleToContentRole"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/jupUserCompanyToJupRole.ts
var jupUserCompanyToJupRoleObjectTypeDefintion = {
  "name": "jupUserCompanyToJupRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyId": {
      "name": "userCompanyId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompany": {
      "name": "userCompany",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "jupUserCompanyToJupRoles",
  "camelized": {
    "singular": "jupUserCompanyToJupRole",
    "plural": "jupUserCompanyToJupRoles",
    "id": "jupUserCompanyToJupRoleId"
  },
  "capitalized": {
    "singular": "JupUserCompanyToJupRole",
    "plural": "JupUserCompanyToJupRoles",
    "id": "JupUserCompanyToJupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/jupRoleToJupUiView.ts
var jupRoleToJupUiViewObjectTypeDefintion = {
  "name": "jupRoleToJupUiView",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiViewId": {
      "name": "jupUiViewId",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiViewId",
        "targetModelName": "jupUiView",
        "propertyTypeName": "jupUiView",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiView": {
      "name": "jupUiView",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiViewId",
        "targetModelName": "jupUiView",
        "propertyTypeName": "jupUiView",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiViews",
  "camelized": {
    "singular": "jupRoleToJupUiView",
    "plural": "jupRoleToJupUiViews",
    "id": "jupRoleToJupUiViewId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiView",
    "plural": "JupRoleToJupUiViews",
    "id": "JupRoleToJupUiViewId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupRoleToJupObjectType.ts
var jupRoleToJupObjectTypeObjectTypeDefintion = {
  "name": "jupRoleToJupObjectType",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "arCreate": {
      "name": "arCreate",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "arRead": {
      "name": "arRead",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "arUpdate": {
      "name": "arUpdate",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "arDelete": {
      "name": "arDelete",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupObjectTypeId": {
      "name": "jupObjectTypeId",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupObjectType": {
      "name": "jupObjectType",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupObjectTypes",
  "camelized": {
    "singular": "jupRoleToJupObjectType",
    "plural": "jupRoleToJupObjectTypes",
    "id": "jupRoleToJupObjectTypeId"
  },
  "capitalized": {
    "singular": "JupRoleToJupObjectType",
    "plural": "JupRoleToJupObjectTypes",
    "id": "JupRoleToJupObjectTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupRoleToJupUiOption.ts
var jupRoleToJupUiOptionObjectTypeDefintion = {
  "name": "jupRoleToJupUiOption",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiOptionId": {
      "name": "jupUiOptionId",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiOptionId",
        "targetModelName": "jupUiOption",
        "propertyTypeName": "jupUiOption",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiOption": {
      "name": "jupUiOption",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOptionId",
        "targetModelName": "jupUiOption",
        "propertyTypeName": "jupUiOption",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiOptions",
  "camelized": {
    "singular": "jupRoleToJupUiOption",
    "plural": "jupRoleToJupUiOptions",
    "id": "jupRoleToJupUiOptionId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiOption",
    "plural": "JupRoleToJupUiOptions",
    "id": "JupRoleToJupUiOptionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/jupRoleToJupUiOperation.ts
var jupRoleToJupUiOperationObjectTypeDefintion = {
  "name": "jupRoleToJupUiOperation",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiOperationId": {
      "name": "jupUiOperationId",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiOperationId",
        "targetModelName": "jupUiOperation",
        "propertyTypeName": "jupUiOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiOperation": {
      "name": "jupUiOperation",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOperationId",
        "targetModelName": "jupUiOperation",
        "propertyTypeName": "jupUiOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiOperations",
  "camelized": {
    "singular": "jupRoleToJupUiOperation",
    "plural": "jupRoleToJupUiOperations",
    "id": "jupRoleToJupUiOperationId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiOperation",
    "plural": "JupRoleToJupUiOperations",
    "id": "JupRoleToJupUiOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/contentRoleToBuilding.ts
var contentRoleToBuildingObjectTypeDefintion = {
  "name": "contentRoleToBuilding",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToBuildings",
  "camelized": {
    "singular": "contentRoleToBuilding",
    "plural": "contentRoleToBuildings",
    "id": "contentRoleToBuildingId"
  },
  "capitalized": {
    "singular": "ContentRoleToBuilding",
    "plural": "ContentRoleToBuildings",
    "id": "ContentRoleToBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/contentRoleToUserCompany.ts
var contentRoleToUserCompanyObjectTypeDefintion = {
  "name": "contentRoleToUserCompany",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyId": {
      "name": "userCompanyId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompany": {
      "name": "userCompany",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToUserCompanies",
  "camelized": {
    "singular": "contentRoleToUserCompany",
    "plural": "contentRoleToUserCompanies",
    "id": "contentRoleToUserCompanyId"
  },
  "capitalized": {
    "singular": "ContentRoleToUserCompany",
    "plural": "ContentRoleToUserCompanies",
    "id": "ContentRoleToUserCompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/contentRoleToFloor.ts
var contentRoleToFloorObjectTypeDefintion = {
  "name": "contentRoleToFloor",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToFloors",
  "camelized": {
    "singular": "contentRoleToFloor",
    "plural": "contentRoleToFloors",
    "id": "contentRoleToFloorId"
  },
  "capitalized": {
    "singular": "ContentRoleToFloor",
    "plural": "ContentRoleToFloors",
    "id": "ContentRoleToFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/partnerApiCredential.ts
var partnerApiCredentialObjectTypeDefintion = {
  "name": "partnerApiCredential",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerApiCredential",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "label": {
      "name": "label",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "host": {
      "name": "host",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "clientId": {
      "name": "clientId",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "clientSecret": {
      "name": "clientSecret",
      "objectTypeName": "partnerApiCredential",
      "type": "password",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "enable": {
      "name": "enable",
      "objectTypeName": "partnerApiCredential",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerApiCredential",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerApiCredential",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerApiCredential",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerApiCredential",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerApiCredential",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerApiCredential",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerApiCredential",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerApiCredential",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerApiCredentials",
  "camelized": {
    "singular": "partnerApiCredential",
    "plural": "partnerApiCredentials",
    "id": "partnerApiCredentialId"
  },
  "capitalized": {
    "singular": "PartnerApiCredential",
    "plural": "PartnerApiCredentials",
    "id": "PartnerApiCredentialId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/apiUser.ts
var apiUserObjectTypeDefintion = {
  "name": "apiUser",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "apiUser",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "clientSecret": {
      "name": "clientSecret",
      "objectTypeName": "apiUser",
      "type": "password",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "apiUser",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "apiUser",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "apiUser",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "apiUser",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "apiUser",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "apiUser",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "apiUser",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "apiUser",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToJupRoles": {
      "name": "apiUserToJupRoles",
      "objectTypeName": "apiUser",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUserToContentRoles": {
      "name": "apiUserToContentRoles",
      "objectTypeName": "apiUser",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "apiUser",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "apiUser",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "apiUsers",
  "camelized": {
    "singular": "apiUser",
    "plural": "apiUsers",
    "id": "apiUserId"
  },
  "capitalized": {
    "singular": "ApiUser",
    "plural": "ApiUsers",
    "id": "ApiUserId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "apiUserToJupRole",
      "apiUserToContentRole"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/apiUserToJupRole.ts
var apiUserToJupRoleObjectTypeDefintion = {
  "name": "apiUserToJupRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "apiUserToJupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "apiUserToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "apiUserToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "apiUserToJupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "apiUserId": {
      "name": "apiUserId",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUser": {
      "name": "apiUser",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "apiUserToJupRoles",
  "camelized": {
    "singular": "apiUserToJupRole",
    "plural": "apiUserToJupRoles",
    "id": "apiUserToJupRoleId"
  },
  "capitalized": {
    "singular": "ApiUserToJupRole",
    "plural": "ApiUserToJupRoles",
    "id": "ApiUserToJupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/apiUserToContentRole.ts
var apiUserToContentRoleObjectTypeDefintion = {
  "name": "apiUserToContentRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "apiUserToContentRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "apiUserToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "apiUserToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "apiUserToContentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "apiUserId": {
      "name": "apiUserId",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUser": {
      "name": "apiUser",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "apiUserToContentRoles",
  "camelized": {
    "singular": "apiUserToContentRole",
    "plural": "apiUserToContentRoles",
    "id": "apiUserToContentRoleId"
  },
  "capitalized": {
    "singular": "ApiUserToContentRole",
    "plural": "ApiUserToContentRoles",
    "id": "ApiUserToContentRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/jupUiTenantOperation.ts
var jupUiTenantOperationObjectTypeDefintion = {
  "name": "jupUiTenantOperation",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiTenantOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiTenantOperation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiTenantOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "jupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "jupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "jupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "jupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToJupUiTenantOperations": {
      "name": "contentRoleToJupUiTenantOperations",
      "objectTypeName": "jupUiTenantOperation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiTenantOperationId",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperations",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "jupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "jupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "jupUiTenantOperations",
  "camelized": {
    "singular": "jupUiTenantOperation",
    "plural": "jupUiTenantOperations",
    "id": "jupUiTenantOperationId"
  },
  "capitalized": {
    "singular": "JupUiTenantOperation",
    "plural": "JupUiTenantOperations",
    "id": "JupUiTenantOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "contentRoleToJupUiTenantOperation"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/contentRoleToJupUiTenantOperation.ts
var contentRoleToJupUiTenantOperationObjectTypeDefintion = {
  "name": "contentRoleToJupUiTenantOperation",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiTenantOperationId": {
      "name": "jupUiTenantOperationId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiTenantOperationId",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiTenantOperation": {
      "name": "jupUiTenantOperation",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiTenantOperationId",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToJupUiTenantOperations",
  "camelized": {
    "singular": "contentRoleToJupUiTenantOperation",
    "plural": "contentRoleToJupUiTenantOperations",
    "id": "contentRoleToJupUiTenantOperationId"
  },
  "capitalized": {
    "singular": "ContentRoleToJupUiTenantOperation",
    "plural": "ContentRoleToJupUiTenantOperations",
    "id": "ContentRoleToJupUiTenantOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/authentificationConnection.ts
var authentificationConnectionObjectTypeDefintion = {
  "name": "authentificationConnection",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "authentificationConnection",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "authentificationConnection",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "authentificationConnection",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "authentificationConnection",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "authentificationConnection",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userRegistrationTenantRules": {
      "name": "userRegistrationTenantRules",
      "objectTypeName": "authentificationConnection",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "authentificationConnectionId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRules",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "authentificationConnections",
  "camelized": {
    "singular": "authentificationConnection",
    "plural": "authentificationConnections",
    "id": "authentificationConnectionId"
  },
  "capitalized": {
    "singular": "AuthentificationConnection",
    "plural": "AuthentificationConnections",
    "id": "AuthentificationConnectionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userRegistrationTenantRule"
    ],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/userRegistrationTenantRule.ts
var userRegistrationTenantRuleObjectTypeDefintion = {
  "name": "userRegistrationTenantRule",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "domains": {
      "name": "domains",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "automaticUserToRoleMapping": {
      "name": "automaticUserToRoleMapping",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "authentificationConnectionId": {
      "name": "authentificationConnectionId",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "authentificationConnectionId",
        "targetModelName": "authentificationConnection",
        "propertyTypeName": "authentificationConnection",
        "options": {
          "readOnly": false
        }
      }
    },
    "authentificationConnection": {
      "name": "authentificationConnection",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "authentificationConnectionId",
        "targetModelName": "authentificationConnection",
        "propertyTypeName": "authentificationConnection",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToJupRoles": {
      "name": "userRegistrationTenantRuleToJupRoles",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRuleToContentRoles": {
      "name": "userRegistrationTenantRuleToContentRoles",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userRegistrationTenantRules",
  "camelized": {
    "singular": "userRegistrationTenantRule",
    "plural": "userRegistrationTenantRules",
    "id": "userRegistrationTenantRuleId"
  },
  "capitalized": {
    "singular": "UserRegistrationTenantRule",
    "plural": "UserRegistrationTenantRules",
    "id": "UserRegistrationTenantRuleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userRegistrationTenantRuleToJupRole",
      "userRegistrationTenantRuleToContentRole"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/userRegistrationTenantRuleToJupRole.ts
var userRegistrationTenantRuleToJupRoleObjectTypeDefintion = {
  "name": "userRegistrationTenantRuleToJupRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userRegistrationTenantRuleId": {
      "name": "userRegistrationTenantRuleId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRule": {
      "name": "userRegistrationTenantRule",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userRegistrationTenantRuleToJupRoles",
  "camelized": {
    "singular": "userRegistrationTenantRuleToJupRole",
    "plural": "userRegistrationTenantRuleToJupRoles",
    "id": "userRegistrationTenantRuleToJupRoleId"
  },
  "capitalized": {
    "singular": "UserRegistrationTenantRuleToJupRole",
    "plural": "UserRegistrationTenantRuleToJupRoles",
    "id": "UserRegistrationTenantRuleToJupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/userRegistrationTenantRuleToContentRole.ts
var userRegistrationTenantRuleToContentRoleObjectTypeDefintion = {
  "name": "userRegistrationTenantRuleToContentRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userRegistrationTenantRuleId": {
      "name": "userRegistrationTenantRuleId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRule": {
      "name": "userRegistrationTenantRule",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userRegistrationTenantRuleToContentRoles",
  "camelized": {
    "singular": "userRegistrationTenantRuleToContentRole",
    "plural": "userRegistrationTenantRuleToContentRoles",
    "id": "userRegistrationTenantRuleToContentRoleId"
  },
  "capitalized": {
    "singular": "UserRegistrationTenantRuleToContentRole",
    "plural": "UserRegistrationTenantRuleToContentRoles",
    "id": "UserRegistrationTenantRuleToContentRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/partnerExportMappingConfiguration.ts
var partnerExportMappingConfigurationObjectTypeDefintion = {
  "name": "partnerExportMappingConfiguration",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappings": {
      "name": "partnerExportMappings",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMappings",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfigurationToFloors": {
      "name": "partnerExportMappingConfigurationToFloors",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappingConfigurations",
  "camelized": {
    "singular": "partnerExportMappingConfiguration",
    "plural": "partnerExportMappingConfigurations",
    "id": "partnerExportMappingConfigurationId"
  },
  "capitalized": {
    "singular": "PartnerExportMappingConfiguration",
    "plural": "PartnerExportMappingConfigurations",
    "id": "PartnerExportMappingConfigurationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "partnerExportMapping",
      "partnerExportMappingConfigurationToFloor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/partnerExportMapping.ts
var partnerExportMappingObjectTypeDefintion = {
  "name": "partnerExportMapping",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMapping",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerCode": {
      "name": "partnerCode",
      "objectTypeName": "partnerExportMapping",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "label": {
      "name": "label",
      "objectTypeName": "partnerExportMapping",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMapping",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMapping",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMapping",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerExportMappingConfigurationId": {
      "name": "partnerExportMappingConfigurationId",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfiguration": {
      "name": "partnerExportMappingConfiguration",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingToRoomTypes": {
      "name": "partnerExportMappingToRoomTypes",
      "objectTypeName": "partnerExportMapping",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingId",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappings",
  "camelized": {
    "singular": "partnerExportMapping",
    "plural": "partnerExportMappings",
    "id": "partnerExportMappingId"
  },
  "capitalized": {
    "singular": "PartnerExportMapping",
    "plural": "PartnerExportMappings",
    "id": "PartnerExportMappingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "partnerExportMappingToRoomType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/partnerExportMappingToRoomType.ts
var partnerExportMappingToRoomTypeObjectTypeDefintion = {
  "name": "partnerExportMappingToRoomType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerExportMappingId": {
      "name": "partnerExportMappingId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "partnerExportMappingId",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMapping",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMapping": {
      "name": "partnerExportMapping",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingId",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMapping",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappingToRoomTypes",
  "camelized": {
    "singular": "partnerExportMappingToRoomType",
    "plural": "partnerExportMappingToRoomTypes",
    "id": "partnerExportMappingToRoomTypeId"
  },
  "capitalized": {
    "singular": "PartnerExportMappingToRoomType",
    "plural": "PartnerExportMappingToRoomTypes",
    "id": "PartnerExportMappingToRoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/partnerExportMappingConfigurationToFloor.ts
var partnerExportMappingConfigurationToFloorObjectTypeDefintion = {
  "name": "partnerExportMappingConfigurationToFloor",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerExportMappingConfigurationId": {
      "name": "partnerExportMappingConfigurationId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfiguration": {
      "name": "partnerExportMappingConfiguration",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappingConfigurationToFloors",
  "camelized": {
    "singular": "partnerExportMappingConfigurationToFloor",
    "plural": "partnerExportMappingConfigurationToFloors",
    "id": "partnerExportMappingConfigurationToFloorId"
  },
  "capitalized": {
    "singular": "PartnerExportMappingConfigurationToFloor",
    "plural": "PartnerExportMappingConfigurationToFloors",
    "id": "PartnerExportMappingConfigurationToFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/jupRoleToJupUiLayout.ts
var jupRoleToJupUiLayoutObjectTypeDefintion = {
  "name": "jupRoleToJupUiLayout",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiLayoutId": {
      "name": "jupUiLayoutId",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiLayout": {
      "name": "jupUiLayout",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiLayouts",
  "camelized": {
    "singular": "jupRoleToJupUiLayout",
    "plural": "jupRoleToJupUiLayouts",
    "id": "jupRoleToJupUiLayoutId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiLayout",
    "plural": "JupRoleToJupUiLayouts",
    "id": "JupRoleToJupUiLayoutId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};

// src/core/generated/objectTypeDefinitions/itemFact.ts
var itemFactObjectTypeDefintion = {
  "name": "itemFact",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemFact",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "measure": {
      "name": "measure",
      "objectTypeName": "itemFact",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "value": {
      "name": "value",
      "objectTypeName": "itemFact",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "voltage": {
      "name": "voltage",
      "objectTypeName": "itemFact",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "time": {
      "name": "time",
      "objectTypeName": "itemFact",
      "type": "datetime",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemFact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemFact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemFact",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemId": {
      "name": "itemId",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "item": {
      "name": "item",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemFacts",
  "camelized": {
    "singular": "itemFact",
    "plural": "itemFacts",
    "id": "itemFactId"
  },
  "capitalized": {
    "singular": "ItemFact",
    "plural": "ItemFacts",
    "id": "ItemFactId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/featureFamily.ts
var featureFamilyObjectTypeDefintion = {
  "name": "featureFamily",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "featureFamily",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "featureFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "featureFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "featureFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "featureFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "featureFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "featureFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "featureFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "featureFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureGroups": {
      "name": "featureGroups",
      "objectTypeName": "featureFamily",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureFamilyId",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroups",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "featureFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "featureFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "featureFamilies",
  "camelized": {
    "singular": "featureFamily",
    "plural": "featureFamilies",
    "id": "featureFamilyId"
  },
  "capitalized": {
    "singular": "FeatureFamily",
    "plural": "FeatureFamilies",
    "id": "FeatureFamilyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "featureGroup"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/featureGroup.ts
var featureGroupObjectTypeDefintion = {
  "name": "featureGroup",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "featureGroup",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "featureGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "sortOrder": {
      "name": "sortOrder",
      "objectTypeName": "featureGroup",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "featureGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "featureGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "featureGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "featureFamilyId": {
      "name": "featureFamilyId",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "featureFamilyId",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "featureFamily": {
      "name": "featureFamily",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureFamilyId",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "features": {
      "name": "features",
      "objectTypeName": "featureGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureGroupId",
        "targetModelName": "feature",
        "propertyTypeName": "features",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "featureGroups",
  "camelized": {
    "singular": "featureGroup",
    "plural": "featureGroups",
    "id": "featureGroupId"
  },
  "capitalized": {
    "singular": "FeatureGroup",
    "plural": "FeatureGroups",
    "id": "FeatureGroupId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "feature"
    ],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/objectTypeDefinitions/feature.ts
var featureObjectTypeDefintion = {
  "name": "feature",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "feature",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "feature",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "feature",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "feature",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "feature",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "featureGroupId": {
      "name": "featureGroupId",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "featureGroupId",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "featureGroup": {
      "name": "featureGroup",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureGroupId",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "features",
  "camelized": {
    "singular": "feature",
    "plural": "features",
    "id": "featureId"
  },
  "capitalized": {
    "singular": "Feature",
    "plural": "Features",
    "id": "FeatureId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};

// src/core/generated/schema.generated.ts
(function(JupSchema2) {
  JupSchema2.occupancyStatus = occupancyStatusObjectTypeDefintion;
  JupSchema2.user = userObjectTypeDefintion;
  JupSchema2.userRefreshToken = userRefreshTokenObjectTypeDefintion;
  JupSchema2.companyType = companyTypeObjectTypeDefintion;
  JupSchema2.company = companyObjectTypeDefintion;
  JupSchema2.campus = campusObjectTypeDefintion;
  JupSchema2.roomConnectorType = roomConnectorTypeObjectTypeDefintion;
  JupSchema2.roomConnector = roomConnectorObjectTypeDefintion;
  JupSchema2.userCompany = userCompanyObjectTypeDefintion;
  JupSchema2.personGender = personGenderObjectTypeDefintion;
  JupSchema2.personCompany = personCompanyObjectTypeDefintion;
  JupSchema2.jupUiLayout = jupUiLayoutObjectTypeDefintion;
  JupSchema2.buildingType = buildingTypeObjectTypeDefintion;
  JupSchema2.organization = organizationObjectTypeDefintion;
  JupSchema2.itemTypeFamily = itemTypeFamilyObjectTypeDefintion;
  JupSchema2.manufacturer = manufacturerObjectTypeDefintion;
  JupSchema2.object3dModel = object3dModelObjectTypeDefintion;
  JupSchema2.itemType = itemTypeObjectTypeDefintion;
  JupSchema2.building = buildingObjectTypeDefintion;
  JupSchema2.mapScale = mapScaleObjectTypeDefintion;
  JupSchema2.structure = structureObjectTypeDefintion;
  JupSchema2.structurePoint = structurePointObjectTypeDefintion;
  JupSchema2.floor = floorObjectTypeDefintion;
  JupSchema2.distributionCostType = distributionCostTypeObjectTypeDefintion;
  JupSchema2.roomTypeGroup = roomTypeGroupObjectTypeDefintion;
  JupSchema2.roomType = roomTypeObjectTypeDefintion;
  JupSchema2.roomTypeGroupToRoomType = roomTypeGroupToRoomTypeObjectTypeDefintion;
  JupSchema2.roomTypeGroupFloor = roomTypeGroupFloorObjectTypeDefintion;
  JupSchema2.roomTypeGroupBuilding = roomTypeGroupBuildingObjectTypeDefintion;
  JupSchema2.costCenter = costCenterObjectTypeDefintion;
  JupSchema2.costCenterBuilding = costCenterBuildingObjectTypeDefintion;
  JupSchema2.costCenterFloor = costCenterFloorObjectTypeDefintion;
  JupSchema2.room = roomObjectTypeDefintion;
  JupSchema2.roomPoint = roomPointObjectTypeDefintion;
  JupSchema2.roomPointRoom = roomPointRoomObjectTypeDefintion;
  JupSchema2.roomPointSegmentType = roomPointSegmentTypeObjectTypeDefintion;
  JupSchema2.roomPointSegment = roomPointSegmentObjectTypeDefintion;
  JupSchema2.itemTypePoint = itemTypePointObjectTypeDefintion;
  JupSchema2.dimensionType = dimensionTypeObjectTypeDefintion;
  JupSchema2.dimension = dimensionObjectTypeDefintion;
  JupSchema2.dimensionRoom = dimensionRoomObjectTypeDefintion;
  JupSchema2.dimensionFloor = dimensionFloorObjectTypeDefintion;
  JupSchema2.dimensionBuilding = dimensionBuildingObjectTypeDefintion;
  JupSchema2.factType = factTypeObjectTypeDefintion;
  JupSchema2.fact = factObjectTypeDefintion;
  JupSchema2.personState = personStateObjectTypeDefintion;
  JupSchema2.personSecurityProfile = personSecurityProfileObjectTypeDefintion;
  JupSchema2.person = personObjectTypeDefintion;
  JupSchema2.personToPersonType = personToPersonTypeObjectTypeDefintion;
  JupSchema2.personToPerson = personToPersonObjectTypeDefintion;
  JupSchema2.roomAffectation = roomAffectationObjectTypeDefintion;
  JupSchema2.workplaceType = workplaceTypeObjectTypeDefintion;
  JupSchema2.workplaceTypeItemType = workplaceTypeItemTypeObjectTypeDefintion;
  JupSchema2.workplace = workplaceObjectTypeDefintion;
  JupSchema2.item = itemObjectTypeDefintion;
  JupSchema2.workplaceAffectation = workplaceAffectationObjectTypeDefintion;
  JupSchema2.organizationFloor = organizationFloorObjectTypeDefintion;
  JupSchema2.organizationBuilding = organizationBuildingObjectTypeDefintion;
  JupSchema2.roomTypeFloor = roomTypeFloorObjectTypeDefintion;
  JupSchema2.roomTypeBuilding = roomTypeBuildingObjectTypeDefintion;
  JupSchema2.itemToPerson = itemToPersonObjectTypeDefintion;
  JupSchema2.personToBuilding = personToBuildingObjectTypeDefintion;
  JupSchema2.dimensionToPerson = dimensionToPersonObjectTypeDefintion;
  JupSchema2.dimensionTypeToBuilding = dimensionTypeToBuildingObjectTypeDefintion;
  JupSchema2.workingLocation = workingLocationObjectTypeDefintion;
  JupSchema2.personWorkingLocation = personWorkingLocationObjectTypeDefintion;
  JupSchema2.personToWorkplaceBooking = personToWorkplaceBookingObjectTypeDefintion;
  JupSchema2.personToRoomBooking = personToRoomBookingObjectTypeDefintion;
  JupSchema2.personToDimensionBooking = personToDimensionBookingObjectTypeDefintion;
  JupSchema2.personCompanyMission = personCompanyMissionObjectTypeDefintion;
  JupSchema2.personCompanyToItemType = personCompanyToItemTypeObjectTypeDefintion;
  JupSchema2.personCompanyToRoomType = personCompanyToRoomTypeObjectTypeDefintion;
  JupSchema2.personCompanyToItem = personCompanyToItemObjectTypeDefintion;
  JupSchema2.legend = legendObjectTypeDefintion;
  JupSchema2.openerPostMessageHost = openerPostMessageHostObjectTypeDefintion;
  JupSchema2.jupObjectType = jupObjectTypeObjectTypeDefintion;
  JupSchema2.jupUiView = jupUiViewObjectTypeDefintion;
  JupSchema2.jupRole = jupRoleObjectTypeDefintion;
  JupSchema2.jupUiOption = jupUiOptionObjectTypeDefintion;
  JupSchema2.jupUiOperation = jupUiOperationObjectTypeDefintion;
  JupSchema2.contentRole = contentRoleObjectTypeDefintion;
  JupSchema2.jupUserCompanyToJupRole = jupUserCompanyToJupRoleObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiView = jupRoleToJupUiViewObjectTypeDefintion;
  JupSchema2.jupRoleToJupObjectType = jupRoleToJupObjectTypeObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiOption = jupRoleToJupUiOptionObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiOperation = jupRoleToJupUiOperationObjectTypeDefintion;
  JupSchema2.contentRoleToBuilding = contentRoleToBuildingObjectTypeDefintion;
  JupSchema2.contentRoleToUserCompany = contentRoleToUserCompanyObjectTypeDefintion;
  JupSchema2.contentRoleToFloor = contentRoleToFloorObjectTypeDefintion;
  JupSchema2.partnerApiCredential = partnerApiCredentialObjectTypeDefintion;
  JupSchema2.apiUser = apiUserObjectTypeDefintion;
  JupSchema2.apiUserToJupRole = apiUserToJupRoleObjectTypeDefintion;
  JupSchema2.apiUserToContentRole = apiUserToContentRoleObjectTypeDefintion;
  JupSchema2.jupUiTenantOperation = jupUiTenantOperationObjectTypeDefintion;
  JupSchema2.contentRoleToJupUiTenantOperation = contentRoleToJupUiTenantOperationObjectTypeDefintion;
  JupSchema2.authentificationConnection = authentificationConnectionObjectTypeDefintion;
  JupSchema2.userRegistrationTenantRule = userRegistrationTenantRuleObjectTypeDefintion;
  JupSchema2.userRegistrationTenantRuleToJupRole = userRegistrationTenantRuleToJupRoleObjectTypeDefintion;
  JupSchema2.userRegistrationTenantRuleToContentRole = userRegistrationTenantRuleToContentRoleObjectTypeDefintion;
  JupSchema2.partnerExportMappingConfiguration = partnerExportMappingConfigurationObjectTypeDefintion;
  JupSchema2.partnerExportMapping = partnerExportMappingObjectTypeDefintion;
  JupSchema2.partnerExportMappingToRoomType = partnerExportMappingToRoomTypeObjectTypeDefintion;
  JupSchema2.partnerExportMappingConfigurationToFloor = partnerExportMappingConfigurationToFloorObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiLayout = jupRoleToJupUiLayoutObjectTypeDefintion;
  JupSchema2.itemFact = itemFactObjectTypeDefintion;
  JupSchema2.featureFamily = featureFamilyObjectTypeDefintion;
  JupSchema2.featureGroup = featureGroupObjectTypeDefintion;
  JupSchema2.feature = featureObjectTypeDefintion;
  JupSchema2.objectTypes = [
    JupSchema2.occupancyStatus,
    JupSchema2.user,
    JupSchema2.userRefreshToken,
    JupSchema2.companyType,
    JupSchema2.company,
    JupSchema2.campus,
    JupSchema2.roomConnectorType,
    JupSchema2.roomConnector,
    JupSchema2.userCompany,
    JupSchema2.personGender,
    JupSchema2.personCompany,
    JupSchema2.jupUiLayout,
    JupSchema2.buildingType,
    JupSchema2.organization,
    JupSchema2.itemTypeFamily,
    JupSchema2.manufacturer,
    JupSchema2.object3dModel,
    JupSchema2.itemType,
    JupSchema2.building,
    JupSchema2.mapScale,
    JupSchema2.structure,
    JupSchema2.structurePoint,
    JupSchema2.floor,
    JupSchema2.distributionCostType,
    JupSchema2.roomTypeGroup,
    JupSchema2.roomType,
    JupSchema2.roomTypeGroupToRoomType,
    JupSchema2.roomTypeGroupFloor,
    JupSchema2.roomTypeGroupBuilding,
    JupSchema2.costCenter,
    JupSchema2.costCenterBuilding,
    JupSchema2.costCenterFloor,
    JupSchema2.room,
    JupSchema2.roomPoint,
    JupSchema2.roomPointRoom,
    JupSchema2.roomPointSegmentType,
    JupSchema2.roomPointSegment,
    JupSchema2.itemTypePoint,
    JupSchema2.dimensionType,
    JupSchema2.dimension,
    JupSchema2.dimensionRoom,
    JupSchema2.dimensionFloor,
    JupSchema2.dimensionBuilding,
    JupSchema2.factType,
    JupSchema2.fact,
    JupSchema2.personState,
    JupSchema2.personSecurityProfile,
    JupSchema2.person,
    JupSchema2.personToPersonType,
    JupSchema2.personToPerson,
    JupSchema2.roomAffectation,
    JupSchema2.workplaceType,
    JupSchema2.workplaceTypeItemType,
    JupSchema2.workplace,
    JupSchema2.item,
    JupSchema2.workplaceAffectation,
    JupSchema2.organizationFloor,
    JupSchema2.organizationBuilding,
    JupSchema2.roomTypeFloor,
    JupSchema2.roomTypeBuilding,
    JupSchema2.itemToPerson,
    JupSchema2.personToBuilding,
    JupSchema2.dimensionToPerson,
    JupSchema2.dimensionTypeToBuilding,
    JupSchema2.workingLocation,
    JupSchema2.personWorkingLocation,
    JupSchema2.personToWorkplaceBooking,
    JupSchema2.personToRoomBooking,
    JupSchema2.personToDimensionBooking,
    JupSchema2.personCompanyMission,
    JupSchema2.personCompanyToItemType,
    JupSchema2.personCompanyToRoomType,
    JupSchema2.personCompanyToItem,
    JupSchema2.legend,
    JupSchema2.openerPostMessageHost,
    JupSchema2.jupObjectType,
    JupSchema2.jupUiView,
    JupSchema2.jupRole,
    JupSchema2.jupUiOption,
    JupSchema2.jupUiOperation,
    JupSchema2.contentRole,
    JupSchema2.jupUserCompanyToJupRole,
    JupSchema2.jupRoleToJupUiView,
    JupSchema2.jupRoleToJupObjectType,
    JupSchema2.jupRoleToJupUiOption,
    JupSchema2.jupRoleToJupUiOperation,
    JupSchema2.contentRoleToBuilding,
    JupSchema2.contentRoleToUserCompany,
    JupSchema2.contentRoleToFloor,
    JupSchema2.partnerApiCredential,
    JupSchema2.apiUser,
    JupSchema2.apiUserToJupRole,
    JupSchema2.apiUserToContentRole,
    JupSchema2.jupUiTenantOperation,
    JupSchema2.contentRoleToJupUiTenantOperation,
    JupSchema2.authentificationConnection,
    JupSchema2.userRegistrationTenantRule,
    JupSchema2.userRegistrationTenantRuleToJupRole,
    JupSchema2.userRegistrationTenantRuleToContentRole,
    JupSchema2.partnerExportMappingConfiguration,
    JupSchema2.partnerExportMapping,
    JupSchema2.partnerExportMappingToRoomType,
    JupSchema2.partnerExportMappingConfigurationToFloor,
    JupSchema2.jupRoleToJupUiLayout,
    JupSchema2.itemFact,
    JupSchema2.featureFamily,
    JupSchema2.featureGroup,
    JupSchema2.feature
  ];
  JupSchema2.objectTypesBySingular = {
    occupancyStatus: JupSchema2.occupancyStatus,
    user: JupSchema2.user,
    userRefreshToken: JupSchema2.userRefreshToken,
    companyType: JupSchema2.companyType,
    company: JupSchema2.company,
    campus: JupSchema2.campus,
    roomConnectorType: JupSchema2.roomConnectorType,
    roomConnector: JupSchema2.roomConnector,
    userCompany: JupSchema2.userCompany,
    personGender: JupSchema2.personGender,
    personCompany: JupSchema2.personCompany,
    jupUiLayout: JupSchema2.jupUiLayout,
    buildingType: JupSchema2.buildingType,
    organization: JupSchema2.organization,
    itemTypeFamily: JupSchema2.itemTypeFamily,
    manufacturer: JupSchema2.manufacturer,
    object3dModel: JupSchema2.object3dModel,
    itemType: JupSchema2.itemType,
    building: JupSchema2.building,
    mapScale: JupSchema2.mapScale,
    structure: JupSchema2.structure,
    structurePoint: JupSchema2.structurePoint,
    floor: JupSchema2.floor,
    distributionCostType: JupSchema2.distributionCostType,
    roomTypeGroup: JupSchema2.roomTypeGroup,
    roomType: JupSchema2.roomType,
    roomTypeGroupToRoomType: JupSchema2.roomTypeGroupToRoomType,
    roomTypeGroupFloor: JupSchema2.roomTypeGroupFloor,
    roomTypeGroupBuilding: JupSchema2.roomTypeGroupBuilding,
    costCenter: JupSchema2.costCenter,
    costCenterBuilding: JupSchema2.costCenterBuilding,
    costCenterFloor: JupSchema2.costCenterFloor,
    room: JupSchema2.room,
    roomPoint: JupSchema2.roomPoint,
    roomPointRoom: JupSchema2.roomPointRoom,
    roomPointSegmentType: JupSchema2.roomPointSegmentType,
    roomPointSegment: JupSchema2.roomPointSegment,
    itemTypePoint: JupSchema2.itemTypePoint,
    dimensionType: JupSchema2.dimensionType,
    dimension: JupSchema2.dimension,
    dimensionRoom: JupSchema2.dimensionRoom,
    dimensionFloor: JupSchema2.dimensionFloor,
    dimensionBuilding: JupSchema2.dimensionBuilding,
    factType: JupSchema2.factType,
    fact: JupSchema2.fact,
    personState: JupSchema2.personState,
    personSecurityProfile: JupSchema2.personSecurityProfile,
    person: JupSchema2.person,
    personToPersonType: JupSchema2.personToPersonType,
    personToPerson: JupSchema2.personToPerson,
    roomAffectation: JupSchema2.roomAffectation,
    workplaceType: JupSchema2.workplaceType,
    workplaceTypeItemType: JupSchema2.workplaceTypeItemType,
    workplace: JupSchema2.workplace,
    item: JupSchema2.item,
    workplaceAffectation: JupSchema2.workplaceAffectation,
    organizationFloor: JupSchema2.organizationFloor,
    organizationBuilding: JupSchema2.organizationBuilding,
    roomTypeFloor: JupSchema2.roomTypeFloor,
    roomTypeBuilding: JupSchema2.roomTypeBuilding,
    itemToPerson: JupSchema2.itemToPerson,
    personToBuilding: JupSchema2.personToBuilding,
    dimensionToPerson: JupSchema2.dimensionToPerson,
    dimensionTypeToBuilding: JupSchema2.dimensionTypeToBuilding,
    workingLocation: JupSchema2.workingLocation,
    personWorkingLocation: JupSchema2.personWorkingLocation,
    personToWorkplaceBooking: JupSchema2.personToWorkplaceBooking,
    personToRoomBooking: JupSchema2.personToRoomBooking,
    personToDimensionBooking: JupSchema2.personToDimensionBooking,
    personCompanyMission: JupSchema2.personCompanyMission,
    personCompanyToItemType: JupSchema2.personCompanyToItemType,
    personCompanyToRoomType: JupSchema2.personCompanyToRoomType,
    personCompanyToItem: JupSchema2.personCompanyToItem,
    legend: JupSchema2.legend,
    openerPostMessageHost: JupSchema2.openerPostMessageHost,
    jupObjectType: JupSchema2.jupObjectType,
    jupUiView: JupSchema2.jupUiView,
    jupRole: JupSchema2.jupRole,
    jupUiOption: JupSchema2.jupUiOption,
    jupUiOperation: JupSchema2.jupUiOperation,
    contentRole: JupSchema2.contentRole,
    jupUserCompanyToJupRole: JupSchema2.jupUserCompanyToJupRole,
    jupRoleToJupUiView: JupSchema2.jupRoleToJupUiView,
    jupRoleToJupObjectType: JupSchema2.jupRoleToJupObjectType,
    jupRoleToJupUiOption: JupSchema2.jupRoleToJupUiOption,
    jupRoleToJupUiOperation: JupSchema2.jupRoleToJupUiOperation,
    contentRoleToBuilding: JupSchema2.contentRoleToBuilding,
    contentRoleToUserCompany: JupSchema2.contentRoleToUserCompany,
    contentRoleToFloor: JupSchema2.contentRoleToFloor,
    partnerApiCredential: JupSchema2.partnerApiCredential,
    apiUser: JupSchema2.apiUser,
    apiUserToJupRole: JupSchema2.apiUserToJupRole,
    apiUserToContentRole: JupSchema2.apiUserToContentRole,
    jupUiTenantOperation: JupSchema2.jupUiTenantOperation,
    contentRoleToJupUiTenantOperation: JupSchema2.contentRoleToJupUiTenantOperation,
    authentificationConnection: JupSchema2.authentificationConnection,
    userRegistrationTenantRule: JupSchema2.userRegistrationTenantRule,
    userRegistrationTenantRuleToJupRole: JupSchema2.userRegistrationTenantRuleToJupRole,
    userRegistrationTenantRuleToContentRole: JupSchema2.userRegistrationTenantRuleToContentRole,
    partnerExportMappingConfiguration: JupSchema2.partnerExportMappingConfiguration,
    partnerExportMapping: JupSchema2.partnerExportMapping,
    partnerExportMappingToRoomType: JupSchema2.partnerExportMappingToRoomType,
    partnerExportMappingConfigurationToFloor: JupSchema2.partnerExportMappingConfigurationToFloor,
    jupRoleToJupUiLayout: JupSchema2.jupRoleToJupUiLayout,
    itemFact: JupSchema2.itemFact,
    featureFamily: JupSchema2.featureFamily,
    featureGroup: JupSchema2.featureGroup,
    feature: JupSchema2.feature
  };
})(JupSchema || (JupSchema = {}));
var JupSchema;

// src/core/metaModel/objectTypeDefinition.ts
function getObjectTypeDefinitionByName(objetTypeName) {
  return JupSchema[objetTypeName];
}
__name(getObjectTypeDefinitionByName, "getObjectTypeDefinitionByName");
function getAllObjectTypeDefinitions() {
  return JupSchema.objectTypes;
}
__name(getAllObjectTypeDefinitions, "getAllObjectTypeDefinitions");

// src/core/metaModel/propertyType/helper.ts
function getObjectTypeDefintionFromCamelizedName(objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  if (!otDef) {
    throw new Error(`impossible to find object type with camedlized name <${objectTypeName}>`);
  }
  return otDef;
}
__name(getObjectTypeDefintionFromCamelizedName, "getObjectTypeDefintionFromCamelizedName");
function getPropertyTypeByName(objectTypeName, propertyTypeName) {
  const objectTypeDefinition = getObjectTypeDefinitionByName(objectTypeName);
  const pt = objectTypeDefinition.propertiesByName[propertyTypeName];
  if (pt) {
    return pt;
  }
  throw new Error(`property type name not found (${propertyTypeName}) for object type (${objectTypeDefinition.camelized.singular})`);
}
__name(getPropertyTypeByName, "getPropertyTypeByName");
function getObjectTypePropertyTypesWithFilter(objectTypeName, filters) {
  return Object.values(getObjectTypeDefinitionByName(objectTypeName).propertiesByName).filter((p) => filters.filter((f) => f(p)).length > 0);
}
__name(getObjectTypePropertyTypesWithFilter, "getObjectTypePropertyTypesWithFilter");

// src/core/metaModel/propertyTypes.codes.helper.ts
function getPropertyTypeByCode(code) {
  const [objectTypeName, propertyName] = code.split(":");
  const otDef = getObjectTypeDefintionFromCamelizedName(objectTypeName);
  const propertyType = getPropertyTypeByName(otDef.name, propertyName);
  return propertyType;
}
__name(getPropertyTypeByCode, "getPropertyTypeByCode");

// src/front/jup/Application/Recoil/RecoilContext.tsx
var import_react = __toESM(require("react"));
var import_recoil = require("recoil");
function SetupRecoilContext(props) {
  const { defaultLanguage, I18nContext } = props;
  return /* @__PURE__ */ import_react.default.createElement(import_recoil.RecoilRoot, null, /* @__PURE__ */ import_react.default.createElement(I18nContext, {
    defaultLanguage
  }, props.children));
}
__name(SetupRecoilContext, "SetupRecoilContext");

// src/front/jup/Entities/Entity/PropertyTypeMandatoryLabel.tsx
var import_material = require("@mui/material");
var import_react4 = __toESM(require("react"));

// src/front/jup/Entities/Entity/PropertyTypeIcons/PropertyTypeMandatoryIcon.tsx
var import_icons_material = require("@mui/icons-material");
var import_react2 = __toESM(require("react"));
var PropertyTypeMandatoryIcon = /* @__PURE__ */ import_react2.default.forwardRef((props, ref) => /* @__PURE__ */ import_react2.default.createElement(import_icons_material.NewReleases, {
  ref,
  ...props
}));

// src/front/jup/Entities/Entity/PropertyTypeIcons/PropertyTypeMandatoryText.tsx
var import_react3 = __toESM(require("react"));

// src/front/jup/I18n/i18n.state.ts
var import_recoil3 = require("recoil");

// src/front/jup/I18n/i18n.recoil.ts
var import_recoil2 = require("recoil");
var polyglotApiAtom = (0, import_recoil2.atom)({
  key: "polyglotApiAtom",
  default: void 0
});

// src/front/jup/I18n/i18n.state.ts
function useI18nApiOptional() {
  return (0, import_recoil3.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(polyglotApiAtom);
}
__name(useI18nApiOptional, "useI18nApiOptional");
function useI18nApi() {
  const i18n = useI18nApiOptional();
  if (!i18n) {
    throw new Error("i18n not initialized in state");
  }
  return i18n;
}
__name(useI18nApi, "useI18nApi");
function useGlobalTranslationCode() {
  const i18n = useI18nApi();
  return i18n.locale;
}
__name(useGlobalTranslationCode, "useGlobalTranslationCode");

// src/core/utils/stringUtils.ts
var pluralize = __toESM(require("pluralize"));
var toUnderscore = /* @__PURE__ */ __name((input) => {
  return input.replace(/([A-Z])/g, ($1) => "_" + $1.toLowerCase());
}, "toUnderscore");
var toPlural = /* @__PURE__ */ __name((s2) => {
  return pluralize.plural(s2);
}, "toPlural");
var singularize = /* @__PURE__ */ __name((s2) => {
  return pluralize.singular(s2);
}, "singularize");
function capitalizeFirstLetter(s2) {
  return s2.charAt(0).toUpperCase() + s2.slice(1);
}
__name(capitalizeFirstLetter, "capitalizeFirstLetter");

// src/core/metaModel/shared/propertyType.models.ts
var jupKeyIdSuffix = "Id";

// src/front/jup/AutoSchema/AutoSchema.ts
function getTargetObjectTypeCapitalizedName(propertyType) {
  const { type, name } = propertyType;
  if ([
    "belongs-to"
  ].includes(type)) {
    return capitalizeFirstLetter(name);
  }
  if ([
    "has-many-paginated",
    "has-many"
  ].includes(type)) {
    return singularize(capitalizeFirstLetter(name));
  }
  if ([
    "foreign-key"
  ].includes(type)) {
    const regexp = new RegExp(`${jupKeyIdSuffix}$`, "gi");
    return capitalizeFirstLetter(name.replace(regexp, ""));
  }
}
__name(getTargetObjectTypeCapitalizedName, "getTargetObjectTypeCapitalizedName");

// src/core/tenant/tenant.ts
var tenantInfo = {
  objectType: "company",
  idProperty: "companyId"
};

// src/core/metaModel/propertyType/propertyTypes.ts
function includeJupType(list, type) {
  return list.includes(type);
}
__name(includeJupType, "includeJupType");
function isPropertyTypeScalar(propertyType) {
  const { type } = propertyType;
  return !includeJupType([
    "belongs-to",
    "has-many-paginated",
    "has-many"
  ], type);
}
__name(isPropertyTypeScalar, "isPropertyTypeScalar");
function isPropertyTypeId(propertyType) {
  const { type } = propertyType;
  if (includeJupType([
    "primary-key",
    "foreign-key"
  ], type)) {
    return true;
  }
  return false;
}
__name(isPropertyTypeId, "isPropertyTypeId");
function isPropertyTypeBelongsTo(propertyType) {
  const { type } = propertyType;
  return includeJupType([
    "belongs-to"
  ], type);
}
__name(isPropertyTypeBelongsTo, "isPropertyTypeBelongsTo");
function isPropertyTypeHasMany(propertyType) {
  const { type } = propertyType;
  return includeJupType([
    "has-many",
    "has-many-paginated"
  ], type);
}
__name(isPropertyTypeHasMany, "isPropertyTypeHasMany");
function getTargetObjectTypeDefinition(propertyType) {
  const { association } = propertyType;
  if (association) {
    return getObjectTypeDefinitionByName(association.targetModelName);
  }
  throw new Error(`missing target property type for property <${propertyType.name}> on ${propertyType.objectTypeName}`);
}
__name(getTargetObjectTypeDefinition, "getTargetObjectTypeDefinition");

// src/front/jup/Entities/Modules/EntityModule/Components/plural.ts
function objectTypePluralLabel(translation, objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  if (!otDef) {
    return toPlural(objectTypeName);
  }
  return translation(`models.${otDef.capitalized.singular}.plural`);
}
__name(objectTypePluralLabel, "objectTypePluralLabel");
function objectTypeCapitalizedPluralLabel(translation, objectTypeName) {
  return capitalizeFirstLetter(objectTypePluralLabel(translation, objectTypeName));
}
__name(objectTypeCapitalizedPluralLabel, "objectTypeCapitalizedPluralLabel");

// src/back/ModelDefinitions/schema.helper.ts
var technicalPropertyTypeNames = {
  externalId: "externalId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  userCompanyCreatedBy: "userCompanyCreatedBy",
  userCompanyCreatedById: "userCompanyCreatedById",
  userCompanyUpdatedBy: "userCompanyUpdatedBy",
  userCompanyUpdatedById: "userCompanyUpdatedById"
};
var technicalPropertyTypes = [
  technicalPropertyTypeNames.externalId,
  technicalPropertyTypeNames.createdAt,
  technicalPropertyTypeNames.updatedAt,
  technicalPropertyTypeNames.userCompanyCreatedBy,
  technicalPropertyTypeNames.userCompanyCreatedById,
  technicalPropertyTypeNames.userCompanyUpdatedBy,
  technicalPropertyTypeNames.userCompanyUpdatedById
];

// src/back/Surfy/calulated.properties.models.ts
var calculatedSpacesPropertyNames = [
  "workplacesCount",
  "workplacesRatio",
  "freeWorkplacesCount",
  "flexWorkplacesCount",
  "flexRatio",
  "sharedWorkplacesCount",
  "sharedWorkplacesRatio",
  "transitWorkplacesCount",
  "seatsCount",
  "totalCapacityCount",
  "totalCapacityWorkplaceCountRatio",
  "carbonFootprint"
];
var calculatedPeoplePropertyNames = [
  "totalPeopleCount",
  "peopleRatio",
  "expansionRatio",
  "seatsPeopleRatio",
  "occupancyRate"
];
var calculatedInfoPropertyNames = [
  ...calculatedPeoplePropertyNames,
  ...calculatedSpacesPropertyNames
];
var roomPropertyNames = [
  "roomsCount",
  "roomsArea"
];
var calculatedGlobalPropertyNames = [
  ...roomPropertyNames,
  ...calculatedInfoPropertyNames
];
var allCalculatedPropertiesForTranslations = [
  ...calculatedGlobalPropertyNames,
  "peopleCount"
];
var calculatedGlobalSpacesPropertyNames = [
  ...roomPropertyNames,
  ...calculatedSpacesPropertyNames
];

// src/front/jup/Entities/Modules/EntityModule/Components/singular.ts
function getObjectTypeSingularLabel(translation, objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  if (!otDef) {
    return objectTypeName;
  }
  return translation(`models.${otDef.capitalized.singular}.singular`);
}
__name(getObjectTypeSingularLabel, "getObjectTypeSingularLabel");
function getObjectTypeCapitalizedSingularLabel(translation, objectTypeName) {
  return capitalizeFirstLetter(getObjectTypeSingularLabel(translation, objectTypeName));
}
__name(getObjectTypeCapitalizedSingularLabel, "getObjectTypeCapitalizedSingularLabel");

// src/front/jup/Entities/Properties/Fields.ts
function getPropertyTypeLabelWithTranslation(i18n, propertyType) {
  const { objectTypeName, type, name } = propertyType;
  const objectTypeDefinition = getObjectTypeDefinitionByName(objectTypeName);
  if (technicalPropertyTypes.includes(name)) {
    return i18n.translate(`entity.properties.${name}.label`);
  }
  const defaultKey = `models.${objectTypeDefinition.capitalized.singular}.properties.${name}.label`;
  const d = i18n.translate(defaultKey);
  if (i18n.has(defaultKey)) {
    return d;
  }
  if (allCalculatedPropertiesForTranslations.includes(name)) {
    const key = `calculatedProperties.properties.${name}.label`;
    if (i18n.has(key)) {
      return i18n.translate(key);
    }
  }
  const belongsToCapitalizedObjectTypeName = getTargetObjectTypeCapitalizedName(propertyType);
  if (isPropertyTypeBelongsTo(propertyType)) {
    return capitalizeFirstLetter(i18n.translate(`models.${belongsToCapitalizedObjectTypeName}.singular`));
  }
  if (type === "foreign-key") {
    const fkKey = `models.${belongsToCapitalizedObjectTypeName}.properties.id.label`;
    if (i18n.has(fkKey)) {
      return i18n.translate(fkKey);
    } else if (propertyType.association?.targetModelName) {
      return `Id (${getObjectTypeSingularLabel(i18n.translate, propertyType.association?.targetModelName)})`;
    } else {
      return "Id (?)";
    }
  }
  if (isPropertyTypeHasMany(propertyType)) {
    const targetObjectType = getTargetObjectTypeDefinition(propertyType);
    return objectTypeCapitalizedPluralLabel(i18n.translate, targetObjectType.name);
  }
  return d || `<${name}>`;
}
__name(getPropertyTypeLabelWithTranslation, "getPropertyTypeLabelWithTranslation");

// src/front/jup/Entities/Entity/PropertyTypeIcons/PropertyTypeMandatoryText.tsx
function PropertyTypeMandatoryText(props) {
  const { propertyType } = props;
  const i18n = useI18nApi();
  return /* @__PURE__ */ import_react3.default.createElement("span", null, getPropertyTypeMandatoryText(i18n, propertyType));
}
__name(PropertyTypeMandatoryText, "PropertyTypeMandatoryText");
function getPropertyTypeMandatoryText(i18nApi, propertyType) {
  return i18nApi.translate("entity.properties.mandatory", {
    name: getPropertyTypeLabelWithTranslation(i18nApi, propertyType)
  });
}
__name(getPropertyTypeMandatoryText, "getPropertyTypeMandatoryText");

// src/front/jup/Entities/Entity/PropertyTypeMandatoryLabel.tsx
function PropertyTypeMandatoryLabel(props) {
  const { propertyType } = props;
  return /* @__PURE__ */ import_react4.default.createElement(import_material.Typography, {
    variant: "caption",
    style: {
      display: "flex",
      alignItems: "center"
    }
  }, /* @__PURE__ */ import_react4.default.createElement(PropertyTypeMandatoryIcon, {
    sx: {
      marginRight: 1
    }
  }), /* @__PURE__ */ import_react4.default.createElement(PropertyTypeMandatoryText, {
    propertyType
  }));
}
__name(PropertyTypeMandatoryLabel, "PropertyTypeMandatoryLabel");

// src/front/jup/Entities/Properties/PropertyTypeLabel.tsx
var import_react5 = __toESM(require("react"));

// src/front/jup/Entities/Properties/Fields/units/units.helper.ts
function getTranslatedUnit(translation, unit) {
  if (unit) {
    return translation(`${unit.type}.${unit.value}`);
  }
}
__name(getTranslatedUnit, "getTranslatedUnit");

// src/front/jup/Entities/Properties/PropertyTypeLabel.tsx
var PropertyTypeLabel = /* @__PURE__ */ import_react5.default.forwardRef((props, ref) => {
  const { propertyType, displayUnit, style, ...otherProps } = props;
  const i18n = useI18nApi();
  const unit = displayUnit && propertyType.options.unit && ` (${getTranslatedUnit(i18n.translate, propertyType.options.unit)})`;
  return /* @__PURE__ */ import_react5.default.createElement("span", {
    ref,
    style,
    ...otherProps
  }, getPropertyTypeLabelWithTranslation(i18n, props.propertyType), unit);
});

// src/core/constants/version.cookie.constants.ts
var versionCookieKeyName = "x-version";

// src/version.json
var version = {
  major: 3,
  minor: 4,
  build: 61
};

// src/back/Tracking/version.ts
function getAppVersion() {
  const { major, minor, build } = version;
  return `${major}.${minor}.${build}`;
}
__name(getAppVersion, "getAppVersion");
var appVersion = getAppVersion();

// src/front/jup/Application/Recoil/i18n/I18NHelpContext.tsx
var import_react6 = require("react");
var import_recoil4 = require("recoil");

// src/front/jup/I18n/PolyglotHelpApi.ts
var import_node_polyglot2 = __toESM(require_node_polyglot());

// src/front/jup/LocalMemory/LocalMemory.ts
var prefix = "gqlb";
var LocalMemory = class {
  static {
    __name(this, "LocalMemory");
  }
  memoryKey;
  props;
  defaultValue;
  constructor(props, key, defaultValue) {
    this.memoryKey = key !== void 0 ? `${prefix}-${key}` : prefix;
    this.props = props;
    this.defaultValue = defaultValue;
  }
  getKey(k) {
    return `${this.memoryKey}-${k}`;
  }
  get memory() {
    const { localStorage } = this.props;
    if (localStorage) {
      const memory = localStorage.getItem(this.memoryKey);
      if (memory === null) {
        return this.defaultValue;
      }
      const m = JSON.parse(memory);
      return m;
    }
  }
  set(m) {
    const memory = {
      ...this.memory,
      ...m
    };
    const { localStorage } = this.props;
    return localStorage && localStorage.setItem(this.memoryKey, JSON.stringify(memory));
  }
  seta(key, o) {
    const { localStorage } = this.props;
    if (localStorage) {
      if (o === void 0) {
        localStorage.removeItem(this.getKey(`${key}`));
      } else {
        localStorage.setItem(this.getKey(`${key}`), JSON.stringify(o));
      }
    }
  }
  geta(key) {
    const { localStorage } = this.props;
    if (localStorage) {
      const memory = localStorage.getItem(this.getKey(`${key}`));
      return memory ? JSON.parse(memory) : void 0;
    }
  }
};

// src/core/helper.ts
var import_global = __toESM(require_window());
var import_document = __toESM(require_document2());
function getNavigator() {
  if (typeof navigator !== "undefined") {
    return navigator;
  }
}
__name(getNavigator, "getNavigator");
function getLocalStorage() {
  const window3 = getWindow();
  if (window3?.localStorage) {
    return window3.localStorage;
  }
}
__name(getLocalStorage, "getLocalStorage");
function getWindow() {
  return import_global.default;
}
__name(getWindow, "getWindow");
function getDocument() {
  return import_document.default;
}
__name(getDocument, "getDocument");
function getDocumentLocation() {
  return getDocument()?.location;
}
__name(getDocumentLocation, "getDocumentLocation");

// src/front/jup/LocalMemory/GQLBMemory.ts
var GQLBMemory = class GQLBMemory2 extends LocalMemory {
  static {
    __name(this, "GQLBMemory");
  }
  set language(ln) {
    this.seta("language", ln);
  }
  get language() {
    return this.geta("language");
  }
};
var gqlbMemory = new GQLBMemory({
  localStorage: getLocalStorage()
}, "gqlb", {});

// src/front/jup/I18n/i18n.ts
var import_locale6 = require("@mui/material/locale");

// node_modules/.pnpm/@babel+runtime@7.26.0/node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n2) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n2[r] = t[r]);
    }
    return n2;
  }, _extends.apply(null, arguments);
}
__name(_extends, "_extends");

// node_modules/.pnpm/@mui+x-date-pickers@7.23.2_@emotion+react@11.14.0_@types+react@18.3.1_react@18.3.1__@em_0ebba1d649418e7f9f6b41ba38fc8b6c/node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
var getPickersLocalization = /* @__PURE__ */ __name((pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
}, "getPickersLocalization");

// node_modules/.pnpm/@mui+x-date-pickers@7.23.2_@emotion+react@11.14.0_@types+react@18.3.1_react@18.3.1__@em_0ebba1d649418e7f9f6b41ba38fc8b6c/node_modules/@mui/x-date-pickers/locales/enUS.js
var enUSPickers = {
  // Calendar navigation
  previousMonth: "Previous month",
  nextMonth: "Next month",
  // View navigation
  openPreviousView: "Open previous view",
  openNextView: "Open next view",
  calendarViewSwitchingButtonAriaLabel: /* @__PURE__ */ __name((view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view", "calendarViewSwitchingButtonAriaLabel"),
  // DateRange labels
  start: "Start",
  end: "End",
  startDate: "Start date",
  startTime: "Start time",
  endDate: "End date",
  endTime: "End time",
  // Action bar
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  // Toolbar titles
  datePickerToolbarTitle: "Select date",
  dateTimePickerToolbarTitle: "Select date & time",
  timePickerToolbarTitle: "Select time",
  dateRangePickerToolbarTitle: "Select date range",
  // Clock labels
  clockLabelText: /* @__PURE__ */ __name((view, time, utils, formattedTime) => `Select ${view}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "No time selected" : `Selected time is ${formattedTime ?? utils.format(time, "fullTime")}`}`, "clockLabelText"),
  hoursClockNumberText: /* @__PURE__ */ __name((hours) => `${hours} hours`, "hoursClockNumberText"),
  minutesClockNumberText: /* @__PURE__ */ __name((minutes) => `${minutes} minutes`, "minutesClockNumberText"),
  secondsClockNumberText: /* @__PURE__ */ __name((seconds) => `${seconds} seconds`, "secondsClockNumberText"),
  // Digital clock labels
  selectViewText: /* @__PURE__ */ __name((view) => `Select ${view}`, "selectViewText"),
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Week number",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: /* @__PURE__ */ __name((weekNumber) => `Week ${weekNumber}`, "calendarWeekNumberAriaLabelText"),
  calendarWeekNumberText: /* @__PURE__ */ __name((weekNumber) => `${weekNumber}`, "calendarWeekNumberText"),
  // Open picker labels
  openDatePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Choose date, selected date is ${formattedDate ?? utils.format(value, "fullDate")}` : "Choose date", "openDatePickerDialogue"),
  openTimePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Choose time, selected time is ${formattedTime ?? utils.format(value, "fullTime")}` : "Choose time", "openTimePickerDialogue"),
  fieldClearLabel: "Clear",
  // Table labels
  timeTableLabel: "pick time",
  dateTableLabel: "pick date",
  // Field section placeholders
  fieldYearPlaceholder: /* @__PURE__ */ __name((params) => "Y".repeat(params.digitAmount), "fieldYearPlaceholder"),
  fieldMonthPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "MMMM" : "MM", "fieldMonthPlaceholder"),
  fieldDayPlaceholder: /* @__PURE__ */ __name(() => "DD", "fieldDayPlaceholder"),
  fieldWeekDayPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "EEEE" : "EE", "fieldWeekDayPlaceholder"),
  fieldHoursPlaceholder: /* @__PURE__ */ __name(() => "hh", "fieldHoursPlaceholder"),
  fieldMinutesPlaceholder: /* @__PURE__ */ __name(() => "mm", "fieldMinutesPlaceholder"),
  fieldSecondsPlaceholder: /* @__PURE__ */ __name(() => "ss", "fieldSecondsPlaceholder"),
  fieldMeridiemPlaceholder: /* @__PURE__ */ __name(() => "aa", "fieldMeridiemPlaceholder"),
  // View names
  year: "Year",
  month: "Month",
  day: "Day",
  weekDay: "Week day",
  hours: "Hours",
  minutes: "Minutes",
  seconds: "Seconds",
  meridiem: "Meridiem",
  // Common
  empty: "Empty"
};
var enUS = getPickersLocalization(enUSPickers);

// node_modules/.pnpm/@mui+x-date-pickers@7.23.2_@emotion+react@11.14.0_@types+react@18.3.1_react@18.3.1__@em_0ebba1d649418e7f9f6b41ba38fc8b6c/node_modules/@mui/x-date-pickers/locales/esES.js
var views = {
  hours: "Horas",
  minutes: "Minutos",
  seconds: "Segundos",
  meridiem: "Meridiano"
};
var esESPickers = {
  // Calendar navigation
  previousMonth: "Mes anterior",
  nextMonth: "Mes siguiente",
  // View navigation
  openPreviousView: "Abrir la \xFAltima vista",
  openNextView: "Abrir la siguiente vista",
  calendarViewSwitchingButtonAriaLabel: /* @__PURE__ */ __name((view) => view === "year" ? "la vista anual est\xE1 abierta, cambie a la vista de calendario" : "la vista de calendario est\xE1 abierta, cambie a la vista anual", "calendarViewSwitchingButtonAriaLabel"),
  // DateRange labels
  start: "Empezar",
  end: "Terminar",
  startDate: "Fecha inicio",
  startTime: "Hora inicio",
  endDate: "Fecha final",
  endTime: "Hora final",
  // Action bar
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpiar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoy",
  // Toolbar titles
  datePickerToolbarTitle: "Seleccionar fecha",
  dateTimePickerToolbarTitle: "Seleccionar fecha y hora",
  timePickerToolbarTitle: "Seleccionar hora",
  dateRangePickerToolbarTitle: "Seleccionar rango de fecha",
  // Clock labels
  clockLabelText: /* @__PURE__ */ __name((view, time, utils, formattedTime) => `Seleccione ${views[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "No hay hora seleccionada" : `La hora seleccionada es ${formattedTime ?? utils.format(time, "fullTime")}`}`, "clockLabelText"),
  hoursClockNumberText: /* @__PURE__ */ __name((hours) => `${hours} horas`, "hoursClockNumberText"),
  minutesClockNumberText: /* @__PURE__ */ __name((minutes) => `${minutes} minutos`, "minutesClockNumberText"),
  secondsClockNumberText: /* @__PURE__ */ __name((seconds) => `${seconds} segundos`, "secondsClockNumberText"),
  // Digital clock labels
  selectViewText: /* @__PURE__ */ __name((view) => `Seleccionar ${views[view]}`, "selectViewText"),
  // Calendar labels
  calendarWeekNumberHeaderLabel: "N\xFAmero de semana",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: /* @__PURE__ */ __name((weekNumber) => `Semana ${weekNumber}`, "calendarWeekNumberAriaLabelText"),
  calendarWeekNumberText: /* @__PURE__ */ __name((weekNumber) => `${weekNumber}`, "calendarWeekNumberText"),
  // Open picker labels
  openDatePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Elige fecha, la fecha elegida es ${formattedDate ?? utils.format(value, "fullDate")}` : "Elige fecha", "openDatePickerDialogue"),
  openTimePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Elige hora, la hora elegida es ${formattedTime ?? utils.format(value, "fullTime")}` : "Elige hora", "openTimePickerDialogue"),
  fieldClearLabel: "Limpiar valor",
  // Table labels
  timeTableLabel: "elige hora",
  dateTableLabel: "elige fecha",
  // Field section placeholders
  fieldYearPlaceholder: /* @__PURE__ */ __name((params) => "A".repeat(params.digitAmount), "fieldYearPlaceholder"),
  fieldMonthPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "MMMM" : "MM", "fieldMonthPlaceholder"),
  fieldDayPlaceholder: /* @__PURE__ */ __name(() => "DD", "fieldDayPlaceholder"),
  fieldWeekDayPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "EEEE" : "EE", "fieldWeekDayPlaceholder"),
  fieldHoursPlaceholder: /* @__PURE__ */ __name(() => "hh", "fieldHoursPlaceholder"),
  fieldMinutesPlaceholder: /* @__PURE__ */ __name(() => "mm", "fieldMinutesPlaceholder"),
  fieldSecondsPlaceholder: /* @__PURE__ */ __name(() => "ss", "fieldSecondsPlaceholder"),
  fieldMeridiemPlaceholder: /* @__PURE__ */ __name(() => "aa", "fieldMeridiemPlaceholder"),
  // View names
  year: "A\xF1o",
  month: "Mes",
  day: "Dia",
  weekDay: "Dia de la semana",
  hours: "Horas",
  minutes: "Minutos",
  seconds: "Segundos",
  meridiem: "Meridiano",
  // Common
  empty: "Vac\xEDo"
};
var esES = getPickersLocalization(esESPickers);

// node_modules/.pnpm/@mui+x-date-pickers@7.23.2_@emotion+react@11.14.0_@types+react@18.3.1_react@18.3.1__@em_0ebba1d649418e7f9f6b41ba38fc8b6c/node_modules/@mui/x-date-pickers/locales/frFR.js
var views2 = {
  hours: "heures",
  minutes: "minutes",
  seconds: "secondes",
  meridiem: "m\xE9ridien"
};
var frFRPickers = {
  // Calendar navigation
  previousMonth: "Mois pr\xE9c\xE9dent",
  nextMonth: "Mois suivant",
  // View navigation
  openPreviousView: "Ouvrir la vue pr\xE9c\xE9dente",
  openNextView: "Ouvrir la vue suivante",
  calendarViewSwitchingButtonAriaLabel: /* @__PURE__ */ __name((view) => view === "year" ? "La vue ann\xE9e est ouverte, ouvrir la vue calendrier" : "La vue calendrier est ouverte, ouvrir la vue ann\xE9e", "calendarViewSwitchingButtonAriaLabel"),
  // DateRange labels
  start: "D\xE9but",
  end: "Fin",
  startDate: "Date de d\xE9but",
  startTime: "Heure de d\xE9but",
  endDate: "Date de fin",
  endTime: "Heure de fin",
  // Action bar
  cancelButtonLabel: "Annuler",
  clearButtonLabel: "Vider",
  okButtonLabel: "OK",
  todayButtonLabel: "Aujourd'hui",
  // Toolbar titles
  datePickerToolbarTitle: "Choisir une date",
  dateTimePickerToolbarTitle: "Choisir la date et l'heure",
  timePickerToolbarTitle: "Choisir l'heure",
  dateRangePickerToolbarTitle: "Choisir la plage de dates",
  // Clock labels
  clockLabelText: /* @__PURE__ */ __name((view, time, utils, formattedTime) => `Choix des ${views2[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "Aucune heure choisie" : `L'heure choisie est ${formattedTime ?? utils.format(time, "fullTime")}`}`, "clockLabelText"),
  hoursClockNumberText: /* @__PURE__ */ __name((hours) => `${hours} heures`, "hoursClockNumberText"),
  minutesClockNumberText: /* @__PURE__ */ __name((minutes) => `${minutes} minutes`, "minutesClockNumberText"),
  secondsClockNumberText: /* @__PURE__ */ __name((seconds) => `${seconds} secondes`, "secondsClockNumberText"),
  // Digital clock labels
  selectViewText: /* @__PURE__ */ __name((view) => `Choisir ${views2[view]}`, "selectViewText"),
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Semaine",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: /* @__PURE__ */ __name((weekNumber) => `Semaine ${weekNumber}`, "calendarWeekNumberAriaLabelText"),
  calendarWeekNumberText: /* @__PURE__ */ __name((weekNumber) => `${weekNumber}`, "calendarWeekNumberText"),
  // Open picker labels
  openDatePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Choisir la date, la date s\xE9lectionn\xE9e est ${formattedDate ?? utils.format(value, "fullDate")}` : "Choisir la date", "openDatePickerDialogue"),
  openTimePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedTime) => formattedTime ? `Choisir l'heure, l'heure s\xE9lectionn\xE9e est ${formattedTime ?? utils.format(value, "fullTime")}` : "Choisir l'heure", "openTimePickerDialogue"),
  fieldClearLabel: "Effacer la valeur",
  // Table labels
  timeTableLabel: "choix de l'heure",
  dateTableLabel: "choix de la date",
  // Field section placeholders
  fieldYearPlaceholder: /* @__PURE__ */ __name((params) => "A".repeat(params.digitAmount), "fieldYearPlaceholder"),
  fieldMonthPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "MMMM" : "MM", "fieldMonthPlaceholder"),
  fieldDayPlaceholder: /* @__PURE__ */ __name(() => "JJ", "fieldDayPlaceholder"),
  fieldWeekDayPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "EEEE" : "EE", "fieldWeekDayPlaceholder"),
  fieldHoursPlaceholder: /* @__PURE__ */ __name(() => "hh", "fieldHoursPlaceholder"),
  fieldMinutesPlaceholder: /* @__PURE__ */ __name(() => "mm", "fieldMinutesPlaceholder"),
  fieldSecondsPlaceholder: /* @__PURE__ */ __name(() => "ss", "fieldSecondsPlaceholder"),
  fieldMeridiemPlaceholder: /* @__PURE__ */ __name(() => "aa", "fieldMeridiemPlaceholder"),
  // View names
  year: "Ann\xE9e",
  month: "Mois",
  day: "Jour",
  weekDay: "Jour de la semaine",
  hours: "Heures",
  minutes: "Minutes",
  seconds: "Secondes",
  meridiem: "M\xE9ridien",
  // Common
  empty: "Vider"
};
var frFR = getPickersLocalization(frFRPickers);

// node_modules/.pnpm/@mui+x-date-pickers@7.23.2_@emotion+react@11.14.0_@types+react@18.3.1_react@18.3.1__@em_0ebba1d649418e7f9f6b41ba38fc8b6c/node_modules/@mui/x-date-pickers/locales/itIT.js
var views3 = {
  hours: "le ore",
  minutes: "i minuti",
  seconds: "i secondi",
  meridiem: "il meridiano"
};
var itITPickers = {
  // Calendar navigation
  previousMonth: "Mese precedente",
  nextMonth: "Mese successivo",
  // View navigation
  openPreviousView: "Apri la vista precedente",
  openNextView: "Apri la vista successiva",
  calendarViewSwitchingButtonAriaLabel: /* @__PURE__ */ __name((view) => view === "year" ? "la vista dell'anno \xE8 aperta, passare alla vista del calendario" : "la vista dell'calendario \xE8 aperta, passare alla vista dell'anno", "calendarViewSwitchingButtonAriaLabel"),
  // DateRange labels
  start: "Inizio",
  end: "Fine",
  startDate: "Data di inizio",
  startTime: "Ora di inizio",
  endDate: "Data di fine",
  endTime: "Ora di fine",
  // Action bar
  cancelButtonLabel: "Cancellare",
  clearButtonLabel: "Sgomberare",
  okButtonLabel: "OK",
  todayButtonLabel: "Oggi",
  // Toolbar titles
  datePickerToolbarTitle: "Seleziona data",
  dateTimePickerToolbarTitle: "Seleziona data e orario",
  timePickerToolbarTitle: "Seleziona orario",
  dateRangePickerToolbarTitle: "Seleziona intervallo di date",
  // Clock labels
  clockLabelText: /* @__PURE__ */ __name((view, time, utils, formattedTime) => `Seleziona ${views3[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "Nessun orario selezionato" : `L'ora selezionata \xE8 ${formattedTime ?? utils.format(time, "fullTime")}`}`, "clockLabelText"),
  hoursClockNumberText: /* @__PURE__ */ __name((hours) => `${hours} ore`, "hoursClockNumberText"),
  minutesClockNumberText: /* @__PURE__ */ __name((minutes) => `${minutes} minuti`, "minutesClockNumberText"),
  secondsClockNumberText: /* @__PURE__ */ __name((seconds) => `${seconds} secondi`, "secondsClockNumberText"),
  // Digital clock labels
  selectViewText: /* @__PURE__ */ __name((view) => `Seleziona ${views3[view]}`, "selectViewText"),
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Numero settimana",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: /* @__PURE__ */ __name((weekNumber) => `Settimana ${weekNumber}`, "calendarWeekNumberAriaLabelText"),
  calendarWeekNumberText: /* @__PURE__ */ __name((weekNumber) => `${weekNumber}`, "calendarWeekNumberText"),
  // Open picker labels
  openDatePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Scegli la data, la data selezionata \xE8 ${formattedDate ?? utils.format(value, "fullDate")}` : "Scegli la data", "openDatePickerDialogue"),
  openTimePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Scegli l'ora, l'ora selezionata \xE8 ${formattedTime ?? utils.format(value, "fullTime")}` : "Scegli l'ora", "openTimePickerDialogue"),
  fieldClearLabel: "Cancella valore",
  // Table labels
  timeTableLabel: "scegli un'ora",
  dateTableLabel: "scegli una data",
  // Field section placeholders
  fieldYearPlaceholder: /* @__PURE__ */ __name((params) => "A".repeat(params.digitAmount), "fieldYearPlaceholder"),
  fieldMonthPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "MMMM" : "MM", "fieldMonthPlaceholder"),
  fieldDayPlaceholder: /* @__PURE__ */ __name(() => "GG", "fieldDayPlaceholder"),
  fieldWeekDayPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "GGGG" : "GG", "fieldWeekDayPlaceholder"),
  fieldHoursPlaceholder: /* @__PURE__ */ __name(() => "hh", "fieldHoursPlaceholder"),
  fieldMinutesPlaceholder: /* @__PURE__ */ __name(() => "mm", "fieldMinutesPlaceholder"),
  fieldSecondsPlaceholder: /* @__PURE__ */ __name(() => "ss", "fieldSecondsPlaceholder"),
  fieldMeridiemPlaceholder: /* @__PURE__ */ __name(() => "aa", "fieldMeridiemPlaceholder"),
  // View names
  year: "Anno",
  month: "Mese",
  day: "Giorno",
  weekDay: "Giorno della settimana",
  hours: "Ore",
  minutes: "Minuti",
  seconds: "Secondi",
  meridiem: "Meridiano",
  // Common
  empty: "Vuoto"
};
var itIT = getPickersLocalization(itITPickers);

// node_modules/.pnpm/@mui+x-date-pickers@7.23.2_@emotion+react@11.14.0_@types+react@18.3.1_react@18.3.1__@em_0ebba1d649418e7f9f6b41ba38fc8b6c/node_modules/@mui/x-date-pickers/locales/nlNL.js
var timeViews = {
  hours: "uren",
  minutes: "minuten",
  seconds: "seconden",
  meridiem: "meridium"
};
var nlNLPickers = {
  // Calendar navigation
  previousMonth: "Vorige maand",
  nextMonth: "Volgende maand",
  // View navigation
  openPreviousView: "Open vorige view",
  openNextView: "Open volgende view",
  calendarViewSwitchingButtonAriaLabel: /* @__PURE__ */ __name((view) => view === "year" ? "jaarweergave is geopend, schakel over naar kalenderweergave" : "kalenderweergave is geopend, switch naar jaarweergave", "calendarViewSwitchingButtonAriaLabel"),
  // DateRange labels
  start: "Start",
  end: "Einde",
  startDate: "Startdatum",
  startTime: "Starttijd",
  endDate: "Einddatum",
  endTime: "Eindtijd",
  // Action bar
  cancelButtonLabel: "Annuleren",
  clearButtonLabel: "Resetten",
  okButtonLabel: "OK",
  todayButtonLabel: "Vandaag",
  // Toolbar titles
  datePickerToolbarTitle: "Selecteer datum",
  dateTimePickerToolbarTitle: "Selecteer datum & tijd",
  timePickerToolbarTitle: "Selecteer tijd",
  dateRangePickerToolbarTitle: "Selecteer datumbereik",
  // Clock labels
  clockLabelText: /* @__PURE__ */ __name((view, time, utils, formattedTime) => `Selecteer ${timeViews[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "Geen tijd geselecteerd" : `Geselecteerde tijd is ${formattedTime ?? utils.format(time, "fullTime")}`}`, "clockLabelText"),
  hoursClockNumberText: /* @__PURE__ */ __name((hours) => `${hours} uren`, "hoursClockNumberText"),
  minutesClockNumberText: /* @__PURE__ */ __name((minutes) => `${minutes} minuten`, "minutesClockNumberText"),
  secondsClockNumberText: /* @__PURE__ */ __name((seconds) => `${seconds} seconden`, "secondsClockNumberText"),
  // Digital clock labels
  selectViewText: /* @__PURE__ */ __name((view) => `Selecteer ${timeViews[view]}`, "selectViewText"),
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Weeknummer",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: /* @__PURE__ */ __name((weekNumber) => `Week ${weekNumber}`, "calendarWeekNumberAriaLabelText"),
  calendarWeekNumberText: /* @__PURE__ */ __name((weekNumber) => `${weekNumber}`, "calendarWeekNumberText"),
  // Open picker labels
  openDatePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Kies datum, geselecteerde datum is ${formattedDate ?? utils.format(value, "fullDate")}` : "Kies datum", "openDatePickerDialogue"),
  openTimePickerDialogue: /* @__PURE__ */ __name((value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Kies tijd, geselecteerde tijd is ${formattedTime ?? utils.format(value, "fullTime")}` : "Kies tijd", "openTimePickerDialogue"),
  fieldClearLabel: "Wissen",
  // Table labels
  timeTableLabel: "kies tijd",
  dateTableLabel: "kies datum",
  // Field section placeholders
  fieldYearPlaceholder: /* @__PURE__ */ __name((params) => "J".repeat(params.digitAmount), "fieldYearPlaceholder"),
  fieldMonthPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "MMMM" : "MM", "fieldMonthPlaceholder"),
  fieldDayPlaceholder: /* @__PURE__ */ __name(() => "DD", "fieldDayPlaceholder"),
  fieldWeekDayPlaceholder: /* @__PURE__ */ __name((params) => params.contentType === "letter" ? "EEEE" : "EE", "fieldWeekDayPlaceholder"),
  fieldHoursPlaceholder: /* @__PURE__ */ __name(() => "uu", "fieldHoursPlaceholder"),
  fieldMinutesPlaceholder: /* @__PURE__ */ __name(() => "mm", "fieldMinutesPlaceholder"),
  fieldSecondsPlaceholder: /* @__PURE__ */ __name(() => "ss", "fieldSecondsPlaceholder"),
  fieldMeridiemPlaceholder: /* @__PURE__ */ __name(() => "aa", "fieldMeridiemPlaceholder"),
  // View names
  year: "Jaar",
  month: "Maand",
  day: "Dag",
  weekDay: "Weekdag",
  hours: "Uren",
  minutes: "Minuten",
  seconds: "Seconden",
  meridiem: "Middag",
  // Common
  empty: "Leeg"
};
var nlNL = getPickersLocalization(nlNLPickers);

// src/front/jup/I18n/i18n.ts
var import_node_polyglot = __toESM(require_node_polyglot());

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/errors.js
var LuxonError = class LuxonError2 extends Error {
  static {
    __name(this, "LuxonError");
  }
};
var InvalidDateTimeError = class extends LuxonError {
  static {
    __name(this, "InvalidDateTimeError");
  }
  constructor(reason) {
    super(`Invalid DateTime: ${reason.toMessage()}`);
  }
};
var InvalidIntervalError = class extends LuxonError {
  static {
    __name(this, "InvalidIntervalError");
  }
  constructor(reason) {
    super(`Invalid Interval: ${reason.toMessage()}`);
  }
};
var InvalidDurationError = class extends LuxonError {
  static {
    __name(this, "InvalidDurationError");
  }
  constructor(reason) {
    super(`Invalid Duration: ${reason.toMessage()}`);
  }
};
var ConflictingSpecificationError = class extends LuxonError {
  static {
    __name(this, "ConflictingSpecificationError");
  }
};
var InvalidUnitError = class extends LuxonError {
  static {
    __name(this, "InvalidUnitError");
  }
  constructor(unit) {
    super(`Invalid unit ${unit}`);
  }
};
var InvalidArgumentError = class extends LuxonError {
  static {
    __name(this, "InvalidArgumentError");
  }
};
var ZoneIsAbstractError = class extends LuxonError {
  static {
    __name(this, "ZoneIsAbstractError");
  }
  constructor() {
    super("Zone is an abstract class");
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/formats.js
var n = "numeric";
var s = "short";
var l = "long";
var DATE_SHORT = {
  year: n,
  month: n,
  day: n
};
var DATE_MED = {
  year: n,
  month: s,
  day: n
};
var DATE_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s
};
var DATE_FULL = {
  year: n,
  month: l,
  day: n
};
var DATE_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l
};
var TIME_SIMPLE = {
  hour: n,
  minute: n
};
var TIME_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n
};
var TIME_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};
var TIME_24_SIMPLE = {
  hour: n,
  minute: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SECONDS = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23"
};
var TIME_24_WITH_SHORT_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: s
};
var TIME_24_WITH_LONG_OFFSET = {
  hour: n,
  minute: n,
  second: n,
  hourCycle: "h23",
  timeZoneName: l
};
var DATETIME_SHORT = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_SHORT_WITH_SECONDS = {
  year: n,
  month: n,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n
};
var DATETIME_MED_WITH_SECONDS = {
  year: n,
  month: s,
  day: n,
  hour: n,
  minute: n,
  second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
  year: n,
  month: s,
  day: n,
  weekday: s,
  hour: n,
  minute: n
};
var DATETIME_FULL = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: s
};
var DATETIME_HUGE = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
  year: n,
  month: l,
  day: n,
  weekday: l,
  hour: n,
  minute: n,
  second: n,
  timeZoneName: l
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/zone.js
var Zone = class {
  static {
    __name(this, "Zone");
  }
  /**
  * The type of zone
  * @abstract
  * @type {string}
  */
  get type() {
    throw new ZoneIsAbstractError();
  }
  /**
  * The name of this zone.
  * @abstract
  * @type {string}
  */
  get name() {
    throw new ZoneIsAbstractError();
  }
  /**
  * The IANA name of this zone.
  * Defaults to `name` if not overwritten by a subclass.
  * @abstract
  * @type {string}
  */
  get ianaName() {
    return this.name;
  }
  /**
  * Returns whether the offset is known to be fixed for the whole year.
  * @abstract
  * @type {boolean}
  */
  get isUniversal() {
    throw new ZoneIsAbstractError();
  }
  /**
  * Returns the offset's common name (such as EST) at the specified timestamp
  * @abstract
  * @param {number} ts - Epoch milliseconds for which to get the name
  * @param {Object} opts - Options to affect the format
  * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
  * @param {string} opts.locale - What locale to return the offset name in.
  * @return {string}
  */
  offsetName(ts, opts) {
    throw new ZoneIsAbstractError();
  }
  /**
  * Returns the offset's value as a string
  * @abstract
  * @param {number} ts - Epoch milliseconds for which to get the offset
  * @param {string} format - What style of offset to return.
  *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
  * @return {string}
  */
  formatOffset(ts, format) {
    throw new ZoneIsAbstractError();
  }
  /**
  * Return the offset in minutes for this zone at the specified timestamp.
  * @abstract
  * @param {number} ts - Epoch milliseconds for which to compute the offset
  * @return {number}
  */
  offset(ts) {
    throw new ZoneIsAbstractError();
  }
  /**
  * Return whether this Zone is equal to another zone
  * @abstract
  * @param {Zone} otherZone - the zone to compare
  * @return {boolean}
  */
  equals(otherZone) {
    throw new ZoneIsAbstractError();
  }
  /**
  * Return whether this Zone is valid.
  * @abstract
  * @type {boolean}
  */
  get isValid() {
    throw new ZoneIsAbstractError();
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/zones/systemZone.js
var singleton = null;
var SystemZone = class _SystemZone extends Zone {
  static {
    __name(this, "SystemZone");
  }
  /**
  * Get a singleton instance of the local zone
  * @return {SystemZone}
  */
  static get instance() {
    if (singleton === null) {
      singleton = new _SystemZone();
    }
    return singleton;
  }
  /** @override **/
  get type() {
    return "system";
  }
  /** @override **/
  get name() {
    return new Intl.DateTimeFormat().resolvedOptions().timeZone;
  }
  /** @override **/
  get isUniversal() {
    return false;
  }
  /** @override **/
  offsetName(ts, { format, locale }) {
    return parseZoneInfo(ts, format, locale);
  }
  /** @override **/
  formatOffset(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /** @override **/
  offset(ts) {
    return -new Date(ts).getTimezoneOffset();
  }
  /** @override **/
  equals(otherZone) {
    return otherZone.type === "system";
  }
  /** @override **/
  get isValid() {
    return true;
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/zones/IANAZone.js
var dtfCache = {};
function makeDTF(zone) {
  if (!dtfCache[zone]) {
    dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
      hour12: false,
      timeZone: zone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      era: "short"
    });
  }
  return dtfCache[zone];
}
__name(makeDTF, "makeDTF");
var typeToPos = {
  year: 0,
  month: 1,
  day: 2,
  era: 3,
  hour: 4,
  minute: 5,
  second: 6
};
function hackyOffset(dtf, date) {
  const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
  return [
    fYear,
    fMonth,
    fDay,
    fadOrBc,
    fHour,
    fMinute,
    fSecond
  ];
}
__name(hackyOffset, "hackyOffset");
function partsOffset(dtf, date) {
  const formatted = dtf.formatToParts(date);
  const filled = [];
  for (let i = 0; i < formatted.length; i++) {
    const { type, value } = formatted[i];
    const pos = typeToPos[type];
    if (type === "era") {
      filled[pos] = value;
    } else if (!isUndefined(pos)) {
      filled[pos] = parseInt(value, 10);
    }
  }
  return filled;
}
__name(partsOffset, "partsOffset");
var ianaZoneCache = {};
var IANAZone = class _IANAZone extends Zone {
  static {
    __name(this, "IANAZone");
  }
  /**
  * @param {string} name - Zone name
  * @return {IANAZone}
  */
  static create(name) {
    if (!ianaZoneCache[name]) {
      ianaZoneCache[name] = new _IANAZone(name);
    }
    return ianaZoneCache[name];
  }
  /**
  * Reset local caches. Should only be necessary in testing scenarios.
  * @return {void}
  */
  static resetCache() {
    ianaZoneCache = {};
    dtfCache = {};
  }
  /**
  * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
  * @param {string} s - The string to check validity on
  * @example IANAZone.isValidSpecifier("America/New_York") //=> true
  * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
  * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.
  * @return {boolean}
  */
  static isValidSpecifier(s2) {
    return this.isValidZone(s2);
  }
  /**
  * Returns whether the provided string identifies a real zone
  * @param {string} zone - The string to check
  * @example IANAZone.isValidZone("America/New_York") //=> true
  * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
  * @example IANAZone.isValidZone("Sport~~blorp") //=> false
  * @return {boolean}
  */
  static isValidZone(zone) {
    if (!zone) {
      return false;
    }
    try {
      new Intl.DateTimeFormat("en-US", {
        timeZone: zone
      }).format();
      return true;
    } catch (e) {
      return false;
    }
  }
  constructor(name) {
    super();
    this.zoneName = name;
    this.valid = _IANAZone.isValidZone(name);
  }
  /**
  * The type of zone. `iana` for all instances of `IANAZone`.
  * @override
  * @type {string}
  */
  get type() {
    return "iana";
  }
  /**
  * The name of this zone (i.e. the IANA zone name).
  * @override
  * @type {string}
  */
  get name() {
    return this.zoneName;
  }
  /**
  * Returns whether the offset is known to be fixed for the whole year:
  * Always returns false for all IANA zones.
  * @override
  * @type {boolean}
  */
  get isUniversal() {
    return false;
  }
  /**
  * Returns the offset's common name (such as EST) at the specified timestamp
  * @override
  * @param {number} ts - Epoch milliseconds for which to get the name
  * @param {Object} opts - Options to affect the format
  * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
  * @param {string} opts.locale - What locale to return the offset name in.
  * @return {string}
  */
  offsetName(ts, { format, locale }) {
    return parseZoneInfo(ts, format, locale, this.name);
  }
  /**
  * Returns the offset's value as a string
  * @override
  * @param {number} ts - Epoch milliseconds for which to get the offset
  * @param {string} format - What style of offset to return.
  *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
  * @return {string}
  */
  formatOffset(ts, format) {
    return formatOffset(this.offset(ts), format);
  }
  /**
  * Return the offset in minutes for this zone at the specified timestamp.
  * @override
  * @param {number} ts - Epoch milliseconds for which to compute the offset
  * @return {number}
  */
  offset(ts) {
    const date = new Date(ts);
    if (isNaN(date)) return NaN;
    const dtf = makeDTF(this.name);
    let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
    if (adOrBc === "BC") {
      year = -Math.abs(year) + 1;
    }
    const adjustedHour = hour === 24 ? 0 : hour;
    const asUTC = objToLocalTS({
      year,
      month,
      day,
      hour: adjustedHour,
      minute,
      second,
      millisecond: 0
    });
    let asTS = +date;
    const over = asTS % 1e3;
    asTS -= over >= 0 ? over : 1e3 + over;
    return (asUTC - asTS) / (60 * 1e3);
  }
  /**
  * Return whether this Zone is equal to another zone
  * @override
  * @param {Zone} otherZone - the zone to compare
  * @return {boolean}
  */
  equals(otherZone) {
    return otherZone.type === "iana" && otherZone.name === this.name;
  }
  /**
  * Return whether this Zone is valid.
  * @override
  * @type {boolean}
  */
  get isValid() {
    return this.valid;
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/locale.js
var intlLFCache = {};
function getCachedLF(locString, opts = {}) {
  const key = JSON.stringify([
    locString,
    opts
  ]);
  let dtf = intlLFCache[key];
  if (!dtf) {
    dtf = new Intl.ListFormat(locString, opts);
    intlLFCache[key] = dtf;
  }
  return dtf;
}
__name(getCachedLF, "getCachedLF");
var intlDTCache = {};
function getCachedDTF(locString, opts = {}) {
  const key = JSON.stringify([
    locString,
    opts
  ]);
  let dtf = intlDTCache[key];
  if (!dtf) {
    dtf = new Intl.DateTimeFormat(locString, opts);
    intlDTCache[key] = dtf;
  }
  return dtf;
}
__name(getCachedDTF, "getCachedDTF");
var intlNumCache = {};
function getCachedINF(locString, opts = {}) {
  const key = JSON.stringify([
    locString,
    opts
  ]);
  let inf = intlNumCache[key];
  if (!inf) {
    inf = new Intl.NumberFormat(locString, opts);
    intlNumCache[key] = inf;
  }
  return inf;
}
__name(getCachedINF, "getCachedINF");
var intlRelCache = {};
function getCachedRTF(locString, opts = {}) {
  const { base, ...cacheKeyOpts } = opts;
  const key = JSON.stringify([
    locString,
    cacheKeyOpts
  ]);
  let inf = intlRelCache[key];
  if (!inf) {
    inf = new Intl.RelativeTimeFormat(locString, opts);
    intlRelCache[key] = inf;
  }
  return inf;
}
__name(getCachedRTF, "getCachedRTF");
var sysLocaleCache = null;
function systemLocale() {
  if (sysLocaleCache) {
    return sysLocaleCache;
  } else {
    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
    return sysLocaleCache;
  }
}
__name(systemLocale, "systemLocale");
var weekInfoCache = {};
function getCachedWeekInfo(locString) {
  let data = weekInfoCache[locString];
  if (!data) {
    const locale = new Intl.Locale(locString);
    data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
    weekInfoCache[locString] = data;
  }
  return data;
}
__name(getCachedWeekInfo, "getCachedWeekInfo");
function parseLocaleString(localeStr) {
  const xIndex = localeStr.indexOf("-x-");
  if (xIndex !== -1) {
    localeStr = localeStr.substring(0, xIndex);
  }
  const uIndex = localeStr.indexOf("-u-");
  if (uIndex === -1) {
    return [
      localeStr
    ];
  } else {
    let options;
    let selectedStr;
    try {
      options = getCachedDTF(localeStr).resolvedOptions();
      selectedStr = localeStr;
    } catch (e) {
      const smaller = localeStr.substring(0, uIndex);
      options = getCachedDTF(smaller).resolvedOptions();
      selectedStr = smaller;
    }
    const { numberingSystem, calendar } = options;
    return [
      selectedStr,
      numberingSystem,
      calendar
    ];
  }
}
__name(parseLocaleString, "parseLocaleString");
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
  if (outputCalendar || numberingSystem) {
    if (!localeStr.includes("-u-")) {
      localeStr += "-u";
    }
    if (outputCalendar) {
      localeStr += `-ca-${outputCalendar}`;
    }
    if (numberingSystem) {
      localeStr += `-nu-${numberingSystem}`;
    }
    return localeStr;
  } else {
    return localeStr;
  }
}
__name(intlConfigString, "intlConfigString");
function mapMonths(f) {
  const ms = [];
  for (let i = 1; i <= 12; i++) {
    const dt = DateTime.utc(2009, i, 1);
    ms.push(f(dt));
  }
  return ms;
}
__name(mapMonths, "mapMonths");
function mapWeekdays(f) {
  const ms = [];
  for (let i = 1; i <= 7; i++) {
    const dt = DateTime.utc(2016, 11, 13 + i);
    ms.push(f(dt));
  }
  return ms;
}
__name(mapWeekdays, "mapWeekdays");
function listStuff(loc, length, englishFn, intlFn) {
  const mode = loc.listingMode();
  if (mode === "error") {
    return null;
  } else if (mode === "en") {
    return englishFn(length);
  } else {
    return intlFn(length);
  }
}
__name(listStuff, "listStuff");
function supportsFastNumbers(loc) {
  if (loc.numberingSystem && loc.numberingSystem !== "latn") {
    return false;
  } else {
    return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
  }
}
__name(supportsFastNumbers, "supportsFastNumbers");
var PolyNumberFormatter = class PolyNumberFormatter2 {
  static {
    __name(this, "PolyNumberFormatter");
  }
  constructor(intl, forceSimple, opts) {
    this.padTo = opts.padTo || 0;
    this.floor = opts.floor || false;
    const { padTo, floor: floor2, ...otherOpts } = opts;
    if (!forceSimple || Object.keys(otherOpts).length > 0) {
      const intlOpts = {
        useGrouping: false,
        ...opts
      };
      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
      this.inf = getCachedINF(intl, intlOpts);
    }
  }
  format(i) {
    if (this.inf) {
      const fixed = this.floor ? Math.floor(i) : i;
      return this.inf.format(fixed);
    } else {
      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
      return padStart(fixed, this.padTo);
    }
  }
};
var PolyDateFormatter = class PolyDateFormatter2 {
  static {
    __name(this, "PolyDateFormatter");
  }
  constructor(dt, intl, opts) {
    this.opts = opts;
    this.originalZone = void 0;
    let z = void 0;
    if (this.opts.timeZone) {
      this.dt = dt;
    } else if (dt.zone.type === "fixed") {
      const gmtOffset = -1 * (dt.offset / 60);
      const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
      if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
        z = offsetZ;
        this.dt = dt;
      } else {
        z = "UTC";
        this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({
          minutes: dt.offset
        });
        this.originalZone = dt.zone;
      }
    } else if (dt.zone.type === "system") {
      this.dt = dt;
    } else if (dt.zone.type === "iana") {
      this.dt = dt;
      z = dt.zone.name;
    } else {
      z = "UTC";
      this.dt = dt.setZone("UTC").plus({
        minutes: dt.offset
      });
      this.originalZone = dt.zone;
    }
    const intlOpts = {
      ...this.opts
    };
    intlOpts.timeZone = intlOpts.timeZone || z;
    this.dtf = getCachedDTF(intl, intlOpts);
  }
  format() {
    if (this.originalZone) {
      return this.formatToParts().map(({ value }) => value).join("");
    }
    return this.dtf.format(this.dt.toJSDate());
  }
  formatToParts() {
    const parts = this.dtf.formatToParts(this.dt.toJSDate());
    if (this.originalZone) {
      return parts.map((part) => {
        if (part.type === "timeZoneName") {
          const offsetName = this.originalZone.offsetName(this.dt.ts, {
            locale: this.dt.locale,
            format: this.opts.timeZoneName
          });
          return {
            ...part,
            value: offsetName
          };
        } else {
          return part;
        }
      });
    }
    return parts;
  }
  resolvedOptions() {
    return this.dtf.resolvedOptions();
  }
};
var PolyRelFormatter = class PolyRelFormatter2 {
  static {
    __name(this, "PolyRelFormatter");
  }
  constructor(intl, isEnglish, opts) {
    this.opts = {
      style: "long",
      ...opts
    };
    if (!isEnglish && hasRelative()) {
      this.rtf = getCachedRTF(intl, opts);
    }
  }
  format(count, unit) {
    if (this.rtf) {
      return this.rtf.format(count, unit);
    } else {
      return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    }
  }
  formatToParts(count, unit) {
    if (this.rtf) {
      return this.rtf.formatToParts(count, unit);
    } else {
      return [];
    }
  }
};
var fallbackWeekSettings = {
  firstDay: 1,
  minimalDays: 4,
  weekend: [
    6,
    7
  ]
};
var Locale = class _Locale {
  static {
    __name(this, "Locale");
  }
  static fromOpts(opts) {
    return _Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.weekSettings, opts.defaultToEN);
  }
  static create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
    const specifiedLocale = locale || Settings.defaultLocale;
    const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
    const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
    const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
    const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
    return new _Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
  }
  static resetCache() {
    sysLocaleCache = null;
    intlDTCache = {};
    intlNumCache = {};
    intlRelCache = {};
  }
  static fromObject({ locale, numberingSystem, outputCalendar, weekSettings } = {}) {
    return _Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
  }
  constructor(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
    this.locale = parsedLocale;
    this.numberingSystem = numbering || parsedNumberingSystem || null;
    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
    this.weekSettings = weekSettings;
    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
    this.weekdaysCache = {
      format: {},
      standalone: {}
    };
    this.monthsCache = {
      format: {},
      standalone: {}
    };
    this.meridiemCache = null;
    this.eraCache = {};
    this.specifiedLocale = specifiedLocale;
    this.fastNumbersCached = null;
  }
  get fastNumbers() {
    if (this.fastNumbersCached == null) {
      this.fastNumbersCached = supportsFastNumbers(this);
    }
    return this.fastNumbersCached;
  }
  listingMode() {
    const isActuallyEn = this.isEnglish();
    const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
    return isActuallyEn && hasNoWeirdness ? "en" : "intl";
  }
  clone(alts) {
    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
      return this;
    } else {
      return _Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, validateWeekSettings(alts.weekSettings) || this.weekSettings, alts.defaultToEN || false);
    }
  }
  redefaultToEN(alts = {}) {
    return this.clone({
      ...alts,
      defaultToEN: true
    });
  }
  redefaultToSystem(alts = {}) {
    return this.clone({
      ...alts,
      defaultToEN: false
    });
  }
  months(length, format = false) {
    return listStuff(this, length, months, () => {
      const intl = format ? {
        month: length,
        day: "numeric"
      } : {
        month: length
      }, formatStr = format ? "format" : "standalone";
      if (!this.monthsCache[formatStr][length]) {
        this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
      }
      return this.monthsCache[formatStr][length];
    });
  }
  weekdays(length, format = false) {
    return listStuff(this, length, weekdays, () => {
      const intl = format ? {
        weekday: length,
        year: "numeric",
        month: "long",
        day: "numeric"
      } : {
        weekday: length
      }, formatStr = format ? "format" : "standalone";
      if (!this.weekdaysCache[formatStr][length]) {
        this.weekdaysCache[formatStr][length] = mapWeekdays((dt) => this.extract(dt, intl, "weekday"));
      }
      return this.weekdaysCache[formatStr][length];
    });
  }
  meridiems() {
    return listStuff(this, void 0, () => meridiems, () => {
      if (!this.meridiemCache) {
        const intl = {
          hour: "numeric",
          hourCycle: "h12"
        };
        this.meridiemCache = [
          DateTime.utc(2016, 11, 13, 9),
          DateTime.utc(2016, 11, 13, 19)
        ].map((dt) => this.extract(dt, intl, "dayperiod"));
      }
      return this.meridiemCache;
    });
  }
  eras(length) {
    return listStuff(this, length, eras, () => {
      const intl = {
        era: length
      };
      if (!this.eraCache[length]) {
        this.eraCache[length] = [
          DateTime.utc(-40, 1, 1),
          DateTime.utc(2017, 1, 1)
        ].map((dt) => this.extract(dt, intl, "era"));
      }
      return this.eraCache[length];
    });
  }
  extract(dt, intlOpts, field) {
    const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m) => m.type.toLowerCase() === field);
    return matching ? matching.value : null;
  }
  numberFormatter(opts = {}) {
    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
  }
  dtFormatter(dt, intlOpts = {}) {
    return new PolyDateFormatter(dt, this.intl, intlOpts);
  }
  relFormatter(opts = {}) {
    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
  }
  listFormatter(opts = {}) {
    return getCachedLF(this.intl, opts);
  }
  isEnglish() {
    return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
  }
  getWeekSettings() {
    if (this.weekSettings) {
      return this.weekSettings;
    } else if (!hasLocaleWeekInfo()) {
      return fallbackWeekSettings;
    } else {
      return getCachedWeekInfo(this.locale);
    }
  }
  getStartOfWeek() {
    return this.getWeekSettings().firstDay;
  }
  getMinDaysInFirstWeek() {
    return this.getWeekSettings().minimalDays;
  }
  getWeekendDays() {
    return this.getWeekSettings().weekend;
  }
  equals(other) {
    return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
  }
  toString() {
    return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/zones/fixedOffsetZone.js
var singleton2 = null;
var FixedOffsetZone = class _FixedOffsetZone extends Zone {
  static {
    __name(this, "FixedOffsetZone");
  }
  /**
  * Get a singleton instance of UTC
  * @return {FixedOffsetZone}
  */
  static get utcInstance() {
    if (singleton2 === null) {
      singleton2 = new _FixedOffsetZone(0);
    }
    return singleton2;
  }
  /**
  * Get an instance with a specified offset
  * @param {number} offset - The offset in minutes
  * @return {FixedOffsetZone}
  */
  static instance(offset2) {
    return offset2 === 0 ? _FixedOffsetZone.utcInstance : new _FixedOffsetZone(offset2);
  }
  /**
  * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
  * @param {string} s - The offset string to parse
  * @example FixedOffsetZone.parseSpecifier("UTC+6")
  * @example FixedOffsetZone.parseSpecifier("UTC+06")
  * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
  * @return {FixedOffsetZone}
  */
  static parseSpecifier(s2) {
    if (s2) {
      const r = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
      if (r) {
        return new _FixedOffsetZone(signedOffset(r[1], r[2]));
      }
    }
    return null;
  }
  constructor(offset2) {
    super();
    this.fixed = offset2;
  }
  /**
  * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
  * @override
  * @type {string}
  */
  get type() {
    return "fixed";
  }
  /**
  * The name of this zone.
  * All fixed zones' names always start with "UTC" (plus optional offset)
  * @override
  * @type {string}
  */
  get name() {
    return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
  }
  /**
  * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
  *
  * @override
  * @type {string}
  */
  get ianaName() {
    if (this.fixed === 0) {
      return "Etc/UTC";
    } else {
      return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
    }
  }
  /**
  * Returns the offset's common name at the specified timestamp.
  *
  * For fixed offset zones this equals to the zone name.
  * @override
  */
  offsetName() {
    return this.name;
  }
  /**
  * Returns the offset's value as a string
  * @override
  * @param {number} ts - Epoch milliseconds for which to get the offset
  * @param {string} format - What style of offset to return.
  *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
  * @return {string}
  */
  formatOffset(ts, format) {
    return formatOffset(this.fixed, format);
  }
  /**
  * Returns whether the offset is known to be fixed for the whole year:
  * Always returns true for all fixed offset zones.
  * @override
  * @type {boolean}
  */
  get isUniversal() {
    return true;
  }
  /**
  * Return the offset in minutes for this zone at the specified timestamp.
  *
  * For fixed offset zones, this is constant and does not depend on a timestamp.
  * @override
  * @return {number}
  */
  offset() {
    return this.fixed;
  }
  /**
  * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
  * @override
  * @param {Zone} otherZone - the zone to compare
  * @return {boolean}
  */
  equals(otherZone) {
    return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
  }
  /**
  * Return whether this Zone is valid:
  * All fixed offset zones are valid.
  * @override
  * @type {boolean}
  */
  get isValid() {
    return true;
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/zones/invalidZone.js
var InvalidZone = class extends Zone {
  static {
    __name(this, "InvalidZone");
  }
  constructor(zoneName) {
    super();
    this.zoneName = zoneName;
  }
  /** @override **/
  get type() {
    return "invalid";
  }
  /** @override **/
  get name() {
    return this.zoneName;
  }
  /** @override **/
  get isUniversal() {
    return false;
  }
  /** @override **/
  offsetName() {
    return null;
  }
  /** @override **/
  formatOffset() {
    return "";
  }
  /** @override **/
  offset() {
    return NaN;
  }
  /** @override **/
  equals() {
    return false;
  }
  /** @override **/
  get isValid() {
    return false;
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/zoneUtil.js
function normalizeZone(input, defaultZone2) {
  let offset2;
  if (isUndefined(input) || input === null) {
    return defaultZone2;
  } else if (input instanceof Zone) {
    return input;
  } else if (isString(input)) {
    const lowered = input.toLowerCase();
    if (lowered === "default") return defaultZone2;
    else if (lowered === "local" || lowered === "system") return SystemZone.instance;
    else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
    else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
  } else if (isNumber(input)) {
    return FixedOffsetZone.instance(input);
  } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
    return input;
  } else {
    return new InvalidZone(input);
  }
}
__name(normalizeZone, "normalizeZone");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/digits.js
var numberingSystems = {
  arab: "[\u0660-\u0669]",
  arabext: "[\u06F0-\u06F9]",
  bali: "[\u1B50-\u1B59]",
  beng: "[\u09E6-\u09EF]",
  deva: "[\u0966-\u096F]",
  fullwide: "[\uFF10-\uFF19]",
  gujr: "[\u0AE6-\u0AEF]",
  hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
  khmr: "[\u17E0-\u17E9]",
  knda: "[\u0CE6-\u0CEF]",
  laoo: "[\u0ED0-\u0ED9]",
  limb: "[\u1946-\u194F]",
  mlym: "[\u0D66-\u0D6F]",
  mong: "[\u1810-\u1819]",
  mymr: "[\u1040-\u1049]",
  orya: "[\u0B66-\u0B6F]",
  tamldec: "[\u0BE6-\u0BEF]",
  telu: "[\u0C66-\u0C6F]",
  thai: "[\u0E50-\u0E59]",
  tibt: "[\u0F20-\u0F29]",
  latn: "\\d"
};
var numberingSystemsUTF16 = {
  arab: [
    1632,
    1641
  ],
  arabext: [
    1776,
    1785
  ],
  bali: [
    6992,
    7001
  ],
  beng: [
    2534,
    2543
  ],
  deva: [
    2406,
    2415
  ],
  fullwide: [
    65296,
    65303
  ],
  gujr: [
    2790,
    2799
  ],
  khmr: [
    6112,
    6121
  ],
  knda: [
    3302,
    3311
  ],
  laoo: [
    3792,
    3801
  ],
  limb: [
    6470,
    6479
  ],
  mlym: [
    3430,
    3439
  ],
  mong: [
    6160,
    6169
  ],
  mymr: [
    4160,
    4169
  ],
  orya: [
    2918,
    2927
  ],
  tamldec: [
    3046,
    3055
  ],
  telu: [
    3174,
    3183
  ],
  thai: [
    3664,
    3673
  ],
  tibt: [
    3872,
    3881
  ]
};
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
  let value = parseInt(str, 10);
  if (isNaN(value)) {
    value = "";
    for (let i = 0; i < str.length; i++) {
      const code = str.charCodeAt(i);
      if (str[i].search(numberingSystems.hanidec) !== -1) {
        value += hanidecChars.indexOf(str[i]);
      } else {
        for (const key in numberingSystemsUTF16) {
          const [min, max] = numberingSystemsUTF16[key];
          if (code >= min && code <= max) {
            value += code - min;
          }
        }
      }
    }
    return parseInt(value, 10);
  } else {
    return value;
  }
}
__name(parseDigits, "parseDigits");
var digitRegexCache = {};
function resetDigitRegexCache() {
  digitRegexCache = {};
}
__name(resetDigitRegexCache, "resetDigitRegexCache");
function digitRegex({ numberingSystem }, append = "") {
  const ns = numberingSystem || "latn";
  if (!digitRegexCache[ns]) {
    digitRegexCache[ns] = {};
  }
  if (!digitRegexCache[ns][append]) {
    digitRegexCache[ns][append] = new RegExp(`${numberingSystems[ns]}${append}`);
  }
  return digitRegexCache[ns][append];
}
__name(digitRegex, "digitRegex");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/settings.js
var now = /* @__PURE__ */ __name(() => Date.now(), "now");
var defaultZone = "system";
var defaultLocale = null;
var defaultNumberingSystem = null;
var defaultOutputCalendar = null;
var twoDigitCutoffYear = 60;
var throwOnInvalid;
var defaultWeekSettings = null;
var Settings = class {
  static {
    __name(this, "Settings");
  }
  /**
  * Get the callback for returning the current timestamp.
  * @type {function}
  */
  static get now() {
    return now;
  }
  /**
  * Set the callback for returning the current timestamp.
  * The function should return a number, which will be interpreted as an Epoch millisecond count
  * @type {function}
  * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
  * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
  */
  static set now(n2) {
    now = n2;
  }
  /**
  * Set the default time zone to create DateTimes in. Does not affect existing instances.
  * Use the value "system" to reset this value to the system's time zone.
  * @type {string}
  */
  static set defaultZone(zone) {
    defaultZone = zone;
  }
  /**
  * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
  * The default value is the system's time zone (the one set on the machine that runs this code).
  * @type {Zone}
  */
  static get defaultZone() {
    return normalizeZone(defaultZone, SystemZone.instance);
  }
  /**
  * Get the default locale to create DateTimes with. Does not affect existing instances.
  * @type {string}
  */
  static get defaultLocale() {
    return defaultLocale;
  }
  /**
  * Set the default locale to create DateTimes with. Does not affect existing instances.
  * @type {string}
  */
  static set defaultLocale(locale) {
    defaultLocale = locale;
  }
  /**
  * Get the default numbering system to create DateTimes with. Does not affect existing instances.
  * @type {string}
  */
  static get defaultNumberingSystem() {
    return defaultNumberingSystem;
  }
  /**
  * Set the default numbering system to create DateTimes with. Does not affect existing instances.
  * @type {string}
  */
  static set defaultNumberingSystem(numberingSystem) {
    defaultNumberingSystem = numberingSystem;
  }
  /**
  * Get the default output calendar to create DateTimes with. Does not affect existing instances.
  * @type {string}
  */
  static get defaultOutputCalendar() {
    return defaultOutputCalendar;
  }
  /**
  * Set the default output calendar to create DateTimes with. Does not affect existing instances.
  * @type {string}
  */
  static set defaultOutputCalendar(outputCalendar) {
    defaultOutputCalendar = outputCalendar;
  }
  /**
  * @typedef {Object} WeekSettings
  * @property {number} firstDay
  * @property {number} minimalDays
  * @property {number[]} weekend
  */
  /**
  * @return {WeekSettings|null}
  */
  static get defaultWeekSettings() {
    return defaultWeekSettings;
  }
  /**
  * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
  * how many days are required in the first week of a year.
  * Does not affect existing instances.
  *
  * @param {WeekSettings|null} weekSettings
  */
  static set defaultWeekSettings(weekSettings) {
    defaultWeekSettings = validateWeekSettings(weekSettings);
  }
  /**
  * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
  * @type {number}
  */
  static get twoDigitCutoffYear() {
    return twoDigitCutoffYear;
  }
  /**
  * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
  * @type {number}
  * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
  * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
  * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
  * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
  * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
  */
  static set twoDigitCutoffYear(cutoffYear) {
    twoDigitCutoffYear = cutoffYear % 100;
  }
  /**
  * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
  * @type {boolean}
  */
  static get throwOnInvalid() {
    return throwOnInvalid;
  }
  /**
  * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
  * @type {boolean}
  */
  static set throwOnInvalid(t) {
    throwOnInvalid = t;
  }
  /**
  * Reset Luxon's global caches. Should only be necessary in testing scenarios.
  * @return {void}
  */
  static resetCaches() {
    Locale.resetCache();
    IANAZone.resetCache();
    DateTime.resetCache();
    resetDigitRegexCache();
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/invalid.js
var Invalid = class {
  static {
    __name(this, "Invalid");
  }
  constructor(reason, explanation) {
    this.reason = reason;
    this.explanation = explanation;
  }
  toMessage() {
    if (this.explanation) {
      return `${this.reason}: ${this.explanation}`;
    } else {
      return this.reason;
    }
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/conversions.js
var nonLeapLadder = [
  0,
  31,
  59,
  90,
  120,
  151,
  181,
  212,
  243,
  273,
  304,
  334
];
var leapLadder = [
  0,
  31,
  60,
  91,
  121,
  152,
  182,
  213,
  244,
  274,
  305,
  335
];
function unitOutOfRange(unit, value) {
  return new Invalid("unit out of range", `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);
}
__name(unitOutOfRange, "unitOutOfRange");
function dayOfWeek(year, month, day) {
  const d = new Date(Date.UTC(year, month - 1, day));
  if (year < 100 && year >= 0) {
    d.setUTCFullYear(d.getUTCFullYear() - 1900);
  }
  const js = d.getUTCDay();
  return js === 0 ? 7 : js;
}
__name(dayOfWeek, "dayOfWeek");
function computeOrdinal(year, month, day) {
  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
__name(computeOrdinal, "computeOrdinal");
function uncomputeOrdinal(year, ordinal) {
  const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i) => i < ordinal), day = ordinal - table[month0];
  return {
    month: month0 + 1,
    day
  };
}
__name(uncomputeOrdinal, "uncomputeOrdinal");
function isoWeekdayToLocal(isoWeekday, startOfWeek) {
  return (isoWeekday - startOfWeek + 7) % 7 + 1;
}
__name(isoWeekdayToLocal, "isoWeekdayToLocal");
function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
  let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
  if (weekNumber < 1) {
    weekYear = year - 1;
    weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
  } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
    weekYear = year + 1;
    weekNumber = 1;
  } else {
    weekYear = year;
  }
  return {
    weekYear,
    weekNumber,
    weekday,
    ...timeObject(gregObj)
  };
}
__name(gregorianToWeek, "gregorianToWeek");
function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = daysInYear(weekYear);
  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
  if (ordinal < 1) {
    year = weekYear - 1;
    ordinal += daysInYear(year);
  } else if (ordinal > yearInDays) {
    year = weekYear + 1;
    ordinal -= daysInYear(weekYear);
  } else {
    year = weekYear;
  }
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return {
    year,
    month,
    day,
    ...timeObject(weekData)
  };
}
__name(weekToGregorian, "weekToGregorian");
function gregorianToOrdinal(gregData) {
  const { year, month, day } = gregData;
  const ordinal = computeOrdinal(year, month, day);
  return {
    year,
    ordinal,
    ...timeObject(gregData)
  };
}
__name(gregorianToOrdinal, "gregorianToOrdinal");
function ordinalToGregorian(ordinalData) {
  const { year, ordinal } = ordinalData;
  const { month, day } = uncomputeOrdinal(year, ordinal);
  return {
    year,
    month,
    day,
    ...timeObject(ordinalData)
  };
}
__name(ordinalToGregorian, "ordinalToGregorian");
function usesLocalWeekValues(obj, loc) {
  const hasLocaleWeekData = !isUndefined(obj.localWeekday) || !isUndefined(obj.localWeekNumber) || !isUndefined(obj.localWeekYear);
  if (hasLocaleWeekData) {
    const hasIsoWeekData = !isUndefined(obj.weekday) || !isUndefined(obj.weekNumber) || !isUndefined(obj.weekYear);
    if (hasIsoWeekData) {
      throw new ConflictingSpecificationError("Cannot mix locale-based week fields with ISO-based week fields");
    }
    if (!isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;
    if (!isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
    if (!isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
    delete obj.localWeekday;
    delete obj.localWeekNumber;
    delete obj.localWeekYear;
    return {
      minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
      startOfWeek: loc.getStartOfWeek()
    };
  } else {
    return {
      minDaysInFirstWeek: 4,
      startOfWeek: 1
    };
  }
}
__name(usesLocalWeekValues, "usesLocalWeekValues");
function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const validYear = isInteger(obj.weekYear), validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)), validWeekday = integerBetween(obj.weekday, 1, 7);
  if (!validYear) {
    return unitOutOfRange("weekYear", obj.weekYear);
  } else if (!validWeek) {
    return unitOutOfRange("week", obj.weekNumber);
  } else if (!validWeekday) {
    return unitOutOfRange("weekday", obj.weekday);
  } else return false;
}
__name(hasInvalidWeekData, "hasInvalidWeekData");
function hasInvalidOrdinalData(obj) {
  const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validOrdinal) {
    return unitOutOfRange("ordinal", obj.ordinal);
  } else return false;
}
__name(hasInvalidOrdinalData, "hasInvalidOrdinalData");
function hasInvalidGregorianData(obj) {
  const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
  if (!validYear) {
    return unitOutOfRange("year", obj.year);
  } else if (!validMonth) {
    return unitOutOfRange("month", obj.month);
  } else if (!validDay) {
    return unitOutOfRange("day", obj.day);
  } else return false;
}
__name(hasInvalidGregorianData, "hasInvalidGregorianData");
function hasInvalidTimeData(obj) {
  const { hour, minute, second, millisecond } = obj;
  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
  if (!validHour) {
    return unitOutOfRange("hour", hour);
  } else if (!validMinute) {
    return unitOutOfRange("minute", minute);
  } else if (!validSecond) {
    return unitOutOfRange("second", second);
  } else if (!validMillisecond) {
    return unitOutOfRange("millisecond", millisecond);
  } else return false;
}
__name(hasInvalidTimeData, "hasInvalidTimeData");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/util.js
function isUndefined(o) {
  return typeof o === "undefined";
}
__name(isUndefined, "isUndefined");
function isNumber(o) {
  return typeof o === "number";
}
__name(isNumber, "isNumber");
function isInteger(o) {
  return typeof o === "number" && o % 1 === 0;
}
__name(isInteger, "isInteger");
function isString(o) {
  return typeof o === "string";
}
__name(isString, "isString");
function isDate(o) {
  return Object.prototype.toString.call(o) === "[object Date]";
}
__name(isDate, "isDate");
function hasRelative() {
  try {
    return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
  } catch (e) {
    return false;
  }
}
__name(hasRelative, "hasRelative");
function hasLocaleWeekInfo() {
  try {
    return typeof Intl !== "undefined" && !!Intl.Locale && ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype);
  } catch (e) {
    return false;
  }
}
__name(hasLocaleWeekInfo, "hasLocaleWeekInfo");
function maybeArray(thing) {
  return Array.isArray(thing) ? thing : [
    thing
  ];
}
__name(maybeArray, "maybeArray");
function bestBy(arr, by, compare) {
  if (arr.length === 0) {
    return void 0;
  }
  return arr.reduce((best, next) => {
    const pair = [
      by(next),
      next
    ];
    if (!best) {
      return pair;
    } else if (compare(best[0], pair[0]) === best[0]) {
      return best;
    } else {
      return pair;
    }
  }, null)[1];
}
__name(bestBy, "bestBy");
function pick(obj, keys) {
  return keys.reduce((a, k) => {
    a[k] = obj[k];
    return a;
  }, {});
}
__name(pick, "pick");
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
__name(hasOwnProperty, "hasOwnProperty");
function validateWeekSettings(settings) {
  if (settings == null) {
    return null;
  } else if (typeof settings !== "object") {
    throw new InvalidArgumentError("Week settings must be an object");
  } else {
    if (!integerBetween(settings.firstDay, 1, 7) || !integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some((v) => !integerBetween(v, 1, 7))) {
      throw new InvalidArgumentError("Invalid week settings");
    }
    return {
      firstDay: settings.firstDay,
      minimalDays: settings.minimalDays,
      weekend: Array.from(settings.weekend)
    };
  }
}
__name(validateWeekSettings, "validateWeekSettings");
function integerBetween(thing, bottom, top) {
  return isInteger(thing) && thing >= bottom && thing <= top;
}
__name(integerBetween, "integerBetween");
function floorMod(x, n2) {
  return x - n2 * Math.floor(x / n2);
}
__name(floorMod, "floorMod");
function padStart(input, n2 = 2) {
  const isNeg = input < 0;
  let padded;
  if (isNeg) {
    padded = "-" + ("" + -input).padStart(n2, "0");
  } else {
    padded = ("" + input).padStart(n2, "0");
  }
  return padded;
}
__name(padStart, "padStart");
function parseInteger(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseInt(string, 10);
  }
}
__name(parseInteger, "parseInteger");
function parseFloating(string) {
  if (isUndefined(string) || string === null || string === "") {
    return void 0;
  } else {
    return parseFloat(string);
  }
}
__name(parseFloating, "parseFloating");
function parseMillis(fraction) {
  if (isUndefined(fraction) || fraction === null || fraction === "") {
    return void 0;
  } else {
    const f = parseFloat("0." + fraction) * 1e3;
    return Math.floor(f);
  }
}
__name(parseMillis, "parseMillis");
function roundTo(number, digits, towardZero = false) {
  const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
  return rounder(number * factor) / factor;
}
__name(roundTo, "roundTo");
function isLeapYear(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
__name(isLeapYear, "isLeapYear");
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
__name(daysInYear, "daysInYear");
function daysInMonth(year, month) {
  const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
  if (modMonth === 2) {
    return isLeapYear(modYear) ? 29 : 28;
  } else {
    return [
      31,
      null,
      31,
      30,
      31,
      30,
      31,
      31,
      30,
      31,
      30,
      31
    ][modMonth - 1];
  }
}
__name(daysInMonth, "daysInMonth");
function objToLocalTS(obj) {
  let d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);
  if (obj.year < 100 && obj.year >= 0) {
    d = new Date(d);
    d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
  }
  return +d;
}
__name(objToLocalTS, "objToLocalTS");
function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
  const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
  return -fwdlw + minDaysInFirstWeek - 1;
}
__name(firstWeekOffset, "firstWeekOffset");
function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
  const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
  const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
  return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
__name(weeksInWeekYear, "weeksInWeekYear");
function untruncateYear(year) {
  if (year > 99) {
    return year;
  } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
}
__name(untruncateYear, "untruncateYear");
function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
  const date = new Date(ts), intlOpts = {
    hourCycle: "h23",
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
    hour: "2-digit",
    minute: "2-digit"
  };
  if (timeZone) {
    intlOpts.timeZone = timeZone;
  }
  const modified = {
    timeZoneName: offsetFormat,
    ...intlOpts
  };
  const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m) => m.type.toLowerCase() === "timezonename");
  return parsed ? parsed.value : null;
}
__name(parseZoneInfo, "parseZoneInfo");
function signedOffset(offHourStr, offMinuteStr) {
  let offHour = parseInt(offHourStr, 10);
  if (Number.isNaN(offHour)) {
    offHour = 0;
  }
  const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
  return offHour * 60 + offMinSigned;
}
__name(signedOffset, "signedOffset");
function asNumber(value) {
  const numericValue = Number(value);
  if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError(`Invalid unit value ${value}`);
  return numericValue;
}
__name(asNumber, "asNumber");
function normalizeObject(obj, normalizer) {
  const normalized = {};
  for (const u in obj) {
    if (hasOwnProperty(obj, u)) {
      const v = obj[u];
      if (v === void 0 || v === null) continue;
      normalized[normalizer(u)] = asNumber(v);
    }
  }
  return normalized;
}
__name(normalizeObject, "normalizeObject");
function formatOffset(offset2, format) {
  const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign = offset2 >= 0 ? "+" : "-";
  switch (format) {
    case "short":
      return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
    case "narrow":
      return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
    case "techie":
      return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
    default:
      throw new RangeError(`Value format ${format} is out of range for property format`);
  }
}
__name(formatOffset, "formatOffset");
function timeObject(obj) {
  return pick(obj, [
    "hour",
    "minute",
    "second",
    "millisecond"
  ]);
}
__name(timeObject, "timeObject");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/english.js
var monthsLong = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December"
];
var monthsShort = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var monthsNarrow = [
  "J",
  "F",
  "M",
  "A",
  "M",
  "J",
  "J",
  "A",
  "S",
  "O",
  "N",
  "D"
];
function months(length) {
  switch (length) {
    case "narrow":
      return [
        ...monthsNarrow
      ];
    case "short":
      return [
        ...monthsShort
      ];
    case "long":
      return [
        ...monthsLong
      ];
    case "numeric":
      return [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12"
      ];
    case "2-digit":
      return [
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "10",
        "11",
        "12"
      ];
    default:
      return null;
  }
}
__name(months, "months");
var weekdaysLong = [
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday",
  "Sunday"
];
var weekdaysShort = [
  "Mon",
  "Tue",
  "Wed",
  "Thu",
  "Fri",
  "Sat",
  "Sun"
];
var weekdaysNarrow = [
  "M",
  "T",
  "W",
  "T",
  "F",
  "S",
  "S"
];
function weekdays(length) {
  switch (length) {
    case "narrow":
      return [
        ...weekdaysNarrow
      ];
    case "short":
      return [
        ...weekdaysShort
      ];
    case "long":
      return [
        ...weekdaysLong
      ];
    case "numeric":
      return [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7"
      ];
    default:
      return null;
  }
}
__name(weekdays, "weekdays");
var meridiems = [
  "AM",
  "PM"
];
var erasLong = [
  "Before Christ",
  "Anno Domini"
];
var erasShort = [
  "BC",
  "AD"
];
var erasNarrow = [
  "B",
  "A"
];
function eras(length) {
  switch (length) {
    case "narrow":
      return [
        ...erasNarrow
      ];
    case "short":
      return [
        ...erasShort
      ];
    case "long":
      return [
        ...erasLong
      ];
    default:
      return null;
  }
}
__name(eras, "eras");
function meridiemForDateTime(dt) {
  return meridiems[dt.hour < 12 ? 0 : 1];
}
__name(meridiemForDateTime, "meridiemForDateTime");
function weekdayForDateTime(dt, length) {
  return weekdays(length)[dt.weekday - 1];
}
__name(weekdayForDateTime, "weekdayForDateTime");
function monthForDateTime(dt, length) {
  return months(length)[dt.month - 1];
}
__name(monthForDateTime, "monthForDateTime");
function eraForDateTime(dt, length) {
  return eras(length)[dt.year < 0 ? 0 : 1];
}
__name(eraForDateTime, "eraForDateTime");
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
  const units = {
    years: [
      "year",
      "yr."
    ],
    quarters: [
      "quarter",
      "qtr."
    ],
    months: [
      "month",
      "mo."
    ],
    weeks: [
      "week",
      "wk."
    ],
    days: [
      "day",
      "day",
      "days"
    ],
    hours: [
      "hour",
      "hr."
    ],
    minutes: [
      "minute",
      "min."
    ],
    seconds: [
      "second",
      "sec."
    ]
  };
  const lastable = [
    "hours",
    "minutes",
    "seconds"
  ].indexOf(unit) === -1;
  if (numeric === "auto" && lastable) {
    const isDay = unit === "days";
    switch (count) {
      case 1:
        return isDay ? "tomorrow" : `next ${units[unit][0]}`;
      case -1:
        return isDay ? "yesterday" : `last ${units[unit][0]}`;
      case 0:
        return isDay ? "today" : `this ${units[unit][0]}`;
      default:
    }
  }
  const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular2 = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular2 ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular2 ? units[unit][0] : unit;
  return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}
__name(formatRelativeTime, "formatRelativeTime");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/formatter.js
function stringifyTokens(splits, tokenToString) {
  let s2 = "";
  for (const token of splits) {
    if (token.literal) {
      s2 += token.val;
    } else {
      s2 += tokenToString(token.val);
    }
  }
  return s2;
}
__name(stringifyTokens, "stringifyTokens");
var macroTokenToFormatOpts = {
  D: DATE_SHORT,
  DD: DATE_MED,
  DDD: DATE_FULL,
  DDDD: DATE_HUGE,
  t: TIME_SIMPLE,
  tt: TIME_WITH_SECONDS,
  ttt: TIME_WITH_SHORT_OFFSET,
  tttt: TIME_WITH_LONG_OFFSET,
  T: TIME_24_SIMPLE,
  TT: TIME_24_WITH_SECONDS,
  TTT: TIME_24_WITH_SHORT_OFFSET,
  TTTT: TIME_24_WITH_LONG_OFFSET,
  f: DATETIME_SHORT,
  ff: DATETIME_MED,
  fff: DATETIME_FULL,
  ffff: DATETIME_HUGE,
  F: DATETIME_SHORT_WITH_SECONDS,
  FF: DATETIME_MED_WITH_SECONDS,
  FFF: DATETIME_FULL_WITH_SECONDS,
  FFFF: DATETIME_HUGE_WITH_SECONDS
};
var Formatter = class _Formatter {
  static {
    __name(this, "Formatter");
  }
  static create(locale, opts = {}) {
    return new _Formatter(locale, opts);
  }
  static parseFormat(fmt) {
    let current = null, currentFull = "", bracketed = false;
    const splits = [];
    for (let i = 0; i < fmt.length; i++) {
      const c = fmt.charAt(i);
      if (c === "'") {
        if (currentFull.length > 0) {
          splits.push({
            literal: bracketed || /^\s+$/.test(currentFull),
            val: currentFull
          });
        }
        current = null;
        currentFull = "";
        bracketed = !bracketed;
      } else if (bracketed) {
        currentFull += c;
      } else if (c === current) {
        currentFull += c;
      } else {
        if (currentFull.length > 0) {
          splits.push({
            literal: /^\s+$/.test(currentFull),
            val: currentFull
          });
        }
        currentFull = c;
        current = c;
      }
    }
    if (currentFull.length > 0) {
      splits.push({
        literal: bracketed || /^\s+$/.test(currentFull),
        val: currentFull
      });
    }
    return splits;
  }
  static macroTokenToFormatOpts(token) {
    return macroTokenToFormatOpts[token];
  }
  constructor(locale, formatOpts) {
    this.opts = formatOpts;
    this.loc = locale;
    this.systemLoc = null;
  }
  formatWithSystemDefault(dt, opts) {
    if (this.systemLoc === null) {
      this.systemLoc = this.loc.redefaultToSystem();
    }
    const df = this.systemLoc.dtFormatter(dt, {
      ...this.opts,
      ...opts
    });
    return df.format();
  }
  dtFormatter(dt, opts = {}) {
    return this.loc.dtFormatter(dt, {
      ...this.opts,
      ...opts
    });
  }
  formatDateTime(dt, opts) {
    return this.dtFormatter(dt, opts).format();
  }
  formatDateTimeParts(dt, opts) {
    return this.dtFormatter(dt, opts).formatToParts();
  }
  formatInterval(interval, opts) {
    const df = this.dtFormatter(interval.start, opts);
    return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
  }
  resolvedOptions(dt, opts) {
    return this.dtFormatter(dt, opts).resolvedOptions();
  }
  num(n2, p = 0) {
    if (this.opts.forceSimple) {
      return padStart(n2, p);
    }
    const opts = {
      ...this.opts
    };
    if (p > 0) {
      opts.padTo = p;
    }
    return this.loc.numberFormatter(opts).format(n2);
  }
  formatDateTimeFromString(dt, fmt) {
    const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = /* @__PURE__ */ __name((opts, extract) => this.loc.extract(dt, opts, extract), "string"), formatOffset2 = /* @__PURE__ */ __name((opts) => {
      if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
        return "Z";
      }
      return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
    }, "formatOffset"), meridiem = /* @__PURE__ */ __name(() => knownEnglish ? meridiemForDateTime(dt) : string({
      hour: "numeric",
      hourCycle: "h12"
    }, "dayperiod"), "meridiem"), month = /* @__PURE__ */ __name((length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string(standalone ? {
      month: length
    } : {
      month: length,
      day: "numeric"
    }, "month"), "month"), weekday = /* @__PURE__ */ __name((length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string(standalone ? {
      weekday: length
    } : {
      weekday: length,
      month: "long",
      day: "numeric"
    }, "weekday"), "weekday"), maybeMacro = /* @__PURE__ */ __name((token) => {
      const formatOpts = _Formatter.macroTokenToFormatOpts(token);
      if (formatOpts) {
        return this.formatWithSystemDefault(dt, formatOpts);
      } else {
        return token;
      }
    }, "maybeMacro"), era = /* @__PURE__ */ __name((length) => knownEnglish ? eraForDateTime(dt, length) : string({
      era: length
    }, "era"), "era"), tokenToString = /* @__PURE__ */ __name((token) => {
      switch (token) {
        // ms
        case "S":
          return this.num(dt.millisecond);
        case "u":
        // falls through
        case "SSS":
          return this.num(dt.millisecond, 3);
        // seconds
        case "s":
          return this.num(dt.second);
        case "ss":
          return this.num(dt.second, 2);
        // fractional seconds
        case "uu":
          return this.num(Math.floor(dt.millisecond / 10), 2);
        case "uuu":
          return this.num(Math.floor(dt.millisecond / 100));
        // minutes
        case "m":
          return this.num(dt.minute);
        case "mm":
          return this.num(dt.minute, 2);
        // hours
        case "h":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
        case "hh":
          return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
        case "H":
          return this.num(dt.hour);
        case "HH":
          return this.num(dt.hour, 2);
        // offset
        case "Z":
          return formatOffset2({
            format: "narrow",
            allowZ: this.opts.allowZ
          });
        case "ZZ":
          return formatOffset2({
            format: "short",
            allowZ: this.opts.allowZ
          });
        case "ZZZ":
          return formatOffset2({
            format: "techie",
            allowZ: this.opts.allowZ
          });
        case "ZZZZ":
          return dt.zone.offsetName(dt.ts, {
            format: "short",
            locale: this.loc.locale
          });
        case "ZZZZZ":
          return dt.zone.offsetName(dt.ts, {
            format: "long",
            locale: this.loc.locale
          });
        // zone
        case "z":
          return dt.zoneName;
        // meridiems
        case "a":
          return meridiem();
        // dates
        case "d":
          return useDateTimeFormatter ? string({
            day: "numeric"
          }, "day") : this.num(dt.day);
        case "dd":
          return useDateTimeFormatter ? string({
            day: "2-digit"
          }, "day") : this.num(dt.day, 2);
        // weekdays - standalone
        case "c":
          return this.num(dt.weekday);
        case "ccc":
          return weekday("short", true);
        case "cccc":
          return weekday("long", true);
        case "ccccc":
          return weekday("narrow", true);
        // weekdays - format
        case "E":
          return this.num(dt.weekday);
        case "EEE":
          return weekday("short", false);
        case "EEEE":
          return weekday("long", false);
        case "EEEEE":
          return weekday("narrow", false);
        // months - standalone
        case "L":
          return useDateTimeFormatter ? string({
            month: "numeric",
            day: "numeric"
          }, "month") : this.num(dt.month);
        case "LL":
          return useDateTimeFormatter ? string({
            month: "2-digit",
            day: "numeric"
          }, "month") : this.num(dt.month, 2);
        case "LLL":
          return month("short", true);
        case "LLLL":
          return month("long", true);
        case "LLLLL":
          return month("narrow", true);
        // months - format
        case "M":
          return useDateTimeFormatter ? string({
            month: "numeric"
          }, "month") : this.num(dt.month);
        case "MM":
          return useDateTimeFormatter ? string({
            month: "2-digit"
          }, "month") : this.num(dt.month, 2);
        case "MMM":
          return month("short", false);
        case "MMMM":
          return month("long", false);
        case "MMMMM":
          return month("narrow", false);
        // years
        case "y":
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : this.num(dt.year);
        case "yy":
          return useDateTimeFormatter ? string({
            year: "2-digit"
          }, "year") : this.num(dt.year.toString().slice(-2), 2);
        case "yyyy":
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : this.num(dt.year, 4);
        case "yyyyyy":
          return useDateTimeFormatter ? string({
            year: "numeric"
          }, "year") : this.num(dt.year, 6);
        // eras
        case "G":
          return era("short");
        case "GG":
          return era("long");
        case "GGGGG":
          return era("narrow");
        case "kk":
          return this.num(dt.weekYear.toString().slice(-2), 2);
        case "kkkk":
          return this.num(dt.weekYear, 4);
        case "W":
          return this.num(dt.weekNumber);
        case "WW":
          return this.num(dt.weekNumber, 2);
        case "n":
          return this.num(dt.localWeekNumber);
        case "nn":
          return this.num(dt.localWeekNumber, 2);
        case "ii":
          return this.num(dt.localWeekYear.toString().slice(-2), 2);
        case "iiii":
          return this.num(dt.localWeekYear, 4);
        case "o":
          return this.num(dt.ordinal);
        case "ooo":
          return this.num(dt.ordinal, 3);
        case "q":
          return this.num(dt.quarter);
        case "qq":
          return this.num(dt.quarter, 2);
        case "X":
          return this.num(Math.floor(dt.ts / 1e3));
        case "x":
          return this.num(dt.ts);
        default:
          return maybeMacro(token);
      }
    }, "tokenToString");
    return stringifyTokens(_Formatter.parseFormat(fmt), tokenToString);
  }
  formatDurationFromString(dur, fmt) {
    const tokenToField = /* @__PURE__ */ __name((token) => {
      switch (token[0]) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
          return "hour";
        case "d":
          return "day";
        case "w":
          return "week";
        case "M":
          return "month";
        case "y":
          return "year";
        default:
          return null;
      }
    }, "tokenToField"), tokenToString = /* @__PURE__ */ __name((lildur) => (token) => {
      const mapped = tokenToField(token);
      if (mapped) {
        return this.num(lildur.get(mapped), token.length);
      } else {
        return token;
      }
    }, "tokenToString"), tokens = _Formatter.parseFormat(fmt), realTokens = tokens.reduce((found, { literal, val }) => literal ? found : found.concat(val), []), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));
    return stringifyTokens(tokens, tokenToString(collapsed));
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/regexParser.js
var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
function combineRegexes(...regexes) {
  const full = regexes.reduce((f, r) => f + r.source, "");
  return RegExp(`^${full}$`);
}
__name(combineRegexes, "combineRegexes");
function combineExtractors(...extractors) {
  return (m) => extractors.reduce(([mergedVals, mergedZone, cursor], ex) => {
    const [val, zone, next] = ex(m, cursor);
    return [
      {
        ...mergedVals,
        ...val
      },
      zone || mergedZone,
      next
    ];
  }, [
    {},
    null,
    1
  ]).slice(0, 2);
}
__name(combineExtractors, "combineExtractors");
function parse(s2, ...patterns) {
  if (s2 == null) {
    return [
      null,
      null
    ];
  }
  for (const [regex, extractor] of patterns) {
    const m = regex.exec(s2);
    if (m) {
      return extractor(m);
    }
  }
  return [
    null,
    null
  ];
}
__name(parse, "parse");
function simpleParse(...keys) {
  return (match2, cursor) => {
    const ret = {};
    let i;
    for (i = 0; i < keys.length; i++) {
      ret[keys[i]] = parseInteger(match2[cursor + i]);
    }
    return [
      ret,
      null,
      cursor + i
    ];
  };
}
__name(simpleParse, "simpleParse");
var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
var isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
var sqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`);
var sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
function int(match2, pos, fallback) {
  const m = match2[pos];
  return isUndefined(m) ? fallback : parseInteger(m);
}
__name(int, "int");
function extractISOYmd(match2, cursor) {
  const item2 = {
    year: int(match2, cursor),
    month: int(match2, cursor + 1, 1),
    day: int(match2, cursor + 2, 1)
  };
  return [
    item2,
    null,
    cursor + 3
  ];
}
__name(extractISOYmd, "extractISOYmd");
function extractISOTime(match2, cursor) {
  const item2 = {
    hours: int(match2, cursor, 0),
    minutes: int(match2, cursor + 1, 0),
    seconds: int(match2, cursor + 2, 0),
    milliseconds: parseMillis(match2[cursor + 3])
  };
  return [
    item2,
    null,
    cursor + 4
  ];
}
__name(extractISOTime, "extractISOTime");
function extractISOOffset(match2, cursor) {
  const local = !match2[cursor] && !match2[cursor + 1], fullOffset = signedOffset(match2[cursor + 1], match2[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
  return [
    {},
    zone,
    cursor + 3
  ];
}
__name(extractISOOffset, "extractISOOffset");
function extractIANAZone(match2, cursor) {
  const zone = match2[cursor] ? IANAZone.create(match2[cursor]) : null;
  return [
    {},
    zone,
    cursor + 1
  ];
}
__name(extractIANAZone, "extractIANAZone");
var isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function extractISODuration(match2) {
  const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match2;
  const hasNegativePrefix = s2[0] === "-";
  const negativeSeconds = secondStr && secondStr[0] === "-";
  const maybeNegate = /* @__PURE__ */ __name((num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num, "maybeNegate");
  return [
    {
      years: maybeNegate(parseFloating(yearStr)),
      months: maybeNegate(parseFloating(monthStr)),
      weeks: maybeNegate(parseFloating(weekStr)),
      days: maybeNegate(parseFloating(dayStr)),
      hours: maybeNegate(parseFloating(hourStr)),
      minutes: maybeNegate(parseFloating(minuteStr)),
      seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
      milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
    }
  ];
}
__name(extractISODuration, "extractISODuration");
var obsOffsets = {
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  const result = {
    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
    month: monthsShort.indexOf(monthStr) + 1,
    day: parseInteger(dayStr),
    hour: parseInteger(hourStr),
    minute: parseInteger(minuteStr)
  };
  if (secondStr) result.second = parseInteger(secondStr);
  if (weekdayStr) {
    result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
  }
  return result;
}
__name(fromStrings, "fromStrings");
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match2) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr, obsOffset, milOffset, offHourStr, offMinuteStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  let offset2;
  if (obsOffset) {
    offset2 = obsOffsets[obsOffset];
  } else if (milOffset) {
    offset2 = 0;
  } else {
    offset2 = signedOffset(offHourStr, offMinuteStr);
  }
  return [
    result,
    new FixedOffsetZone(offset2)
  ];
}
__name(extractRFC2822, "extractRFC2822");
function preprocessRFC2822(s2) {
  return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
__name(preprocessRFC2822, "preprocessRFC2822");
var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
var rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
var ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match2) {
  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [
    result,
    FixedOffsetZone.utcInstance
  ];
}
__name(extractRFC1123Or850, "extractRFC1123Or850");
function extractASCII(match2) {
  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
  return [
    result,
    FixedOffsetZone.utcInstance
  ];
}
__name(extractASCII, "extractASCII");
var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseISODate(s2) {
  return parse(s2, [
    isoYmdWithTimeExtensionRegex,
    extractISOYmdTimeAndOffset
  ], [
    isoWeekWithTimeExtensionRegex,
    extractISOWeekTimeAndOffset
  ], [
    isoOrdinalWithTimeExtensionRegex,
    extractISOOrdinalDateAndTime
  ], [
    isoTimeCombinedRegex,
    extractISOTimeAndOffset
  ]);
}
__name(parseISODate, "parseISODate");
function parseRFC2822Date(s2) {
  return parse(preprocessRFC2822(s2), [
    rfc2822,
    extractRFC2822
  ]);
}
__name(parseRFC2822Date, "parseRFC2822Date");
function parseHTTPDate(s2) {
  return parse(s2, [
    rfc1123,
    extractRFC1123Or850
  ], [
    rfc850,
    extractRFC1123Or850
  ], [
    ascii,
    extractASCII
  ]);
}
__name(parseHTTPDate, "parseHTTPDate");
function parseISODuration(s2) {
  return parse(s2, [
    isoDuration,
    extractISODuration
  ]);
}
__name(parseISODuration, "parseISODuration");
var extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s2) {
  return parse(s2, [
    isoTimeOnly,
    extractISOTimeOnly
  ]);
}
__name(parseISOTimeOnly, "parseISOTimeOnly");
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s2) {
  return parse(s2, [
    sqlYmdWithTimeExtensionRegex,
    extractISOYmdTimeAndOffset
  ], [
    sqlTimeCombinedRegex,
    extractISOTimeOffsetAndIANAZone
  ]);
}
__name(parseSQL, "parseSQL");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/duration.js
var INVALID = "Invalid Duration";
var lowOrderMatrix = {
  weeks: {
    days: 7,
    hours: 7 * 24,
    minutes: 7 * 24 * 60,
    seconds: 7 * 24 * 60 * 60,
    milliseconds: 7 * 24 * 60 * 60 * 1e3
  },
  days: {
    hours: 24,
    minutes: 24 * 60,
    seconds: 24 * 60 * 60,
    milliseconds: 24 * 60 * 60 * 1e3
  },
  hours: {
    minutes: 60,
    seconds: 60 * 60,
    milliseconds: 60 * 60 * 1e3
  },
  minutes: {
    seconds: 60,
    milliseconds: 60 * 1e3
  },
  seconds: {
    milliseconds: 1e3
  }
};
var casualMatrix = {
  years: {
    quarters: 4,
    months: 12,
    weeks: 52,
    days: 365,
    hours: 365 * 24,
    minutes: 365 * 24 * 60,
    seconds: 365 * 24 * 60 * 60,
    milliseconds: 365 * 24 * 60 * 60 * 1e3
  },
  quarters: {
    months: 3,
    weeks: 13,
    days: 91,
    hours: 91 * 24,
    minutes: 91 * 24 * 60,
    seconds: 91 * 24 * 60 * 60,
    milliseconds: 91 * 24 * 60 * 60 * 1e3
  },
  months: {
    weeks: 4,
    days: 30,
    hours: 30 * 24,
    minutes: 30 * 24 * 60,
    seconds: 30 * 24 * 60 * 60,
    milliseconds: 30 * 24 * 60 * 60 * 1e3
  },
  ...lowOrderMatrix
};
var daysInYearAccurate = 146097 / 400;
var daysInMonthAccurate = 146097 / 4800;
var accurateMatrix = {
  years: {
    quarters: 4,
    months: 12,
    weeks: daysInYearAccurate / 7,
    days: daysInYearAccurate,
    hours: daysInYearAccurate * 24,
    minutes: daysInYearAccurate * 24 * 60,
    seconds: daysInYearAccurate * 24 * 60 * 60,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
  },
  quarters: {
    months: 3,
    weeks: daysInYearAccurate / 28,
    days: daysInYearAccurate / 4,
    hours: daysInYearAccurate * 24 / 4,
    minutes: daysInYearAccurate * 24 * 60 / 4,
    seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
  },
  months: {
    weeks: daysInMonthAccurate / 7,
    days: daysInMonthAccurate,
    hours: daysInMonthAccurate * 24,
    minutes: daysInMonthAccurate * 24 * 60,
    seconds: daysInMonthAccurate * 24 * 60 * 60,
    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
  },
  ...lowOrderMatrix
};
var orderedUnits = [
  "years",
  "quarters",
  "months",
  "weeks",
  "days",
  "hours",
  "minutes",
  "seconds",
  "milliseconds"
];
var reverseUnits = orderedUnits.slice(0).reverse();
function clone(dur, alts, clear = false) {
  const conf = {
    values: clear ? alts.values : {
      ...dur.values,
      ...alts.values || {}
    },
    loc: dur.loc.clone(alts.loc),
    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
    matrix: alts.matrix || dur.matrix
  };
  return new Duration(conf);
}
__name(clone, "clone");
function durationToMillis(matrix, vals) {
  let sum2 = vals.milliseconds ?? 0;
  for (const unit of reverseUnits.slice(1)) {
    if (vals[unit]) {
      sum2 += vals[unit] * matrix[unit]["milliseconds"];
    }
  }
  return sum2;
}
__name(durationToMillis, "durationToMillis");
function normalizeValues(matrix, vals) {
  const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
  orderedUnits.reduceRight((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const previousVal = vals[previous] * factor;
        const conv = matrix[current][previous];
        const rollUp = Math.floor(previousVal / conv);
        vals[current] += rollUp * factor;
        vals[previous] -= rollUp * conv * factor;
      }
      return current;
    } else {
      return previous;
    }
  }, null);
  orderedUnits.reduce((previous, current) => {
    if (!isUndefined(vals[current])) {
      if (previous) {
        const fraction = vals[previous] % 1;
        vals[previous] -= fraction;
        vals[current] += fraction * matrix[previous][current];
      }
      return current;
    } else {
      return previous;
    }
  }, null);
}
__name(normalizeValues, "normalizeValues");
function removeZeroes(vals) {
  const newVals = {};
  for (const [key, value] of Object.entries(vals)) {
    if (value !== 0) {
      newVals[key] = value;
    }
  }
  return newVals;
}
__name(removeZeroes, "removeZeroes");
var Duration = class _Duration {
  static {
    __name(this, "Duration");
  }
  /**
  * @private
  */
  constructor(config) {
    const accurate = config.conversionAccuracy === "longterm" || false;
    let matrix = accurate ? accurateMatrix : casualMatrix;
    if (config.matrix) {
      matrix = config.matrix;
    }
    this.values = config.values;
    this.loc = config.loc || Locale.create();
    this.conversionAccuracy = accurate ? "longterm" : "casual";
    this.invalid = config.invalid || null;
    this.matrix = matrix;
    this.isLuxonDuration = true;
  }
  /**
  * Create Duration from a number of milliseconds.
  * @param {number} count of milliseconds
  * @param {Object} opts - options for parsing
  * @param {string} [opts.locale='en-US'] - the locale to use
  * @param {string} opts.numberingSystem - the numbering system to use
  * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
  * @return {Duration}
  */
  static fromMillis(count, opts) {
    return _Duration.fromObject({
      milliseconds: count
    }, opts);
  }
  /**
  * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
  * If this object is empty then a zero milliseconds duration is returned.
  * @param {Object} obj - the object to create the DateTime from
  * @param {number} obj.years
  * @param {number} obj.quarters
  * @param {number} obj.months
  * @param {number} obj.weeks
  * @param {number} obj.days
  * @param {number} obj.hours
  * @param {number} obj.minutes
  * @param {number} obj.seconds
  * @param {number} obj.milliseconds
  * @param {Object} [opts=[]] - options for creating this Duration
  * @param {string} [opts.locale='en-US'] - the locale to use
  * @param {string} opts.numberingSystem - the numbering system to use
  * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
  * @param {string} [opts.matrix=Object] - the custom conversion system to use
  * @return {Duration}
  */
  static fromObject(obj, opts = {}) {
    if (obj == null || typeof obj !== "object") {
      throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`);
    }
    return new _Duration({
      values: normalizeObject(obj, _Duration.normalizeUnit),
      loc: Locale.fromObject(opts),
      conversionAccuracy: opts.conversionAccuracy,
      matrix: opts.matrix
    });
  }
  /**
  * Create a Duration from DurationLike.
  *
  * @param {Object | number | Duration} durationLike
  * One of:
  * - object with keys like 'years' and 'hours'.
  * - number representing milliseconds
  * - Duration instance
  * @return {Duration}
  */
  static fromDurationLike(durationLike) {
    if (isNumber(durationLike)) {
      return _Duration.fromMillis(durationLike);
    } else if (_Duration.isDuration(durationLike)) {
      return durationLike;
    } else if (typeof durationLike === "object") {
      return _Duration.fromObject(durationLike);
    } else {
      throw new InvalidArgumentError(`Unknown duration argument ${durationLike} of type ${typeof durationLike}`);
    }
  }
  /**
  * Create a Duration from an ISO 8601 duration string.
  * @param {string} text - text to parse
  * @param {Object} opts - options for parsing
  * @param {string} [opts.locale='en-US'] - the locale to use
  * @param {string} opts.numberingSystem - the numbering system to use
  * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
  * @param {string} [opts.matrix=Object] - the preset conversion system to use
  * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
  * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
  * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
  * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
  * @return {Duration}
  */
  static fromISO(text, opts) {
    const [parsed] = parseISODuration(text);
    if (parsed) {
      return _Duration.fromObject(parsed, opts);
    } else {
      return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }
  /**
  * Create a Duration from an ISO 8601 time string.
  * @param {string} text - text to parse
  * @param {Object} opts - options for parsing
  * @param {string} [opts.locale='en-US'] - the locale to use
  * @param {string} opts.numberingSystem - the numbering system to use
  * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
  * @param {string} [opts.matrix=Object] - the conversion system to use
  * @see https://en.wikipedia.org/wiki/ISO_8601#Times
  * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
  * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
  * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
  * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
  * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
  * @return {Duration}
  */
  static fromISOTime(text, opts) {
    const [parsed] = parseISOTimeOnly(text);
    if (parsed) {
      return _Duration.fromObject(parsed, opts);
    } else {
      return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
  }
  /**
  * Create an invalid Duration.
  * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
  * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
  * @return {Duration}
  */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDurationError(invalid);
    } else {
      return new _Duration({
        invalid
      });
    }
  }
  /**
  * @private
  */
  static normalizeUnit(unit) {
    const normalized = {
      year: "years",
      years: "years",
      quarter: "quarters",
      quarters: "quarters",
      month: "months",
      months: "months",
      week: "weeks",
      weeks: "weeks",
      day: "days",
      days: "days",
      hour: "hours",
      hours: "hours",
      minute: "minutes",
      minutes: "minutes",
      second: "seconds",
      seconds: "seconds",
      millisecond: "milliseconds",
      milliseconds: "milliseconds"
    }[unit ? unit.toLowerCase() : unit];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  /**
  * Check if an object is a Duration. Works across context boundaries
  * @param {object} o
  * @return {boolean}
  */
  static isDuration(o) {
    return o && o.isLuxonDuration || false;
  }
  /**
  * Get  the locale of a Duration, such 'en-GB'
  * @type {string}
  */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  /**
  * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
  *
  * @type {string}
  */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  /**
  * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
  * * `S` for milliseconds
  * * `s` for seconds
  * * `m` for minutes
  * * `h` for hours
  * * `d` for days
  * * `w` for weeks
  * * `M` for months
  * * `y` for years
  * Notes:
  * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
  * * Tokens can be escaped by wrapping with single quotes.
  * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
  * @param {string} fmt - the format string
  * @param {Object} opts - options
  * @param {boolean} [opts.floor=true] - floor numerical values
  * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
  * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
  * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
  * @return {string}
  */
  toFormat(fmt, opts = {}) {
    const fmtOpts = {
      ...opts,
      floor: opts.round !== false && opts.floor !== false
    };
    return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
  }
  /**
  * Returns a string representation of a Duration with all units included.
  * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
  * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
  * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
  * @example
  * ```js
  * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
  * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
  * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
  * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
  * ```
  */
  toHuman(opts = {}) {
    if (!this.isValid) return INVALID;
    const l2 = orderedUnits.map((unit) => {
      const val = this.values[unit];
      if (isUndefined(val)) {
        return null;
      }
      return this.loc.numberFormatter({
        style: "unit",
        unitDisplay: "long",
        ...opts,
        unit: unit.slice(0, -1)
      }).format(val);
    }).filter((n2) => n2);
    return this.loc.listFormatter({
      type: "conjunction",
      style: opts.listStyle || "narrow",
      ...opts
    }).format(l2);
  }
  /**
  * Returns a JavaScript object with this Duration's values.
  * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
  * @return {Object}
  */
  toObject() {
    if (!this.isValid) return {};
    return {
      ...this.values
    };
  }
  /**
  * Returns an ISO 8601-compliant string representation of this Duration.
  * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
  * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
  * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
  * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
  * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
  * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
  * @return {string}
  */
  toISO() {
    if (!this.isValid) return null;
    let s2 = "P";
    if (this.years !== 0) s2 += this.years + "Y";
    if (this.months !== 0 || this.quarters !== 0) s2 += this.months + this.quarters * 3 + "M";
    if (this.weeks !== 0) s2 += this.weeks + "W";
    if (this.days !== 0) s2 += this.days + "D";
    if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s2 += "T";
    if (this.hours !== 0) s2 += this.hours + "H";
    if (this.minutes !== 0) s2 += this.minutes + "M";
    if (this.seconds !== 0 || this.milliseconds !== 0)
      s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
    if (s2 === "P") s2 += "T0S";
    return s2;
  }
  /**
  * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
  * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
  * @see https://en.wikipedia.org/wiki/ISO_8601#Times
  * @param {Object} opts - options
  * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
  * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
  * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
  * @param {string} [opts.format='extended'] - choose between the basic and extended format
  * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
  * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
  * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
  * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
  * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
  * @return {string}
  */
  toISOTime(opts = {}) {
    if (!this.isValid) return null;
    const millis = this.toMillis();
    if (millis < 0 || millis >= 864e5) return null;
    opts = {
      suppressMilliseconds: false,
      suppressSeconds: false,
      includePrefix: false,
      format: "extended",
      ...opts,
      includeOffset: false
    };
    const dateTime = DateTime.fromMillis(millis, {
      zone: "UTC"
    });
    return dateTime.toISOTime(opts);
  }
  /**
  * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
  * @return {string}
  */
  toJSON() {
    return this.toISO();
  }
  /**
  * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
  * @return {string}
  */
  toString() {
    return this.toISO();
  }
  /**
  * Returns a string representation of this Duration appropriate for the REPL.
  * @return {string}
  */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Duration { values: ${JSON.stringify(this.values)} }`;
    } else {
      return `Duration { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  /**
  * Returns an milliseconds value of this Duration.
  * @return {number}
  */
  toMillis() {
    if (!this.isValid) return NaN;
    return durationToMillis(this.matrix, this.values);
  }
  /**
  * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
  * @return {number}
  */
  valueOf() {
    return this.toMillis();
  }
  /**
  * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
  * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
  * @return {Duration}
  */
  plus(duration) {
    if (!this.isValid) return this;
    const dur = _Duration.fromDurationLike(duration), result = {};
    for (const k of orderedUnits) {
      if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
        result[k] = dur.get(k) + this.get(k);
      }
    }
    return clone(this, {
      values: result
    }, true);
  }
  /**
  * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
  * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
  * @return {Duration}
  */
  minus(duration) {
    if (!this.isValid) return this;
    const dur = _Duration.fromDurationLike(duration);
    return this.plus(dur.negate());
  }
  /**
  * Scale this Duration by the specified amount. Return a newly-constructed Duration.
  * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
  * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
  * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
  * @return {Duration}
  */
  mapUnits(fn) {
    if (!this.isValid) return this;
    const result = {};
    for (const k of Object.keys(this.values)) {
      result[k] = asNumber(fn(this.values[k], k));
    }
    return clone(this, {
      values: result
    }, true);
  }
  /**
  * Get the value of unit.
  * @param {string} unit - a unit such as 'minute' or 'day'
  * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
  * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
  * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
  * @return {number}
  */
  get(unit) {
    return this[_Duration.normalizeUnit(unit)];
  }
  /**
  * "Set" the values of specified units. Return a newly-constructed Duration.
  * @param {Object} values - a mapping of units to numbers
  * @example dur.set({ years: 2017 })
  * @example dur.set({ hours: 8, minutes: 30 })
  * @return {Duration}
  */
  set(values) {
    if (!this.isValid) return this;
    const mixed = {
      ...this.values,
      ...normalizeObject(values, _Duration.normalizeUnit)
    };
    return clone(this, {
      values: mixed
    });
  }
  /**
  * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
  * @example dur.reconfigure({ locale: 'en-GB' })
  * @return {Duration}
  */
  reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
    const loc = this.loc.clone({
      locale,
      numberingSystem
    });
    const opts = {
      loc,
      matrix,
      conversionAccuracy
    };
    return clone(this, opts);
  }
  /**
  * Return the length of the duration in the specified unit.
  * @param {string} unit - a unit such as 'minutes' or 'days'
  * @example Duration.fromObject({years: 1}).as('days') //=> 365
  * @example Duration.fromObject({years: 1}).as('months') //=> 12
  * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
  * @return {number}
  */
  as(unit) {
    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
  }
  /**
  * Reduce this Duration to its canonical representation in its current units.
  * Assuming the overall value of the Duration is positive, this means:
  * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
  * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
  *   the overall value would be negative, see third example)
  * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
  *
  * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
  * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
  * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
  * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
  * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
  * @return {Duration}
  */
  normalize() {
    if (!this.isValid) return this;
    const vals = this.toObject();
    normalizeValues(this.matrix, vals);
    return clone(this, {
      values: vals
    }, true);
  }
  /**
  * Rescale units to its largest representation
  * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
  * @return {Duration}
  */
  rescale() {
    if (!this.isValid) return this;
    const vals = removeZeroes(this.normalize().shiftToAll().toObject());
    return clone(this, {
      values: vals
    }, true);
  }
  /**
  * Convert this Duration into its representation in a different set of units.
  * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
  * @return {Duration}
  */
  shiftTo(...units) {
    if (!this.isValid) return this;
    if (units.length === 0) {
      return this;
    }
    units = units.map((u) => _Duration.normalizeUnit(u));
    const built = {}, accumulated = {}, vals = this.toObject();
    let lastUnit;
    for (const k of orderedUnits) {
      if (units.indexOf(k) >= 0) {
        lastUnit = k;
        let own = 0;
        for (const ak in accumulated) {
          own += this.matrix[ak][k] * accumulated[ak];
          accumulated[ak] = 0;
        }
        if (isNumber(vals[k])) {
          own += vals[k];
        }
        const i = Math.trunc(own);
        built[k] = i;
        accumulated[k] = (own * 1e3 - i * 1e3) / 1e3;
      } else if (isNumber(vals[k])) {
        accumulated[k] = vals[k];
      }
    }
    for (const key in accumulated) {
      if (accumulated[key] !== 0) {
        built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
      }
    }
    normalizeValues(this.matrix, built);
    return clone(this, {
      values: built
    }, true);
  }
  /**
  * Shift this Duration to all available units.
  * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
  * @return {Duration}
  */
  shiftToAll() {
    if (!this.isValid) return this;
    return this.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds");
  }
  /**
  * Return the negative of this Duration.
  * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
  * @return {Duration}
  */
  negate() {
    if (!this.isValid) return this;
    const negated = {};
    for (const k of Object.keys(this.values)) {
      negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
    }
    return clone(this, {
      values: negated
    }, true);
  }
  /**
  * Get the years.
  * @type {number}
  */
  get years() {
    return this.isValid ? this.values.years || 0 : NaN;
  }
  /**
  * Get the quarters.
  * @type {number}
  */
  get quarters() {
    return this.isValid ? this.values.quarters || 0 : NaN;
  }
  /**
  * Get the months.
  * @type {number}
  */
  get months() {
    return this.isValid ? this.values.months || 0 : NaN;
  }
  /**
  * Get the weeks
  * @type {number}
  */
  get weeks() {
    return this.isValid ? this.values.weeks || 0 : NaN;
  }
  /**
  * Get the days.
  * @type {number}
  */
  get days() {
    return this.isValid ? this.values.days || 0 : NaN;
  }
  /**
  * Get the hours.
  * @type {number}
  */
  get hours() {
    return this.isValid ? this.values.hours || 0 : NaN;
  }
  /**
  * Get the minutes.
  * @type {number}
  */
  get minutes() {
    return this.isValid ? this.values.minutes || 0 : NaN;
  }
  /**
  * Get the seconds.
  * @return {number}
  */
  get seconds() {
    return this.isValid ? this.values.seconds || 0 : NaN;
  }
  /**
  * Get the milliseconds.
  * @return {number}
  */
  get milliseconds() {
    return this.isValid ? this.values.milliseconds || 0 : NaN;
  }
  /**
  * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
  * on invalid DateTimes or Intervals.
  * @return {boolean}
  */
  get isValid() {
    return this.invalid === null;
  }
  /**
  * Returns an error code if this Duration became invalid, or null if the Duration is valid
  * @return {string}
  */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  /**
  * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
  * @type {string}
  */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  /**
  * Equality check
  * Two Durations are equal iff they have the same units and the same values for each unit.
  * @param {Duration} other
  * @return {boolean}
  */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    if (!this.loc.equals(other.loc)) {
      return false;
    }
    function eq(v1, v2) {
      if (v1 === void 0 || v1 === 0) return v2 === void 0 || v2 === 0;
      return v1 === v2;
    }
    __name(eq, "eq");
    for (const u of orderedUnits) {
      if (!eq(this.values[u], other.values[u])) {
        return false;
      }
    }
    return true;
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/interval.js
var INVALID2 = "Invalid Interval";
function validateStartEnd(start, end) {
  if (!start || !start.isValid) {
    return Interval.invalid("missing or invalid start");
  } else if (!end || !end.isValid) {
    return Interval.invalid("missing or invalid end");
  } else if (end < start) {
    return Interval.invalid("end before start", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);
  } else {
    return null;
  }
}
__name(validateStartEnd, "validateStartEnd");
var Interval = class _Interval {
  static {
    __name(this, "Interval");
  }
  /**
  * @private
  */
  constructor(config) {
    this.s = config.start;
    this.e = config.end;
    this.invalid = config.invalid || null;
    this.isLuxonInterval = true;
  }
  /**
  * Create an invalid Interval.
  * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
  * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
  * @return {Interval}
  */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidIntervalError(invalid);
    } else {
      return new _Interval({
        invalid
      });
    }
  }
  /**
  * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
  * @param {DateTime|Date|Object} start
  * @param {DateTime|Date|Object} end
  * @return {Interval}
  */
  static fromDateTimes(start, end) {
    const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
    const validateError = validateStartEnd(builtStart, builtEnd);
    if (validateError == null) {
      return new _Interval({
        start: builtStart,
        end: builtEnd
      });
    } else {
      return validateError;
    }
  }
  /**
  * Create an Interval from a start DateTime and a Duration to extend to.
  * @param {DateTime|Date|Object} start
  * @param {Duration|Object|number} duration - the length of the Interval.
  * @return {Interval}
  */
  static after(start, duration) {
    const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
    return _Interval.fromDateTimes(dt, dt.plus(dur));
  }
  /**
  * Create an Interval from an end DateTime and a Duration to extend backwards to.
  * @param {DateTime|Date|Object} end
  * @param {Duration|Object|number} duration - the length of the Interval.
  * @return {Interval}
  */
  static before(end, duration) {
    const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
    return _Interval.fromDateTimes(dt.minus(dur), dt);
  }
  /**
  * Create an Interval from an ISO 8601 string.
  * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
  * @param {string} text - the ISO string to parse
  * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
  * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
  * @return {Interval}
  */
  static fromISO(text, opts) {
    const [s2, e] = (text || "").split("/", 2);
    if (s2 && e) {
      let start, startIsValid;
      try {
        start = DateTime.fromISO(s2, opts);
        startIsValid = start.isValid;
      } catch (e2) {
        startIsValid = false;
      }
      let end, endIsValid;
      try {
        end = DateTime.fromISO(e, opts);
        endIsValid = end.isValid;
      } catch (e2) {
        endIsValid = false;
      }
      if (startIsValid && endIsValid) {
        return _Interval.fromDateTimes(start, end);
      }
      if (startIsValid) {
        const dur = Duration.fromISO(e, opts);
        if (dur.isValid) {
          return _Interval.after(start, dur);
        }
      } else if (endIsValid) {
        const dur = Duration.fromISO(s2, opts);
        if (dur.isValid) {
          return _Interval.before(end, dur);
        }
      }
    }
    return _Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
  }
  /**
  * Check if an object is an Interval. Works across context boundaries
  * @param {object} o
  * @return {boolean}
  */
  static isInterval(o) {
    return o && o.isLuxonInterval || false;
  }
  /**
  * Returns the start of the Interval
  * @type {DateTime}
  */
  get start() {
    return this.isValid ? this.s : null;
  }
  /**
  * Returns the end of the Interval
  * @type {DateTime}
  */
  get end() {
    return this.isValid ? this.e : null;
  }
  /**
  * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
  * @type {boolean}
  */
  get isValid() {
    return this.invalidReason === null;
  }
  /**
  * Returns an error code if this Interval is invalid, or null if the Interval is valid
  * @type {string}
  */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  /**
  * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
  * @type {string}
  */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  /**
  * Returns the length of the Interval in the specified unit.
  * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
  * @return {number}
  */
  length(unit = "milliseconds") {
    return this.isValid ? this.toDuration(...[
      unit
    ]).get(unit) : NaN;
  }
  /**
  * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
  * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
  * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
  * @param {string} [unit='milliseconds'] - the unit of time to count.
  * @param {Object} opts - options
  * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
  * @return {number}
  */
  count(unit = "milliseconds", opts) {
    if (!this.isValid) return NaN;
    const start = this.start.startOf(unit, opts);
    let end;
    if (opts?.useLocaleWeeks) {
      end = this.end.reconfigure({
        locale: start.locale
      });
    } else {
      end = this.end;
    }
    end = end.startOf(unit, opts);
    return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
  }
  /**
  * Returns whether this Interval's start and end are both in the same unit of time
  * @param {string} unit - the unit of time to check sameness on
  * @return {boolean}
  */
  hasSame(unit) {
    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
  }
  /**
  * Return whether this Interval has the same start and end DateTimes.
  * @return {boolean}
  */
  isEmpty() {
    return this.s.valueOf() === this.e.valueOf();
  }
  /**
  * Return whether this Interval's start is after the specified DateTime.
  * @param {DateTime} dateTime
  * @return {boolean}
  */
  isAfter(dateTime) {
    if (!this.isValid) return false;
    return this.s > dateTime;
  }
  /**
  * Return whether this Interval's end is before the specified DateTime.
  * @param {DateTime} dateTime
  * @return {boolean}
  */
  isBefore(dateTime) {
    if (!this.isValid) return false;
    return this.e <= dateTime;
  }
  /**
  * Return whether this Interval contains the specified DateTime.
  * @param {DateTime} dateTime
  * @return {boolean}
  */
  contains(dateTime) {
    if (!this.isValid) return false;
    return this.s <= dateTime && this.e > dateTime;
  }
  /**
  * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
  * @param {Object} values - the values to set
  * @param {DateTime} values.start - the starting DateTime
  * @param {DateTime} values.end - the ending DateTime
  * @return {Interval}
  */
  set({ start, end } = {}) {
    if (!this.isValid) return this;
    return _Interval.fromDateTimes(start || this.s, end || this.e);
  }
  /**
  * Split this Interval at each of the specified DateTimes
  * @param {...DateTime} dateTimes - the unit of time to count.
  * @return {Array}
  */
  splitAt(...dateTimes) {
    if (!this.isValid) return [];
    const sorted = dateTimes.map(friendlyDateTime).filter((d) => this.contains(d)).sort((a, b) => a.toMillis() - b.toMillis()), results = [];
    let { s: s2 } = this, i = 0;
    while (s2 < this.e) {
      const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
      results.push(_Interval.fromDateTimes(s2, next));
      s2 = next;
      i += 1;
    }
    return results;
  }
  /**
  * Split this Interval into smaller Intervals, each of the specified length.
  * Left over time is grouped into a smaller interval
  * @param {Duration|Object|number} duration - The length of each resulting interval.
  * @return {Array}
  */
  splitBy(duration) {
    const dur = Duration.fromDurationLike(duration);
    if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
      return [];
    }
    let { s: s2 } = this, idx = 1, next;
    const results = [];
    while (s2 < this.e) {
      const added = this.start.plus(dur.mapUnits((x) => x * idx));
      next = +added > +this.e ? this.e : added;
      results.push(_Interval.fromDateTimes(s2, next));
      s2 = next;
      idx += 1;
    }
    return results;
  }
  /**
  * Split this Interval into the specified number of smaller intervals.
  * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
  * @return {Array}
  */
  divideEqually(numberOfParts) {
    if (!this.isValid) return [];
    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
  }
  /**
  * Return whether this Interval overlaps with the specified Interval
  * @param {Interval} other
  * @return {boolean}
  */
  overlaps(other) {
    return this.e > other.s && this.s < other.e;
  }
  /**
  * Return whether this Interval's end is adjacent to the specified Interval's start.
  * @param {Interval} other
  * @return {boolean}
  */
  abutsStart(other) {
    if (!this.isValid) return false;
    return +this.e === +other.s;
  }
  /**
  * Return whether this Interval's start is adjacent to the specified Interval's end.
  * @param {Interval} other
  * @return {boolean}
  */
  abutsEnd(other) {
    if (!this.isValid) return false;
    return +other.e === +this.s;
  }
  /**
  * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.
  * @param {Interval} other
  * @return {boolean}
  */
  engulfs(other) {
    if (!this.isValid) return false;
    return this.s <= other.s && this.e >= other.e;
  }
  /**
  * Return whether this Interval has the same start and end as the specified Interval.
  * @param {Interval} other
  * @return {boolean}
  */
  equals(other) {
    if (!this.isValid || !other.isValid) {
      return false;
    }
    return this.s.equals(other.s) && this.e.equals(other.e);
  }
  /**
  * Return an Interval representing the intersection of this Interval and the specified Interval.
  * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
  * Returns null if the intersection is empty, meaning, the intervals don't intersect.
  * @param {Interval} other
  * @return {Interval}
  */
  intersection(other) {
    if (!this.isValid) return this;
    const s2 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
    if (s2 >= e) {
      return null;
    } else {
      return _Interval.fromDateTimes(s2, e);
    }
  }
  /**
  * Return an Interval representing the union of this Interval and the specified Interval.
  * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
  * @param {Interval} other
  * @return {Interval}
  */
  union(other) {
    if (!this.isValid) return this;
    const s2 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
    return _Interval.fromDateTimes(s2, e);
  }
  /**
  * Merge an array of Intervals into a equivalent minimal set of Intervals.
  * Combines overlapping and adjacent Intervals.
  * @param {Array} intervals
  * @return {Array}
  */
  static merge(intervals) {
    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item2) => {
      if (!current) {
        return [
          sofar,
          item2
        ];
      } else if (current.overlaps(item2) || current.abutsStart(item2)) {
        return [
          sofar,
          current.union(item2)
        ];
      } else {
        return [
          sofar.concat([
            current
          ]),
          item2
        ];
      }
    }, [
      [],
      null
    ]);
    if (final) {
      found.push(final);
    }
    return found;
  }
  /**
  * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
  * @param {Array} intervals
  * @return {Array}
  */
  static xor(intervals) {
    let start = null, currentCount = 0;
    const results = [], ends = intervals.map((i) => [
      {
        time: i.s,
        type: "s"
      },
      {
        time: i.e,
        type: "e"
      }
    ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b) => a.time - b.time);
    for (const i of arr) {
      currentCount += i.type === "s" ? 1 : -1;
      if (currentCount === 1) {
        start = i.time;
      } else {
        if (start && +start !== +i.time) {
          results.push(_Interval.fromDateTimes(start, i.time));
        }
        start = null;
      }
    }
    return _Interval.merge(results);
  }
  /**
  * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
  * @param {...Interval} intervals
  * @return {Array}
  */
  difference(...intervals) {
    return _Interval.xor([
      this
    ].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
  }
  /**
  * Returns a string representation of this Interval appropriate for debugging.
  * @return {string}
  */
  toString() {
    if (!this.isValid) return INVALID2;
    return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
  }
  /**
  * Returns a string representation of this Interval appropriate for the REPL.
  * @return {string}
  */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
    } else {
      return `Interval { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  /**
  * Returns a localized string representing this Interval. Accepts the same options as the
  * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
  * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
  * is browser-specific, but in general it will return an appropriate representation of the
  * Interval in the assigned locale. Defaults to the system's locale if no locale has been
  * specified.
  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
  * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
  * Intl.DateTimeFormat constructor options.
  * @param {Object} opts - Options to override the configuration of the start DateTime.
  * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
  * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
  * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
  * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
  * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
  * @return {string}
  */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
  }
  /**
  * Returns an ISO 8601-compliant string representation of this Interval.
  * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
  * @param {Object} opts - The same options as {@link DateTime#toISO}
  * @return {string}
  */
  toISO(opts) {
    if (!this.isValid) return INVALID2;
    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
  }
  /**
  * Returns an ISO 8601-compliant string representation of date of this Interval.
  * The time components are ignored.
  * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
  * @return {string}
  */
  toISODate() {
    if (!this.isValid) return INVALID2;
    return `${this.s.toISODate()}/${this.e.toISODate()}`;
  }
  /**
  * Returns an ISO 8601-compliant string representation of time of this Interval.
  * The date components are ignored.
  * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
  * @param {Object} opts - The same options as {@link DateTime#toISO}
  * @return {string}
  */
  toISOTime(opts) {
    if (!this.isValid) return INVALID2;
    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
  }
  /**
  * Returns a string representation of this Interval formatted according to the specified format
  * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
  * formatting tool.
  * @param {string} dateFormat - The format string. This string formats the start and end time.
  * See {@link DateTime#toFormat} for details.
  * @param {Object} opts - Options.
  * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
  * representations.
  * @return {string}
  */
  toFormat(dateFormat, { separator = " \u2013 " } = {}) {
    if (!this.isValid) return INVALID2;
    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
  }
  /**
  * Return a Duration representing the time spanned by this interval.
  * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
  * @param {Object} opts - options that affect the creation of the Duration
  * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
  * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
  * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
  * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
  * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
  * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
  * @return {Duration}
  */
  toDuration(unit, opts) {
    if (!this.isValid) {
      return Duration.invalid(this.invalidReason);
    }
    return this.e.diff(this.s, unit, opts);
  }
  /**
  * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
  * @param {function} mapFn
  * @return {Interval}
  * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
  * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
  */
  mapEndpoints(mapFn) {
    return _Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/info.js
var Info = class {
  static {
    __name(this, "Info");
  }
  /**
  * Return whether the specified zone contains a DST.
  * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
  * @return {boolean}
  */
  static hasDST(zone = Settings.defaultZone) {
    const proto = DateTime.now().setZone(zone).set({
      month: 12
    });
    return !zone.isUniversal && proto.offset !== proto.set({
      month: 6
    }).offset;
  }
  /**
  * Return whether the specified zone is a valid IANA specifier.
  * @param {string} zone - Zone to check
  * @return {boolean}
  */
  static isValidIANAZone(zone) {
    return IANAZone.isValidZone(zone);
  }
  /**
  * Converts the input into a {@link Zone} instance.
  *
  * * If `input` is already a Zone instance, it is returned unchanged.
  * * If `input` is a string containing a valid time zone name, a Zone instance
  *   with that name is returned.
  * * If `input` is a string that doesn't refer to a known time zone, a Zone
  *   instance with {@link Zone#isValid} == false is returned.
  * * If `input is a number, a Zone instance with the specified fixed offset
  *   in minutes is returned.
  * * If `input` is `null` or `undefined`, the default zone is returned.
  * @param {string|Zone|number} [input] - the value to be converted
  * @return {Zone}
  */
  static normalizeZone(input) {
    return normalizeZone(input, Settings.defaultZone);
  }
  /**
  * Get the weekday on which the week starts according to the given locale.
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
  */
  static getStartOfWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getStartOfWeek();
  }
  /**
  * Get the minimum number of days necessary in a week before it is considered part of the next year according
  * to the given locale.
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @returns {number}
  */
  static getMinimumDaysInFirstWeek({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getMinDaysInFirstWeek();
  }
  /**
  * Get the weekdays, which are considered the weekend according to the given locale
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
  */
  static getWeekendWeekdays({ locale = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale)).getWeekendDays().slice();
  }
  /**
  * Return an array of standalone month names.
  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
  * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @param {string} [opts.numberingSystem=null] - the numbering system
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @param {string} [opts.outputCalendar='gregory'] - the calendar
  * @example Info.months()[0] //=> 'January'
  * @example Info.months('short')[0] //=> 'Jan'
  * @example Info.months('numeric')[0] //=> '1'
  * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
  * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
  * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
  * @return {Array}
  */
  static months(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
  }
  /**
  * Return an array of format month names.
  * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
  * changes the string.
  * See {@link Info#months}
  * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @param {string} [opts.numberingSystem=null] - the numbering system
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @param {string} [opts.outputCalendar='gregory'] - the calendar
  * @return {Array}
  */
  static monthsFormat(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
  }
  /**
  * Return an array of standalone week names.
  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
  * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @param {string} [opts.numberingSystem=null] - the numbering system
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @example Info.weekdays()[0] //=> 'Monday'
  * @example Info.weekdays('short')[0] //=> 'Mon'
  * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
  * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
  * @return {Array}
  */
  static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
  }
  /**
  * Return an array of format week names.
  * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
  * changes the string.
  * See {@link Info#weekdays}
  * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
  * @param {Object} opts - options
  * @param {string} [opts.locale=null] - the locale code
  * @param {string} [opts.numberingSystem=null] - the numbering system
  * @param {string} [opts.locObj=null] - an existing locale object to use
  * @return {Array}
  */
  static weekdaysFormat(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
    return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
  }
  /**
  * Return an array of meridiems.
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @example Info.meridiems() //=> [ 'AM', 'PM' ]
  * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
  * @return {Array}
  */
  static meridiems({ locale = null } = {}) {
    return Locale.create(locale).meridiems();
  }
  /**
  * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
  * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
  * @param {Object} opts - options
  * @param {string} [opts.locale] - the locale code
  * @example Info.eras() //=> [ 'BC', 'AD' ]
  * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
  * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
  * @return {Array}
  */
  static eras(length = "short", { locale = null } = {}) {
    return Locale.create(locale, null, "gregory").eras(length);
  }
  /**
  * Return the set of available features in this environment.
  * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
  * Keys:
  * * `relative`: whether this environment supports relative time formatting
  * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
  * @example Info.features() //=> { relative: false, localeWeek: true }
  * @return {Object}
  */
  static features() {
    return {
      relative: hasRelative(),
      localeWeek: hasLocaleWeekInfo()
    };
  }
};

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/diff.js
function dayDiff(earlier, later) {
  const utcDayStart = /* @__PURE__ */ __name((dt) => dt.toUTC(0, {
    keepLocalTime: true
  }).startOf("day").valueOf(), "utcDayStart"), ms = utcDayStart(later) - utcDayStart(earlier);
  return Math.floor(Duration.fromMillis(ms).as("days"));
}
__name(dayDiff, "dayDiff");
function highOrderDiffs(cursor, later, units) {
  const differs = [
    [
      "years",
      (a, b) => b.year - a.year
    ],
    [
      "quarters",
      (a, b) => b.quarter - a.quarter + (b.year - a.year) * 4
    ],
    [
      "months",
      (a, b) => b.month - a.month + (b.year - a.year) * 12
    ],
    [
      "weeks",
      (a, b) => {
        const days = dayDiff(a, b);
        return (days - days % 7) / 7;
      }
    ],
    [
      "days",
      dayDiff
    ]
  ];
  const results = {};
  const earlier = cursor;
  let lowestOrder, highWater;
  for (const [unit, differ] of differs) {
    if (units.indexOf(unit) >= 0) {
      lowestOrder = unit;
      results[unit] = differ(cursor, later);
      highWater = earlier.plus(results);
      if (highWater > later) {
        results[unit]--;
        cursor = earlier.plus(results);
        if (cursor > later) {
          highWater = cursor;
          results[unit]--;
          cursor = earlier.plus(results);
        }
      } else {
        cursor = highWater;
      }
    }
  }
  return [
    cursor,
    results,
    highWater,
    lowestOrder
  ];
}
__name(highOrderDiffs, "highOrderDiffs");
function diff_default(earlier, later, units, opts) {
  let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
  const remainingMillis = later - cursor;
  const lowerOrderUnits = units.filter((u) => [
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
  ].indexOf(u) >= 0);
  if (lowerOrderUnits.length === 0) {
    if (highWater < later) {
      highWater = cursor.plus({
        [lowestOrder]: 1
      });
    }
    if (highWater !== cursor) {
      results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
  }
  const duration = Duration.fromObject(results, opts);
  if (lowerOrderUnits.length > 0) {
    return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
  } else {
    return duration;
  }
}
__name(diff_default, "default");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/impl/tokenParser.js
var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex, post = (i) => i) {
  return {
    regex,
    deser: /* @__PURE__ */ __name(([s2]) => post(parseDigits(s2)), "deser")
  };
}
__name(intUnit, "intUnit");
var NBSP = String.fromCharCode(160);
var spaceOrNBSP = `[ ${NBSP}]`;
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
function fixListRegex(s2) {
  return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
__name(fixListRegex, "fixListRegex");
function stripInsensitivities(s2) {
  return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
}
__name(stripInsensitivities, "stripInsensitivities");
function oneOf(strings, startIndex) {
  if (strings === null) {
    return null;
  } else {
    return {
      regex: RegExp(strings.map(fixListRegex).join("|")),
      deser: /* @__PURE__ */ __name(([s2]) => strings.findIndex((i) => stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex, "deser")
    };
  }
}
__name(oneOf, "oneOf");
function offset(regex, groups) {
  return {
    regex,
    deser: /* @__PURE__ */ __name(([, h, m]) => signedOffset(h, m), "deser"),
    groups
  };
}
__name(offset, "offset");
function simple(regex) {
  return {
    regex,
    deser: /* @__PURE__ */ __name(([s2]) => s2, "deser")
  };
}
__name(simple, "simple");
function escapeToken(value) {
  return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
__name(escapeToken, "escapeToken");
function unitForToken(token, loc) {
  const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = /* @__PURE__ */ __name((t) => ({
    regex: RegExp(escapeToken(t.val)),
    deser: /* @__PURE__ */ __name(([s2]) => s2, "deser"),
    literal: true
  }), "literal"), unitate = /* @__PURE__ */ __name((t) => {
    if (token.literal) {
      return literal(t);
    }
    switch (t.val) {
      // era
      case "G":
        return oneOf(loc.eras("short"), 0);
      case "GG":
        return oneOf(loc.eras("long"), 0);
      // years
      case "y":
        return intUnit(oneToSix);
      case "yy":
        return intUnit(twoToFour, untruncateYear);
      case "yyyy":
        return intUnit(four);
      case "yyyyy":
        return intUnit(fourToSix);
      case "yyyyyy":
        return intUnit(six);
      // months
      case "M":
        return intUnit(oneOrTwo);
      case "MM":
        return intUnit(two);
      case "MMM":
        return oneOf(loc.months("short", true), 1);
      case "MMMM":
        return oneOf(loc.months("long", true), 1);
      case "L":
        return intUnit(oneOrTwo);
      case "LL":
        return intUnit(two);
      case "LLL":
        return oneOf(loc.months("short", false), 1);
      case "LLLL":
        return oneOf(loc.months("long", false), 1);
      // dates
      case "d":
        return intUnit(oneOrTwo);
      case "dd":
        return intUnit(two);
      // ordinals
      case "o":
        return intUnit(oneToThree);
      case "ooo":
        return intUnit(three);
      // time
      case "HH":
        return intUnit(two);
      case "H":
        return intUnit(oneOrTwo);
      case "hh":
        return intUnit(two);
      case "h":
        return intUnit(oneOrTwo);
      case "mm":
        return intUnit(two);
      case "m":
        return intUnit(oneOrTwo);
      case "q":
        return intUnit(oneOrTwo);
      case "qq":
        return intUnit(two);
      case "s":
        return intUnit(oneOrTwo);
      case "ss":
        return intUnit(two);
      case "S":
        return intUnit(oneToThree);
      case "SSS":
        return intUnit(three);
      case "u":
        return simple(oneToNine);
      case "uu":
        return simple(oneOrTwo);
      case "uuu":
        return intUnit(one);
      // meridiem
      case "a":
        return oneOf(loc.meridiems(), 0);
      // weekYear (k)
      case "kkkk":
        return intUnit(four);
      case "kk":
        return intUnit(twoToFour, untruncateYear);
      // weekNumber (W)
      case "W":
        return intUnit(oneOrTwo);
      case "WW":
        return intUnit(two);
      // weekdays
      case "E":
      case "c":
        return intUnit(one);
      case "EEE":
        return oneOf(loc.weekdays("short", false), 1);
      case "EEEE":
        return oneOf(loc.weekdays("long", false), 1);
      case "ccc":
        return oneOf(loc.weekdays("short", true), 1);
      case "cccc":
        return oneOf(loc.weekdays("long", true), 1);
      // offset/zone
      case "Z":
      case "ZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
      case "ZZZ":
        return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
      // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
      // because we don't have any way to figure out what they are
      case "z":
        return simple(/[a-z_+-/]{1,256}?/i);
      // this special-case "token" represents a place where a macro-token expanded into a white-space literal
      // in this case we accept any non-newline white-space
      case " ":
        return simple(/[^\S\n\r]/);
      default:
        return literal(t);
    }
  }, "unitate");
  const unit = unitate(token) || {
    invalidReason: MISSING_FTP
  };
  unit.token = token;
  return unit;
}
__name(unitForToken, "unitForToken");
var partTypeStyleToTokenVal = {
  year: {
    "2-digit": "yy",
    numeric: "yyyyy"
  },
  month: {
    numeric: "M",
    "2-digit": "MM",
    short: "MMM",
    long: "MMMM"
  },
  day: {
    numeric: "d",
    "2-digit": "dd"
  },
  weekday: {
    short: "EEE",
    long: "EEEE"
  },
  dayperiod: "a",
  dayPeriod: "a",
  hour12: {
    numeric: "h",
    "2-digit": "hh"
  },
  hour24: {
    numeric: "H",
    "2-digit": "HH"
  },
  minute: {
    numeric: "m",
    "2-digit": "mm"
  },
  second: {
    numeric: "s",
    "2-digit": "ss"
  },
  timeZoneName: {
    long: "ZZZZZ",
    short: "ZZZ"
  }
};
function tokenForPart(part, formatOpts, resolvedOpts) {
  const { type, value } = part;
  if (type === "literal") {
    const isSpace = /^\s+$/.test(value);
    return {
      literal: !isSpace,
      val: isSpace ? " " : value
    };
  }
  const style = formatOpts[type];
  let actualType = type;
  if (type === "hour") {
    if (formatOpts.hour12 != null) {
      actualType = formatOpts.hour12 ? "hour12" : "hour24";
    } else if (formatOpts.hourCycle != null) {
      if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
        actualType = "hour12";
      } else {
        actualType = "hour24";
      }
    } else {
      actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
  }
  let val = partTypeStyleToTokenVal[actualType];
  if (typeof val === "object") {
    val = val[style];
  }
  if (val) {
    return {
      literal: false,
      val
    };
  }
  return void 0;
}
__name(tokenForPart, "tokenForPart");
function buildRegex(units) {
  const re = units.map((u) => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
  return [
    `^${re}$`,
    units
  ];
}
__name(buildRegex, "buildRegex");
function match(input, regex, handlers) {
  const matches = input.match(regex);
  if (matches) {
    const all = {};
    let matchIndex = 1;
    for (const i in handlers) {
      if (hasOwnProperty(handlers, i)) {
        const h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
        if (!h.literal && h.token) {
          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
        }
        matchIndex += groups;
      }
    }
    return [
      matches,
      all
    ];
  } else {
    return [
      matches,
      {}
    ];
  }
}
__name(match, "match");
function dateTimeFromMatches(matches) {
  const toField = /* @__PURE__ */ __name((token) => {
    switch (token) {
      case "S":
        return "millisecond";
      case "s":
        return "second";
      case "m":
        return "minute";
      case "h":
      case "H":
        return "hour";
      case "d":
        return "day";
      case "o":
        return "ordinal";
      case "L":
      case "M":
        return "month";
      case "y":
        return "year";
      case "E":
      case "c":
        return "weekday";
      case "W":
        return "weekNumber";
      case "k":
        return "weekYear";
      case "q":
        return "quarter";
      default:
        return null;
    }
  }, "toField");
  let zone = null;
  let specificOffset;
  if (!isUndefined(matches.z)) {
    zone = IANAZone.create(matches.z);
  }
  if (!isUndefined(matches.Z)) {
    if (!zone) {
      zone = new FixedOffsetZone(matches.Z);
    }
    specificOffset = matches.Z;
  }
  if (!isUndefined(matches.q)) {
    matches.M = (matches.q - 1) * 3 + 1;
  }
  if (!isUndefined(matches.h)) {
    if (matches.h < 12 && matches.a === 1) {
      matches.h += 12;
    } else if (matches.h === 12 && matches.a === 0) {
      matches.h = 0;
    }
  }
  if (matches.G === 0 && matches.y) {
    matches.y = -matches.y;
  }
  if (!isUndefined(matches.u)) {
    matches.S = parseMillis(matches.u);
  }
  const vals = Object.keys(matches).reduce((r, k) => {
    const f = toField(k);
    if (f) {
      r[f] = matches[k];
    }
    return r;
  }, {});
  return [
    vals,
    zone,
    specificOffset
  ];
}
__name(dateTimeFromMatches, "dateTimeFromMatches");
var dummyDateTimeCache = null;
function getDummyDateTime() {
  if (!dummyDateTimeCache) {
    dummyDateTimeCache = DateTime.fromMillis(1555555555555);
  }
  return dummyDateTimeCache;
}
__name(getDummyDateTime, "getDummyDateTime");
function maybeExpandMacroToken(token, locale) {
  if (token.literal) {
    return token;
  }
  const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
  const tokens = formatOptsToTokens(formatOpts, locale);
  if (tokens == null || tokens.includes(void 0)) {
    return token;
  }
  return tokens;
}
__name(maybeExpandMacroToken, "maybeExpandMacroToken");
function expandMacroTokens(tokens, locale) {
  return Array.prototype.concat(...tokens.map((t) => maybeExpandMacroToken(t, locale)));
}
__name(expandMacroTokens, "expandMacroTokens");
var TokenParser = class {
  static {
    __name(this, "TokenParser");
  }
  constructor(locale, format) {
    this.locale = locale;
    this.format = format;
    this.tokens = expandMacroTokens(Formatter.parseFormat(format), locale);
    this.units = this.tokens.map((t) => unitForToken(t, locale));
    this.disqualifyingUnit = this.units.find((t) => t.invalidReason);
    if (!this.disqualifyingUnit) {
      const [regexString, handlers] = buildRegex(this.units);
      this.regex = RegExp(regexString, "i");
      this.handlers = handlers;
    }
  }
  explainFromTokens(input) {
    if (!this.isValid) {
      return {
        input,
        tokens: this.tokens,
        invalidReason: this.invalidReason
      };
    } else {
      const [rawMatches, matches] = match(input, this.regex, this.handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [
        null,
        null,
        void 0
      ];
      if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
        throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
      }
      return {
        input,
        tokens: this.tokens,
        regex: this.regex,
        rawMatches,
        matches,
        result,
        zone,
        specificOffset
      };
    }
  }
  get isValid() {
    return !this.disqualifyingUnit;
  }
  get invalidReason() {
    return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
  }
};
function explainFromTokens(locale, input, format) {
  const parser = new TokenParser(locale, format);
  return parser.explainFromTokens(input);
}
__name(explainFromTokens, "explainFromTokens");
function parseFromTokens(locale, input, format) {
  const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
  return [
    result,
    zone,
    specificOffset,
    invalidReason
  ];
}
__name(parseFromTokens, "parseFromTokens");
function formatOptsToTokens(formatOpts, locale) {
  if (!formatOpts) {
    return null;
  }
  const formatter = Formatter.create(locale, formatOpts);
  const df = formatter.dtFormatter(getDummyDateTime());
  const parts = df.formatToParts();
  const resolvedOpts = df.resolvedOptions();
  return parts.map((p) => tokenForPart(p, formatOpts, resolvedOpts));
}
__name(formatOptsToTokens, "formatOptsToTokens");

// node_modules/.pnpm/luxon@3.5.0/node_modules/luxon/src/datetime.js
var INVALID3 = "Invalid DateTime";
var MAX_DATE = 864e13;
function unsupportedZone(zone) {
  return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}
__name(unsupportedZone, "unsupportedZone");
function possiblyCachedWeekData(dt) {
  if (dt.weekData === null) {
    dt.weekData = gregorianToWeek(dt.c);
  }
  return dt.weekData;
}
__name(possiblyCachedWeekData, "possiblyCachedWeekData");
function possiblyCachedLocalWeekData(dt) {
  if (dt.localWeekData === null) {
    dt.localWeekData = gregorianToWeek(dt.c, dt.loc.getMinDaysInFirstWeek(), dt.loc.getStartOfWeek());
  }
  return dt.localWeekData;
}
__name(possiblyCachedLocalWeekData, "possiblyCachedLocalWeekData");
function clone2(inst, alts) {
  const current = {
    ts: inst.ts,
    zone: inst.zone,
    c: inst.c,
    o: inst.o,
    loc: inst.loc,
    invalid: inst.invalid
  };
  return new DateTime({
    ...current,
    ...alts,
    old: current
  });
}
__name(clone2, "clone");
function fixOffset(localTS, o, tz) {
  let utcGuess = localTS - o * 60 * 1e3;
  const o2 = tz.offset(utcGuess);
  if (o === o2) {
    return [
      utcGuess,
      o
    ];
  }
  utcGuess -= (o2 - o) * 60 * 1e3;
  const o3 = tz.offset(utcGuess);
  if (o2 === o3) {
    return [
      utcGuess,
      o2
    ];
  }
  return [
    localTS - Math.min(o2, o3) * 60 * 1e3,
    Math.max(o2, o3)
  ];
}
__name(fixOffset, "fixOffset");
function tsToObj(ts, offset2) {
  ts += offset2 * 60 * 1e3;
  const d = new Date(ts);
  return {
    year: d.getUTCFullYear(),
    month: d.getUTCMonth() + 1,
    day: d.getUTCDate(),
    hour: d.getUTCHours(),
    minute: d.getUTCMinutes(),
    second: d.getUTCSeconds(),
    millisecond: d.getUTCMilliseconds()
  };
}
__name(tsToObj, "tsToObj");
function objToTS(obj, offset2, zone) {
  return fixOffset(objToLocalTS(obj), offset2, zone);
}
__name(objToTS, "objToTS");
function adjustTime(inst, dur) {
  const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = {
    ...inst.c,
    year,
    month,
    day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
  }, millisToAdd = Duration.fromObject({
    years: dur.years - Math.trunc(dur.years),
    quarters: dur.quarters - Math.trunc(dur.quarters),
    months: dur.months - Math.trunc(dur.months),
    weeks: dur.weeks - Math.trunc(dur.weeks),
    days: dur.days - Math.trunc(dur.days),
    hours: dur.hours,
    minutes: dur.minutes,
    seconds: dur.seconds,
    milliseconds: dur.milliseconds
  }).as("milliseconds"), localTS = objToLocalTS(c);
  let [ts, o] = fixOffset(localTS, oPre, inst.zone);
  if (millisToAdd !== 0) {
    ts += millisToAdd;
    o = inst.zone.offset(ts);
  }
  return {
    ts,
    o
  };
}
__name(adjustTime, "adjustTime");
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
  const { setZone, zone } = opts;
  if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
    const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
      ...opts,
      zone: interpretationZone,
      specificOffset
    });
    return setZone ? inst : inst.setZone(zone);
  } else {
    return DateTime.invalid(new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`));
  }
}
__name(parseDataToDateTime, "parseDataToDateTime");
function toTechFormat(dt, format, allowZ = true) {
  return dt.isValid ? Formatter.create(Locale.create("en-US"), {
    allowZ,
    forceSimple: true
  }).formatDateTimeFromString(dt, format) : null;
}
__name(toTechFormat, "toTechFormat");
function toISODate(o, extended) {
  const longFormat = o.c.year > 9999 || o.c.year < 0;
  let c = "";
  if (longFormat && o.c.year >= 0) c += "+";
  c += padStart(o.c.year, longFormat ? 6 : 4);
  if (extended) {
    c += "-";
    c += padStart(o.c.month);
    c += "-";
    c += padStart(o.c.day);
  } else {
    c += padStart(o.c.month);
    c += padStart(o.c.day);
  }
  return c;
}
__name(toISODate, "toISODate");
function toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
  let c = padStart(o.c.hour);
  if (extended) {
    c += ":";
    c += padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
      c += ":";
    }
  } else {
    c += padStart(o.c.minute);
  }
  if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
    c += padStart(o.c.second);
    if (o.c.millisecond !== 0 || !suppressMilliseconds) {
      c += ".";
      c += padStart(o.c.millisecond, 3);
    }
  }
  if (includeOffset) {
    if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
      c += "Z";
    } else if (o.o < 0) {
      c += "-";
      c += padStart(Math.trunc(-o.o / 60));
      c += ":";
      c += padStart(Math.trunc(-o.o % 60));
    } else {
      c += "+";
      c += padStart(Math.trunc(o.o / 60));
      c += ":";
      c += padStart(Math.trunc(o.o % 60));
    }
  }
  if (extendedZone) {
    c += "[" + o.zone.ianaName + "]";
  }
  return c;
}
__name(toISOTime, "toISOTime");
var defaultUnitValues = {
  month: 1,
  day: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var defaultWeekUnitValues = {
  weekNumber: 1,
  weekday: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var defaultOrdinalUnitValues = {
  ordinal: 1,
  hour: 0,
  minute: 0,
  second: 0,
  millisecond: 0
};
var orderedUnits2 = [
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
var orderedWeekUnits = [
  "weekYear",
  "weekNumber",
  "weekday",
  "hour",
  "minute",
  "second",
  "millisecond"
];
var orderedOrdinalUnits = [
  "year",
  "ordinal",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function normalizeUnit(unit) {
  const normalized = {
    year: "year",
    years: "year",
    month: "month",
    months: "month",
    day: "day",
    days: "day",
    hour: "hour",
    hours: "hour",
    minute: "minute",
    minutes: "minute",
    quarter: "quarter",
    quarters: "quarter",
    second: "second",
    seconds: "second",
    millisecond: "millisecond",
    milliseconds: "millisecond",
    weekday: "weekday",
    weekdays: "weekday",
    weeknumber: "weekNumber",
    weeksnumber: "weekNumber",
    weeknumbers: "weekNumber",
    weekyear: "weekYear",
    weekyears: "weekYear",
    ordinal: "ordinal"
  }[unit.toLowerCase()];
  if (!normalized) throw new InvalidUnitError(unit);
  return normalized;
}
__name(normalizeUnit, "normalizeUnit");
function normalizeUnitWithLocalWeeks(unit) {
  switch (unit.toLowerCase()) {
    case "localweekday":
    case "localweekdays":
      return "localWeekday";
    case "localweeknumber":
    case "localweeknumbers":
      return "localWeekNumber";
    case "localweekyear":
    case "localweekyears":
      return "localWeekYear";
    default:
      return normalizeUnit(unit);
  }
}
__name(normalizeUnitWithLocalWeeks, "normalizeUnitWithLocalWeeks");
function guessOffsetForZone(zone) {
  if (!zoneOffsetGuessCache[zone]) {
    if (zoneOffsetTs === void 0) {
      zoneOffsetTs = Settings.now();
    }
    zoneOffsetGuessCache[zone] = zone.offset(zoneOffsetTs);
  }
  return zoneOffsetGuessCache[zone];
}
__name(guessOffsetForZone, "guessOffsetForZone");
function quickDT(obj, opts) {
  const zone = normalizeZone(opts.zone, Settings.defaultZone);
  if (!zone.isValid) {
    return DateTime.invalid(unsupportedZone(zone));
  }
  const loc = Locale.fromObject(opts);
  let ts, o;
  if (!isUndefined(obj.year)) {
    for (const u of orderedUnits2) {
      if (isUndefined(obj[u])) {
        obj[u] = defaultUnitValues[u];
      }
    }
    const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
    if (invalid) {
      return DateTime.invalid(invalid);
    }
    const offsetProvis = guessOffsetForZone(zone);
    [ts, o] = objToTS(obj, offsetProvis, zone);
  } else {
    ts = Settings.now();
  }
  return new DateTime({
    ts,
    zone,
    loc,
    o
  });
}
__name(quickDT, "quickDT");
function diffRelative(start, end, opts) {
  const round = isUndefined(opts.round) ? true : opts.round, format = /* @__PURE__ */ __name((c, unit) => {
    c = roundTo(c, round || opts.calendary ? 0 : 2, true);
    const formatter = end.loc.clone(opts).relFormatter(opts);
    return formatter.format(c, unit);
  }, "format"), differ = /* @__PURE__ */ __name((unit) => {
    if (opts.calendary) {
      if (!end.hasSame(start, unit)) {
        return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
      } else return 0;
    } else {
      return end.diff(start, unit).get(unit);
    }
  }, "differ");
  if (opts.unit) {
    return format(differ(opts.unit), opts.unit);
  }
  for (const unit of opts.units) {
    const count = differ(unit);
    if (Math.abs(count) >= 1) {
      return format(count, unit);
    }
  }
  return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
__name(diffRelative, "diffRelative");
function lastOpts(argList) {
  let opts = {}, args;
  if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
    opts = argList[argList.length - 1];
    args = Array.from(argList).slice(0, argList.length - 1);
  } else {
    args = Array.from(argList);
  }
  return [
    opts,
    args
  ];
}
__name(lastOpts, "lastOpts");
var zoneOffsetTs;
var zoneOffsetGuessCache = {};
var DateTime = class _DateTime {
  static {
    __name(this, "DateTime");
  }
  /**
  * @access private
  */
  constructor(config) {
    const zone = config.zone || Settings.defaultZone;
    let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
    this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
    let c = null, o = null;
    if (!invalid) {
      const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
      if (unchanged) {
        [c, o] = [
          config.old.c,
          config.old.o
        ];
      } else {
        const ot = isNumber(config.o) && !config.old ? config.o : zone.offset(this.ts);
        c = tsToObj(this.ts, ot);
        invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
        c = invalid ? null : c;
        o = invalid ? null : ot;
      }
    }
    this._zone = zone;
    this.loc = config.loc || Locale.create();
    this.invalid = invalid;
    this.weekData = null;
    this.localWeekData = null;
    this.c = c;
    this.o = o;
    this.isLuxonDateTime = true;
  }
  // CONSTRUCT
  /**
  * Create a DateTime for the current instant, in the system's time zone.
  *
  * Use Settings to override these default values if needed.
  * @example DateTime.now().toISO() //~> now in the ISO format
  * @return {DateTime}
  */
  static now() {
    return new _DateTime({});
  }
  /**
  * Create a local DateTime
  * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
  * @param {number} [month=1] - The month, 1-indexed
  * @param {number} [day=1] - The day of the month, 1-indexed
  * @param {number} [hour=0] - The hour of the day, in 24-hour time
  * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
  * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
  * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
  * @example DateTime.local()                                  //~> now
  * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
  * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
  * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
  * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
  * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
  * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
  * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
  * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
  * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
  * @return {DateTime}
  */
  static local() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    return quickDT({
      year,
      month,
      day,
      hour,
      minute,
      second,
      millisecond
    }, opts);
  }
  /**
  * Create a DateTime in UTC
  * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
  * @param {number} [month=1] - The month, 1-indexed
  * @param {number} [day=1] - The day of the month
  * @param {number} [hour=0] - The hour of the day, in 24-hour time
  * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
  * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
  * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
  * @param {Object} options - configuration options for the DateTime
  * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
  * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
  * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
  * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
  * @example DateTime.utc()                                              //~> now
  * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
  * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
  * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
  * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
  * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
  * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
  * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
  * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
  * @return {DateTime}
  */
  static utc() {
    const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
    opts.zone = FixedOffsetZone.utcInstance;
    return quickDT({
      year,
      month,
      day,
      hour,
      minute,
      second,
      millisecond
    }, opts);
  }
  /**
  * Create a DateTime from a JavaScript Date object. Uses the default zone.
  * @param {Date} date - a JavaScript Date object
  * @param {Object} options - configuration options for the DateTime
  * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
  * @return {DateTime}
  */
  static fromJSDate(date, options = {}) {
    const ts = isDate(date) ? date.valueOf() : NaN;
    if (Number.isNaN(ts)) {
      return _DateTime.invalid("invalid input");
    }
    const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return _DateTime.invalid(unsupportedZone(zoneToUse));
    }
    return new _DateTime({
      ts,
      zone: zoneToUse,
      loc: Locale.fromObject(options)
    });
  }
  /**
  * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
  * @param {number} milliseconds - a number of milliseconds since 1970 UTC
  * @param {Object} options - configuration options for the DateTime
  * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
  * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
  * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
  * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
  * @return {DateTime}
  */
  static fromMillis(milliseconds, options = {}) {
    if (!isNumber(milliseconds)) {
      throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`);
    } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
      return _DateTime.invalid("Timestamp out of range");
    } else {
      return new _DateTime({
        ts: milliseconds,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
  * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
  * @param {number} seconds - a number of seconds since 1970 UTC
  * @param {Object} options - configuration options for the DateTime
  * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
  * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
  * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
  * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
  * @return {DateTime}
  */
  static fromSeconds(seconds, options = {}) {
    if (!isNumber(seconds)) {
      throw new InvalidArgumentError("fromSeconds requires a numerical input");
    } else {
      return new _DateTime({
        ts: seconds * 1e3,
        zone: normalizeZone(options.zone, Settings.defaultZone),
        loc: Locale.fromObject(options)
      });
    }
  }
  /**
  * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
  * @param {Object} obj - the object to create the DateTime from
  * @param {number} obj.year - a year, such as 1987
  * @param {number} obj.month - a month, 1-12
  * @param {number} obj.day - a day of the month, 1-31, depending on the month
  * @param {number} obj.ordinal - day of the year, 1-365 or 366
  * @param {number} obj.weekYear - an ISO week year
  * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
  * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
  * @param {number} obj.localWeekYear - a week year, according to the locale
  * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
  * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
  * @param {number} obj.hour - hour of the day, 0-23
  * @param {number} obj.minute - minute of the hour, 0-59
  * @param {number} obj.second - second of the minute, 0-59
  * @param {number} obj.millisecond - millisecond of the second, 0-999
  * @param {Object} opts - options for creating this DateTime
  * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
  * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
  * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
  * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
  * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
  * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
  * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
  * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
  * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
  * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
  * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
  * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
  * @return {DateTime}
  */
  static fromObject(obj, opts = {}) {
    obj = obj || {};
    const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zoneToUse.isValid) {
      return _DateTime.invalid(unsupportedZone(zoneToUse));
    }
    const loc = Locale.fromObject(opts);
    const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);
    const tsNow = Settings.now(), offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
    let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
    if (useWeekData) {
      units = orderedWeekUnits;
      defaultValues = defaultWeekUnitValues;
      objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
    } else if (containsOrdinal) {
      units = orderedOrdinalUnits;
      defaultValues = defaultOrdinalUnitValues;
      objNow = gregorianToOrdinal(objNow);
    } else {
      units = orderedUnits2;
      defaultValues = defaultUnitValues;
    }
    let foundFirst = false;
    for (const u of units) {
      const v = normalized[u];
      if (!isUndefined(v)) {
        foundFirst = true;
      } else if (foundFirst) {
        normalized[u] = defaultValues[u];
      } else {
        normalized[u] = objNow[u];
      }
    }
    const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
    if (invalid) {
      return _DateTime.invalid(invalid);
    }
    const gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new _DateTime({
      ts: tsFinal,
      zone: zoneToUse,
      o: offsetFinal,
      loc
    });
    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
      return _DateTime.invalid("mismatched weekday", `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`);
    }
    if (!inst.isValid) {
      return _DateTime.invalid(inst.invalid);
    }
    return inst;
  }
  /**
  * Create a DateTime from an ISO 8601 string
  * @param {string} text - the ISO string
  * @param {Object} opts - options to affect the creation
  * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
  * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
  * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
  * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
  * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
  * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance
  * @example DateTime.fromISO('2016-05-25T09:08:34.123')
  * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
  * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
  * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
  * @example DateTime.fromISO('2016-W05-4')
  * @return {DateTime}
  */
  static fromISO(text, opts = {}) {
    const [vals, parsedZone] = parseISODate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
  }
  /**
  * Create a DateTime from an RFC 2822 string
  * @param {string} text - the RFC 2822 string
  * @param {Object} opts - options to affect the creation
  * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
  * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
  * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
  * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
  * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
  * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
  * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
  * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
  * @return {DateTime}
  */
  static fromRFC2822(text, opts = {}) {
    const [vals, parsedZone] = parseRFC2822Date(text);
    return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
  }
  /**
  * Create a DateTime from an HTTP header date
  * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
  * @param {string} text - the HTTP header date
  * @param {Object} opts - options to affect the creation
  * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
  * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
  * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
  * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
  * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
  * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
  * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
  * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
  * @return {DateTime}
  */
  static fromHTTP(text, opts = {}) {
    const [vals, parsedZone] = parseHTTPDate(text);
    return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
  }
  /**
  * Create a DateTime from an input string and format string.
  * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
  * @param {string} text - the string to parse
  * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
  * @param {Object} opts - options to affect the creation
  * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
  * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
  * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
  * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
  * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
  * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @return {DateTime}
  */
  static fromFormat(text, fmt, opts = {}) {
    if (isUndefined(text) || isUndefined(fmt)) {
      throw new InvalidArgumentError("fromFormat requires an input string and a format");
    }
    const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
    if (invalid) {
      return _DateTime.invalid(invalid);
    } else {
      return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
    }
  }
  /**
  * @deprecated use fromFormat instead
  */
  static fromString(text, fmt, opts = {}) {
    return _DateTime.fromFormat(text, fmt, opts);
  }
  /**
  * Create a DateTime from a SQL date, time, or datetime
  * Defaults to en-US if no locale has been specified, regardless of the system's locale
  * @param {string} text - the string to parse
  * @param {Object} opts - options to affect the creation
  * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
  * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
  * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
  * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
  * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
  * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
  * @example DateTime.fromSQL('2017-05-15')
  * @example DateTime.fromSQL('2017-05-15 09:12:34')
  * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
  * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
  * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
  * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
  * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
  * @example DateTime.fromSQL('09:12:34.342')
  * @return {DateTime}
  */
  static fromSQL(text, opts = {}) {
    const [vals, parsedZone] = parseSQL(text);
    return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
  }
  /**
  * Create an invalid DateTime.
  * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
  * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
  * @return {DateTime}
  */
  static invalid(reason, explanation = null) {
    if (!reason) {
      throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
    }
    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
    if (Settings.throwOnInvalid) {
      throw new InvalidDateTimeError(invalid);
    } else {
      return new _DateTime({
        invalid
      });
    }
  }
  /**
  * Check if an object is an instance of DateTime. Works across context boundaries
  * @param {object} o
  * @return {boolean}
  */
  static isDateTime(o) {
    return o && o.isLuxonDateTime || false;
  }
  /**
  * Produce the format string for a set of options
  * @param formatOpts
  * @param localeOpts
  * @returns {string}
  */
  static parseFormatForOpts(formatOpts, localeOpts = {}) {
    const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
    return !tokenList ? null : tokenList.map((t) => t ? t.val : null).join("");
  }
  /**
  * Produce the the fully expanded format token for the locale
  * Does NOT quote characters, so quoted tokens will not round trip correctly
  * @param fmt
  * @param localeOpts
  * @returns {string}
  */
  static expandFormat(fmt, localeOpts = {}) {
    const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
    return expanded.map((t) => t.val).join("");
  }
  static resetCache() {
    zoneOffsetTs = void 0;
    zoneOffsetGuessCache = {};
  }
  // INFO
  /**
  * Get the value of unit.
  * @param {string} unit - a unit such as 'minute' or 'day'
  * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
  * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
  * @return {number}
  */
  get(unit) {
    return this[unit];
  }
  /**
  * Returns whether the DateTime is valid. Invalid DateTimes occur when:
  * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
  * * The DateTime was created by an operation on another invalid date
  * @type {boolean}
  */
  get isValid() {
    return this.invalid === null;
  }
  /**
  * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
  * @type {string}
  */
  get invalidReason() {
    return this.invalid ? this.invalid.reason : null;
  }
  /**
  * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
  * @type {string}
  */
  get invalidExplanation() {
    return this.invalid ? this.invalid.explanation : null;
  }
  /**
  * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
  *
  * @type {string}
  */
  get locale() {
    return this.isValid ? this.loc.locale : null;
  }
  /**
  * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
  *
  * @type {string}
  */
  get numberingSystem() {
    return this.isValid ? this.loc.numberingSystem : null;
  }
  /**
  * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
  *
  * @type {string}
  */
  get outputCalendar() {
    return this.isValid ? this.loc.outputCalendar : null;
  }
  /**
  * Get the time zone associated with this DateTime.
  * @type {Zone}
  */
  get zone() {
    return this._zone;
  }
  /**
  * Get the name of the time zone.
  * @type {string}
  */
  get zoneName() {
    return this.isValid ? this.zone.name : null;
  }
  /**
  * Get the year
  * @example DateTime.local(2017, 5, 25).year //=> 2017
  * @type {number}
  */
  get year() {
    return this.isValid ? this.c.year : NaN;
  }
  /**
  * Get the quarter
  * @example DateTime.local(2017, 5, 25).quarter //=> 2
  * @type {number}
  */
  get quarter() {
    return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
  }
  /**
  * Get the month (1-12).
  * @example DateTime.local(2017, 5, 25).month //=> 5
  * @type {number}
  */
  get month() {
    return this.isValid ? this.c.month : NaN;
  }
  /**
  * Get the day of the month (1-30ish).
  * @example DateTime.local(2017, 5, 25).day //=> 25
  * @type {number}
  */
  get day() {
    return this.isValid ? this.c.day : NaN;
  }
  /**
  * Get the hour of the day (0-23).
  * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
  * @type {number}
  */
  get hour() {
    return this.isValid ? this.c.hour : NaN;
  }
  /**
  * Get the minute of the hour (0-59).
  * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
  * @type {number}
  */
  get minute() {
    return this.isValid ? this.c.minute : NaN;
  }
  /**
  * Get the second of the minute (0-59).
  * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
  * @type {number}
  */
  get second() {
    return this.isValid ? this.c.second : NaN;
  }
  /**
  * Get the millisecond of the second (0-999).
  * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
  * @type {number}
  */
  get millisecond() {
    return this.isValid ? this.c.millisecond : NaN;
  }
  /**
  * Get the week year
  * @see https://en.wikipedia.org/wiki/ISO_week_date
  * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
  * @type {number}
  */
  get weekYear() {
    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
  }
  /**
  * Get the week number of the week year (1-52ish).
  * @see https://en.wikipedia.org/wiki/ISO_week_date
  * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
  * @type {number}
  */
  get weekNumber() {
    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
  }
  /**
  * Get the day of the week.
  * 1 is Monday and 7 is Sunday
  * @see https://en.wikipedia.org/wiki/ISO_week_date
  * @example DateTime.local(2014, 11, 31).weekday //=> 4
  * @type {number}
  */
  get weekday() {
    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
  }
  /**
  * Returns true if this date is on a weekend according to the locale, false otherwise
  * @returns {boolean}
  */
  get isWeekend() {
    return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
  }
  /**
  * Get the day of the week according to the locale.
  * 1 is the first day of the week and 7 is the last day of the week.
  * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
  * @returns {number}
  */
  get localWeekday() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
  }
  /**
  * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
  * because the week can start on different days of the week (see localWeekday) and because a different number of days
  * is required for a week to count as the first week of a year.
  * @returns {number}
  */
  get localWeekNumber() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
  }
  /**
  * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
  * differently, see localWeekNumber.
  * @returns {number}
  */
  get localWeekYear() {
    return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
  }
  /**
  * Get the ordinal (meaning the day of the year)
  * @example DateTime.local(2017, 5, 25).ordinal //=> 145
  * @type {number|DateTime}
  */
  get ordinal() {
    return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
  }
  /**
  * Get the human readable short month name, such as 'Oct'.
  * Defaults to the system's locale if no locale has been specified
  * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
  * @type {string}
  */
  get monthShort() {
    return this.isValid ? Info.months("short", {
      locObj: this.loc
    })[this.month - 1] : null;
  }
  /**
  * Get the human readable long month name, such as 'October'.
  * Defaults to the system's locale if no locale has been specified
  * @example DateTime.local(2017, 10, 30).monthLong //=> October
  * @type {string}
  */
  get monthLong() {
    return this.isValid ? Info.months("long", {
      locObj: this.loc
    })[this.month - 1] : null;
  }
  /**
  * Get the human readable short weekday, such as 'Mon'.
  * Defaults to the system's locale if no locale has been specified
  * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
  * @type {string}
  */
  get weekdayShort() {
    return this.isValid ? Info.weekdays("short", {
      locObj: this.loc
    })[this.weekday - 1] : null;
  }
  /**
  * Get the human readable long weekday, such as 'Monday'.
  * Defaults to the system's locale if no locale has been specified
  * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
  * @type {string}
  */
  get weekdayLong() {
    return this.isValid ? Info.weekdays("long", {
      locObj: this.loc
    })[this.weekday - 1] : null;
  }
  /**
  * Get the UTC offset of this DateTime in minutes
  * @example DateTime.now().offset //=> -240
  * @example DateTime.utc().offset //=> 0
  * @type {number}
  */
  get offset() {
    return this.isValid ? +this.o : NaN;
  }
  /**
  * Get the short human name for the zone's current offset, for example "EST" or "EDT".
  * Defaults to the system's locale if no locale has been specified
  * @type {string}
  */
  get offsetNameShort() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "short",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  /**
  * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
  * Defaults to the system's locale if no locale has been specified
  * @type {string}
  */
  get offsetNameLong() {
    if (this.isValid) {
      return this.zone.offsetName(this.ts, {
        format: "long",
        locale: this.locale
      });
    } else {
      return null;
    }
  }
  /**
  * Get whether this zone's offset ever changes, as in a DST.
  * @type {boolean}
  */
  get isOffsetFixed() {
    return this.isValid ? this.zone.isUniversal : null;
  }
  /**
  * Get whether the DateTime is in a DST.
  * @type {boolean}
  */
  get isInDST() {
    if (this.isOffsetFixed) {
      return false;
    } else {
      return this.offset > this.set({
        month: 1,
        day: 1
      }).offset || this.offset > this.set({
        month: 5
      }).offset;
    }
  }
  /**
  * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
  * in this DateTime's zone. During DST changes local time can be ambiguous, for example
  * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
  * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
  * @returns {DateTime[]}
  */
  getPossibleOffsets() {
    if (!this.isValid || this.isOffsetFixed) {
      return [
        this
      ];
    }
    const dayMs = 864e5;
    const minuteMs = 6e4;
    const localTS = objToLocalTS(this.c);
    const oEarlier = this.zone.offset(localTS - dayMs);
    const oLater = this.zone.offset(localTS + dayMs);
    const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
    const o2 = this.zone.offset(localTS - oLater * minuteMs);
    if (o1 === o2) {
      return [
        this
      ];
    }
    const ts1 = localTS - o1 * minuteMs;
    const ts2 = localTS - o2 * minuteMs;
    const c1 = tsToObj(ts1, o1);
    const c2 = tsToObj(ts2, o2);
    if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) {
      return [
        clone2(this, {
          ts: ts1
        }),
        clone2(this, {
          ts: ts2
        })
      ];
    }
    return [
      this
    ];
  }
  /**
  * Returns true if this DateTime is in a leap year, false otherwise
  * @example DateTime.local(2016).isInLeapYear //=> true
  * @example DateTime.local(2013).isInLeapYear //=> false
  * @type {boolean}
  */
  get isInLeapYear() {
    return isLeapYear(this.year);
  }
  /**
  * Returns the number of days in this DateTime's month
  * @example DateTime.local(2016, 2).daysInMonth //=> 29
  * @example DateTime.local(2016, 3).daysInMonth //=> 31
  * @type {number}
  */
  get daysInMonth() {
    return daysInMonth(this.year, this.month);
  }
  /**
  * Returns the number of days in this DateTime's year
  * @example DateTime.local(2016).daysInYear //=> 366
  * @example DateTime.local(2013).daysInYear //=> 365
  * @type {number}
  */
  get daysInYear() {
    return this.isValid ? daysInYear(this.year) : NaN;
  }
  /**
  * Returns the number of weeks in this DateTime's year
  * @see https://en.wikipedia.org/wiki/ISO_week_date
  * @example DateTime.local(2004).weeksInWeekYear //=> 53
  * @example DateTime.local(2013).weeksInWeekYear //=> 52
  * @type {number}
  */
  get weeksInWeekYear() {
    return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
  }
  /**
  * Returns the number of weeks in this DateTime's local week year
  * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
  * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
  * @type {number}
  */
  get weeksInLocalWeekYear() {
    return this.isValid ? weeksInWeekYear(this.localWeekYear, this.loc.getMinDaysInFirstWeek(), this.loc.getStartOfWeek()) : NaN;
  }
  /**
  * Returns the resolved Intl options for this DateTime.
  * This is useful in understanding the behavior of formatting methods
  * @param {Object} opts - the same options as toLocaleString
  * @return {Object}
  */
  resolvedLocaleOptions(opts = {}) {
    const { locale, numberingSystem, calendar } = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this);
    return {
      locale,
      numberingSystem,
      outputCalendar: calendar
    };
  }
  // TRANSFORM
  /**
  * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
  *
  * Equivalent to {@link DateTime#setZone}('utc')
  * @param {number} [offset=0] - optionally, an offset from UTC in minutes
  * @param {Object} [opts={}] - options to pass to `setZone()`
  * @return {DateTime}
  */
  toUTC(offset2 = 0, opts = {}) {
    return this.setZone(FixedOffsetZone.instance(offset2), opts);
  }
  /**
  * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
  *
  * Equivalent to `setZone('local')`
  * @return {DateTime}
  */
  toLocal() {
    return this.setZone(Settings.defaultZone);
  }
  /**
  * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
  *
  * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
  * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
  * @param {Object} opts - options
  * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
  * @return {DateTime}
  */
  setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
    zone = normalizeZone(zone, Settings.defaultZone);
    if (zone.equals(this.zone)) {
      return this;
    } else if (!zone.isValid) {
      return _DateTime.invalid(unsupportedZone(zone));
    } else {
      let newTS = this.ts;
      if (keepLocalTime || keepCalendarTime) {
        const offsetGuess = zone.offset(this.ts);
        const asObj = this.toObject();
        [newTS] = objToTS(asObj, offsetGuess, zone);
      }
      return clone2(this, {
        ts: newTS,
        zone
      });
    }
  }
  /**
  * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
  * @param {Object} properties - the properties to set
  * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
  * @return {DateTime}
  */
  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
    const loc = this.loc.clone({
      locale,
      numberingSystem,
      outputCalendar
    });
    return clone2(this, {
      loc
    });
  }
  /**
  * "Set" the locale. Returns a newly-constructed DateTime.
  * Just a convenient alias for reconfigure({ locale })
  * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
  * @return {DateTime}
  */
  setLocale(locale) {
    return this.reconfigure({
      locale
    });
  }
  /**
  * "Set" the values of specified units. Returns a newly-constructed DateTime.
  * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
  *
  * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
  * They cannot be mixed with ISO-week units like `weekday`.
  * @param {Object} values - a mapping of units to numbers
  * @example dt.set({ year: 2017 })
  * @example dt.set({ hour: 8, minute: 30 })
  * @example dt.set({ weekday: 5 })
  * @example dt.set({ year: 2005, ordinal: 234 })
  * @return {DateTime}
  */
  set(values) {
    if (!this.isValid) return this;
    const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
    const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);
    const settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
    if ((containsGregor || containsOrdinal) && definiteWeekDef) {
      throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
    }
    if (containsGregorMD && containsOrdinal) {
      throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
    }
    let mixed;
    if (settingWeekStuff) {
      mixed = weekToGregorian({
        ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek),
        ...normalized
      }, minDaysInFirstWeek, startOfWeek);
    } else if (!isUndefined(normalized.ordinal)) {
      mixed = ordinalToGregorian({
        ...gregorianToOrdinal(this.c),
        ...normalized
      });
    } else {
      mixed = {
        ...this.toObject(),
        ...normalized
      };
      if (isUndefined(normalized.day)) {
        mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
      }
    }
    const [ts, o] = objToTS(mixed, this.o, this.zone);
    return clone2(this, {
      ts,
      o
    });
  }
  /**
  * Add a period of time to this DateTime and return the resulting DateTime
  *
  * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
  * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
  * @example DateTime.now().plus(123) //~> in 123 milliseconds
  * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
  * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
  * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
  * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
  * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
  * @return {DateTime}
  */
  plus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration);
    return clone2(this, adjustTime(this, dur));
  }
  /**
  * Subtract a period of time to this DateTime and return the resulting DateTime
  * See {@link DateTime#plus}
  * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
  @return {DateTime}
  */
  minus(duration) {
    if (!this.isValid) return this;
    const dur = Duration.fromDurationLike(duration).negate();
    return clone2(this, adjustTime(this, dur));
  }
  /**
  * "Set" this DateTime to the beginning of a unit of time.
  * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
  * @param {Object} opts - options
  * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
  * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
  * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
  * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
  * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
  * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
  * @return {DateTime}
  */
  startOf(unit, { useLocaleWeeks = false } = {}) {
    if (!this.isValid) return this;
    const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
    switch (normalizedUnit) {
      case "years":
        o.month = 1;
      // falls through
      case "quarters":
      case "months":
        o.day = 1;
      // falls through
      case "weeks":
      case "days":
        o.hour = 0;
      // falls through
      case "hours":
        o.minute = 0;
      // falls through
      case "minutes":
        o.second = 0;
      // falls through
      case "seconds":
        o.millisecond = 0;
        break;
      case "milliseconds":
        break;
    }
    if (normalizedUnit === "weeks") {
      if (useLocaleWeeks) {
        const startOfWeek = this.loc.getStartOfWeek();
        const { weekday } = this;
        if (weekday < startOfWeek) {
          o.weekNumber = this.weekNumber - 1;
        }
        o.weekday = startOfWeek;
      } else {
        o.weekday = 1;
      }
    }
    if (normalizedUnit === "quarters") {
      const q = Math.ceil(this.month / 3);
      o.month = (q - 1) * 3 + 1;
    }
    return this.set(o);
  }
  /**
  * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
  * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
  * @param {Object} opts - options
  * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
  * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
  * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
  * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
  * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
  * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
  * @return {DateTime}
  */
  endOf(unit, opts) {
    return this.isValid ? this.plus({
      [unit]: 1
    }).startOf(unit, opts).minus(1) : this;
  }
  // OUTPUT
  /**
  * Returns a string representation of this DateTime formatted according to the specified format string.
  * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
  * Defaults to en-US if no locale has been specified, regardless of the system's locale.
  * @param {string} fmt - the format string
  * @param {Object} opts - opts to override the configuration options on this DateTime
  * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
  * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
  * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
  * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
  * @return {string}
  */
  toFormat(fmt, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID3;
  }
  /**
  * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
  * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
  * of the DateTime in the assigned locale.
  * Defaults to the system's locale if no locale has been specified
  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
  * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
  * @param {Object} opts - opts to override the configuration options on this DateTime
  * @example DateTime.now().toLocaleString(); //=> 4/20/2017
  * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
  * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
  * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
  * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
  * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
  * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
  * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
  * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
  * @return {string}
  */
  toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
  }
  /**
  * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
  * Defaults to the system's locale if no locale has been specified
  * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
  * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
  * @example DateTime.now().toLocaleParts(); //=> [
  *                                   //=>   { type: 'day', value: '25' },
  *                                   //=>   { type: 'literal', value: '/' },
  *                                   //=>   { type: 'month', value: '05' },
  *                                   //=>   { type: 'literal', value: '/' },
  *                                   //=>   { type: 'year', value: '1982' }
  *                                   //=> ]
  */
  toLocaleParts(opts = {}) {
    return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
  }
  /**
  * Returns an ISO 8601-compliant string representation of this DateTime
  * @param {Object} opts - options
  * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
  * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
  * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
  * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
  * @param {string} [opts.format='extended'] - choose between the basic and extended format
  * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
  * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
  * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
  * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
  * @return {string}
  */
  toISO({ format = "extended", suppressSeconds = false, suppressMilliseconds = false, includeOffset = true, extendedZone = false } = {}) {
    if (!this.isValid) {
      return null;
    }
    const ext = format === "extended";
    let c = toISODate(this, ext);
    c += "T";
    c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    return c;
  }
  /**
  * Returns an ISO 8601-compliant string representation of this DateTime's date component
  * @param {Object} opts - options
  * @param {string} [opts.format='extended'] - choose between the basic and extended format
  * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
  * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
  * @return {string}
  */
  toISODate({ format = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, format === "extended");
  }
  /**
  * Returns an ISO 8601-compliant string representation of this DateTime's week date
  * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
  * @return {string}
  */
  toISOWeekDate() {
    return toTechFormat(this, "kkkk-'W'WW-c");
  }
  /**
  * Returns an ISO 8601-compliant string representation of this DateTime's time component
  * @param {Object} opts - options
  * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
  * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
  * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
  * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
  * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
  * @param {string} [opts.format='extended'] - choose between the basic and extended format
  * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
  * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
  * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
  * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
  * @return {string}
  */
  toISOTime({ suppressMilliseconds = false, suppressSeconds = false, includeOffset = true, includePrefix = false, extendedZone = false, format = "extended" } = {}) {
    if (!this.isValid) {
      return null;
    }
    let c = includePrefix ? "T" : "";
    return c + toISOTime(this, format === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
  }
  /**
  * Returns an RFC 2822-compatible string representation of this DateTime
  * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
  * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
  * @return {string}
  */
  toRFC2822() {
    return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
  }
  /**
  * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
  * Specifically, the string conforms to RFC 1123.
  * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
  * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
  * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
  * @return {string}
  */
  toHTTP() {
    return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
  }
  /**
  * Returns a string representation of this DateTime appropriate for use in SQL Date
  * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
  * @return {string}
  */
  toSQLDate() {
    if (!this.isValid) {
      return null;
    }
    return toISODate(this, true);
  }
  /**
  * Returns a string representation of this DateTime appropriate for use in SQL Time
  * @param {Object} opts - options
  * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
  * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
  * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
  * @example DateTime.utc().toSQL() //=> '05:15:16.345'
  * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
  * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
  * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
  * @return {string}
  */
  toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
    let fmt = "HH:mm:ss.SSS";
    if (includeZone || includeOffset) {
      if (includeOffsetSpace) {
        fmt += " ";
      }
      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += "ZZ";
      }
    }
    return toTechFormat(this, fmt, true);
  }
  /**
  * Returns a string representation of this DateTime appropriate for use in SQL DateTime
  * @param {Object} opts - options
  * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
  * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
  * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
  * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
  * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
  * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
  * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
  * @return {string}
  */
  toSQL(opts = {}) {
    if (!this.isValid) {
      return null;
    }
    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
  }
  /**
  * Returns a string representation of this DateTime appropriate for debugging
  * @return {string}
  */
  toString() {
    return this.isValid ? this.toISO() : INVALID3;
  }
  /**
  * Returns a string representation of this DateTime appropriate for the REPL.
  * @return {string}
  */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    if (this.isValid) {
      return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
    } else {
      return `DateTime { Invalid, reason: ${this.invalidReason} }`;
    }
  }
  /**
  * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
  * @return {number}
  */
  valueOf() {
    return this.toMillis();
  }
  /**
  * Returns the epoch milliseconds of this DateTime.
  * @return {number}
  */
  toMillis() {
    return this.isValid ? this.ts : NaN;
  }
  /**
  * Returns the epoch seconds of this DateTime.
  * @return {number}
  */
  toSeconds() {
    return this.isValid ? this.ts / 1e3 : NaN;
  }
  /**
  * Returns the epoch seconds (as a whole number) of this DateTime.
  * @return {number}
  */
  toUnixInteger() {
    return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
  }
  /**
  * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
  * @return {string}
  */
  toJSON() {
    return this.toISO();
  }
  /**
  * Returns a BSON serializable equivalent to this DateTime.
  * @return {Date}
  */
  toBSON() {
    return this.toJSDate();
  }
  /**
  * Returns a JavaScript object with this DateTime's year, month, day, and so on.
  * @param opts - options for generating the object
  * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
  * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
  * @return {Object}
  */
  toObject(opts = {}) {
    if (!this.isValid) return {};
    const base = {
      ...this.c
    };
    if (opts.includeConfig) {
      base.outputCalendar = this.outputCalendar;
      base.numberingSystem = this.loc.numberingSystem;
      base.locale = this.loc.locale;
    }
    return base;
  }
  /**
  * Returns a JavaScript Date equivalent to this DateTime.
  * @return {Date}
  */
  toJSDate() {
    return new Date(this.isValid ? this.ts : NaN);
  }
  // COMPARE
  /**
  * Return the difference between two DateTimes as a Duration.
  * @param {DateTime} otherDateTime - the DateTime to compare this one to
  * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
  * @param {Object} opts - options that affect the creation of the Duration
  * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
  * @example
  * var i1 = DateTime.fromISO('1982-05-25T09:45'),
  *     i2 = DateTime.fromISO('1983-10-14T10:30');
  * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
  * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
  * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
  * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
  * @return {Duration}
  */
  diff(otherDateTime, unit = "milliseconds", opts = {}) {
    if (!this.isValid || !otherDateTime.isValid) {
      return Duration.invalid("created by diffing an invalid DateTime");
    }
    const durOpts = {
      locale: this.locale,
      numberingSystem: this.numberingSystem,
      ...opts
    };
    const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
    return otherIsLater ? diffed.negate() : diffed;
  }
  /**
  * Return the difference between this DateTime and right now.
  * See {@link DateTime#diff}
  * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
  * @param {Object} opts - options that affect the creation of the Duration
  * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
  * @return {Duration}
  */
  diffNow(unit = "milliseconds", opts = {}) {
    return this.diff(_DateTime.now(), unit, opts);
  }
  /**
  * Return an Interval spanning between this DateTime and another DateTime
  * @param {DateTime} otherDateTime - the other end point of the Interval
  * @return {Interval}
  */
  until(otherDateTime) {
    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
  }
  /**
  * Return whether this DateTime is in the same unit of time as another DateTime.
  * Higher-order units must also be identical for this function to return `true`.
  * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
  * @param {DateTime} otherDateTime - the other DateTime
  * @param {string} unit - the unit of time to check sameness on
  * @param {Object} opts - options
  * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
  * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
  * @return {boolean}
  */
  hasSame(otherDateTime, unit, opts) {
    if (!this.isValid) return false;
    const inputMs = otherDateTime.valueOf();
    const adjustedToZone = this.setZone(otherDateTime.zone, {
      keepLocalTime: true
    });
    return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
  }
  /**
  * Equality check
  * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
  * To compare just the millisecond values, use `+dt1 === +dt2`.
  * @param {DateTime} other - the other DateTime
  * @return {boolean}
  */
  equals(other) {
    return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
  }
  /**
  * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
  * platform supports Intl.RelativeTimeFormat. Rounds down by default.
  * @param {Object} options - options that affect the output
  * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
  * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
  * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
  * @param {boolean} [options.round=true] - whether to round the numbers in the output.
  * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
  * @param {string} options.locale - override the locale of this DateTime
  * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
  * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
  * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
  * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
  * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
  * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
  * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
  */
  toRelative(options = {}) {
    if (!this.isValid) return null;
    const base = options.base || _DateTime.fromObject({}, {
      zone: this.zone
    }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
    let units = [
      "years",
      "months",
      "days",
      "hours",
      "minutes",
      "seconds"
    ];
    let unit = options.unit;
    if (Array.isArray(options.unit)) {
      units = options.unit;
      unit = void 0;
    }
    return diffRelative(base, this.plus(padding), {
      ...options,
      numeric: "always",
      units,
      unit
    });
  }
  /**
  * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
  * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
  * @param {Object} options - options that affect the output
  * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
  * @param {string} options.locale - override the locale of this DateTime
  * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
  * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
  * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
  * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
  * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
  * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
  */
  toRelativeCalendar(options = {}) {
    if (!this.isValid) return null;
    return diffRelative(options.base || _DateTime.fromObject({}, {
      zone: this.zone
    }), this, {
      ...options,
      numeric: "auto",
      units: [
        "years",
        "months",
        "days"
      ],
      calendary: true
    });
  }
  /**
  * Return the min of several date times
  * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
  * @return {DateTime} the min DateTime, or undefined if called with no argument
  */
  static min(...dateTimes) {
    if (!dateTimes.every(_DateTime.isDateTime)) {
      throw new InvalidArgumentError("min requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
  }
  /**
  * Return the max of several date times
  * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
  * @return {DateTime} the max DateTime, or undefined if called with no argument
  */
  static max(...dateTimes) {
    if (!dateTimes.every(_DateTime.isDateTime)) {
      throw new InvalidArgumentError("max requires all arguments be DateTimes");
    }
    return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
  }
  // MISC
  /**
  * Explain how a string would be parsed by fromFormat()
  * @param {string} text - the string to parse
  * @param {string} fmt - the format the string is expected to be in (see description)
  * @param {Object} options - options taken by fromFormat()
  * @return {Object}
  */
  static fromFormatExplain(text, fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    return explainFromTokens(localeToUse, text, fmt);
  }
  /**
  * @deprecated use fromFormatExplain instead
  */
  static fromStringExplain(text, fmt, options = {}) {
    return _DateTime.fromFormatExplain(text, fmt, options);
  }
  /**
  * Build a parser for `fmt` using the given locale. This parser can be passed
  * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
  * can be used to optimize cases where many dates need to be parsed in a
  * specific format.
  *
  * @param {String} fmt - the format the string is expected to be in (see
  * description)
  * @param {Object} options - options used to set locale and numberingSystem
  * for parser
  * @returns {TokenParser} - opaque object to be used
  */
  static buildFormatParser(fmt, options = {}) {
    const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    return new TokenParser(localeToUse, fmt);
  }
  /**
  * Create a DateTime from an input string and format parser.
  *
  * The format parser must have been created with the same locale as this call.
  *
  * @param {String} text - the string to parse
  * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
  * @param {Object} opts - options taken by fromFormat()
  * @returns {DateTime}
  */
  static fromFormatParser(text, formatParser, opts = {}) {
    if (isUndefined(text) || isUndefined(formatParser)) {
      throw new InvalidArgumentError("fromFormatParser requires an input string and a format parser");
    }
    const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
      locale,
      numberingSystem,
      defaultToEN: true
    });
    if (!localeToUse.equals(formatParser.locale)) {
      throw new InvalidArgumentError(`fromFormatParser called with a locale of ${localeToUse}, but the format parser was created for ${formatParser.locale}`);
    }
    const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);
    if (invalidReason) {
      return _DateTime.invalid(invalidReason);
    } else {
      return parseDataToDateTime(result, zone, opts, `format ${formatParser.format}`, text, specificOffset);
    }
  }
  // FORMAT PRESETS
  /**
  * {@link DateTime#toLocaleString} format like 10/14/1983
  * @type {Object}
  */
  static get DATE_SHORT() {
    return DATE_SHORT;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
  * @type {Object}
  */
  static get DATE_MED() {
    return DATE_MED;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
  * @type {Object}
  */
  static get DATE_MED_WITH_WEEKDAY() {
    return DATE_MED_WITH_WEEKDAY;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'October 14, 1983'
  * @type {Object}
  */
  static get DATE_FULL() {
    return DATE_FULL;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
  * @type {Object}
  */
  static get DATE_HUGE() {
    return DATE_HUGE;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get TIME_SIMPLE() {
    return TIME_SIMPLE;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get TIME_WITH_SECONDS() {
    return TIME_WITH_SECONDS;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get TIME_WITH_SHORT_OFFSET() {
    return TIME_WITH_SHORT_OFFSET;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get TIME_WITH_LONG_OFFSET() {
    return TIME_WITH_LONG_OFFSET;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
  * @type {Object}
  */
  static get TIME_24_SIMPLE() {
    return TIME_24_SIMPLE;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
  * @type {Object}
  */
  static get TIME_24_WITH_SECONDS() {
    return TIME_24_WITH_SECONDS;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
  * @type {Object}
  */
  static get TIME_24_WITH_SHORT_OFFSET() {
    return TIME_24_WITH_SHORT_OFFSET;
  }
  /**
  * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
  * @type {Object}
  */
  static get TIME_24_WITH_LONG_OFFSET() {
    return TIME_24_WITH_LONG_OFFSET;
  }
  /**
  * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_SHORT() {
    return DATETIME_SHORT;
  }
  /**
  * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_SHORT_WITH_SECONDS() {
    return DATETIME_SHORT_WITH_SECONDS;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_MED() {
    return DATETIME_MED;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_MED_WITH_SECONDS() {
    return DATETIME_MED_WITH_SECONDS;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_MED_WITH_WEEKDAY() {
    return DATETIME_MED_WITH_WEEKDAY;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_FULL() {
    return DATETIME_FULL;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_FULL_WITH_SECONDS() {
    return DATETIME_FULL_WITH_SECONDS;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_HUGE() {
    return DATETIME_HUGE;
  }
  /**
  * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
  * @type {Object}
  */
  static get DATETIME_HUGE_WITH_SECONDS() {
    return DATETIME_HUGE_WITH_SECONDS;
  }
};
function friendlyDateTime(dateTimeish) {
  if (DateTime.isDateTime(dateTimeish)) {
    return dateTimeish;
  } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
    return DateTime.fromJSDate(dateTimeish);
  } else if (dateTimeish && typeof dateTimeish === "object") {
    return DateTime.fromObject(dateTimeish);
  } else {
    throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`);
  }
}
__name(friendlyDateTime, "friendlyDateTime");

// src/front/configurations/public.development.config.json
var public_development_config_default = {
  origins: [
    "https://localhost",
    "http://127.0.0.1:8080/"
  ],
  endpoints: {
    backend: "https://localhost"
  },
  authentication: {
    google: {
      clientId: "562537270489-apu3gn8jqr0aa2tj2mp80g2pi5clge7u.apps.googleusercontent.com"
    },
    auth0: {
      clientId: "KnVZnc63CCohWDHsRLSdVp1uZz3lD9Lq"
    },
    msal: {
      clientId: "a7f08378-a689-494c-b77c-c49fa1aa19cb"
    },
    "okta-sephora": {
      clientId: "0oa3pgmpbk6xfNYjc0x7"
    },
    "te-digital-pass": {
      clientId: "app-surfy-prod"
    },
    "azure-vca": {
      clientId: "0271aec8-d6fa-4328-82d5-93463001184a"
    },
    "azure-te": {
      clientId: "5792f57f-cf0d-4cf3-965c-7adcfa883fa3"
    }
  },
  google: {
    maps: "AIzaSyBRiwPWbrCraxyv6aAv-AuLSCpLy34FC0M"
  }
};

// src/front/configurations/public.alpha.config.json
var public_alpha_config_default = {
  logRocket: {
    appId: "surfy/surfy-alpha"
  },
  authentication: {
    auth0: {
      clientId: "gxqMWyQ1p4YAyi0sG7TS4VETVhHOPYjI"
    },
    msal: {
      clientId: "d37902ef-290e-4b1f-b97d-c456e3a3f424"
    },
    google: {
      clientId: "66899640159-4o5e9mbti0sap7md07vfaoplppbr9h3p.apps.googleusercontent.com"
    },
    "okta-sephora": {
      clientId: "0oa3pgmpbk6xfNYjc0x7"
    },
    "te-digital-pass": {
      clientId: "app-surfy-prod"
    },
    "azure-vca": {
      clientId: "0271aec8-d6fa-4328-82d5-93463001184a"
    },
    "azure-te": {
      clientId: "5792f57f-cf0d-4cf3-965c-7adcfa883fa3"
    }
  },
  origins: [
    "https://app-alpha.surfy.pro"
  ],
  endpoints: {
    backend: "https://app-alpha.surfy.pro"
  },
  google: {
    maps: "AIzaSyDLqHjb5Taeglcv5kfIeWM6pEwzCwMMjFU"
  }
};

// src/front/configurations/public.p2.config.json
var public_p2_config_default = {
  logRocket: {
    appId: "surfy/surfy-production-9rwgq"
  },
  origins: [
    "https://app.surfy.pro",
    "https://help.surfy.pro"
  ],
  endpoints: {
    backend: "https://app.surfy.pro"
  },
  google: {
    maps: "AIzaSyDLqHjb5Taeglcv5kfIeWM6pEwzCwMMjFU"
  },
  authentication: {
    auth0: {
      clientId: "pqF4xIJxyikS5FD7t11QUT6VH51JtXDS"
    },
    msal: {
      clientId: "194145f8-c6dd-4fff-9162-4069cbd0c0b1"
    },
    google: {
      clientId: "905042472880-rv5v9r3a45c02dp3nht2klqhdrqmlo6b.apps.googleusercontent.com"
    },
    "okta-sephora": {
      clientId: "0oa7exckjf7mnoM7c0i7"
    },
    "te-digital-pass": {
      clientId: "app-surfy-prod"
    },
    "azure-vca": {
      clientId: "0271aec8-d6fa-4328-82d5-93463001184a"
    },
    "azure-te": {
      clientId: "52c5380a-833f-422a-ad56-3d4a98842353"
    }
  }
};

// src/front/configurations/public.base.config.json
var public_base_config_default = {
  providers: [
    "AzureADv2",
    "google-oauth2",
    "linkedin",
    "windowslive"
  ],
  cloudinary: {
    name: "app-surfy-pro",
    presets: {
      signed: "signed-upload",
      unsigned: "by79qv6c"
    }
  },
  profile: {
    logo: {
      square: "https://res.cloudinary.com/app-surfy-pro/image/upload/v1515245191/app/surfy/logo-surfy-square.png",
      normal: "https://res.cloudinary.com/app-surfy-pro/image/upload/v1660809543/app/surfy/logo-surfy.png"
    }
  }
};

// src/core/utils/lodash/lodash.helper.ts
var import_uniq = __toESM(require("lodash/uniq"));
var import_uniqBy = __toESM(require("lodash/uniqBy"));
var import_differenceWith = __toESM(require("lodash/differenceWith"));
var import_merge = __toESM(require("lodash/merge"));
var import_remove = __toESM(require("lodash/remove"));
var import_sum = __toESM(require("lodash/sum"));
var import_chunk = __toESM(require("lodash/chunk"));
var import_isEmpty = __toESM(require("lodash/isEmpty"));
var import_isObject = __toESM(require("lodash/isObject"));
var import_isArray = __toESM(require("lodash/isArray"));
var import_difference = __toESM(require("lodash/difference"));
var import_isNumber = __toESM(require("lodash/isNumber"));
var import_trim = __toESM(require("lodash/trim"));
var import_isDate = __toESM(require("lodash/isDate"));
var import_find = __toESM(require("lodash/find"));
var import_indexOf = __toESM(require("lodash/indexOf"));
var jupUniq = import_uniq.default;
var jupDifferenceWith = import_differenceWith.default;
var jupMerge = import_merge.default;

// src/front/jup/Configuration/public.configuration.ts
function getPublicConfiguration(jupEnv) {
  switch (jupEnv) {
    case "p2":
      return jupMerge(public_base_config_default, public_p2_config_default);
    case "alpha":
      return jupMerge(public_base_config_default, public_alpha_config_default);
    case "development":
    default:
      return jupMerge(public_base_config_default, public_development_config_default);
  }
}
__name(getPublicConfiguration, "getPublicConfiguration");

// src/front/jup/Configuration/configuration.ts
function getJupEnvFromLocationOrigin(origin) {
  const o = `${origin}`;
  if (public_p2_config_default.origins.includes(o)) {
    return "p2";
  }
  if (public_development_config_default.origins.includes(o)) {
    return "development";
  }
  if (public_alpha_config_default.origins.includes(o)) {
    return "alpha";
  }
}
__name(getJupEnvFromLocationOrigin, "getJupEnvFromLocationOrigin");
function getPublicConfigurationFront() {
  const jupEnv = getJupEnvFront();
  return getPublicConfiguration(jupEnv);
}
__name(getPublicConfigurationFront, "getPublicConfigurationFront");
function getJupEnvFront() {
  const d = getDocumentLocation();
  if (d) {
    const env = getJupEnvFromLocationOrigin(d.origin);
    if (env) {
      return env;
    }
  }
  return "not-set";
}
__name(getJupEnvFront, "getJupEnvFront");

// src/front/version/public.version.ts
var import_js_cookie = __toESM(require("js-cookie"));
function getPublicAppVersion() {
  return import_js_cookie.default.get(versionCookieKeyName) ?? "0.0.0";
}
__name(getPublicAppVersion, "getPublicAppVersion");

// src/front/jup/I18n/i18nSupportedLanguages.ts
var import_locale5 = require("@mui/material/locale");
var supportedLanguages = [
  addLanguage("fr", "Fran\xE7ais", import_locale5.frFR, "fr", frFR),
  addLanguage("en", "English", import_locale5.enUS, "en-gb", enUS, "gb"),
  addLanguage("it", "Italiano", import_locale5.itIT, "it", itIT),
  addLanguage("es", "Espa\xF1ol", import_locale5.esES, "es", esES),
  addLanguage("nl", "Nederlands", import_locale5.nlNL, "nl", nlNL)
];
function addLanguage(code, name, mui, momentCode, muiDatePicker, flagCode) {
  const language = {
    name,
    code,
    mui,
    momentCode,
    muiDatePicker,
    flagCode: flagCode ?? code
  };
  return language;
}
__name(addLanguage, "addLanguage");

// src/front/jup/I18n/i18n.ts
function useTranslation(componentKey) {
  useGlobalTranslationCode();
  const i18nApi = useI18nApi();
  if (componentKey) {
    return (key, data) => i18nApi.translate(`${componentKey}.${key}`, data);
  }
  return (key, data) => i18nApi.translate(key, data);
}
__name(useTranslation, "useTranslation");
function fetchLanguageJson(language) {
  const version2 = getPublicAppVersion();
  const config = getPublicConfigurationFront();
  const url = `${config.endpoints.backend}/assets/i18n/${language}.json?v=${version2}`;
  return fetch(url, {
    cache: "default"
  }).then((res) => res.json());
}
__name(fetchLanguageJson, "fetchLanguageJson");
async function getNewPolyglotFromFrontConfig(locale) {
  const phrases = await fetchLanguageJson(locale);
  return new import_node_polyglot.default({
    locale,
    phrases,
    allowMissing: true
  });
}
__name(getNewPolyglotFromFrontConfig, "getNewPolyglotFromFrontConfig");
function updateGlobalLanguageSettings(locale) {
  const language = supportedLanguages.find((l2) => l2.code === locale);
  if (language) {
    Settings.defaultLocale = language.momentCode;
    gqlbMemory.language = language.code;
  }
}
__name(updateGlobalLanguageSettings, "updateGlobalLanguageSettings");

// src/front/jup/I18n/i18n.core.ts
function cleanUpGuess(word) {
  return toUnderscore(word).split("_").map(capitalizeFirstLetter).join(" ");
}
__name(cleanUpGuess, "cleanUpGuess");
function guessI18nMissingKey(key) {
  const words = key.split(".").slice(-2);
  const first = words[0];
  const last = words[1];
  if ([
    "label",
    "singular"
  ].indexOf(last) !== -1) {
    return cleanUpGuess(first);
  }
  if ([
    "views"
  ].indexOf(first) !== -1) {
    return cleanUpGuess(last);
  }
  if (last.endsWith("plural")) {
    return cleanUpGuess(toPlural(first));
  }
  return words.join(" ");
}
__name(guessI18nMissingKey, "guessI18nMissingKey");

// src/front/jup/I18n/i18n.helper.ts
function getBrowserLocal() {
  const navigator2 = getNavigator();
  if (navigator2) {
    const locale = navigator2.language;
    const regexp = new RegExp(/(.*)-(.*)/);
    const match2 = locale.match(regexp);
    if (match2) {
      return match2[1];
    }
  }
  return "fr";
}
__name(getBrowserLocal, "getBrowserLocal");

// src/front/jup/I18n/PolyglotApi.ts
var polyglot = void 0;
var missingKeys = [];
var PolyglotApi = class {
  static {
    __name(this, "PolyglotApi");
  }
  get locale() {
    if (!polyglot) {
      return "fr";
    }
    const code = polyglot.locale();
    return code;
  }
  async setup(defaultLanguage) {
    const locale = defaultLanguage ?? gqlbMemory.language ?? getBrowserLocal();
    await this.setLocale(locale);
    return this;
  }
  isKey(key, value) {
    return key === value;
  }
  keyExists(key) {
    if (!polyglot) {
      return false;
    }
    const res = polyglot.t(key);
    return !this.isKey(key, res);
  }
  has(key) {
    return polyglot?.has(key) ?? false;
  }
  setPolyglot(polyglot_) {
    polyglot = polyglot_;
  }
  async setLocale(locale) {
    const polyglot_ = await getNewPolyglotFromFrontConfig(locale);
    this.setPolyglot(polyglot_);
    updateGlobalLanguageSettings(polyglot_.locale());
  }
  translate = /* @__PURE__ */ __name((m, data) => {
    if (!polyglot) {
      throw new Error("Polyglot not initialized");
    }
    const res = polyglot.t(m, data);
    if (this.isKey(m, res)) {
      missingKeys.push(res);
      const guess = guessI18nMissingKey(res);
      return `${guess}`;
    }
    return res;
  }, "translate");
};

// public/assets/i18n/fr.json
var fr_default = {
  "ImportUpdateOption.label": "Mettre \xE0 jour",
  "ImportUpdateOption.help": "Effectuer la mise \xE0 jour des objets s\xE9lectionn\xE9s",
  "ImportUpdateEntitiesTable.description": "Liste des objets qui n\xE9cessitent une mise \xE0 jour",
  "PropertyTypeErrors.title": "Les valeurs suivantes n'existent pas pour la propri\xE9t\xE9 <b>%{propertyTypeLabel}</b> dans <b>%{objectTypeLabel}</b>",
  "ImportDeleteOption.label": "Supprimer",
  "ImportDeleteOption.help": "Effectuer la suppression des objets s\xE9lectionn\xE9s dans Surfy",
  "ImportDeleteEntitiesTable.description": "Liste des objets qui n\xE9cessitent une suppression dans Surfy",
  "ImportCreateOption.label": "Cr\xE9er",
  "ImportCreateOption.help": "Effectuer la cr\xE9ation des objets s\xE9lectionn\xE9s dans Surfy",
  "ImportCreateEntitiesTable.description": "Liste des objets qui n\xE9cessitent une cr\xE9ation",
  "ImportCreateEntitiesTable.open.label": "Voir les entit\xE9s \xE0 cr\xE9er",
  "ImportCreateEntitiesTable.open.help": "Voir le d\xE9tail des entit\xE9s \xE0 cr\xE9er car il y a plus de 500 lignes, pour des raisons de perfromance les lignes sont cach\xE9s par defaut",
  "ImportCreateAllOption.label": "Tout Cr\xE9er",
  "ImportCreateAllOption.help": "Effectuer la cr\xE9ation de tous les objets sans les s\xE9lectionner individuellement",
  "entitiesImportType.date.wrongImportFormat": "Le format de la date %{value} n'est pas correct, le format attendu est %{excelImportDateFormat}",
  "InfoTabContent.description": "Erreurs ou informations notables pendant l'import",
  "InfoTabContent.noChange": "Aucune modification n'a \xE9t\xE9 observ\xE9e \xE0 la comparaison",
  "InfoTabContent.copyIds": "Copier dans le presse-papiers les identifiants des entit\xE9s",
  "InfoTabContent.equals.multiple": "%{count} objets existants et non modifi\xE9s",
  "InfoTabContent.equals.one": "Un seul objet d\xE9j\xE0 existant et non modifi\xE9",
  "InfoTabContent.open.label": "Voir le d\xE9tail de l'import",
  "InfoTabContent.open.help": "Voir le d\xE9tail de l'import pour les comparaisons identiques",
  "ImportObjectType.tabs.create.label": "Cr\xE9ation",
  "ImportObjectType.tabs.update.label": "Mise \xE0 jour",
  "ImportObjectType.tabs.errors.label": "Infos",
  "ImportObjectType.tabs.delete.label": "Suppression",
  "ImportObjectType.usedKeys": "La cl\xE9 de r\xE9conciliation utilis\xE9e est :",
  "ImportObjectType.errors.noChange": "Aucune modification n'a \xE9t\xE9 observ\xE9 \xE0 la comparison",
  "CompareEntities.buttons.reset.label": "Recommencer",
  "CompareEntities.buttons.reset.help": "Recommencer l'import",
  "ObjectTypeImportKeys.title": "Les cl\xE9s disponibles pour r\xE9concilier %{determinants.undefined} dans l'ordre du choix, si vous souhaitez modifier une des propri\xE9t\xE9s cl\xE9 vous devez utilisez l'identifiant comme cl\xE9",
  "ObjectTypeImportScalarProperties.help": "Copier dans le presse-papier",
  "ImportHelpDrawerIconButton.icon.help": "Voir l'aide sur l'import de donn\xE9es pour %{determinants.defined}",
  "ImportHelpDrawerIconButton.drawer.title": "Aide sur l'import %{determinants.undefined}",
  "ImportHelpDrawerIconButton.drawer.tabLabel": "Aide import",
  "DownloadObjectTypeImportTemplateFileButton.label": "T\xE9l\xE9charger le gabarit d'import",
  "DownloadObjectTypeImportTemplateFileButton.help": "T\xE9l\xE9charger un gabarit d'import en execl avec les noms des colonnes que vous pouvez choisir",
  "ImportHelpDrawer.tab": "Aide import %{objectTypeLabel}",
  "BelongsToListItem.clipboard": "Copier le titre de la colonne dans le presse papier",
  "BelongsToListItem.noKeys": "Pas de cl\xE9 unique disponible",
  "BelongsToImportHelp.title": "Les type d'objets associ\xE9s \xE0 %{objectTypeLabel} tri\xE9s par les cl\xE9s d'importation disponible",
  "FileDropZone.dropZone": "Deplacer et glisser le fichier d'import dans cette zone ou cliquer dans la zone pour s\xE9lectionner votre fichier",
  "EntitiesImporter.tabs.file": "Fichier",
  "EntitiesImporter.tabs.copypaste": "Copier et coller",
  "TextAreaImporter.errors.title": "Les erreurs rencontr\xE9s pendant l'import",
  "TextAreaImporter.textarea.placeholder": "Copier et coller vos colonnes depuis excel avec le titre pour permettre de retrouver les propri\xE9t\xE9s \xE0 mettre \xE0 jour",
  "TextAreaImporter.help": "Utilisez la tabulation entre chaque colonne en incluant le nom de chaque colonne dans la premi\xE8re ligne ou coller directement depuis excel",
  "ImportOptionsBar.buttons.compare.label": "Comparer",
  "ImportOptionsBar.buttons.compare.help": "Commencer la comparaison avec les donn\xE9es dans surfy afin de d\xE9t\xE9rminer les modifications \xE0 importer",
  "ImportErrors.errors.title": "Les erreurs rencontr\xE9s pendant l'import",
  "DashboardView.tabs.reports": "Rapports Excel",
  "IconShape.values.circle": "Cercle",
  "IconShape.values.rectangle": "Rectangle",
  "IconShape.values.triangle": "Triangle",
  "EntityDialogSearchList.NoResult": "Aucun r\xE9sultat n'a \xE9t\xE9 trouv\xE9, merci d'effacer vos filtres ou changer votre recherche",
  "FieldTypeEntity.edit": "Changer %{determinant.defined}",
  "FieldTypeEntity.remove": "Retirer %{determinant.defined}",
  "FieldTypeEntity.add": "Ajouter %{determinant.undefined}",
  "LegendSelector.title": "S\xE9lectionner la legende",
  "LegendSelector.labels.default": "L\xE9gende par d\xE9faut",
  "HasManyStandaloneNoData.noData": "Il n'y aucun %{targetObjectTypeLabel} d'associ\xE9 pour %{determinant.defined}",
  "FieldTypeAddress.edit": "Modifier l'adresse",
  "FieldTypeAddress.remove": "Supprimer l'adresse",
  "AutocompleteAddress.autocomplete.placeholder": "Rechercher votre adresse ici",
  "AddressDialog.search": "Rechercher l'adresse",
  "AddressDialog.validate": "Valider",
  "FieldTypePassword.icons.copy": "Copier le contenu du mot de passe dans le presse-papier",
  "FieldTypePassword.icons.generate": "G\xE9n\xE9rer un mot de passe unique",
  "FieldTypeModel3d.Remove": "Retirer le mod\xE8le 3D",
  "FieldTypeModel3d.Upload": "Changer le mod\xE8le 3D",
  "FieldTypeImage.Remove": "Retirer l'image",
  "FieldTypeImage.Upload": "Changer l'image",
  "FieldTypeIcon.Edit": "Changer d'icone",
  "FieldTypeIcon.Remove": "Retirer l'icone",
  "FieldTypeColor.Remove": "Retirer la couleur",
  "FieldTypeColor.NoColorHelp": "S\xE9lectionner une couleur",
  "FieldTypeColor.NotHexMatchError": "Le champs ne respecte pas le format hexad\xE9cimal d'une couleur",
  "CopyImagePathToClipboard.CopyUrl": "Copier l'url",
  "ColorBox.NoColorHelp": "S\xE9lectionner une couleur via la palette",
  "ChangeColor.classic": "Selectionner une couleur avec la platte avanc\xE9e",
  "weight.kilogram": "Kilogramme",
  "weight.gram": "Gramme",
  "distance.meter": "M\xE9tres",
  "distance.centimeter": "Centim\xE8tres",
  "FieldTypeIndexBoolean.help": "Modifier la valeur directement",
  "FieldTypeIndexBoolean.values.true": "Oui",
  "FieldTypeIndexBoolean.values.false": "Non",
  "calculatedProperties.properties.workplacesCount.label": "Nombre de postes de travail",
  "calculatedProperties.properties.workplacesCount.description": "Le nombre total de postes de travail dans les espaces",
  "calculatedProperties.properties.workplacesRatio.label": "Ratio postes de travail",
  "calculatedProperties.properties.workplacesRatio.description": "Le ratio postes de travail est le nombre de m\xE9tres carr\xE9s divis\xE9 par le nombre de postes de travail",
  "calculatedProperties.properties.peopleCount.label": "Nombre d'affectations",
  "calculatedProperties.properties.peopleCount.description": "Le nombre de personnes affect\xE9es, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail",
  "calculatedProperties.properties.totalPeopleCount.label": "Nombre total d'affectations",
  "calculatedProperties.properties.totalPeopleCount.description": "Le nombre total de personnes affect\xE9es, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail",
  "calculatedProperties.properties.peopleRatio.label": "Ratio d'occupation",
  "calculatedProperties.properties.peopleRatio.description": "Le ratio d'occupation est le nombre de m\xE9tres carr\xE9s divis\xE9 par le nombre de personnes affect\xE9es soit directement dans les espaces, soit via un poste de travail",
  "calculatedProperties.properties.freeWorkplacesCount.label": "Nombre de postes libres",
  "calculatedProperties.properties.freeWorkplacesCount.description": "Nombre total de postes libres",
  "calculatedProperties.properties.flexWorkplacesCount.label": "Nombre de postes flex",
  "calculatedProperties.properties.flexWorkplacesCount.description": "Nombre total de postes flex",
  "calculatedProperties.properties.occupancyRate.label": "Taux d'occupation",
  "calculatedProperties.properties.occupancyRate.description": "Permet de conna\xEEtre le taux d'occupation des postes de travail, c'est le nombre de personnes affect\xE9es divis\xE9s par le nombre de postes de travail",
  "calculatedProperties.properties.expansionRatio.label": "Taux de foisonnement",
  "calculatedProperties.properties.expansionRatio.description": "Permet de conna\xEEtre le taux d'usage des postes de travail, c'est l'inverse du nombre de personnes affect\xE9es divis\xE9s par le nombre de postes de travail",
  "calculatedProperties.properties.roomsArea.label": "Surface qualifi\xE9e",
  "calculatedProperties.properties.roomsArea.description": "La surface qualifi\xE9e est la somme des surfaces des espaces",
  "calculatedProperties.properties.roomsCount.label": "Nombre d'espaces",
  "calculatedProperties.properties.roomsCount.description": "Le nombre total d'espaces",
  "calculatedProperties.properties.sharedWorkplacesCount.label": "Nombre de postes de travail partag\xE9s",
  "calculatedProperties.properties.sharedWorkplacesCount.description": "Nombre total de postes de travail partag\xE9s par au moins 2 personnes",
  "calculatedProperties.properties.sharedWorkplacesRatio.label": "Taux de postes de travail partag\xE9s",
  "calculatedProperties.properties.sharedWorkplacesRatio.description": "Taux de postes de travail partag\xE9s par au moins 2 personnes par rapport \xE0 l'ensemble des postes de travail",
  "calculatedProperties.properties.flexRatio.label": "Taux de postes de travail en flex",
  "calculatedProperties.properties.flexRatio.description": "Le taux de poste de travail en flex est calcul\xE9 en divisant le nombre de postes de travail en flex par le nombre total de postes de travail",
  "calculatedProperties.properties.transitWorkplacesCount.label": "Nombre de postes de travail de passage",
  "calculatedProperties.properties.transitWorkplacesCount.description": "Nombre de postes de travail de passage, ces postes ne sont pas comptabilis\xE9s dans les postes libres et ne sont pas en flex",
  "calculatedProperties.properties.seatsCount.label": "Nombre de places assises",
  "calculatedProperties.properties.seatsCount.description": "Le nombre total de places assises",
  "calculatedProperties.properties.seatsPeopleRatio.label": "Taux de places assises par affectations",
  "calculatedProperties.properties.seatsPeopleRatio.description": "Le nombre de places assises par personnes affect\xE9es",
  "calculatedProperties.properties.carbonFootprint.label": "Empreinte carbone",
  "calculatedProperties.properties.carbonFootprint.description": "L'empreinte carbone est le nombre de CO2 \xE9mis",
  "calculatedProperties.properties.totalCapacityCount.label": "Capacit\xE9 totale",
  "calculatedProperties.properties.totalCapacityCount.description": "La capacit\xE9 totale de places est la somme du nombre de places assises et de la capacit\xE9 hors assises au niveau des espaces",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.label": "Taux de places assises par postes de travail",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.description": "Le taux de places par postes de travail est la capacit\xE9 totale des espaces divis\xE9 par le nombre de postes de travail, cela permet de comprendre le taux de places en fonction du nombre de postes de travail",
  "DeleteMultipleDialog.title": "Supprimer %{determinants.undefined}",
  "DeleteMultipleDialog.content": "Vous \xEAtes sur le point de supprimer <b>%{determinants.undefined}</b>, cette action n'est pas r\xE9versible et peut avoir des impacts, \xEAtes-vous s\xFBr de vouloir r\xE9aliser cette action ?",
  "DeleteMultipleDialog.cancel.label": "Annuler",
  "DeleteMultipleDialog.cancel.help": "Annuler la suppression",
  "DeleteMultipleDialog.delete.label": "Supprimer",
  "DeleteMultipleDialog.delete.help": "Supprimer d\xE9finitivement %{determinants.defined}",
  "DownloadTableToExcelIconButton.help": "Exporter %{determinants.defined} s\xE9lectionn\xE9s",
  "DeleteMultipleEntities.help": "Supprimer %{determinants.defined} s\xE9lectionn\xE9(e)s",
  "EntityCreateModeSelect.open-on-create.text": "Ouvrir apr\xE8s la cr\xE9ation",
  "EntityCreateModeSelect.open-on-create.help": "Une fois que votre objet est cr\xE9e, vous allez \xEAtre redirgi\xE9 vers la page de visualisation de l'objet afin de voir ses propri\xE9t\xE9s et associations",
  "EntityCreateModeSelect.keep-creating.text": "Continuer de cr\xE9er",
  "EntityCreateModeSelect.keep-creating.help": "Cette option permet de continuer \xE0 cr\xE9er plusieurs objets \xE0 la suite en conservant les propri\xE9t\xE9s de l'ancienne cr\xE9ation",
  "EntityCreateModeSelect.edit-on-create.text": "Modifier apr\xE8s la cr\xE9ation",
  "EntityCreateModeSelect.edit-on-create.help": "Une fois que votre objet est cr\xE9e, vous allez \xEAtre redirgi\xE9 vers la page de l'\xE9dition de l'objet afin de compl\xEAter ses propri\xE9t\xE9s et associations",
  "TableView.options": "Options",
  "ErrorImpossibleToFindTheEntity.text": "Il est impossible de trouver %{determinant.defined} recherch\xE9s",
  "ErrorImpossibleToFindTheEntities.text": "Il est impossible de trouver %{determinants.defined} recherch\xE9",
  "EntityPropertyTypesMandatoryNotRespected.title": "Les propri\xE9t\xE9s suivantes sont obligatoire",
  "entity.properties.mandatory": "La propri\xE9t\xE9 %{name} est obligatoire.",
  "entity.properties.calculated": "La propri\xE9t\xE9 %{name} est calcul\xE9e automatiquement.",
  "entity.properties.readonly-lock": "La proprit\xE9t\xE9 %{name} est en lecture seule et ne peut pas \xEAtre modifi\xE9e depuis cette page.",
  "EntityHasManyProperties.associations.others": "Les associations pour %{determinant.defined}",
  "EntityHasManyProperties.associations.reporting": "Les associations de reporting pour %{determinant.defined}",
  "EntityHasManyProperties.associations.security": "Les associations de s\xE9curit\xE9 pour %{determinant.defined}",
  "EntitiesView.NoItem": "Il n'y a aucun %{objectType}, vous pouvez cr\xE9er votre premier %{objectType} en utilisant le bouton ci-dessous",
  "DeleteDialog.title": "Supprimer %{determinant.undefined}",
  "DeleteDialog.content": "Vous \xEAtes sur le point de supprimer <b>%{determinant.undefined}</b>, cette action n'est pas r\xE9versible et peut avoir des impacts, \xEAtes-vous s\xFBr de vouloir r\xE9aliser cette action ?",
  "DeleteDialog.cancel.label": "Annuler",
  "DeleteDialog.cancel.help": "Annuler la suppression",
  "DeleteDialog.delete.label": "Supprimer",
  "DeleteDialog.delete.help": "Supprimer d\xE9finitivement %{determinant.defined}",
  "ExportQueryNodeToFileButton.help.list": "T\xE9l\xE9charger en excel %{determinants.defined}",
  "entity.excel.headers.count": "%{label}:Nombre",
  "entity.properties.externalId.label": "Cl\xE9 externe",
  "entity.properties.externalId.description": "Ce champs peut \xEAtre utilis\xE9 pour retenir la cl\xE9 de correspondance dans un autre logiciel",
  "entity.properties.createdAt.label": "Date de cr\xE9ation",
  "entity.properties.createdAt.description": "Date de cr\xE9ation dans Surfy, permet de connaitre l'historique de la cr\xE9ation dans Surfy",
  "entity.properties.userCompanyCreatedBy.label": "Cr\xE9\xE9 par l'utilisateur",
  "entity.properties.userCompanyCreatedBy.description": "Cr\xE9er par cet utilisateur dans Surfy, permet de connaitre l'historique de la cr\xE9ation dans Surfy",
  "entity.properties.userCompanyCreatedById.label": "Identifiant de l'utilisateur qui a cr\xE9\xE9",
  "entity.properties.userCompanyCreatedById.description": "Cr\xE9er par l'identifiant de cet utilisateur dans Surfy, permet de connaitre l'historique de la cr\xE9ation dans Surfy",
  "entity.properties.userCompanyUpdatedById.label": "Identifiant de l'utilisateur qui a modifi\xE9",
  "entity.properties.userCompanyUpdatedById.description": "Mis \xE0 jour par l'identifiant de cet utilisateur dans Surfy, permet de connaitre l'historique de la cr\xE9ation dans Surfy",
  "entity.properties.userCompanyUpdatedBy.label": "Mis \xE0 jour par l'utilisateur",
  "entity.properties.userCompanyUpdatedBy.description": "Mise \xE0 jour par cet utilisateur dans Surfy, permet de connaitre l'historique de la modification dans  Surfy",
  "entity.properties.updatedAt.label": "Date de mise \xE0 jour",
  "entity.properties.updatedAt.description": "Date de mise \xE0 jour dans Surfy, permet de connaitre l'historique des modifications",
  "entity.delete.button.label": "Supprimer",
  "entity.delete.button.help": "Supprimer %{determinant.defined} %{name}",
  "entity.cancel": "Annuler",
  "entity.see.label": "Voir",
  "entity.see.help": "Voir %{determinant.defined} %{name}",
  "entity.views.dataquality.help": "Les rapports et les actions pour la qualit\xE9 de donn\xE9es pour %{determinants.defined}",
  "entity.views.dataquality.label": "Qualit\xE9 des donn\xE9es",
  "entity.views.list.help": "Lister %{determinants.defined}",
  "entity.views.list.label": "Lister",
  "entity.views.import.help": "Importer %{determinants.undefined}",
  "entity.views.import.label": "Importer",
  "entity.views.details.help": "Voir %{determinant.defined} %{name}",
  "entity.views.details.label": "Voir",
  "entity.views.create.help": "Cr\xE9er %{determinant.undefined}",
  "entity.views.create.label": "Cr\xE9er",
  "entity.views.edit.help": "Modifier %{determinant.defined} %{name}",
  "entity.views.edit.label": "Modifier",
  "entity.views.dashboard.help": "Tableau de bord pour %{determinant.defined} %{name}",
  "entity.views.dashboard.label": "Tableau de bord",
  "entity.create.validate.help": "Valider la cr\xE9ation pour %{determinant.defined}",
  "entity.create.validate.label": "Valider la cr\xE9ation",
  "entity.create.button.help": "Commencer la cr\xE9ation pour %{determinant.defined}",
  "entity.create.button.label": "Cr\xE9er %{determinant.defined}",
  "entity.create.association.help": "Commencer la cr\xE9ation pour %{determinant.undefined}",
  "entity.create.association.label": "Cr\xE9er %{determinant.undefined}",
  "entity.update.button.label": "Sauvegarder",
  "entity.update.button.help": "Sauvegarder %{determinant.defined} %{name}",
  "entity.createAndAssociate.button.label": "Cr\xE9er et associer",
  "entity.createAndAssociate.button.help": "Cr\xE9er et associer %{determinant.undefined}",
  "entity.associate.button.label": "Associer",
  "entity.associate.button.help": "Associer %{determinant.undefined}",
  "entity.back": "Retour",
  "WorkCanvas.Options.ZoomCanvasOption.label.enable": "Activer la loupe autour de la souris",
  "WorkCanvas.Options.ZoomCanvasOption.label.disable": "D\xE9sactiver la loupe autour de la souris",
  "WorkCanvas.Options.ZoomCanvasOption.help.enable": "Activer la loupe permet de garder une vue d'ensemble d'une zone ou de l'\xE9tage et voir le comportement de la souris de fa\xE7on pr\xE9cise",
  "WorkCanvas.Options.ZoomCanvasOption.help.disable": "Arr\xEAter la loupe de la souris",
  "WorkCanvas.Options.AddSegmentPointOption.label.enable": "Ajouter un sommet sur un segment",
  "WorkCanvas.Options.AddSegmentPointOption.label.disable": "Arr\xEAter l'ajout d'un sommet sur un segment",
  "WorkCanvas.Options.AddSegmentPointOption.help.enable": "Ajouter un sommet sur un segment permet de mettre un point n'importe ou sans tenir compte des autres points",
  "WorkCanvas.Options.AddSegmentPointOption.help.disable": "Arr\xEAter la cr\xE9ation de sommets sur les segments",
  "WorkCanvas.Options.AddSegmentPointOption.description": "S\xE9lectionner un espace pour pouvoir cr\xE9er un sommet sur un des segments",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.enable": "Activer l'inversion de l'orientation de la cr\xE9ation des sommets",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.disable": "D\xE9sactiver l'inversion de l'orientation de la cr\xE9ation des sommets",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.enable": "Activer l'inversion de l'orientation de la cr\xE9ation des sommets permet de changer le sens de cr\xE9ation des sommets",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.disable": "D\xE9sactiver l'inversion de retrouver le sens initial de cr\xE9ation des sommets",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.enable": "Activer l'inversion de l'angle droit pour la cr\xE9ation des sommets",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.disable": "D\xE9sactiver l'inversion de l'angle droit pour la cr\xE9ation des sommets",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.enable": "Activer l'inversion permet d'utiliser l'angle droit pendant la cr\xE9ation des sommets sur l'autre s\xE9gment",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.disable": "D\xE9sactiver l'inversion permet d'utiliser l'angle droit sur le s\xE9gment initial",
  "LoadingSvgCircle.pleaseWait": "Veuillez patienter pendant la synchronisation",
  "WorkCanvas.Options.AddRoomPointOption.label.enable": "Ajouter un sommet",
  "WorkCanvas.Options.AddRoomPointOption.label.disable": "Arr\xEAter l'ajout d'un sommet",
  "WorkCanvas.Options.AddRoomPointOption.help.enable": "Ajouter un sommet permet de retravailler avec plus de precisions une forme",
  "WorkCanvas.Options.AddRoomPointOption.help.disable": "Arr\xEAter la cr\xE9ation de sommets",
  "WorkCanvas.Options.SplitPolygoneOption.label": "S\xE9parer l'espace",
  "WorkCanvas.Options.SplitPolygoneOption.help": "Cr\xE9er 2 espaces \xE0 partir d'un autre espace en choisissant 2 sommets",
  "WorkCanvas.Options.SplitRoomPointOption.help": "S\xE9parer le sommet permet de r\xE9utiliser plusieurs sommets pour chaque s\xE9gment et ainsi cr\xE9er des espaces s\xE9par\xE9s",
  "WorkCanvas.Options.SplitRoomPointOption.label": "S\xE9parer le sommet",
  "WorkCanvas.Options.MergeRoomPointsOption.help": "Fusionner les sommets permet de r\xE9utiliser le m\xEAme sommet pour des espaces diff\xE9rents",
  "WorkCanvas.Options.MergeRoomPointsOption.label": "Fusionner les sommets",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.help": "Supprimer les sommets de l'espace",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.label": "Supprimer les sommets s\xE9lectionn\xE9s",
  "WorkCanvas.Options.ZoomOnEdgePoints.help": "Zoomer sur un ou plusieurs points afin de pouvoir travailler tranquillement",
  "WorkCanvas.Options.ZoomOnEdgePoints.label": "Zoomer sur les points",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.enable": "D\xE9placer le type d'objet",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.disable": "Arr\xEAter le d\xE9placement",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.enable": "D\xE9placer le type d'objet sur le plan",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.disable": "Arr\xEAter le d\xE9placement du type d'objet",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.help": "Retirer le type d'objet du type de poste de travail",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.label": "Retirer le type d'objet",
  "WorkCanvas.Options.DeleteItemTypePointsOption.help": "Supprimer les sommets du type d'objet",
  "WorkCanvas.Options.DeleteItemTypePointsOption.label": "Supprimer les sommets s\xE9lectionn\xE9s",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.enable": "Ajouter une forme",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.disable": "Arr\xEAter l'ajout de la forme",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.enable": "Ajouter une forme pour un type d'objet sur le plan",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.disable": "Arr\xEAter la cr\xE9ation de la forme",
  "WorkCanvas.Options.AddItemTypeShapeSaveOption.help": "Sauvegarder le type d'objet en cours de cr\xE9ation",
  "WorkCanvas.Options.AddItemTypePointOption.label.enable": "Ajouter un sommet",
  "WorkCanvas.Options.AddItemTypePointOption.label.disable": "Arr\xEAter l'ajout d'un sommet",
  "WorkCanvas.Options.AddItemTypePointOption.help.enable": "Ajouter un sommet permet de retravailler avec plus de precisions une forme",
  "WorkCanvas.Options.AddItemTypePointOption.help.disable": "Arr\xEAter la cr\xE9ation de sommets",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.enable": "D\xE9placer les espaces",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.disable": "Arr\xEAter les d\xE9placements",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.enable": "Activer le d\xE9placement des espaces sur le plan",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.disable": "Arr\xEAter le d\xE9placement des espaces",
  "WorkCanvas.Options.ToggleMoveRoomOption.description": "Une fois activ\xE9, s\xE9lectionner un espace et vous pouvez le d\xE9placer",
  "WorkCanvas.Options.DuplicateShapesOption.label": "Dupliquer les formes",
  "WorkCanvas.Options.DuplicateShapesOption.help": "Dupliquer les formes sans les propri\xE9t\xE9s pour rapidement cr\xE9er des objets ou des postes de travail sur le plan",
  "CancelDuplicateShapsToRoomMouse.help": "Annuler la duplication des formes",
  "ToggleWorkplaceFreeConditionTypeIconButton.or": "Voir les postes de travail libre pour tous les jours demand\xE9s",
  "ToggleWorkplaceFreeConditionTypeIconButton.and": "Voir les postes de travail libre pour au moins un des jours demand\xE9s",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.false": "Colorier les postes libre %{day}",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.true": "Arr\xEAter de colorier les postes libre %{day}",
  "FreeWorkplacesDayList.title": "Voir les places libre %{days}",
  "FreeWorkplacesDayList.conditions.and": "et",
  "FreeWorkplacesDayList.conditions.or": "ou",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.enable": "Colorier les postes de passage",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.disable": "Arr\xEAter de colorier les postes de passage",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.enable": "Voir sur le plan en couleur les postes de travail qui sont de passage",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.disable": "Ne plus voir les postes de travail de passage de fa\xE7on diff\xE9rente sur le plan",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.enable": "Colorier les postes partag\xE9s",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.disable": "Arr\xEAter de colorier les postes partag\xE9s",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.enable": "Voir sur le plan en couleur les postes de travail qui sont partag\xE9s par au moins 2 personnes",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.disable": "Ne plus voir les postes de travail partag\xE9s de fa\xE7on diff\xE9rente sur le plan",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.enable": "Colorier les objets sans association",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.disable": "Arr\xEAter de colorier les objets sans association",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.enable": "Voir sur le plan les objets libre",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.disable": "Ne plus voir les objets libres de fa\xE7on diff\xE9rente sur le plan",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.enable": "Colorier les postes r\xE9servables",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.disable": "Arr\xEAter de colorier les postes r\xE9servables",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.enable": "Voir sur le plan en couleur les postes de travail qui sont r\xE9servables",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.disable": "Ne plus voir les postes de travail r\xE9servables de fa\xE7on diff\xE9rente sur le plan",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.enable": "Colorier les postes libres",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.disable": "Arr\xEAter de colorier les postes libres",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.enable": "Voir sur le plan les postes libres",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.disable": "Ne plus voir les postes libres de fa\xE7on diff\xE9rente sur le plan",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.enable": "Colorier les postes en flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.disable": "Arr\xEAter de colorier les postes en flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.enable": "Voir sur le plan les postes flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.disable": "Ne plus voir les postes flex de fa\xE7on diff\xE9rente sur le plan",
  "WorkCanvas.Options.CalibrateLayoutOption.help.enable": "Calibrer le plan permet d'agrandir ou de r\xE9duire la taille de tous les espaces ou de les d\xE9placer tous sur le plan",
  "WorkCanvas.Options.CalibrateLayoutOption.help.disable": "Arr\xEAter de calibrer le plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.enable": "Calibrer le plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.disable": "Arr\xEAter de calibrer le plan",
  "CalibrateLayoutDrawer.title": "Calibrer le plan",
  "CalibrateLayoutDrawer.options.mapScale.label": "Aligner l'\xE9chelle du plan",
  "CalibrateLayoutDrawer.options.mapScale.help": "Applique le facteur d'\xE9chelle sur les \xE9lements de l'\xE9chelle (longeur et taille des textes)",
  "CalibrateLayoutDrawer.options.inputs.scale.label": "Facteur d'\xE9chelle",
  "CalibrateLayoutDrawer.options.inputs.step.label": "Valeur de translation",
  "CalibrateLayoutDrawer.options.inputs.translate.x.label": "L'axe X",
  "CalibrateLayoutDrawer.options.inputs.translate.y.label": "L'axe Y",
  "CalibrateLayoutDrawer.options.reduce.label": "R\xE9duire",
  "CalibrateLayoutDrawer.options.save.label": "Enregistrer",
  "CalibrateLayoutDrawer.options.save.help": "Enregister le calibrage sur le plan",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.enable": "Activer l'affichage des ic\xF4nes sur le plan en 2d",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.disable": "D\xE9sactiver l'affichage des ic\xF4nes sur le plan",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.enable": "Les ic\xF4nes associ\xE9s au types d'espaces permettent de visualiser plus facilement les types d'espaces sur le plan",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.disable": "Afficher les informations des espaces",
  "WorkCanvasToggleOptionHelp.shortcut": "Raccourci clavier : <b>%{shortcut}</b>",
  "WorkCanvasShortcutTooltipHelp.help": "Raccourci clavier : <b>%{shortcut}</b>",
  "WorkCanvas.Options.ZoomOutOption.label": "D\xE9zoomer sur le plan",
  "WorkCanvas.Options.ZoomOutOption.help": "D\xE9zoomer sur le plan en centrant sur la position de la souris",
  "WorkCanvas.Options.ZoomOutOption.description": "Vous pouvez utiliser la molette de la souris et votre touchpad pour d\xE9zoomer",
  "WorkCanvas.Options.ZoomOnMousePosition.help": "Zoomer sur la position de la souris pour pouvoir travailler plus pr\xE9cisement sur une zone",
  "WorkCanvas.Options.ZoomOnMousePosition.label": "Zoomer sur la position de la souris",
  "WorkCanvasLoadingIcon.title": "Chargement du plan",
  "WorkCanvas.Options.ZoomOnItemsOption.help": "Zoomer sur un ou plusieurs objets afin de pouvoir travailler plus pr\xE9cisement",
  "WorkCanvas.Options.ZoomOnItemsOption.label": "Zoomer sur la s\xE9lection",
  "WorkCanvas.Options.ZoomOnDimensionsOption.label": "Zoomer sur les calques d'affectations",
  "WorkCanvas.Options.ZoomOnDimensionsOption.help": "Zoomer directement sur les calques d'affectations dans lesquels vous pouvez r\xE9server sur le plan",
  "WorkCanvas.Options.ZoomInOption.label": "Zoomer sur le plan",
  "WorkCanvas.Options.ZoomInOption.help": "Zoomer sur le plan en centrant vers en haut a gauche de l'\xE9cran",
  "WorkCanvas.Options.ZoomInOption.description": "Vous pouvez utiliser la molette de la souris et votre touchpad pour zoomer",
  "WorkCanvas.Options.ToggleSelectModeOption.help.enable": "Obtenir les options du plan pour pouvoir zoomer ou voir le d\xE9tails des formes et activer les raccourcis clavier, vous pouvez aussi cliquer dans le plan pour activer la manipulation",
  "WorkCanvas.Options.ToggleSelectModeOption.help.disable": "",
  "WorkCanvas.Options.ToggleSelectModeOption.label.enable": "Commencer la manipulation de l'espace de travail",
  "WorkCanvas.Options.ToggleSelectModeOption.label.disable": "Arr\xEAter la manipulation de l'espace de travail",
  "WorkCanvas.Options.ToggleSelectModeOption.description": "Vous pouvez s\xE9lectionner plusieurs formes en maintenant <b>SHIFT</b> appuy\xE9 et en cliquant sur les formes",
  "WorkCanvas.Options.ToggleEditModeOption.label.enable": "Activer le mode \xE9dition du plan",
  "WorkCanvas.Options.ToggleEditModeOption.label.disable": "D\xE9sactiver le mode \xE9dition du plan",
  "WorkCanvas.Options.ToggleEditModeOption.help.enable": "Activer le mode \xE9dition du plan permet de cr\xE9er et d\xE9placer des formes ou cr\xE9er des espaces",
  "WorkCanvas.Options.ToggleEditModeOption.help.disable": "D\xE9sactiver le mode \xE9dition du plan pour revenir dans le mode lecture du plan",
  "WorkCanvas.Options.ToggleEditModeOption.description": "Lors de la rotation des objets et des postes de travail, par defaut un angle de 45\xB0 est appliqu\xE9, pour le d\xE9sactiver utilisez la touche du clavier <b>SHIFT</b>",
  "WorkCanvas.Options.FitToViewOption.label": "Centrer le plan pour tout voir",
  "WorkCanvas.Options.FitToViewOption.help": "Permet d'avoir la vision d'ensemble du plan",
  "HeatMapSelection.title": "Colorier les espaces avec une carte des chaleurs pour comprendre les densit\xE9s, les cartes de chaleurs ne sont pas exportable en image pour le moment",
  "HeatMapSelection.heatmaps.seatsCount.label": "Densit\xE9 de places assises",
  "HeatMapSelection.heatmaps.seatsCount.description": "Colorier les espaces en fonction du nombre de place assises",
  "HeatMapSelection.heatmaps.workplacesCount.label": "Densit\xE9 des postes de travail",
  "HeatMapSelection.heatmaps.workplacesCount.description": "Colorier les espaces en fonction du nombre de postes de travail",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.label": "Densit\xE9 des affectations aux postes de travail",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.description": "Colorier les espaces en fonction du nombre d'affectations aux postes de travail",
  "HeatMapSelection.heatmaps.carbonFootprintCount.label": "Densit\xE9 d'empreinte carbone du mobilier",
  "HeatMapSelection.heatmaps.carbonFootprintCount.description": "Colorier les espaces en fonction de l'empreinte carbone du mobilier",
  "FurnituresSelectionDragZone.help": "D\xE9placer le groupe",
  "FurnituresSelection.move": "D\xE9placer tout le groupe",
  "WorkCanvas.Options.TextAnchorOption.label.enable": "D\xE9finir l'emplacement du texte d'affichage",
  "WorkCanvas.Options.TextAnchorOption.label.disable": "Arr\xEAter la gestion du texte d'affichage",
  "WorkCanvas.Options.TextAnchorOption.help.enable": "D\xE9placer le texte d'affichage",
  "WorkCanvas.Options.TextAnchorOption.help.disable": "Arr\xEAter le d\xE9placement du texte d'affichage",
  "TextAnchorDrawer.title": "Modifier l'emplacement du texte d'affichage pour %{determinant.defined} %{name}",
  "WorkCanvas.Options.TextAnchorDrawer.label.enable": "D\xE9placer le texte d'affichage",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.label": "Personnaliser la position du texte",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.help": "Permet d'activer la personnalisation de la position du texte du le plan",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.label": "Activer l'affichage de l'ancre",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.help": "Permet d'activer l'affichage du segment et du point d'ancrage pour cet espace",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.label": "R\xE9initialiser la position du texte",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.help": "Cette option remet la position du texte pour cet espace \xE0 son emplacement initiale",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.label": "R\xE9initialiser la position d'ancrage",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.help": "Cette option remet la position d'ancrage pour cet espace \xE0 son emplacement initiale",
  "ShapeTextAnchorDrawer.empty": "Merci de s\xE9lectionner une forme compatible afin de d\xE9placer le texte d'affichage",
  "IconsPicker.DisplayAll.text": "Tout afficher",
  "IconsPicker.DisplayAll.help": "Attention le chargement peut \xEAtre un peu long",
  "IconsPicker.close": "Fermer la s\xE9lection d'icone",
  "IconPickerSearch.SearchPlaceholder": "Rechercher une icone avec au moins 3 lettres",
  "EntitiesAutocomplete.searchEmpty.help.false": "S\xE9lectionner %{determinants.defined} sans %{objectTypeName}",
  "EntitiesAutocomplete.searchEmpty.help.true": "Repasser en mode de rechercher standard",
  "SearchFieldString.searchEmpty.help.false": "Rechercher des \xE9l\xE9ments vide ou sans valeur",
  "SearchFieldString.searchEmpty.help.true": "R\xE9activer la recherche standard",
  "SearchFilters.buttons.clear.label": "Effacer tous les filtres",
  "SearchFilters.buttons.clear.help": "Effacer tous les filtres et les remettre dans leur \xE9tat inital afin de vous assurer que vous pouvez voir toutes les entit\xE9s disponible",
  "RightSearchFilterDrawer.filter": "Filtrer %{determinants.defined}",
  "RightSearchFilterDrawer.tabLabel": "Filtrer",
  "RightSearchFilterDrawer.buttons.clear.label": "Effacer tous les filtres",
  "RightSearchFilterDrawer.buttons.clear.help": "Effacer tous les filtres et les remettre dans leur \xE9tat inital afin de vous assurer que vous pouvez voir toutes les entit\xE9s disponible",
  "PropertSelectorDrawer.help": "S\xE9lectionner les propri\xE9t\xE9s que vous souhaitez afficher dans le tableau",
  "PropertSelectorDrawer.options.reset.label": "R\xE9initialiser la s\xE9lection",
  "PropertSelectorDrawer.options.reset.help": "Remettre la s\xE9lection des propri\xE9t\xE9s \xE0 leur \xE9tat inital",
  "PropertSelectorDrawer.tabLabel": "Propri\xE9t\xE9s",
  "TableSelectionAllCheckbox.checked.true": "Tout d\xE9selectionner",
  "TableSelectionAllCheckbox.checked.false": "Tout s\xE9lectionner",
  "TableSelectionAllCheckbox.help": "S\xE9lectionner ou d\xE9selectionner toutes les lignes (incluant celles qui ne sont pas visibles dans la liste pagin\xE9e)",
  "TableOptionsRow.checked.true": "Tout d\xE9selectionner",
  "TableOptionsRow.checked.false": "Tout s\xE9lectionner",
  "TableOptionsRow.help": "S\xE9lectionner ou d\xE9selectionner toutes les lignes",
  "ErrorTextZone.reload": "Recommencer l'op\xE9ration",
  "ReportErrorSteps.report.title": "Vous venez de rencontrer une erreur",
  "ReportErrorSteps.report.description": "Cette erreur est remont\xE9e \xE0 nos \xE9quipes et nous allons tenter de la corriger au plus vite",
  "ReportErrorSteps.report.steps.title": "Vous pouvez essayer dans l'ordre",
  "ReportErrorSteps.report.steps.reload": "Recharger la page et voir si l'erreur est r\xE9solue",
  "ReportErrorSteps.report.steps.logout": "Vous d\xE9connecter et revenir \xE0 cette page suite \xE0 votre reconnexion",
  "ReportErrorSteps.report.steps.contact": "Nous contacter pour que nous puissons vous proposer une alternative au plus vite",
  "ReportErrorByMailButton.label": "Nous contacter",
  "RefreshPageButton.label": "Recharger la page",
  "Errors.networkError": "Des probl\xE8mes de connexion ou de r\xE9seau ont \xE9t\xE9 d\xE9tect\xE9s, merci de patienter et de r\xE9essayer dans quelques secondes",
  "ShowEntityDrawer.title.show": "Voir %{determinant.defined}",
  "ShowEntityDrawer.title.listItem": "Voir les informations pour %{determinant.defined} dans la barre lat\xE9rale",
  "EditEntityDrawer.title.edit": "Modifier %{determinant.defined}",
  "RightDrawerContent.close": "Fermer le panneau de droite en cliquant sur la croix.",
  "DropDownOptions.moreOptions": "Voir plus d'options pour %{determinant.defined} %{name}",
  "BuildingFloorsList.title": "Naviguer dans les \xE9tages",
  "RefetchEntityButton.refetch": "Recharger les donn\xE9es",
  "RefetchEntitiesButton.refetch": "Recharger les donn\xE9es des objets visibles",
  "RefetchObjectTypeIcon.help": "Recharger les donn\xE9es pour %{determinant.defined}",
  "ImpactButtonReload.help.single": "Mettre\xA0\xE0 jour les donn\xE9es calcul\xE9es pour %{determinant.defined}",
  "ImpactButtonReload.help.list": "Mettre\xA0\xE0 jour les donn\xE9es calcul\xE9es pour %{determinants.defined}",
  "EditInlineToggleIconButton.edit.label": "Modifier",
  "EditInlineToggleIconButton.edit.help": "Modifier directement sur cette page les propri\xE9t\xE9s pour %{determinant.defined}",
  "EditInlineToggleIconButton.cancel.help": "Arr\xEAter la modification sans sauvegarder",
  "ConfirmationButtons.confirm": "Confirmer la r\xE9alisation de l'action",
  "ConfirmationButtons.cancel": "Annuler",
  "ConfirmationButtons.loading": "L'action est en cours d'execution, merci de patienter",
  "EmailNotVerified.errorMessage": "Merci de valider votre email (%{email}), une fois valid\xE9, vous pouvez vous d\xE9connecter puis vous reconnecter pour acc\xE9der \xE0 Surfy",
  "NoRoleAssociated.noRole": "Aucun r\xF4le ne semble \xEAtre associ\xE9 \xE0 votre utilisateur pour l'entreprise %{tenant}, merci de vous rapprocher de votre administrateur",
  "NoCompanies.title.whatIsSurfy": "Qu'est ce que Surfy ?",
  "NoCompanies.NoCompanyAssigned": "Vous n'\xEAtes associ\xE9 \xE0 aucune plateforme, vous ne pouvez pas utiliser surfy pour le moment",
  "NoCompanies.whatIsSurfy": "Surfy propose de digitaliser les plans des b\xE2timents pour faciliter la gestion de l'environnement de travail.<br/>Vous pouvez utiliser l'application Surfy pour <ul><li>am\xE9nager les espaces</li><li>affecter les collaborateurs</li><li>refacturer les espaces</li><li>analyser les espaces</li><li>g\xE9rer la conformit\xE9 et la r\xE9glementation</li><li>connecter les espaces</li><li>g\xE9rer les planning de pr\xE9sence</li><li>r\xE9server les espaces de travail</li></ul>",
  "NoCompanies.whatIsSurfyForTeams": "Surfy propose de digitaliser les plans des b\xE2timents pour faciliter la gestion de l'environnement de travail. Vous pouvez utiliser l'application Surfy pour <ul><li>g\xE9rer votre planning de pr\xE9sence</li><li>d\xE9clarer votre pr\xE9sence au bureau</li><li>r\xE9server un espace de travail</li><li>indiquer que vous \xEAtes en t\xE9l\xE9travail</li><li>voir quels coll\xE8gues ont r\xE9serv\xE9 un poste de travail sur le plan</li></ul>",
  "NoCompanies.ContactUs.text": "Vous connecter \xE0 la plateforme de votre entreprise",
  "NoCompanies.ContactUs.subject": "Acc\xE9der \xE0 Surfy",
  "NoCompanies.ContactUs.body": "Bonjour, pourriez vous me laisser acc\xE9der \xE0 l'application Surfy ? Merci.",
  "NoCompanies.accessSurfy.title": "Pourquoi je ne peux pas acc\xE9der \xE0 Surfy ?",
  "NoCompanies.accessSurfy.alreadyUsing": "Si votre entreprise utilise d\xE9j\xE0 Surfy, merci de vous rapprocher de votre responsable de l'environnement de travail pour demander un acc\xE8s ou nous contacter via le lien suivant",
  "NoCompanies.accessSurfy.joinTenant": "Rejoindre la plateforme de votre soci\xE9t\xE9",
  "NoCompanies.notUsing.title": "Votre entreprise n'utilise pas encore Surfy ?",
  "NoCompanies.knowMore": "En savoir plus sur Surfy",
  "AuthenticationButton.connections.google-oauth2.label": "Google",
  "AuthenticationButton.connections.google-oauth2.help": "Se connecter avec votre compte Google",
  "AuthenticationButton.connections.AzureADv2.label": "Office 365",
  "AuthenticationButton.connections.AzureADv2.help": "Se connecter avec votre compte professionel Microsoft via Office 365",
  "AuthenticationButton.connections.auth0.label": "Compte Surfy",
  "AuthenticationButton.connections.auth0.help": "Se connecter avec votre compte Surfy",
  "Auth0AuthenticationButton.connections.auth0.label": "Compte Surfy (open id)",
  "Auth0AuthenticationButton.connections.auth0.help": "Se connecter avec votre compte Surfy",
  "EnterpriseConnectionButton.label": "Entreprise",
  "EnterpriseConnectionButton.help": "Se connecter avec le compte de votre entreprise via une authentification d\xE9di\xE9e comme OKTA ou DigitalP@ss",
  "EnterpriseConnectionForm.title": "Veuillez saisir votre email afin que nous puissions reconnna\xEEtre votre entreprise",
  "EnterpriseConnectionForm.forms.email.placeholder": "e-mail",
  "EnterpriseConnectionForm.error": "Impossible d'identifier votre entreprise avec votre email",
  "EnterpriseConnectionForm.buttons.validate.label": "Valider",
  "EnterpriseConnectionForm.buttons.validate.help": "Valider l'email permet de conna\xEEtre votre entreprise et de vous orienter vers la bonne plateforme d'authentification",
  "EnterpriseConnectionForm.buttons.back.label": "Retour",
  "EnterpriseConnectionForm.buttons.back.help": "Revenir vers la page d'authentification avec toutes les options",
  "LoginView.loadingPage": "Chargement de la page d'authentification",
  "LoginView.connections.google-oauth2.label": "Google",
  "LoginView.connections.google-oauth2.help": "Se connecter avec votre compte Google",
  "LoginView.connections.AzureADv2.label": "Office 365",
  "LoginView.connections.AzureADv2.help": "Se connecter avec votre compte professionel Microsoft via Office 365",
  "LoginView.connections.Username-Password-Authentication.label": "Compte Surfy",
  "LoginView.connections.Username-Password-Authentication.help": "Se connecter avec votre compte Surfy",
  "LoginView.texts.title": "Connexion",
  "LoginView.texts.description": "Acc\xE9der \xE0 Surfy",
  "LoginView.helpers.register": "Inscrivez votre entreprise \xE0 Surfy",
  "LoginView.helpers.moreInfo": "En savoir plus sur Surfy",
  "LoginView.helpers.privacy": "Politique de confidentialit\xE9",
  "CustomUserRegisterForm.tabs.login": "Se connecter",
  "CustomUserRegisterForm.tabs.signup": "S'inscrire",
  "CustomUserRegisterForm.form.email": "E-mail",
  "CustomUserRegisterForm.form.password": "Mot de passe",
  "CustomUserRegisterForm.form.firstName": "Pr\xE9nom",
  "CustomUserRegisterForm.form.lastName": "Nom de famille",
  "CustomUserRegisterForm.form.confirmPassword": "Confirmation mot de passe",
  "CustomUserRegisterForm.buttons.login.label": "Valider",
  "CustomUserRegisterForm.buttons.login.help": "Connectez-vous si vous avez d\xE9j\xE0 un compte",
  "CustomUserRegisterForm.buttons.signup.label": "Valider",
  "CustomUserRegisterForm.buttons.signup.help": "Inscrivez vous \xE0 Surfy si vous n'avez pas de compte",
  "ReportChart.NoValue": "Sans valeur",
  "ChangeLanguage.title": "Changer la langue",
  "ChangeLanguage.help": "Changer la langue de l'application",
  "DataQualityTable.numberOfLines": "Nombre de lignes",
  "AllTenantsDataQualityTable.enableAllTenants.label": "Inclure toutes les plateformes",
  "SingleNodeQuery.refetch": "Recharger les donn\xE9es",
  "ListRefetchButton.refetch": "Recharger les donn\xE9es des objets visibles",
  "ImpactObjectTypeIconButton.refetch": "Recharger toutes les donn\xE9es sans tenir compte des filtres",
  "CollapseSwitchButton.help.true": "Masquer le d\xE9tail",
  "CollapseSwitchButton.help.false": "Voir le d\xE9tail",
  "menu.logout": "Se d\xE9connecter",
  "menu.tenantOperations": "Synchronisation",
  "menu.menuLeft.shoppingCart": "Panier",
  "menu.menuLeft.personCompanies": "Prestataires",
  "menu.menuLeft.workplace": "Postes de travail",
  "menu.menuLeft.security": "S\xE9curit\xE9",
  "menu.menuLeft.globalSecurity": "S\xE9curit\xE9 globale",
  "menu.menuLeft.all": "Administration",
  "menu.menuLeft.operations": "Op\xE9rations",
  "menu.menuLeft.types": "Typologies",
  "menu.menuLeft.roomTypes": "Typologies d'espaces",
  "menu.menuLeft.inventory": "Inventaires",
  "menu.menuLeft.people": "Personnes",
  "menu.menuLeft.spaces": "Espaces",
  "menu.menuLeft.organizations": "Organisations",
  "menu.menuLeft.dimensions": "Calques d'analyse",
  "menu.menuLeft.api": "API",
  "menu.menuLeft.authentification": "Authentification",
  "menu.menuLeft.globalAdmin": "Administration globale",
  "menu.menuLeft.human": "Collaborateurs",
  "menu.menuLeft.things": "Mobiliers",
  "menu.menuLeft.admin": "Administration",
  "menu.menuLeft.surfy": "Surfy",
  "menu.menuLeft.partnerExportMapping": "Partenaires",
  "menu.menuLeft.personType": "Typologies",
  "menu.menuLeft.personRelations": "Relations",
  "menu.menuLeft.affectations": "Affectations",
  "menu.menuLeft.buildings": "B\xE2timents",
  "menu.menuLeft.thingsType": "Typologies",
  "menu.menuLeft.spacePoints": "Points",
  "menu.menuLeft.adminReporting": "Reporting",
  "menu.menuLeft.adminCostCenterReporting": "Centre de co\xFBts",
  "menu.menuLeft.adminDimensionReporting": "Dimensions",
  "menu.menuLeft.adminRoomTypeReporting": "Type d'espaces",
  "menu.menuLeft.adminOrganizationReporting": "Organisations",
  "menu.menuLeft.adminRoomTypeGroupReporting": "Groupes de typologies d'espaces",
  "menu.menuLeft.buildingFacts": "Donn\xE9es horodat\xE9es des b\xE2timents",
  "menu.menuLeft.itemsFact": "Donn\xE9es horodat\xE9es des objets",
  "menu.menuLeft.segments": "Segments",
  "menu.menuLeft.connectors": "Connecteurs",
  "menu.menuLeft.planning": "Plannings",
  "menu.menuLeft.bookings": "R\xE9servations",
  "menu.menuLeft.help": "Aide",
  "menu.menuLeft.company": "Plateformes",
  "ReduceMenuSwitch.open.true": "D\xE9plier le menu",
  "ReduceMenuSwitch.open.false": "Reduire le menu pour profiter de l'espace de travail",
  "LogoutMenuLink.logout": "Se d\xE9connecter",
  "HelpPortalListItemLink.label": "Portail d'aide",
  "HelpPortalListItemLink.help": "D\xE9couvrez le portail d'aide de Surfy avec tous nos tutoriels et guides d'utilisation",
  "ChangeLogListItemLink.label": "Nouveaut\xE9s",
  "ChangeLogListItemLink.help": "Conna\xEEtre les nouveaut\xE9s et les changements dans Surfy",
  "DisplayRoomTexts.dragOption": "Garder appuy\xE9 et changer l'ordre d'affichage des propri\xE9t\xE9s sur le plan en d\xE9placant le champs vers le haut ou le bas",
  "DisplayRoomTexts.roomPeopleDimensions.label": "Quartier",
  "DisplayRoomTexts.roomPeopleDimensions.help": "Afficher ou non le quartier sur le plan",
  "DisplayRoomTexts.roomSeatsCount.label": "Nombre de places assises",
  "DisplayRoomTexts.roomSeatsCount.help": "Afficher ou non le nombre de places assises sur le plan",
  "DisplayRoomTexts.roomCapacity.label": "Capacit\xE9 de l'espace",
  "DisplayRoomTexts.roomCapacity.help": "Afficher ou non la capacit\xE9 de l'espace sur le plan",
  "DisplayRoomTexts.roomCostCenter.label": "Centre de co\xFBt",
  "DisplayRoomTexts.roomCostCenter.help": "Afficher ou non le centre de co\xFBt de l'espace sur le plan",
  "DisplayRoomTexts.roomMergedName.label": "Nom fusionn\xE9",
  "DisplayRoomTexts.roomMergedName.help": "Afficher ou non le nom fusionn\xE9 de l'espace sur le plan, ce nom regroupe le nom d'affichage et le nom de l'espace",
  "DisplayRoomTexts.roomName.label": "Nom de l'espace",
  "DisplayRoomTexts.roomName.help": "Afficher ou non le nom de l'espace sur le plan",
  "DisplayRoomTexts.roomPrettyName.label": "Nom d'affichage",
  "DisplayRoomTexts.roomPrettyName.help": "Afficher ou non le nom d'affichage l'espace sur le plan",
  "DisplayRoomTexts.roomArea.label": "Surface",
  "DisplayRoomTexts.roomArea.help": "Afficher ou non la surface de l'espace sur le plan",
  "DisplayRoomTexts.roomType.label": "Typologie de l'espace",
  "DisplayRoomTexts.roomType.help": "Afficher ou non la typologie de l'espace",
  "DisplayRoomTexts.roomPerimeter.label": "P\xE9rim\xE8tre",
  "DisplayRoomTexts.roomPerimeter.help": "Afficher ou non le p\xE9rim\xE8tre de l'espace sur le plan",
  "DisplayRoomTexts.roomOrganizationLevel1.label": "Service",
  "DisplayRoomTexts.roomOrganizationLevel1.help": "Afficher ou non le nom du service de l'espace sur le plan",
  "DisplayRoomTexts.roomOrganizationTopLevel.label": "Direction",
  "DisplayRoomTexts.roomOrganizationTopLevel.help": "Afficher ou non le nom de la direction de l'espace sur le plan",
  "DisplayRoomTexts.roomPeople.label": "Personnes affect\xE9es aux espaces",
  "DisplayRoomTexts.roomPeople.help": "Afficher ou non le nom des personnes affect\xE9es \xE0 cet espace sur le plan",
  "DisplayRoomTexts.roomWorkplaceAffectations.label": "Personnes affect\xE9es aux postes de travail",
  "DisplayRoomTexts.roomWorkplaceAffectations.help": "Afficher ou non le nom des personnes affect\xE9es aux postes de travail de cet espace sur le plan",
  "DisplayRoomTexts.roomPeopleCount.label": "Nombre d'affectations",
  "DisplayRoomTexts.roomPeopleCount.help": "Afficher ou non le nombre de personnes affect\xE9es \xE0 cet espace sur le plan",
  "DisplayRoomTexts.roomPeopleRatio.label": "Ratio d'occupation",
  "DisplayRoomTexts.roomPeopleRatio.help": "Afficher ou non le ratio d'occupation de l'espace sur le plan",
  "DisplayRoomTexts.roomWorkplacesCount.label": "Nombre de postes de travail",
  "DisplayRoomTexts.roomWorkplacesCount.help": "Afficher ou non le nombre de postes de travail de l'espace sur le plan",
  "DisplayRoomTexts.roomWorkplacesRatio.label": "Ratio postes de travail",
  "DisplayRoomTexts.roomWorkplacesRatio.help": "Afficher ou non le ratio des postes de travail de l'espace sur le plan",
  "DisplayRoomTexts.roomOccupancyRate.label": "Taux d'occupation",
  "DisplayRoomTexts.roomOccupancyRate.help": "Afficher ou non le taux d'occupation de l'espace sur le plan",
  "DisplayRoomTexts.roomExpansionRatio.label": "Taux de foisonnement",
  "DisplayRoomTexts.roomExpansionRatio.help": "Afficher ou non le taux de foisonnement de l'espace sur le plan",
  "DisplayRoomTexts.roomFreeWorkplacesCount.label": "Nombre de postes libres",
  "DisplayRoomTexts.roomFreeWorkplacesCount.help": "Afficher ou non le nombre de postes libres sur le plan",
  "DisplayRoomTexts.roomFlexWorkplacesCount.label": "Nombre de postes flex",
  "DisplayRoomTexts.roomFlexWorkplacesCount.help": "Afficher ou non le nombre de postes flex sur le plan",
  "DisplayRoomOptions.roomSeatsCount.one": "%{value} place assise",
  "DisplayRoomOptions.roomSeatsCount.more": "%{value} places assises",
  "DisplayRoomOptions.roomCapacity.one": "Capacit\xE9 : %{value} place",
  "DisplayRoomOptions.roomCapacity.more": "Capacit\xE9 : %{value} places",
  "DisplayRoomOptions.roomFreeWorkplacesCount.one": "%{value} poste libre",
  "DisplayRoomOptions.roomFreeWorkplacesCount.more": "%{value} postes libres",
  "DisplayRoomOptions.roomFlexWorkplacesCount.one": "%{value} poste flex",
  "DisplayRoomOptions.roomFlexWorkplacesCount.more": "%{value} postes flex",
  "DisplayRoomOptions.roomWorkplacesCount.one": "%{value} poste de travail",
  "DisplayRoomOptions.roomWorkplacesCount.more": "%{value} postes de travail",
  "DisplayRoomOptions.roomPeopleCount.one": "%{value} personne affect\xE9e",
  "DisplayRoomOptions.roomPeopleCount.more": "%{value} personnes affect\xE9es",
  "DisplayRoomOptions.roomOccupancyRate": "Occupation : %{value}",
  "DisplayRoomOptions.roomExpansionRatio": "Foisonnement : %{value}",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.enable": "G\xE9rer les textes d'affichage des espaces",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.disable": "Fermer la gestion des textes d'affichage",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.enable": "Permet de configurer les textes qui vont s'afficher sur le plan pour chaque espace",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.disable": "Revenir dans le mode normal de l'\xE9dition du plan.",
  "DisplayRoomTextsDrawer.tabs.map": "Plan",
  "DisplayRoomTextsDrawer.tabs.tooltip": "Infobulle",
  "DisplayRoomTextsDrawer.tabs.base.tabs.rooms": "Espaces",
  "DisplayRoomTextsDrawer.tabs.base.tabs.people": "Personnes",
  "DisplayRoomTextsDrawer.tabs.base.people.description": "Pour d\xE9finir les propri\xE9t\xE9s des personnes \xE0 afficher sur le plan, veuillez choisir dans l'onglet des espaces les personnes affect\xE9s aux espaces ou aux postes de travail puis choisir les propri\xE9t\xE9s dans cet onglet",
  "DisplayWorkplaceTexts.workplaceName.label": "Nom du poste de travail",
  "DisplayWorkplaceTexts.workplaceName.help": "Afficher ou non le nom du poste de travail sur le plan",
  "DisplayWorkplaceTexts.workplaceCostCenter.label": "Centre de co\xFBt",
  "DisplayWorkplaceTexts.workplaceCostCenter.help": "Afficher ou non le centre de co\xFBt du poste de travail sur le plan",
  "DisplayWorkplaceTexts.people.label": "Afficher les personnes",
  "DisplayWorkplaceTexts.people.help": "Afficher ou non les personnes affect\xE9es au poste de travail sur le plan",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.label": "Direction",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.help": "Afficher ou non les directions des postes de travail sur le plan",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.label": "Service",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.help": "Afficher ou non les services des postes de travail sur le plan",
  "DisplayPersonTexts.personPicture.label": "Photo des personnes",
  "DisplayPersonTexts.personPicture.help": "Afficher ou non la photo des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personName.label": "Nom des personnes",
  "DisplayPersonTexts.personName.help": "Afficher ou non le nom des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personSecurityProfile.label": "Profil de s\xE9curit\xE9",
  "DisplayPersonTexts.personSecurityProfile.help": "Afficher ou non le profil de s\xE9curit\xE9 des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personOrganizationLevel0.label": "Direction",
  "DisplayPersonTexts.personOrganizationLevel0.help": "Afficher ou non la direction des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personOrganizationLevel1.label": "Service",
  "DisplayPersonTexts.personOrganizationLevel1.help": "Afficher ou non le service des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personOrganizationHierarchy.label": "Hi\xE9rarchie de l'organisation",
  "DisplayPersonTexts.personOrganizationHierarchy.help": "Afficher ou non le service et la direction des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personCostCenter.label": "Centre de co\xFBts",
  "DisplayPersonTexts.personCostCenter.help": "Afficher ou non le centre de co\xFBts des personnes affect\xE9es aux postes de travail sur le plan",
  "DisplayPersonTexts.personCode.label": "Matricule",
  "DisplayPersonTexts.personCode.help": "Afficher ou non le matricule des personnes affect\xE9es aus postes de travail sur le plan",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.enable": "G\xE9rer les textes d'affichage des postes de travail",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.disable": "Fermer la gestion des textes d'affichage",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.enable": "Permet de configurer les textes qui vont s'afficher sur le plan pour chaque poste de travail",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.disable": "Revenir dans le mode normal de l'\xE9dition du plan.",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.enable": "Activer la transparence des couleurs de fond des espaces",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.disable": "D\xE9sactiver la transparence des couleurs",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.enable": "Activer la transparence des couleurs permet de voir le fond de plan \xE0 travers les espaces",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.disable": "D\xE9sactiver la transparence des couleurs remet les couleurs des espaces",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.description": "La transparence des couleurs des espaces permet de voir le fond de plan",
  "WorkCanvas.Options.MapScaleOption.label.enable": "G\xE9rer l'\xE9chelle",
  "WorkCanvas.Options.MapScaleOption.label.disable": "Fermer la gestion de l'\xE9chelle",
  "WorkCanvas.Options.MapScaleOption.help.enable": "Configurer obligatoirement l'\xE9chelle sur votre plan afin d'avoir les espaces et objets dans la bonne \xE9chelle",
  "WorkCanvas.Options.MapScaleOption.help.disable": "Revenir dans le mode normal de l'\xE9dition du plan.",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.label": "Supprimer l'\xE9chelle",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.help": "Supprimer l'\xE9chelle revient \xE0 retirer l'\xE9chelle du plan et le supprimer de la base, il ne sera plus accessible via d'autres plan, Il n'est pas possible de supprimer une \xE9chelle qui se trouve sur plusieurs \xE9tages.",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.label": "Dissocier l'\xE9chelle",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.help": "Dissocier l'\xE9chelle de ce plan le retire du plan, mais conserve l'\xE9chelle dans la base de donn\xE9es pour de futurs utilisations",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.label": "Zoomer sur l'\xE9chelle",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.help": "Zoomer permet de retrouver facilement l'\xE9chelle sur le plan.",
  "WorkCanvas.Options.DrawMapScaleOption.help": "Vous devez configurer l'echelle sur votre plan, cliquer sur le d\xE9but et la fin de l'\xE9chelle sur le plan afin de le calibrer",
  "ToggleCopilotEnable.label.false": "Activer Surfy Copilot",
  "ToggleCopilotEnable.label.true": "D\xE9sactiver Surfy Copilot",
  "ToggleCopilotEnable.help.false": "Activer Surfy Copilot pour permettre la reconnaissance automatique des portes",
  "ToggleCopilotEnable.help.true": "D\xE9sactiver Surfy Copilot et revenir en mod\xE9lisation manuelle",
  "WorkCanvas.Options.CopilotOption.label.enable": "Surfy Copilot",
  "WorkCanvas.Options.CopilotOption.label.disable": "Fermer les options de Surfy Copilot ",
  "WorkCanvas.Options.CopilotOption.help.enable": "Activer et r\xE9gler les options de Surfy Copilot",
  "WorkCanvas.Options.CopilotOption.help.disable": "Revenir dans le mode normal du plan.",
  "WorkCanvas.Options.AddRoomShapeOption.label.enable": "Ajouter un espace",
  "WorkCanvas.Options.AddRoomShapeOption.label.disable": "Annuler l'ajout d'un espace",
  "WorkCanvas.Options.AddRoomShapeOption.help.enable": "Ajouter un espace sur le plan",
  "WorkCanvas.Options.AddRoomShapeOption.help.disable": "Annuler la cr\xE9ation de l'espace",
  "WorkCanvas.Options.AddRoomShapeOption.description": "Les angles de cr\xE9ation sont bloqu\xE9s \xE0 45\xB0, pour les d\xE9bloquer gardez appuy\xE9 sur la touche du clavier <b>SHIFT</b> et continuez la cr\xE9ation, pour cr\xE9er votre sommet positionnez la souris dans le cercle \xE0 l'intersection du triangle, Pour commencer un espace en r\xE9utilisant un sommet existant, gardez la touche du clavier <b>ALT</b> appuy\xE9 et cliquez sur le sommet.",
  "WorkCanvas.Options.AddRoomShapeSaveOption.label": "Sauvegarder l'espace en cours de mod\xE9lisation",
  "WorkCanvas.Options.AddRoomShapeSaveOption.help": "Sauvegarder l'espace va automatiquement fermer l'espace et l'enregistrer vous permettant d'y rajouter des objets ou des postes de travail",
  "WorkCanvas.Options.ViewLegendOption.label.enable": "Pr\xE9visualiser la l\xE9gende",
  "WorkCanvas.Options.ViewLegendOption.label.disable": "Fermer la l\xE9gende de sauvegarde en image du plan",
  "WorkCanvas.Options.ViewLegendOption.help.enable": "Voir \xE0 quoi correspond la section de l\xE9gende du plan",
  "WorkCanvas.Options.ViewLegendOption.help.disable": "Revenir dans le mode normal du plan.",
  "DownloadImageQualitySlider.label": "Qualit\xE9 de l'image export\xE9e",
  "DownloadImagePdfButton.label": "T\xE9l\xE9charger le plan sans legende (PDF)",
  "DownloadImagePdfButton.help": "T\xE9l\xE9charger le plan en PDF sans l\xE9gende, cette fonctionnalit\xE9 est en beta",
  "WorkCanvas.Options.DownloadImageOption.label.enable": "Sauvegarder en image",
  "WorkCanvas.Options.DownloadImageOption.label.disable": "Fermer les options de sauvegarde en image du plan",
  "WorkCanvas.Options.DownloadImageOption.help.enable": "Enregistrer le plan en image via cette option",
  "WorkCanvas.Options.DownloadImageOption.help.disable": "Revenir dans le mode normal du plan.",
  "DownloadImageDrawer.ViewImage.text": "T\xE9l\xE9charger le plan avec legende (PNG)",
  "DownloadImageDrawer.ViewImage.help": "T\xE9l\xE9charger tout le plan en bonne qualit\xE9 avec la l\xE9gende, l'export peut prendre plus de temps.",
  "DownloadImageDrawer.ViewImageNoLegend.text": "T\xE9l\xE9charger le plan sans legende (PNG)",
  "DownloadImageDrawer.ViewImageNoLegend.help": "T\xE9l\xE9charger tout le plan en bonne qualit\xE9 sans la l\xE9gende, l'export peut prendre plus de temps.",
  "DownloadImageDrawer.ScreenshotNoLegend.text": "Copie d'\xE9cran sans legende",
  "DownloadImageDrawer.ScreenshotNoLegend.help": "T\xE9l\xE9charger l'image de ce que vous voyez sur l'\xE9cran sans legende, la sortie sera rapide mais la qualit\xE9 de l'export ne sera pas optimale",
  "DownloadBuildingImagesAccordion.accordion.title": "Exporter les images de tout le b\xE2timent",
  "DownloadBuildingImagesAccordion.buttons.download.help": "T\xE9l\xE9charger tous les plans de tous les \xE9tages du b\xE2timent au format png dans un zip, le temps d'attente de cette extraction peut \xEAtre long",
  "DownloadBuildingImagesAccordion.buttons.download.label": "T\xE9l\xE9charger le ZIP",
  "DisplayTexts.dragOption": "Vous pouvez trier et choisir l'affichage des propri\xE9t\xE9s sur le plan en d\xE9placant les petites barres sur le champs vers le haut ou le bas",
  "DisplayRoomTextsPeople.roomPeopleFullName.label": "Nom complet des personnes",
  "DisplayRoomTextsPeople.roomPeopleFullName.help": "Afficher ou non le nom complet de la personne sur le plan",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.label": "Profil de s\xE9curit\xE9",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.help": "Afficher ou non le profil de s\xE9curit\xE9 des personnes affect\xE9es aux espaces sur le plan",
  "NumberOfPeoplePerRowField.label": "Nombre de personnes par ligne pour les affectations aux espaces",
  "WorkCanvas.Options.BackgroundLayoutOption.label.enable": "G\xE9rer le fond de plan",
  "WorkCanvas.Options.BackgroundLayoutOption.label.disable": "Fermer la gestion de l'image de fond",
  "WorkCanvas.Options.BackgroundLayoutOption.help.enable": "Permet de g\xE9rer le fond de plan",
  "WorkCanvas.Options.BackgroundLayoutOption.help.disable": "Revenir dans le mode normal de l'\xE9dition du plan.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.label": "Supprimer l'\xE9chelle",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.help": "Supprimer l'\xE9chelle revient \xE0 retirer l'\xE9chelle du plan et le supprimer de la base, il ne sera plus accessible via d'autres plan, Il n'est pas possible de supprimer une \xE9chelle qui se trouve sur plusieurs \xE9tages.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.label": "Dissocier l'\xE9chelle",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.help": "Dissocier l'\xE9chelle de ce plan le retire du plan, mais conserve l'\xE9chelle dans la base de donn\xE9e pour de futurs utilisations",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.label": "Zoomer sur l'\xE9chelle",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.help": "Zoomer permet de retrouver facilement l'\xE9chelle sur le plan.",
  "WorkplaceCanvasItem.workplace.free": "Le poste de travail n'est pas occup\xE9",
  "WorkplaceCanvasItem.workplace.isFlex": "Le poste de travail est en flex",
  "WorkplaceCanvasItem.workplace.isTransit": "Le poste de travail est de passage",
  "WorkplaceCanvasItem.workplace.isBookable": "Le poste de travail est r\xE9servable",
  "WrongRoomsTable.table.headers.objectType": "Nature",
  "WrongRoomsTable.table.headers.type": "Type",
  "WrongRoomsTable.table.headers.identity": "Identit\xE9",
  "WrongRoomsTable.table.headers.currentRoom": "Espace actuel",
  "WrongRoomsTable.table.headers.newRoom": "Nouvel espace",
  "WrongRoomsTable.SelectAll.checked.true": "Tout d\xE9selectionner",
  "WrongRoomsTable.SelectAll.checked.false": "Tout s\xE9lectionner",
  "WrongRoomsTable.SelectAll.help": "S\xE9lectionner ou d\xE9selectionner toutes les lignes",
  "WrongRoomsListner.dialog.title": "Valider le choix des espaces",
  "WrongRoomsListner.dialog.description": "Il y a des formes qui ne sont pas dans leur espace de d\xE9part",
  "WrongRoomsListner.close.label": "Fermer",
  "WrongRoomsListner.close.help": "Fermer cette fen\xEAtre",
  "MoveShapestoNewRoomAsyncButton.label": "Appliquer le changement d'espace",
  "MoveShapestoNewRoomAsyncButton.help": "Changer les espaces des formes s\xE9lectionn\xE9es pour les mettre dans les espaces dans lesquelles elles sont sur le plan",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.enable": "D\xE9placer le type d'objet",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.disable": "Arr\xEAter le d\xE9placement du type d'objet",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.enable": "D\xE9placer un type d'objet sur le plan",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.disable": "Arr\xEAter le d\xE9placement du type d'objet",
  "ResetRotationAngle.resetRotationAngle": "R\xE9initilaliser \xE0 0 \xB0 l'angle de la rotation qui est actuellement de %{initialRotation}",
  "TenantOperations.sephora-sync-sap-success-factors.label": "Synchronisation MSC",
  "TenantOperations.st-grenoble-import-hr-file.label": "Import du fichier RH",
  "TenantOperations.egis-import-hr-file.label": "Import Fichier RH",
  "TenantOperations.essilor-import-hr-file.label": "Import Fichier RH",
  "TenantOperations.agpm-import-hr-file.label": "Import du fichier RH (STILOG)",
  "ConnectedPartnerContext.title": "Vous \xEAtes connect\xE9 \xE0 <b>%{label}</b> (%{host})",
  "Operations.talentsoft-import.label": "Import Talentsoft",
  "Operations.zbre-sync.label": "Syncronisation Z#bre",
  "Operations.exportZbre.label": "Export Z#bre",
  "GenericNoChangeTable.open.label": "Voir les donn\xE9es",
  "GenericNoChangeTable.open.help": "Voir le d\xE9tail des donn\xE9es identiques",
  "Operations.sharingcloud-sync.label": "Syncronisation Sharingcloud",
  "Operations.moffi-sync.label": "Syncronisation Moffi",
  "Operations.lucca-sync.label": "Syncronisation Lucca",
  "CompareObjectTypeUpdateIcon.help": "Cette synchronisation va effectuer une mise \xE0 jour des entiti\xE9s",
  "CompareObjectTypeDeleteIcon.help": "Cette synchronisation va effectuer une suppression des entiti\xE9s qui ne proviennent pas de la source",
  "CompareObjectTypeCreateIcon.help": "Cette synchronisation va effectuer une cr\xE9ation des entiti\xE9s qui n'existent pas dans la cible",
  "RoomTooltip.roomWorkplaceAffectations": "Affectations des postes de travail",
  "RoomSegmentRoomsList.title": "Les espaces attach\xE9s \xE0 ce segment",
  "MeetingRoomCard.seats.1": "%{count} place assise",
  "MeetingRoomCard.seats.n": "%{count} places assises",
  "MeetingRoomCard.locateSpace": "Localiser l'espace sur le plan",
  "MeetingRoomCard.viewPicture": "Voir la photo de l'espace",
  "days.monday": "lundi",
  "days.tuesday": "mardi",
  "days.wednesday": "mercredi",
  "days.thursday": "jeudi",
  "days.friday": "vendredi",
  "days.saturday": "samedi",
  "days.sunday": "dimanche",
  "WorkplaceAffectationDailyTitle.all": "Cette personne est affect\xE9e tous les jours",
  "WorkplaceAffectationDailyTitle.person.affected": "Cette personne est affect\xE9e %{daysText}",
  "WorkplaceAffectationDailyTitle.person.notAffected": "Cette personne n'est pas affect\xE9e ",
  "WorkplaceAffectationDailyTitle.calculatedRate": "Le taux d'affectation moyen est de %{calculatedRate}",
  "WorkplaceNestedList.title": "Personnes affect\xE9es aux postes de travail",
  "WorkplaceList.workplace.free": "Ce poste de travail est libre",
  "WorkplaceList.workplace.flex": "Ce poste de travail est en flex",
  "WorkplaceList.workplace.transit": "Ce poste de travail est partag\xE9",
  "WorkplaceList.zoomOnWorkplace": "Zoomer sur le poste de travail sur le plan",
  "WorkplaceAffectionPersonListItem.remove.help": "Retirer l'affectation de la personne au poste de travail",
  "WorkplaceAffectations.edit.help": "Affecter une personne \xE0 ce poste de travail",
  "WorkplaceAffectationDays.all": "Cette personne est affect\xE9e tous les jours",
  "WorkplaceAffectationDays.and": "les %{days} et %{lastDay}",
  "WorkplaceAffectationDays.one": "le %{day}",
  "WorkplaceAffectationDays.person.affected": "Cette personne est affect\xE9e %{daysText}",
  "WorkplaceAffectationDays.person.notAffected": "Cette personne n'est pas affect\xE9e ",
  "RoomWorkplaceList.EmptyList": "Il n'y a aucun poste de travail dans cet espace",
  "RoomCard.buttons.edit.false": "Modifier les propri\xE9t\xE9s de l'espace",
  "RoomCard.buttons.edit.true": "Arr\xEAter la modification",
  "RoomCard.tabs.people": "Affectations",
  "RoomCard.tabs.inventory": "Inventaire",
  "RoomCard.tabs.room": "Espace",
  "RoomAffectationsOnlyList.title": "Personnes affect\xE9es aux espaces",
  "RoomAffectationsList.title": "Personnes affect\xE9es aux espaces",
  "RoomAffectationsList.EmptyList": "Il n'y a personne d'affect\xE9e \xE0 cet espace",
  "ItemsInventory.EmptyList": "Il n'y a aucun objet dans cet espace",
  "MovePersonFromWorkplaceToRoomListButtonItem.label": "D\xE9placer cette personne de son poste de travail \xE0 l'espace du poste de travail",
  "MovePersonFromWorkplaceToRoomListButtonItem.help": "Cette option n\xE9cessite de rafraichir la page pour voir le resultat, il est possible d'enchainer plusieurs mouvements sans rafraichir",
  "CollapseWorkplaceAffectationList.title": "Affecter cette personne pour les jours suivants uniquement",
  "CollapseWorkplaceAffectationList.updateAffectationDay.true": "Affecter cette personne %{day}",
  "CollapseWorkplaceAffectationList.updateAffectationDay.false": "Retier l'affectation de cette personne %{day}",
  "CancelAddWorkplaceToRoom.help": "Annuler l'ajout du poste de travail",
  "CancelAddItemToRoom.help": "Annuler l'ajout de l'objet",
  "AddPersonToRoom.help": "Affecter une personne \xE0 l'espace %{name}",
  "SecurityComplianceModeSwitch.label": "Filtrer les personnes avec des profils de s\xE9curit\xE9",
  "SecurityComplianceModeSwitch.description": "Voir uniquement sur le plan les personnes avec des profils de s\xE9curit\xE9",
  "layoutViewSets.roomType.label": "Typologies des espaces",
  "layoutViewSets.roomType.description": "Voir le plan de l'\xE9tage selon la typologie des espaces",
  "layoutViewSets.costCenter.label": "Refacturation",
  "layoutViewSets.costCenter.description": "Analyser les cl\xE9s de r\xE9partition financi\xE8re des espaces",
  "layoutViewSets.workplaces.label": "Occupations",
  "layoutViewSets.workplaces.description": "Concentrez-vous sur l'occupation des postes de travail",
  "layoutViewSets.organizationLevel0.label": "Directions",
  "layoutViewSets.organizationLevel0.description": "L'occupation par direction",
  "layoutViewSets.flex.label": "Flex",
  "layoutViewSets.flex.description": "L'occupation flex des espaces",
  "layoutViewSets.walls.label": "Cloisons",
  "layoutViewSets.walls.description": "Concentrez-vous sur les espaces et cloisons",
  "layoutViewSets.securityCompliance.label": "Conformit\xE9 de la s\xE9curit\xE9",
  "layoutViewSets.securityCompliance.description": "Analyser la conformit\xE9 de votre plan de pr\xE9vention de la s\xE9curit\xE9 et des profils de securit\xE9 des personnes affect\xE9s",
  "layoutViewSets.peopleDimensionTypes.label": "Quartiers",
  "layoutViewSets.peopleDimensionTypes.description": "Analyser les calques d'affectations et naviguer par quartier ou zone",
  "LayoutViewSwitch.title": "Changer la vision du plan",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.viewSet": "Vision",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.help": "Vous pouvez changer la vision via les menus du plan",
  "SurfyLegendBottomLogo.text": "Plan g\xE9n\xE9r\xE9 par Surfy",
  "SurfyLegendBottomLogo.caption": "https://www.surfy.pro",
  "MapLegendWorkplace.title": "Poste de travail",
  "MapLegendWorkplace.workplaces.free": "Les postes de travail sont libres",
  "MapLegendWorkplace.workplaces.flex": "Les postes de travail sont en flex",
  "MapLegendRoom.title": "Espaces",
  "MapLegendPersonSecurityProfile.title": "Profils de s\xE9curit\xE9",
  "MapLegendFloor.title.building": "B\xE2timent",
  "MapLegendFloor.title.floor": "\xC9tage",
  "MapLegend.workplaces": "Postes de travail",
  "MapLegend.rooms": "Espaces",
  "PersonSecurityProfileTabContent.tabs.merged": "Par profils de s\xE9curit\xE9",
  "PersonSecurityProfileTabContent.tabs.split": "Par affectations",
  "DimensionInfo.infos.building": "Informations calcul\xE9es sur le b\xE2timent",
  "DimensionInfo.infos.impactBuildings": "Recharger les donn\xE9es calcul\xE9es des b\xE2timents",
  "DimensionToPeopleList.title": "Personnes affect\xE9es \xE0 %{name}",
  "DimensionToPeopleList.noDimensionPerson": "Il n'y a personne affect\xE9 directement \xE0 ce calque d'analyse",
  "DimensionPeople.title": "Personnes affect\xE9es aux espaces",
  "AddPersonToDimension.help": "Affecter une personne \xE0 %{name}",
  "CubyWallModeSelect.label": "Affichage des cloisons",
  "CubyWallModeSelect.options.no": "Aucun",
  "CubyWallModeSelect.options.half": "Demi-cloisons",
  "CubyWallModeSelect.options.reality": "R\xE9alit\xE9",
  "CubyWallModeSelect.options.cuby": "Cuby",
  "CubySaveAsImageButton.label": "Enregistrer l'image",
  "CubySaveAsImageButton.help": "Enregistrer l'image du plan de l'\xE9tage",
  "CubyFitToViewIsometricButtonOption.label": "Centrer le plan en vue isometric",
  "CubyFitToViewIsometricButtonOption.help": "Centrer le plan sur les espaces en vue isometric",
  "CubyFitToViewZenithalButtonOption.label": "Centrer le plan en vue z\xE9nithale",
  "CubyFitToViewZenithalButtonOption.help": "Centrer le plan sur les espaces en vue z\xE9nithale",
  "RefetchFloorLayoutButton.refetch": "Recharger les donn\xE9es du plan",
  "ItemTypesMapFilterZone.tabs.options": "Options",
  "FloorMap.tabs.layout": "Changer la vision du plan. La vision actuelle est <b>%{layoutName}</b>",
  "FloorMap.tabs.floor": "Voir les informations de l'\xE9tage",
  "FloorMap.tabs.building": "Voir les informations du b\xE2timent",
  "FloorMap.tabs.roomTypes": "Colorier les espaces sur le plan en fonction des <b>typologies d'espaces</b>",
  "FloorMap.tabs.roomTypeGroups": "Voir les indicateurs des espaces sur le plan en fonction des <b>groupes de typologies d'espaces</b>",
  "FloorMap.tabs.analyticsDimensionTypes": "Colorier les espaces sur le plan en fonction des <b>calques d'analyse</b>",
  "FloorMap.tabs.itemTypes": "Afficher sur le plan les <b>objets</b> par famille et type d'objets",
  "FloorMap.tabs.workplaceTypes": "Afficher sur le plan les <b>postes de travail</b> par types de postes de travail",
  "FloorMap.tabs.organizations": "Colorier les espaces sur le plan selon les <b>organisations</b>",
  "FloorMap.tabs.costCenters": "Colorier les espaces et postes de travail par rapport aux <b>centres de co\xFBts</b>",
  "FloorMap.tabs.users": "Colorier les postes de travail par rapport aux personnes",
  "FloorMap.tabs.selection": "Voir le d\xE9tails des \xE9l\xE9ments s\xE9lectionn\xE9s sur le plan",
  "FloorMap.tabs.rooms": "D\xE9tails des <b>espaces</b> s\xE9lectionn\xE9s",
  "FloorMap.tabs.items": "D\xE9tails des <b>objets</b> s\xE9lectionn\xE9s",
  "FloorMap.tabs.workplaces": "D\xE9tails des <b>postes de travail</b> s\xE9lectionn\xE9",
  "FloorMap.tabs.all": "Voir toutes les formes s\xE9lectionn\xE9es en liste",
  "FloorMap.tabs.peopleDimensionTypes": "Colorier les espaces sur le plan en fonction des <b>calques d'affectation</b>",
  "FloorMap.tabs.workplaceUsage": "Colorier les postes de travail par rapport \xE0 leur <b>\xE9tat</b>",
  "FloorMap.tabs.options": "Voir les options du plan",
  "FloorMap.tabs.heatmap": "Colorier avec des cartes de chaleur",
  "FloorMap.tabs.pathFinding": "Trouver son chemin dans les espaces",
  "DateDimensionSelect.options.day": "Jour",
  "DateDimensionSelect.options.week": "Semaine",
  "DateDimensionSelect.options.month": "Mois",
  "DateDimensionSelect.options.year": "Ann\xE9e",
  "DateDimensionSelect.options.quarter": "Trimestre",
  "JupDateRangePicker.chooseRange": "Choisissez une p\xE9riode",
  "WorkpaceBookingPeopleCountByDate.title": "Nombre de personnes ayant r\xE9serv\xE9 par date",
  "WorkpaceBookingPeopleCountByDate.labels.line": "Nombre de personnes",
  "WorkpaceBookingCountByDate.title": "R\xE9servations des postes de travail par date",
  "WorkpaceBookingCountByDate.labels.line": "Nombre de r\xE9servations",
  "WorkpaceBookingAverageByWeekDay.title": "R\xE9servation des postes de travail par jour de la semaine",
  "WorkpaceBookingAverageByWeekDay.labels.line": "Moyenne par semaine",
  "WorkpaceBookingAverageByWeekDay.labels.bar": "Nombre de r\xE9servations",
  "PersonPanelWorkplaceAffectations.title": "Affectations aux postes de travail",
  "PersonPanelRoomAffectations.title": "Affectations aux espaces",
  "PersonPanelDimensionToPeople.title": "Affectations aux %{dimensionTypeName}",
  "PersonPanelBuildingAffectations.title": "Affectations aux b\xE2timents",
  "PersonPanelBuildingAffectations.addToPeopleCount.false": "Cette personne n'est pas comptabilit\xE9 dans le b\xE2timent",
  "PersonAffectationsPanel.title": "Affectations",
  "PersonAffectationsPanel.description": "Les affectations de la personne",
  "PersonSecurityPanel.title": "S\xE9curit\xE9",
  "PersonSecurityPanel.description": "Informations relatives \xE0 la s\xE9curit\xE9 et aux \xE9vacuations",
  "PersonRelationsPanel.title": "Relations",
  "PersonRelationsPanel.description": "Les relations de cette personne",
  "PersonInventoryPanel.title": "Inventaire",
  "PersonInventoryPanel.description": "Informations relatives \xE0 l'inventaire",
  "PersonInventoryPanel.items.subheader": "Liste des objets associ\xE9s",
  "PersonInfoPanel.title": "Informations personnelles",
  "PersonContractPanel.title": "Contrat",
  "PersonContractPanel.description": "Informations relatives au contrat",
  "PersonContactPanel.title": "Contact",
  "PersonContactPanel.description": "Comment contacter cette personne ?",
  "PersonBadgePanel.title": "Divers",
  "PersonBadgePanel.description": "Informations diverses sur la personne",
  "AvatarPersonDrawer.help": "Voir plus d'informations sur %{name}",
  "TopLevelOrganizationFilter.Empty": "Il n'y a aucune organization de associ\xE9s aux espaces, vous pouvez en ajouter en modifiant un espace et en l'associant \xE0 une organiation, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "OrganizationTabsFilter.tabs.topLevel": "Directions",
  "OrganizationTabsFilter.tabs.hierarchy": "Hi\xE9rarchie",
  "OrganizationTabsFilter.tabs.level1": "Services",
  "OrganizationFloorMapFilter.TooltipTitle.notSelected": "S\xE9lectionner %{organization} pour colorier les espaces sur le plan",
  "OrganizationFloorMapFilter.TooltipTitle.selected": "D\xE9s\xE9lectionner %{organization} va retirer les couleurs du plan",
  "OrganizationFloorMapFilter.tooltip.true": "S\xE9lectionner tous les types d'objets ci-dessous afin de les colorier sur la carte",
  "OrganizationFloorMapFilter.tooltip.false": "D\xE9s\xE9lectionner tous organizations ci-dessous",
  "Level1OrganizationFilter.Empty": "Il n'y a aucune organization associ\xE9e aux espaces, vous pouvez en ajouter en modifiant un espace et en l'associant \xE0 une organiation, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "HierarchyOrganizationFilter.Empty": "Il n'y a aucune organization associ\xE9s aux espaces, vous pouvez en ajouter en modifiant un espace et en l'associant \xE0 une organiation, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "CompanyDashboard.dashboards.workplace": "Tableau de bord des postes de travail",
  "CompanyDashboard.dashboards.area": "Tableau de bord des surfaces",
  "ChangeCompanyMenu.ChangeCompany": "Voir une autre entreprise dans une nouvelle page",
  "WorkplaceTypeDataQualityNotUsed.columns.name": "Nom du type de poste de travail",
  "WorkplaceTypeDataQualityNotUsed.columns.shape": "Forme",
  "workplaceTypeLayoutFilter.Empty": "Il n'y a aucun poste de travail pour le moment dans les espaces, vous pouvez en ajouter en modifiant un espace et en y ajoutant des postes de travail, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "WorkplaceTypeInfo.help": "Le nombre de postes de travail est %{count}",
  "CopyWorkplaceTypeToCart.help": "Copier les types de poste de travail dans le panier",
  "WorkCanvas.Options.ZoomOnWorkplaceType.label": "Zoomer sur le type de poste de travail",
  "WorkCanvas.Options.ZoomOnWorkplaceType.help": "Zoomer sur le type de poste de travail permet de le localiser sur la zone de travail",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.enable": "Lister les types d'objets",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.disable": "Fermer la liste des types d'objets",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.enable": "Voir la liste des type d'objets pour ce type de poste de travail",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.disable": "Fermer la liste des types d'objets pour ce type de poste de travail",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.open": "D\xE9plier les options",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.close": "Replier les options",
  "WorkplaceTypeItemTypesDrawer.title": "Liste des types d'objets",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.help": "Ajouter une type d'objet pour pouvoir composer le type de poste de travail",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.label": "Ajouter un type d'objet",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.help": "Annuler l'ajout d'un type d'objet dans ce poste de travail",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.label": "Annuler l'ajout d'un type d'objet",
  "WorkCanvas.Options.DeleteStructureShapeOption.help": "Supprimer totalement la forme de la structure de pouvoir par exemple la redessiner entierement",
  "WorkCanvas.Options.DeleteStructureShapeOption.label": "Supprimer la forme",
  "WorkCanvas.Options.AddStructurePointOption.label.enable": "Ajouter un sommet",
  "WorkCanvas.Options.AddStructurePointOption.label.disable": "Arr\xEAter l'ajout d'un sommet",
  "WorkCanvas.Options.AddStructurePointOption.help.enable": "Ajouter un sommet permet de retravailler avec plus de precisions une forme",
  "WorkCanvas.Options.AddStructurePointOption.help.disable": "Arr\xEAter la cr\xE9ation de sommets",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloorButton.label": "R\xE9server un poste de travail au %{floorName}",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloor": "R\xE9server un poste de travail au %{floorName} pour la p\xE9riode %{slotString}",
  "BookPersonBuildingWorkplace.availableWorkplaces": "%{freeWorkplaces} places disponibles",
  "BookPersonBuildingWorkplace.help": "%{bookedWorkplaces} r\xE9servation(s), %{freeWorkplaces} postes de travail disponibles sur %{totalFloorWorkplacesCount}",
  "booking.snackbar.delete.workplace": "La r\xE9servation au poste de travail %{workplaceName} a \xE9t\xE9 annul\xE9e pour la p\xE9riode %{slot}",
  "booking.snackbar.delete.room": "La r\xE9servation \xE0 l'espace %{roomName} a \xE9t\xE9 annul\xE9e pour la p\xE9riode %{slot}",
  "BookingWorkplaceTitle.booked": "Ce poste de travail est d\xE9j\xE0 r\xE9serv\xE9",
  "BookingWorkplaceTitle.userBooked": "Vous avez r\xE9serv\xE9 ce poste de travail",
  "BookingWorkplaceTitle.free": "R\xE9server ce poste de travail",
  "PlanningPersonAffectations.alerts.noAffectation.title": "Impossible de r\xE9server un poste de travail",
  "PlanningPersonAffectations.alerts.noAffectation.message": "Vous n'\xEAtes associ\xE9 \xE0 aucun territoire, merci de vous rapprocher de votre responsable d'affectation afin de pouvoir r\xE9server un espace de travail",
  "WorkingLocationToggle.locations.OFFICE": "Bureau",
  "WorkingLocationToggle.locations.REMOTE": "T\xE9l\xE9travail",
  "PersonBookingListItem.workplaceBookedOnFloor": "Voir le poste de travail %{workplaceName} sur le plan au %{floorName}",
  "PersonBookingList.noBooking": "Aucun coll\xE8gue ne sera pr\xE9sent au bureau sur le m\xEAme cr\xE9neau pour le moment",
  "PersonBookingList.bookings.one": "Un coll\xE8gue sera pr\xE9sent sur le m\xEAme cr\xE9neau",
  "PersonBookingList.bookings.more": "%{count} coll\xE8gues seront pr\xE9sents sur le m\xEAme cr\xE9neau",
  "ParkingBookIcon.parking.booked": "Votre parking est r\xE9serv\xE9",
  "ParkingBookIcon.parking.release.help": "Lib\xE9rer la r\xE9servation du parking",
  "ParkingBookIcon.parking.viewOnMap": "Voir sur le plan le parking r\xE9serv\xE9",
  "ParkingBookIcon.parking.book.label": "R\xE9server un parking",
  "ParkingBookIcon.parking.book.help": "R\xE9server un parking qui sera attribu\xE9 automatiquement sur le cr\xE9neau",
  "HalfDayWorkingLocationToggle.am.label": "Matin",
  "HalfDayWorkingLocationToggle.am.help": "Les horaires de la matin\xE9e sont de 8h00 \xE0 13h30",
  "HalfDayWorkingLocationToggle.pm.label": "Apr\xE8s-midi",
  "HalfDayWorkingLocationToggle.pm.help": "Les horaires de l'apr\xE8s-midi sont de 14h00 \xE0 19h00",
  "DirectBuildingPlanningLabel.youAreAssigned": "Vous \xEAtes affect\xE9 sur le b\xE2timent %{buildingName}",
  "DimensionBuildingPlanningLabel.youAreAssigned": "Vous \xEAtes affect\xE9 sur %{dimensionTypeName} %{dimensionName}",
  "BookedBuildingWorkplaceList.noWorkplaceBooked": "Aucun poste de travail r\xE9serv\xE9",
  "BookedBuildingWorkplaceList.workplaceIsBooked": "Votre poste de travail est reserv\xE9",
  "BookedBuildingWorkplaceList.viewBookedWorkplaceOnMap": "Voir le poste de travail %{workplaceName} qui est reserv\xE9 sur le plan",
  "BookedBuildingWorkplaceList.freeWorkplaceBooking": "Lib\xE9rer cette r\xE9servation",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.noFloor": "La dimension n'est sur aucun \xE9tage impossible de r\xE9server pour le moment depuis le plan",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.moreThanOneFloor": "La dimension est sur plusieurs \xE9tages impossible de r\xE9server pour le moment depuis le plan",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.drawer.title": "R\xE9server un poste de travail sp\xE9cifique pour la p\xE9riode %{slotString}",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.help": "R\xE9server sur le plan un poste de travail sp\xE9cifique pour ce cr\xE9neau",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.label": "R\xE9server un poste de travail dans %{dimensionName}",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.peopleCount": "Il y a %{count} personne(s) avec le profil de s\xE9curit\xE9 %{name} affect\xE9 aux postes de travail",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.workplaceCount": "Il y a %{count} poste(s) de travail avec au moins une personne avec profil de s\xE9curit\xE9 %{name}",
  "PersonSecurityProfileWorkplaceFilter.Empty": "Vos personnes n'ont pas de profil de s\xE9curit\xE9 ou ne sont pas affect\xE9es \xE0 des postes de travail, il n'est pas possible de colorier les postes de travail en fonction des profils de s\xE9curit\xE9 des personnes",
  "PersonSecurityProfileWorkplaceFilter.title": "Les profils de s\xE9curit\xE9 des personnes affect\xE9es aux postes de travail",
  "PersonSecurityProfileMerged.title": "Liste des profils de s\xE9curit\xE9 regroup\xE9 par type de profils",
  "PersonSecurityProfileMerged.empty": "Aucun profil n'est associ\xE9 aux espaces ou postes de travail",
  "PersonSecurityProfileInRooms.title": "Les profils de s\xE9curit\xE9 des personnes affect\xE9es aux espaces",
  "PersonSecurityProfileInRoomListItem.peopleCount": "Il y a %{count} personne(s) avec le profil de s\xE9curit\xE9 %{name} affect\xE9e(s) aux espaces",
  "PersonSecurityProfileInRoomListItem.roomsCount": "Il y a %{count} espace(s) avec au moins une personne avec profil de s\xE9curit\xE9 %{name}",
  "ToggleAllOpenInfoState.true": "Fermer tous les d\xE9tails et indicateurs",
  "ToggleAllOpenInfoState.false": "Ouvrir tous les d\xE9tails et indicateurs",
  "MapFiltersNodesToggleAll.help.true": "Tout s\xE9lectionner",
  "MapFiltersNodesToggleAll.help.false": "Tout d\xE9s\xE9lectionner",
  "MapFiltersNode.info.open": "Voir le d\xE9tail et les indicateurs pour %{label}",
  "MapFiltersNode.info.close": "Fermer les informations suppl\xE9mentaires",
  "MapFiltersCategory.CategoryHasChildrenSelected": "Des \xE9l\xE9ments sont s\xE9lectionn\xE9s",
  "MapFilterNodeToggleAll.action.true": "Tout s\xE9lectionner",
  "MapFilterNodeToggleAll.action.false": "Tout d\xE9s\xE9lectionner",
  "MapFilterNodeIsAllSelected.help": "Toute la s\xE9lection ci dessous sera charg\xE9, m\xEAme si des nouveaux objets sont cr\xE9es",
  "JupRoleToObjectTypeMatrix.views.help.true": "Cacher la vue d'interface",
  "JupRoleToObjectTypeMatrix.views.help.false": "Afficher la vue d'interface",
  "JupRoleToObjectTypeMatrix.objectTypes.help.checkbox": "Mettre \xE0 jour la propri\xE9t\xE9 (%{name})",
  "GlobalOptions.CartCopyItemTypeOption.help": "Copier les types d'objets dans le panier",
  "GlobalOptions.CartCopyWorkplaceTypeOption.help": "Copier les types de poste de travail dans le panier",
  "GlobalOptions.CartCopyBuildingOption.help": "Copier les b\xE2timents dans le panier",
  "CheckAllDefaultViews.shortcuts.title": "Raccourcis de configuration",
  "CheckAllDefaultViews.shortcuts.views.title": "Raccourcis pour les vues d'interface par defaut",
  "CheckAllDefaultViews.shortcuts.views.buttonsHelp": "Cocher cette vue pour tous les types d'entit\xE9s",
  "CheckAllDefaultViews.shortcuts.objectTypes.title": "Raccourcis pour les types d'entit\xE9s",
  "CheckAllDefaultViews.shortcuts.objectTypes.buttonsHelp": "Cocher cette r\xE8gle pour tous les types d'objets",
  "RemoveItemColorsOption.label": "Ne pas colorier les objets",
  "RemoveItemColorsOption.help": "Colorier les objets en blanc afin de pouvoir se concentrer sur d'autres \xE9l\xE9ments sur la carte",
  "ItemTypeOptions.help": "Le nombre d'objets est %{count}",
  "ItemTypeMapFilter.TooltipTitle.notSelected": "S\xE9lectionner %{itemType} pour voir les objets sur le plan",
  "ItemTypeMapFilter.TooltipTitle.selected": "D\xE9s\xE9lectionner %{itemType} va retirer la couleur associ\xE9e du plan",
  "ItemTypeMapFilter.tooltip.true": "S\xE9lectionner tous les types d'objets ci-dessous afin de les afficher sur la carte",
  "ItemTypeMapFilter.tooltip.false": "D\xE9s\xE9lectionner tous les types d'objets ci-dessous",
  "ItemTypeMapFilter.NoNode": "Il n'y a aucun objet pour le moment dans les espaces, vous pouvez en ajouter en modifiant un espace et en y ajoutant des objets, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "ItemTypeMapFilter.NoCategory": "Il n'y a aucun objet pour le moment dans les espaces, vous pouvez en ajouter en modifiant un espace et en y ajoutant des objets, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "ItemTypeDataQualityNotUsed.columns.name": "Nom du type d'objet",
  "ItemTypeDataQualityNotUsed.columns.shape": "Forme",
  "ItemTypeDataQualityNotUsed.columns.workplaceTypeCount": "Nombre de type de poste de travail",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.help": "Choisir un plan de r\xE9f\xE9rence pour cr\xE9er la forme afin de pouvoir dessiner votre type d'objet en se rep\xE9rant sur un plan et avoir la bonne \xE9chelle",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.label": "Choisir un plan de r\xE9f\xE9rence pour cr\xE9er la forme",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.help": "Choisir un plan de r\xE9f\xE9rence pour composer le type de poste de travail avec des types d'objets existants en se rep\xE9rant sur un plan et avoir la bonne \xE9chelle et correctement positionner les types d'objets",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.label": "Choisir un plan de r\xE9f\xE9rence pour composer la forme du type de poste de travail",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.help": "Choisir un plan de r\xE9f\xE9rence pour cr\xE9er la forme afin de pouvoir dessiner la structure en se rep\xE9rant sur un plan et avoir la bonne \xE9chelle",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.label": "Choisir un plan de r\xE9f\xE9rence pour cr\xE9er la structure",
  "ItemTypeAvatarSingleView.copy": "Copier les points dans le presse-papier",
  "ItemTypeAvatarSingleView.debug.label": "Activer le mode avanc\xE9 pour la 3d",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.help": "Supprimer totalement la forme du type d'objet afin de pouvoir par exemple la redessiner entierement ou la transformer en icone",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.label": "Supprimer la forme",
  "CopyItemTypesToCart.help": "Copier les types d'objets dans le panier",
  "PhysicalItemNotInsideWorkplaceRoom.alignRooms": "Changer les espaces des objets par celui du poste de travail",
  "AddPersonToItem.text": "Associer une personne \xE0 cet objet",
  "AddPersonToItem.help": "Associer une personne \xE0 cet objet, vous pouvez ajouter plusieurs personnes pour le m\xEAme objet",
  "DimensionTypeDescription.NoDescription": "Il n'y a pas de description pour ce type de calque d'analyse, vous pouvez en rajouter en le modifiant",
  "dimensionTypes.room_ground_type.one": "Nature des sols",
  "dimensionTypes.room_ground_type.description": "Permet de connaitre quel est la composition du sol de l'espace",
  "dimensionTypes.room_usage.one": "Nature des espaces",
  "dimensionTypes.room_usage.description": "Permet d'identifier les espaces selon leur usages",
  "dimensionTypes.frequency.one": "Fr\xE9quence",
  "dimensionTypes.frequency.description": "Permet de connaitre la fr\xE9quence de passage dans l'espace",
  "dimensionTypes.evacuation_zone.one": "S\xE9curit\xE9",
  "dimensionTypes.evacuation_zone.description": "Permet de g\xE9rer les zones de s\xE9curit\xE9 et d'\xE9vacuations",
  "dimensionTypes.referent.one": "R\xE9f\xE9rent",
  "dimensionTypes.referent.description": "Permet de connaitre qui est affect\xE9 \xE0 la maintenance de cet espace",
  "DimensionTypesByTab.action.true": "Tout s\xE9lectionner",
  "DimensionTypesByTab.action.false": "Tout d\xE9s\xE9lectionner",
  "DimensionTypesByTab.ListItemHasChildrenSelected": "Des dimensions sont s\xE9lectionn\xE9s",
  "DimensionListItem.notSelected": "S\xE9lectionner %{dimension} pour voir les espaces sur le plan avec la couleur associ\xE9e",
  "DimensionListItem.selected": "D\xE9s\xE9lectionner %{dimension}",
  "DimensionInfo.roomsArea.help": "La surface pour %{dimensionType} %{dimension} est de %{value} m\xB2",
  "DimensionInfo.roomsCount.help": "Il y a %{value} espace(s) pour %{dimensionType} %{dimension}",
  "DimensionInfo.peopleCount.help": "Il y a %{value} personne(s) affect\xE9es pour %{dimensionType} %{dimension}",
  "DimensionInfo.totalPeopleCount.help": "Il y a %{value} personne(s) affect\xE9es au totale pour %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesCount.help": "Il y a %{value} poste(s) de travail pour %{dimensionType} %{dimension}",
  "DimensionInfo.peopleRatio.help": "Il y a %{value} m\xB2 par personnes affect\xE9es pour %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesRatio.help": "Il y a %{value} m\xB2 par postes de travail pour %{dimensionType} %{dimension}",
  "DimensionInfo.occupancyRate.help": "Le taux d'occupation est de %{value}% pour %{dimensionType} %{dimension}",
  "DimensionInfo.expansionRatio.help": "Le taux de foisonnement est de %{value} pour %{dimensionType} %{dimension}",
  "DimensionInfo.freeWorkplacesCount.help": "Il y a %{value} poste(s) de travail libres pour %{dimensionType} %{dimension}",
  "DimensionInfo.flexWorkplacesCount.help": "Il y a %{value} poste(s) de travail en flex pour %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesCount.help": "Il y a %{value} poste(s) de travail partag\xE9s pour %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesRatio.help": "Le taux de postes de travail partag\xE9s est de %{value} pour %{dimensionType} %{dimension}",
  "DimensionInfo.flexRatio.help": "Le taux de postes de travail en flex",
  "DimensionInfo.transitWorkplacesCount.help": "Il y a %{value} poste(s) de travail de passage pour %{dimensionType} %{dimension}",
  "DimensionInfo.dimensionPeopleCount.help": "Il y a %{value} personne(s) affect\xE9es dans %{dimensionType} %{dimension}",
  "DimensionInfo.seatsCount.help": "Il y a %{value} places assises pour %{dimensionType} %{dimension}",
  "DimensionInfo.seatsPeopleRatio.help": "Le taux de places assises est de %{value} places disponibles par personnes pour %{dimensionType} %{dimension}",
  "DimensionInfo.carbonFootprint.help": "L'empreinte carbone est de %{value} de CO2 emis pour %{dimensionType} %{dimension}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.peopleCount": "Il y a %{count} personnes avec le centre de co\xFBt %{costCenterName}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.workplaceCount": "Il y a %{count} postes de travail avec au moins une personne avec le centre de co\xFBt %{costCenterName}",
  "PersonCostCenterWorkplaceFilter.Empty": "Il n'y a aucun centre de co\xFBts associ\xE9 aux personnes",
  "NoDataOnBuildingInfo.noData": "Merci de s\xE9lectionner tous les \xE9tages dans les options du plan pour avoir des donn\xE9es, il ne doit pas y avoir de donn\xE9es pour les \xE9tages que vous avez s\xE9lectionn\xE9",
  "CostCenterWorkplaceMapFilter.nodeInfo.workplacesCount": "Il y a %{count} postes de travail avec le centre de co\xFBt %{name}",
  "CostCenterMapFilterTabs.tabs.rooms": "Espaces",
  "CostCenterMapFilterTabs.tabs.workplaces": "Postes de travail",
  "CostCenterMapFilterTabs.tabs.people": "Personnes",
  "CostCenterMapFilter.Empty": "Il n'y a aucun centre de co\xFBt pour le moment associ\xE9 aux espaces, vous pouvez en ajouter en modifiant un espace et en y associant un centre de co\xFBt, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "CostCenterWorkplaceMapFilter.Empty": "Il n'y a aucun centre de co\xFBt pour le moment associ\xE9 aux postes de travail, vous pouvez en ajouter en modifiant un poste de travail et en y associant un centre de co\xFBt, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "BuildingReports.items.sheets.physicals": "Objets Physiques",
  "BuildingReports.items.sheets.virtuals": "Objets Virtuels",
  "BuildingReports.items.sheets.merged": "Fusion",
  "BuildingInventory.floor": "\xC9tage",
  "BuildingInventory.quantity": "Quantit\xE9",
  "BuildingInventory.price": "Prix",
  "BuildingInventory.manufacturer": "Fabricant",
  "BuildingInventory.quantityTotal": "Total",
  "BuildingInventory.title": "L'inventaire du b\xE2timent %{building.name}",
  "BuildingInventory.buttons.viewPDF.help": "T\xE9l\xE9charger le fichier en PDF afin de pouvoir le t\xE9l\xE9charger ou le partager",
  "BuildingInventory.buttons.viewPDF.label": "T\xE9l\xE9charger la version PDF",
  "BuildingInventory.itemTypesFamilySectionTitle": "Categories de l'inventaire",
  "BuildingInventory.fileNamePrefix": "inventaire",
  "BuildingLabel.scenario": "Ce b\xE2timent est un scenario du b\xE2timent %{name}",
  "CopyBuildingToCart.help": "Copier la structure du b\xE2timent",
  "BuildingClonePropertiesSelector.properties.clone.workplaces": "Copier les postes de travail",
  "BuildingClonePropertiesSelector.properties.clone.items": "Copier les objets",
  "BuildingDistributionCost.floors.excel.tabs.floors": "Cl\xE9s de r\xE9partition par \xE9tage",
  "BuildingDistributionCost.floors.excel.tabs.building": "Cl\xE9s de r\xE9partition pour le b\xE2timent",
  "BuildingDistributionCost.floors.excel.tabs.buildingDetailed": "D\xE9tails du b\xE2timent par centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.download.label": "T\xE9l\xE9charger le fichier excel avec les ventilations",
  "BuildingDistributionCost.floors.excel.download.help": "T\xE9l\xE9charger le fichier excel pour pourvoir partager et exporter les cl\xE9s de r\xE9partition et surfaces qualifi\xE9es par centre de co\xFBt et par \xE9tage, l'export inclut la distribution par \xE9tage ou par b\xE2timent des centres de co\xFBts",
  "BuildingDistributionCost.floors.excel.headers.floors.floorName": "Nom de l'\xE9tage",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterName": "Centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterArea": "Surface des espaces incluant les distributions de l'\xE9tage",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterRoomsArea": "Surface des espaces du centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterDistributedFloorRatio": "Ratio d'usage dans l'\xE9tage",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterFloorDistributedArea": "Surface totale des espaces \xE0 distribuer de l'\xE9tage pour ce centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.floors.floorArea": "Surface totale l'\xE9tage incluant les distributions de l'\xE9tage",
  "BuildingDistributionCost.floors.excel.headers.floors.totalFloorDistributedArea": "Surface \xE0 distribuer dans l'\xE9tage",
  "BuildingDistributionCost.floors.excel.headers.floors.totalBuildingDistributedArea": "Surface de l'\xE9tage \xE0 distribuer dans le b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterName": "Centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterArea": "Surface totale du centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterBuildingRatio": "Ratio d'usage du b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterDistributedBuildingArea": "Surface totale des espaces distribu\xE9 du b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterRoomsArea": "Surface des espaces du centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.building.buildingArea": "Surface totale des espaces du b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.building.buildingDistributedArea": "Surface \xE0 distribuer dans le b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.building.totalBuildingArea": "Surface totale du b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.buildingName": "B\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterName": "Centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterArea": "Surface du centre de co\xFBt",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterBuildingRatio": "Cl\xE9 de r\xE9partition dans le b\xE2timent",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.distributedCostCenterArea": "R\xE9partition du centre de co\xFBt %{costCenterName}",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterTotalArea": "Surface totale \xE0 refacturer",
  "BuildingDistributionCost.excel.tabs.distributionCost": "Cl\xE9s de r\xE9partition",
  "BuildingDistributionCost.excel.tabs.distributionCostDetails": "D\xE9tails",
  "BuildingDistributionCost.excel.download.label": "T\xE9l\xE9charger le fichier excel sans les ventilations",
  "BuildingDistributionCost.excel.download.help": "T\xE9l\xE9charger le fichier excel pour pourvoir partager et exporter les cl\xE9s de r\xE9partition et surfaces qualifi\xE9es par centre de co\xFBt",
  "BuildingDistributionCost.Title": "Cl\xE9s de r\xE9partition et surfaces qualifi\xE9es par centre de co\xFBt sans ventilations",
  "BuildingDistributionCost.table.type": "Type",
  "BuildingDistributionCost.table.distributionKey": "Cl\xE9 de r\xE9partition",
  "BuildingDistributionCost.table.costCenterDistributionKey": "Cl\xE9 de r\xE9partition pour le centre de co\xFBt",
  "BuildingDistributionCost.table.workplacesCount": "Nombre de postes de travail",
  "BuildingDistributionCost.table.workplaceTotalCount": "Nombre total des postes de travail",
  "BuildingFloorSelection.title": "Les \xE9tages \xE0 dupliquer dans votre sc\xE9nario",
  "BuildingFloorSelection.all.select": "S\xE9lectionner tous les \xE9tages",
  "BuildingFloorSelection.all.unselect": "D\xE9selectionner tous les \xE9tages",
  "BuildingCloneFloorSelection.title": "Les \xE9tages \xE0 dupliquer dans votre sc\xE9nario",
  "BuildingCloneFloorSelection.all.select": "S\xE9lectionner tous les \xE9tages",
  "BuildingCloneFloorSelection.all.unselect": "D\xE9selectionner tous les \xE9tages",
  "BuildingClone.noClone": "Aucun sc\xE9nario n'a \xE9t\xE9 cr\xE9\xE9 pour le moment, vous pouvez cr\xE9er votre premier sc\xE9nario pour ce b\xE2timent",
  "BuildingClone.buttons.CreateClone.label": "Cr\xE9er un sc\xE9nario",
  "BuildingClone.buttons.CreateClone.help": "Le sc\xE9nario va dupliquer le b\xE2timent avec les propri\xE9t\xE9s coch\xE9s",
  "BuildingClone.accordion.title": "Cr\xE9er un nouveau sc\xE9nario",
  "BuildingClone.properties.clone.people": "Dupliquer les affectations",
  "BuildingClone.properties.clone.workplaces": "Dupliquer les postes de travail",
  "BuildingClone.properties.clone.items": "Dupliquer les objets",
  "BuildingClone.properties.clone.dimensions": "Associer les calques d'analyses et d'affectations aux espaces",
  "BuildingClone.properties.clone.organization": "Associer les organisations aux espaces",
  "BuildingDashboard.dashboards.workplace": "Tableau de bord des postes de travail",
  "BuildingDashboard.dashboards.area": "Tableau de bord des surfaces",
  "CampusBuildingsAccordion.buildingCount": "Le nombre de b\xE2timents",
  "CalculatedPropertiesAccordions.mesures": "Mesures",
  "CalculatedPropertiesAccordions.kpi": "Indicateurs",
  "DimensionMapFilter.TooltipTitle.notSelected": "S\xE9lectionner %{dimension} pour voir les espaces sur le plan avec la couleur associ\xE9e",
  "DimensionMapFilter.TooltipTitle.selected": "D\xE9s\xE9lectionner %{dimension} va retirer la couleur associ\xE9e du plan",
  "DimensionMapFilter.tooltip.true": "S\xE9lectionner toutes les filtres ci-dessous afin de les colorier sur la carte",
  "DimensionMapFilter.tooltip.false": "D\xE9s\xE9lectionner toutes les filtres ci-dessous",
  "DimensionMapFilter.NoNode": "Il n'y a aucun calque d'analyse pour le moment, vous pouvez en ajouter en modifiant un espace et en y ajoutant des calques d'analyse",
  "DimensionMapFilter.NoCategory": "Il n'y a aucun calque d'analyse disponible, vous devez d'abord en associer aux espaces",
  "SelectDimensionTypeNavigationLayoutIcon.select": "S\xE9lectionner ce type de calque pour la navigation",
  "SelectDimensionTypeNavigationLayoutIcon.unselect": "Retirer la navigation par calque d'analyse et revenir \xE0 la navigation par espaces",
  "SelectDimensionTypeNavigationLayoutIcon.help": "La navigation par calque d'analyse permet de cliquer sur un espace, s\xE9lectionner le calque correspondant et voir les personnes affect\xE9es \xE0 ce calque ou les postes de travail et les objets associ\xE9s \xE0 ce calque \xE0 travers les espaces",
  "DimensionTypeNavigationWarning.message": "Vous \xEAtes en navigation par %{name}, les espaces seront regroup\xE9s ensemble lors de la s\xE9lection. Cliquez pour annuler et revenir \xE0 la navigation par espace",
  "RoomCardSelectDimensions.needSave": "Merci de sauvegarder ou d'annuler vos changements avant de pouvoir modifier les calques d'analyses de cet espace",
  "AssignPersonToWorkplaceCheckListDialogTitle.title": "Vous avez affect\xE9 %{personName} sur le poste de travail %{workplaceName}",
  "AssignPersonToRoomCheckListDialogTitle.title": "Vous avez affect\xE9 %{personName} sur l'espace %{roomName}",
  "WorkplaceFullName.noName": "Poste de travail sans nom",
  "RoomFullName.noName": "Espace sans nom",
  "AssignPersonCheckListWorkplaceTransit.title": "Le poste de travail %{workplaceName} est un poste de passage",
  "AssignPersonCheckListWorkplaceTransit.RemoveIsTransit": 'Retirer le type "est de passage" du poste de travail',
  "AssignPersonCheckListWorkplaceAffectations.title": "Cette personne est d\xE9j\xE0 affect\xE9e sur d'autres postes de travail, voulez-vous supprimer les affectations suivantes pour %{personFullname}",
  "AssignPersonCheckListRoomAffectations.title": "Cette personne est d\xE9j\xE0 directement affect\xE9e \xE0 d'autres espaces, voulez-vous supprimer les affectations suivantes pour %{personFullname}",
  "AssignPersonCheckListDialogApplyButton.help": "Supprimer les affectations s\xE9lectionn\xE9es qui peuvent correspondre aux anciennes affectations de la personne",
  "AssignPersonCheckListDialogApplyButton.label": "Supprimer les affectations s\xE9lectionn\xE9es",
  "AssignPersonCheckListDialog.actions.close.label": "Fermer",
  "AssignPersonCheckListDialog.actions.close.help": "Fermer et ne supprimer aucune autre affectation",
  "AssignPersonCheckListBuildingAffectations.title": "Cette personne est d\xE9j\xE0 directement affect\xE9e sur d'autres b\xE2timents, voulez-vous supprimer les affectations suivantes pour %{personFullname}",
  "WorkplaceVirtualInventory.title": "Inventaire virtuel du poste de travail",
  "WorkplacePhysicalInventory.title": "Inventaire physique du poste de travail",
  "WorkplaceTypeSeatsCount.label": "Nombre de places assises",
  "WorkplaceTypeSeatsCount.help": "Le nombre de place assise comptabilis\xE9 pour ce type de poste de travail",
  "WorkplaceTypeCarbonFootprintCount.label": "Empreinte Carbone",
  "WorkplaceTypeCarbonFootprintCount.help": "L'empreinte carbone est la quantit\xE9 de gaz \xE0 effet de serre \xE9mise par les objets du mobilier de ce type de poste de travail",
  "DeleteWorkplace.help": "Supprimer le poste de travail : [ %{name} ], les affectations seront aussi supprim\xE9es",
  "AddPersonToWorkplace.text": "Affecter une personne",
  "AddPersonToWorkplace.help": "Ajouter une affectation \xE0 ce poste de travail, vous pouvez ajouter plusieurs affectations pour le m\xEAme poste de travail",
  "MouvementMatrixImport.errors.noSheet": "Impossible de trouver la feuille excel avec le nom %{name} [%{objectTypeName}]",
  "RoomTypeGroupMapFilter.Empty": "Il n'y a aucun groupe de type d'espace associ\xE9 aux espaces via les type d'espaces, vous pouvez en ajouter en modifiant un groupe de type d'espace et en y ajoutant associant un type d'espace, puis vous pourrez contr\xF4ler leur affichage depuis cette section",
  "RoomTypeGroupLabel.exclude.tooltip": "Le groupe de typologie d'espace exclue les types d'espaces associ\xE9s",
  "RoomTypeGroupHelpTitle.exclude": "Le groupement de type d'espaces %{name} est de type exclusion. Il regroupe tous les espaces \xE0 l'exception des typologies d'espaces suivantes :",
  "RoomTypeGroupHelpTitle.include": "Le groupement de type d'espaces %{name} regroupe les typologies d'espaces suivantes :",
  "RoomTypeGroupToRoomTypeLabel.exclude.tooltip": "La typologie d'espace est exclue",
  "RoomMapFilter.Empty": "Il n'y a aucun type d'espace associ\xE9 aux espaces, vous pouvez en ajouter en modifiant un espace et en y ajoutant associant un type, puis vous pourrez contr\xF4ler leur affichage depuis cette s\xE9ction",
  "LayoutFiltersTabZone.collapse.help": "Le menu est ferm\xE9, vous pouvez l'ouvrir en cliquant sur le premier ic\xF4ne afin de l'ouvrir et voir le d\xE9tail des \xE9l\xE9ments du plan",
  "LayoutFiltersTabOpenToggleIcon.open.true": "Fermer le menu du plan pour optimiser l'espace de l'affichage du plan",
  "LayoutFiltersTabOpenToggleIcon.open.false": "Ouvrir le menu du plan pour voir le d\xE9tail des informations en rapport avec le plan",
  "CompanyTypeLabel.notClassified": "Plateforme non classifi\xE9e",
  "BuildingMenuItem.menu.scenario": "Scenarios (%{count})",
  "SearchMenuItem.icon.tooltip": "Rechercher",
  "RemoveFromCartIconButton.help": "Retirer du panier",
  "CopyCartContentIntoTenant.buttons.single.paste.help": "Importer dans cette entreprise",
  "IndexContextMenuItem.navigation": "Navigation",
  "GlobalSearchIncludeScenarios.label": "Inclure les sc\xE9narios dans la recherche",
  "GlobalSearch.Input.placeholder": "Rechercher",
  "GlobalSearch.Start": "Vous pouvez rechercher par exemple des personnes, des espaces, des postes de travail, des objets ou d'autres entit\xE9s, la recherche commencera \xE0 partir du 2eme caract\xE8re",
  "GlobalSearch.NoResult": "Aucun r\xE9sultat n'a \xE9t\xE9 trouv\xE9 pour votre recherche",
  "GlobalSearch.close.help": "Effacer la recherche",
  "models.PartnerExportMappingConfigurationToFloor.singular": "Etage inclus dans la configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfigurationToFloor.plural": "Etages inclus dans la configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfigurationToFloor.determinant.defined": "l'\xE9tage inclus dans la configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfigurationToFloor.determinant.undefined": "un \xE9tage inclus dans la configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfigurationToFloor.determinants.defined": "les \xE9tages inclus dans la configurations des transformations des exports partenaires",
  "models.PartnerExportMappingConfigurationToFloor.determinants.undefined": "des \xE9tages inclus dans la configurations des transformations des exports partenaires",
  "models.PartnerExportMappingToRoomType.singular": "Transformation des exports partenaires pour les types d'espaces",
  "models.PartnerExportMappingToRoomType.plural": "Transformations des exports partenaires pour les types d'espaces",
  "models.PartnerExportMappingToRoomType.determinant.defined": "la transformation des exports partenaires pour les types d'espaces",
  "models.PartnerExportMappingToRoomType.determinant.undefined": "une transformation des exports partenaires pour les types d'espaces",
  "models.PartnerExportMappingToRoomType.determinants.defined": "les transformations des exports partenaires pour les types d'espaces",
  "models.PartnerExportMappingToRoomType.determinants.undefined": "des transformations des exports partenaires pour les types d'espaces",
  "models.PartnerExportMappingConfiguration.singular": "Configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfiguration.plural": "Configurations des transformations des exports partenaires",
  "models.PartnerExportMappingConfiguration.determinant.defined": "la configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfiguration.determinant.undefined": "une configuration de la transformation des exports partenaires",
  "models.PartnerExportMappingConfiguration.determinants.defined": "les configurations des transformations des exports partenaires",
  "models.PartnerExportMappingConfiguration.determinants.undefined": "des configurations des transformations des exports partenaires",
  "models.PartnerExportMapping.singular": "Transformation des exports partenaires",
  "models.PartnerExportMapping.plural": "Transformations des exports partenaires",
  "models.PartnerExportMapping.determinant.defined": "la transformation des exports partenaires",
  "models.PartnerExportMapping.determinant.undefined": "une transformation des exports partenaires",
  "models.PartnerExportMapping.determinants.defined": "les transformations des exports partenaires",
  "models.PartnerExportMapping.determinants.undefined": "des transformations des exports partenaires",
  "models.WorkplaceTypeItemType.singular": "type d'objet dans type de poste de travail",
  "models.WorkplaceTypeItemType.plural": "types d'objet dans type de poste de travail",
  "models.WorkplaceTypeItemType.determinant.defined": "le type d'objet dans le type de poste de travail",
  "models.WorkplaceTypeItemType.determinant.undefined": "un type d'objet dans un type de poste de travail",
  "models.WorkplaceTypeItemType.determinants.defined": "les types d'objet dans les types de poste de travail",
  "models.WorkplaceTypeItemType.determinants.undefined": "des types d'objet dans des types de poste de travail",
  "models.WorkplaceTypeItemType.properties.id.label": "Identifiant du type d'objet dans le type de poste de travail",
  "models.WorkplaceTypeItemType.properties.zIndex.label": "Indice de hauteur",
  "models.WorkplaceTypeItemType.properties.zIndex.description": "L'indice de hauteur permet de d\xE9finir l'ordre d'affichage des types d'objets, plus l'indice est grand plus l'objet sera au dessus des autres",
  "models.WorkplaceTypeItemType.properties.physicalInventory.label": "Inventaire physique",
  "models.WorkplaceTypeItemType.properties.physicalInventory.description": "Si cette option est coch\xE9e pour chaque poste de travail un objet physique sera cr\xE9\xE9 dans Surfy, cet objet pourra avoir une r\xE9f\xE9rence unique, dans tous les cas l'inventaire du b\xE2timent sera \xE0 jour",
  "models.WorkplaceTypeItemType.properties.seatsCount.label": "Nombre de places assise",
  "models.WorkplaceTypeItemType.properties.seatsCount.description": "Permet de d\xE9finir le nombre de places assises disponibles dans le type de poste de travail pour ce type d'objet",
  "models.WorkplaceType.singular": "type de poste de travail",
  "models.WorkplaceType.plural": "types de poste de travail",
  "models.WorkplaceType.determinant.defined": "le type de poste de travail",
  "models.WorkplaceType.determinant.undefined": "un type de poste de travail",
  "models.WorkplaceType.determinants.defined": "les types de poste de travail",
  "models.WorkplaceType.determinants.undefined": "des types de poste de travail",
  "models.WorkplaceType.properties.id.label": "Identifiant de la typologie du poste de travail",
  "models.WorkplaceType.properties.id.description": "",
  "models.WorkplaceType.properties.name.label": "Nom du type de poste de travail",
  "models.WorkplaceType.properties.name.description": "",
  "models.WorkplaceType.views.editor.help": "Editer les formes et l'emplacement des types d'objet pour le type de poste de travail %{name}",
  "models.WorkplaceType.views.editor.label": "Editer les formes",
  "models.WorkplaceType.views.avatar.help": "Voir la forme du type de poste de travail %{name}",
  "models.WorkplaceType.views.avatar.label": "Voir la forme",
  "models.WorkplaceType.views.dq-not-used.label": "Non utilis\xE9s",
  "models.WorkplaceType.views.dq-not-used.help": "Lister tous les types de poste de travail non utilis\xE9s via des postes de travail",
  "models.WorkplaceAffectation.singular": "Affectation au poste de travail",
  "models.WorkplaceAffectation.plural": "Affectations au poste de travail",
  "models.WorkplaceAffectation.description": "Permet d'attribuer un poste de travail fixe \xE0 une personne",
  "models.WorkplaceAffectation.determinant.defined": "l'affectation au poste de travail",
  "models.WorkplaceAffectation.determinant.undefined": "une affectation au poste de travail",
  "models.WorkplaceAffectation.determinants.defined": "les affectations au poste de travail",
  "models.WorkplaceAffectation.determinants.undefined": "des affectations au poste de travail",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.help": "Importer les matrices de transfert des postes de travail",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.label": "Import matrice de transfert",
  "models.Workplace.singular": "poste de travail",
  "models.Workplace.plural": "postes de travail",
  "models.Workplace.determinant.defined": "le poste de travail",
  "models.Workplace.determinant.undefined": "un poste de travail",
  "models.Workplace.determinants.defined": "les postes de travail",
  "models.Workplace.determinants.undefined": "des postes de travail",
  "models.Workplace.views.assign-current-user.label": "Occuper le poste de travail",
  "models.Workplace.views.assign-current-user.help": "Occuper le poste de travail %{name}",
  "models.Workplace.properties.id.label": "Identifiant du poste de travail",
  "models.Workplace.properties.id.description": "",
  "models.Workplace.properties.color.label": "Couleur",
  "models.Workplace.properties.color.description": "La couleur que prendra le type de poste de travail sur le plan",
  "models.Workplace.properties.name.label": "Nom du poste de travail",
  "models.Workplace.properties.name.description": "Le nom du poste de travail est utilis\xE9 pour l'identifier plus simplement",
  "models.Workplace.properties.isFlex.label": "Est en flex ?",
  "models.Workplace.properties.isFlex.description": "Si ce poste est utilis\xE9 en mode Flex",
  "models.Workplace.properties.isShared.label": "Est partag\xE9 ?",
  "models.Workplace.properties.isShared.description": "Si ce poste est partag\xE9 par plusieurs personnes, ce champ automatique est valid\xE9 d\xE8s qu'il y a au moins 2 affectations sur le poste de travail",
  "models.Workplace.properties.isTransit.label": "Est de passage ?",
  "models.Workplace.properties.isTransit.description": "Si ce poste est de passage, ce poste sera exclu des postes de travail libres sans \xEAtre r\xE9servable en flex, un poste de passage permet d'avoir un poste de travail disponible pour tout ceux qui souhaitent l'utiliser sans \xEAtre inclus dans un syst\xE8me de r\xE9servation",
  "models.Workplace.properties.isBookable.label": "Est r\xE9servable ?",
  "models.Workplace.properties.isBookable.description": "Si ce poste de travail est reservable dans un syst\xE8me de r\xE9servation",
  "models.Workplace.properties.position.label": "Position",
  "models.Workplace.properties.position.description": "La position du poste de travail dans l'espace",
  "models.Workplace.properties.rotation.label": "Rotation",
  "models.Workplace.properties.rotation.description": "L'angle de rotation du poste de travail dans l'espace",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.label": "Taux d'affectation moyen",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.description": "Taux d'affectation moyen du poste de travail en fonction de l'affectation des jours de pr\xE9sence des personnes",
  "models.Workplace.properties.workplaceAffectationsCount.label": "Nombre d'affectations",
  "models.Workplace.properties.workplaceAffectationsCount.description": "Nombre d'affectations sur le poste de travail",
  "models.Workplace.properties.comment.label": "Commentaire",
  "models.Workplace.properties.comment.description": "Une information suppl\xE9mentaire sur le poste de travail",
  "models.Workplace.properties.room.label": "Espace du poste de travail",
  "models.UserRegistrationTenantRuleToJupRole.singular": "Association de r\xE8gle d'authentification \xE0 r\xF4le",
  "models.UserRegistrationTenantRuleToJupRole.plural": "Associations de r\xE8gle d'authentification \xE0 r\xF4le",
  "models.UserRegistrationTenantRuleToJupRole.determinant.defined": "l'association de r\xE8gle d'authentification \xE0 r\xF4le",
  "models.UserRegistrationTenantRuleToJupRole.determinant.undefined": "une association de r\xE8gle d'authentification \xE0 r\xF4le",
  "models.UserRegistrationTenantRuleToJupRole.determinants.defined": "les associations de r\xE8gle d'authentification \xE0 r\xF4le",
  "models.UserRegistrationTenantRuleToJupRole.determinants.undefined": "des associations de r\xE8gle d'authentification \xE0 r\xF4le",
  "models.UserRegistrationTenantRuleToContentRole.singular": "Association de r\xE8gle d'authentification \xE0 r\xF4le de contenu",
  "models.UserRegistrationTenantRuleToContentRole.plural": "Associations de r\xE8gle d'authentification \xE0 r\xF4le de contenu",
  "models.UserRegistrationTenantRuleToContentRole.determinant.defined": "l'association de r\xE8gle d'authentification \xE0 r\xF4le de contenu",
  "models.UserRegistrationTenantRuleToContentRole.determinant.undefined": "une association de r\xE8gle d'authentification \xE0 r\xF4le de contenu",
  "models.UserRegistrationTenantRuleToContentRole.determinants.defined": "les associations de r\xE8gle d'authentification \xE0 r\xF4le de contenu",
  "models.UserRegistrationTenantRuleToContentRole.determinants.undefined": "des associations de r\xE8gle d'authentification \xE0 r\xF4le de contenu",
  "models.UserRegistrationTenantRule.singular": "R\xE8gle d'authentification",
  "models.UserRegistrationTenantRule.plural": "R\xE8gles d'authentification",
  "models.UserRegistrationTenantRule.determinant.defined": "la r\xE8gle d'authentification",
  "models.UserRegistrationTenantRule.determinant.undefined": "une r\xE8gle d'authentification",
  "models.UserRegistrationTenantRule.determinants.defined": "les r\xE8gles d'authentification",
  "models.UserRegistrationTenantRule.determinants.undefined": "des r\xE8gles d'authentification",
  "models.UserRegistrationTenantRule.properties.domains.label": "Domaines",
  "models.UserRegistrationTenantRule.properties.domains.description": "S\xE9parer les domaines avec des espaces et inclure l'arobase",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.label": "Associer automatiquement les r\xF4les",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.description": "Associer automatiquement les r\xF4les et les r\xF4les de contenu aux utilisateurs qui respectent cette r\xE8gle",
  "models.UserCompany.singular": "utilisateur de l'entreprise",
  "models.UserCompany.plural": "utilisateurs de l'entreprise",
  "models.UserCompany.description": "Les utilisateurs de l'entreprise ont acc\xE8s \xE0 la plateforme Surfy de leur entreprise",
  "models.UserCompany.determinant.defined": "l'utilisateur de l'entreprise",
  "models.UserCompany.determinant.undefined": "un utilisateur de l'entreprise",
  "models.UserCompany.determinants.defined": "les utilisateurs de l'entreprise",
  "models.UserCompany.determinants.undefined": "des utilisateurs de l'entreprise",
  "models.UserCompany.properties.id.label": "Identifiant de l'utilisateur de l'entreprise",
  "models.UserCompany.properties.buildingOwners.label": "B\xE2timents propri\xE9taires",
  "models.UserCompany.properties.buildingOwners.description": "B\xE2timents dont l'utilisateur est le propri\xE9taire",
  "models.User.singular": "utilisateur",
  "models.User.plural": "utilisateurs",
  "models.User.determinant.defined": "l'utilisateur",
  "models.User.determinant.undefined": "un utilisateur",
  "models.User.determinants.defined": "les utilisateurs",
  "models.User.determinants.undefined": "des utilisateurs",
  "models.User.properties.id.label": "Identifiant de l'utilisateur",
  "models.User.properties.id.description": "",
  "models.User.properties.firstname.label": "Pr\xE9nom",
  "models.User.properties.firstname.description": "Le pr\xE9nom de l'utilisateur",
  "models.User.properties.lastname.label": "Nom de famille",
  "models.User.properties.lastname.description": "Le nom de famille de l'utilisateur",
  "models.User.properties.email.label": "Email",
  "models.User.properties.email.description": "Le courriel utilis\xE9 par l'utilisateur pour les correspondances ou pour l'authentification",
  "models.Structure.singular": "structure",
  "models.Structure.plural": "structures",
  "models.Structure.determinant.defined": "la structure",
  "models.Structure.determinant.undefined": "une structure",
  "models.Structure.determinants.defined": "les structures",
  "models.Structure.determinants.undefined": "des structures",
  "models.Structure.properties.nom.label": "Nom de la structure",
  "models.Structure.properties.nom.description": "Pour retrouver et r\xE9utiliser la structure facilement",
  "models.Structure.properties.transform.label": "Transformation",
  "models.Structure.properties.transform.description": "Transformation de la structure pour la calibrer sur une carte",
  "models.Structure.views.editor.label": "Editer la forme",
  "models.Structure.views.editor.help": "Modifier la forme de la structure",
  "models.Structure.views.gmap-calibrate.label": "Calibrer la structure sur une carte",
  "models.Structure.views.gmap-calibrate.help": "Calibrer la structure sur une carte afin d'associer des coordonn\xE9es g\xE9ographiques",
  "models.RoomTypeGroupToRoomType.singular": "association groupe de typologie d'espace \xE0 typologie d'espace",
  "models.RoomTypeGroupToRoomType.plural": "associations groupes de typologies d'espace \xE0 typologies d'espace",
  "models.RoomTypeGroupToRoomType.determinant.defined": "l'association groupe de typologie d'espace \xE0 typologie d'espace",
  "models.RoomTypeGroupToRoomType.determinant.undefined": "une association groupe de typologie d'espace \xE0 typologie d'espace",
  "models.RoomTypeGroupToRoomType.determinants.defined": "les associations groupes de typologies d'espace \xE0 typologies d'espace",
  "models.RoomTypeGroupToRoomType.determinants.undefined": "des associations groupes de typologies d'espace \xE0 typologies d'espace",
  "models.RoomTypeGroupFloor.singular": "groupe de typologie d'espace des \xE9tages",
  "models.RoomTypeGroupFloor.plural": "groupes de typologies d'espace des \xE9tages",
  "models.RoomTypeGroupFloor.determinant.defined": "le groupe de typologie d'espace des \xE9tages",
  "models.RoomTypeGroupFloor.determinant.undefined": "un groupe de typologie d'espace des \xE9tages",
  "models.RoomTypeGroupFloor.determinants.defined": "le groupe de typologie d'espace des \xE9tages",
  "models.RoomTypeGroupFloor.determinants.undefined": "des groupes de typologies d'espace des \xE9tages",
  "models.RoomTypeGroupBuilding.singular": "groupe de typologie d'espace des b\xE2timents",
  "models.RoomTypeGroupBuilding.plural": "groupes de typologies d'espace des b\xE2timents",
  "models.RoomTypeGroupBuilding.determinant.defined": "le groupe de typologie d'espace des b\xE2timents",
  "models.RoomTypeGroupBuilding.determinant.undefined": "un groupe de typologie d'espace des b\xE2timents",
  "models.RoomTypeGroupBuilding.determinants.defined": "le groupe de typologie d'espace des b\xE2timents",
  "models.RoomTypeGroupBuilding.determinants.undefined": "des groupes de typologies d'espace des b\xE2timents",
  "models.RoomTypeGroup.singular": "groupe de typologie d'espace",
  "models.RoomTypeGroup.plural": "groupes de typologie d'espace",
  "models.RoomTypeGroup.determinant.defined": "le groupe de typologie d'espace",
  "models.RoomTypeGroup.determinant.undefined": "un groupe de typologie d'espace",
  "models.RoomTypeGroup.determinants.defined": "les groupes de typologies d'espace",
  "models.RoomTypeGroup.determinants.undefined": "des groupes de typologies d'espace",
  "models.RoomTypeGroup.properties.id.label": "Identifiant du groupe de typologie d'espace",
  "models.RoomTypeGroup.properties.name.label": "Nom du groupe de typologie d'espace",
  "models.RoomTypeGroup.properties.code.label": "Code",
  "models.RoomTypeGroup.properties.color.label": "Couleur",
  "models.RoomTypeGroup.properties.exclude.label": "Exclure",
  "models.RoomTypeGroup.properties.exclude.description": "Exclure les typologies d'espace de ce groupe",
  "models.RoomTypeFloor.singular": "typologie d'espace des \xE9tages",
  "models.RoomTypeFloor.plural": "typologies d'espace des \xE9tages",
  "models.RoomTypeFloor.determinant.defined": "la typologie d'espace des \xE9tages",
  "models.RoomTypeFloor.determinant.undefined": "une typologie d'espace des \xE9tages",
  "models.RoomTypeFloor.determinants.defined": "les typologie d'espace des \xE9tages",
  "models.RoomTypeFloor.determinants.undefined": "des typologies d'espace des \xE9tages",
  "models.RoomTypeBuilding.singular": "typologie d'espace des b\xE2timents",
  "models.RoomTypeBuilding.plural": "typologies d'espace des b\xE2timents",
  "models.RoomTypeBuilding.determinant.defined": "la typologie d'espace des b\xE2timents",
  "models.RoomTypeBuilding.determinant.undefined": "une typologie d'espace des b\xE2timents",
  "models.RoomTypeBuilding.determinants.defined": "les typologie d'espace des b\xE2timents",
  "models.RoomTypeBuilding.determinants.undefined": "des typologies d'espace des b\xE2timents",
  "models.RoomType.singular": "typologie d'espace",
  "models.RoomType.plural": "typologies d'espace",
  "models.RoomType.determinant.defined": "la typologie d'espace",
  "models.RoomType.determinant.undefined": "une typologie d'espace",
  "models.RoomType.determinants.defined": "les typologies d'espace",
  "models.RoomType.determinants.undefined": "des typologies d'espace",
  "models.RoomType.properties.id.label": "Identifiant de la typologie d'espace",
  "models.RoomType.properties.name.label": "Nom de la typologie d'espace",
  "models.RoomType.properties.color.label": "Couleur en 2d",
  "models.RoomType.properties.color.description": "La couleur du type d'espace permet de differencier chaque type sur le plan en 2d",
  "models.RoomType.properties.color3d.label": "Couleur en 3d",
  "models.RoomType.properties.color3d.description": "Permet de g\xE9rer la couleur du type d'espace en 3d, cette option est uniquement applicable \xE0 la vision 3d de l'\xE9tage",
  "models.RoomType.properties.displayWallsOn3d.label": "Afficher les murs",
  "models.RoomType.properties.displayWallsOn3d.description": "Permet d'afficher ou non les murs de l'espace dans le plan 3d de l'\xE9tage, les murs non affich\xE9s sont en pointill\xE9s en 2d, cela permet d'avoir une vue plus agr\xE9able notament pour les open spaces",
  "models.RoomType.properties.icon.label": "Ic\xF4ne",
  "models.RoomType.properties.icon.description": "L'ic\xF4ne pour le type d'espace permet d'afficher pour ce type d'espace une ic\xF4ne dans les plans en 2d et en 3d \xE0 la place des informations classiques sur le plan, associ\xE9 \xE0 la couleur de fond cela permet de rendre la lecture du plan plus agr\xE9able",
  "models.RoomType.properties.cadence.label": "Cadence",
  "models.RoomType.properties.cadence.description": "La cadence est une valeur num\xE9rique permettant d'indiquer la difficult\xE9 de nettoyage de la typologie de l'espace. Elle est \xE9gale au nombre de m\xB2 pouvant \xEAtre trait\xE9s en une heure dans cette typologie (circulation, laboratoire, ...)",
  "models.RoomType.properties.isBookable.label": "Est r\xE9servable ?",
  "models.RoomType.properties.isBookable.description": "Cocher cette case si ce type d'espace est r\xE9servable",
  "models.RoomPointSegmentType.singular": "Type de segment",
  "models.RoomPointSegmentType.plural": "Types de segment",
  "models.RoomPointSegmentType.determinant.defined": "le type de segment",
  "models.RoomPointSegmentType.determinant.undefined": "un type de segment",
  "models.RoomPointSegmentType.determinants.defined": "les types de segment",
  "models.RoomPointSegmentType.determinants.undefined": "des types de segment",
  "models.RoomPointSegment.singular": "qualification de segment",
  "models.RoomPointSegment.plural": "qualifications de segments",
  "models.RoomPointSegment.determinant.defined": "la qualification de segment",
  "models.RoomPointSegment.determinant.undefined": "une qualification de segment",
  "models.RoomPointSegment.determinants.defined": "les qualifications de segment",
  "models.RoomPointSegment.determinants.undefined": "des qualifications de segment",
  "models.RoomPointSegment.properties.reversePoints.label": "Inverser les points",
  "models.RoomPointSegment.properties.reversePoints.description": "Inverser les points du segment afin d'avoir l'affichage par exemple des portes dans le bon sens",
  "models.RoomPointSegment.properties.displayBothSides.label": "Afficher des deux c\xF4t\xE9s",
  "models.RoomPointSegment.properties.displayBothSides.description": "Afficher le segment des deux c\xF4t\xE9s du segment",
  "models.RoomPointSegment.views.dq-not-uniq.label": "Segments des points non uniques",
  "models.RoomPointSegment.views.dq-not-uniq.help": "Permet de v\xE9rifier qu'il n'y a pas de doublon exact de segment sur les m\xEAmes points",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.label": "Les points des segments sont sur 2 \xE9tages diff\xE9rents",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.help": "Permet de v\xE9rifier que les points des segments sont sur le m\xEAme \xE9tage",
  "models.RoomPointRoom.singular": "Association entre un point et un espace",
  "models.RoomPointRoom.plural": "Associations entre un point et un espace",
  "models.RoomPointRoom.determinant.defined": "l'association entre un point et un espace",
  "models.RoomPointRoom.determinant.undefined": "un point",
  "models.RoomPointRoom.description": "L'association entre un point et un espace permet de conserver l'ordre des points dans un espace afin de constituer un polyon",
  "models.RoomPointRoom.properties.id.label": "Identifiant de l'association entre un point et un espace",
  "models.RoomPointRoom.properties.id.description": "",
  "models.RoomPointRoom.properties.roomId.label": "Identifiant de l'espace",
  "models.RoomPointRoom.properties.roomId.description": "",
  "models.RoomPointRoom.properties.externalId.label": "Identifiant externe",
  "models.RoomPointRoom.properties.externalId.description": "",
  "models.RoomPointRoom.properties.sortIndex.label": "Index de tri",
  "models.RoomPointRoom.properties.sortIndex.description": "",
  "models.RoomPointRoom.properties.roomPointId.label": "Identifiant du point",
  "models.RoomPointRoom.properties.roomPointId.description": "",
  "models.RoomPoint.singular": "point des espaces",
  "models.RoomPoint.plural": "points des espaces",
  "models.RoomPoint.determinant.defined": "le point des espaces",
  "models.RoomPoint.determinant.undefined": "un point des espaces",
  "models.RoomPoint.properties.id.label": "Identifiant du point des espaces",
  "models.RoomPoint.properties.x.label": "x",
  "models.RoomPoint.properties.x.description": "Coordonn\xE9e sur l'axe X",
  "models.RoomPoint.properties.y.label": "y",
  "models.RoomPoint.properties.y.description": "Coordonn\xE9e sur l'axe Y",
  "models.RoomPoint.properties.sort_index.label": "Ordre",
  "models.RoomPoint.properties.sort_index.description": "L'index utilis\xE9 pour le tri",
  "models.RoomPoint.properties.room.description": "",
  "models.RoomPoint.properties.externalId.label": "Identifiant externe",
  "models.RoomPoint.properties.externalId.description": "",
  "models.RoomPoint.views.dq-uniq-position.label": "Position unique des points",
  "models.RoomPoint.views.dq-uniq-position.help": "Permet de v\xE9rifier qu'il n'y a pas de doublon exact de position sur les points",
  "models.RoomPoint.views.dq-not-used.label": "Points non utilis\xE9s",
  "models.RoomPoint.views.dq-not-used.help": "Permet de voir les points qui ne sont pas utilis\xE9s dans les espaces",
  "models.RoomConnector.singular": "Connecteur d'espace",
  "models.RoomConnector.plural": "Connecteurs d'espace",
  "models.RoomConnector.determinant.defined": "le connecteur d'espace",
  "models.RoomConnector.determinant.undefined": "un connecteur d'espace",
  "models.RoomConnector.determinants.defined": "les connecteurs d'espace",
  "models.RoomConnector.determinants.undefined": "des connecteurs d'espace",
  "models.RoomConnector.description": "Les connecteurs d'espaces permettent de cr\xE9er un lien entre plusieurs espaces dans des \xE9tages diff\xE9rents",
  "models.RoomConnector.properties.id.label": "Identifiant du connecteur d'espace",
  "models.RoomConnector.properties.name.label": "Nom du connecteur d'espace",
  "models.RoomConnector.properties.waitTime.label": "Temps d'attente moyen",
  "models.RoomConnector.properties.waitTime.description": "Le temps d'attente moyenne avant que le connecteur d'espace soit disponible",
  "models.RoomConnector.properties.timePerFloor.label": "Temps entre chaque \xE9tage",
  "models.RoomConnector.properties.timePerFloor.description": "Le temps n\xE9cessaire pour pouvoir passer de chaque \xE9tage au prochain",
  "models.RoomAffectation.singular": "Affectation d'espace",
  "models.RoomAffectation.plural": "Affectations d'espace",
  "models.RoomAffectation.description": "Permet d'affecter une personne \xE0 un espace simple",
  "models.RoomAffectation.determinant.defined": "l'affectation d'espace",
  "models.RoomAffectation.determinant.undefined": "une affectation d'espace",
  "models.RoomAffectation.determinants.defined": "les affectations d'espace",
  "models.RoomAffectation.determinants.undefined": "des affectations d'espace",
  "models.RoomAffectation.views.room-mouvement-matrix-import.help": "Importer les matrices de transfert des espaces",
  "models.RoomAffectation.views.room-mouvement-matrix-import.label": "Import matrice de transfert",
  "models.Room.singular": "espace",
  "models.Room.plural": "espaces",
  "models.Room.determinant.defined": "l'espace",
  "models.Room.determinant.undefined": "un espace",
  "models.Room.determinants.defined": "les espaces",
  "models.Room.determinants.undefined": "des espaces",
  "models.Room.description": "Les espaces sont des lieux de travail ou des zones afin de d\xE9couper un \xE9tage en sous espaces",
  "models.Room.views.map.help": "Voir le plan de l'espace %{name}",
  "models.Room.views.map.label": "Plan",
  "models.Room.views.dq-uniq-name.help": "Propose des noms pour les espaces qui n'ont pas de nom ou le nom n'est pas unique dans un m\xEAme \xE9tage",
  "models.Room.views.dq-uniq-name.label": "Proposition de noms pour les espaces",
  "models.Room.views.dq-no-point.help": "Les espaces qui ont 0, 1 ou 2 points et qui devraient donc avoir une superficie nulle",
  "models.Room.views.dq-no-point.label": "Les espaces sans assez de points",
  "models.Room.views.dq-capacity-equals-seats-count.help": "Les espaces qui ont une capacit\xE9 hors assises \xE9gale au nombre de places assises et qui ont une capacit\xE9 totale doubl\xE9e",
  "models.Room.views.dq-capacity-equals-seats-count.label": "Les espaces avec une capacit\xE9 hors assises \xE9gale au nombre de places assises",
  "models.Room.views.dq-capacity-gt-0.help": "Permet de voir s'il y a des incoh\xE9r\xE9nce dans les capacit\xE9s des espaces ou d\xE9t\xE9cter par exemple le mobilier qui n'a pas encore de place assises",
  "models.Room.views.dq-capacity-gt-0.label": "Les espaces qui ont une capacit\xE9 hors assises diff\xE9rent de 0",
  "models.Room.views.meeting-rooms.help": "Voir et naviguer dans les salles de r\xE9union",
  "models.Room.views.meeting-rooms.label": "Salles de r\xE9union",
  "models.Room.properties.prettyName.label": "Nom d'affichage",
  "models.Room.properties.prettyName.description": "Permet d'avoir un nom d'affichage en plus du nom technique de l'espace, par exemple pour les salles de r\xE9unions",
  "models.Room.properties.id.label": "Identifiant de l'espace",
  "models.Room.properties.livePeopleCount.label": "Nombre de personnes dans l'espace en temps r\xE9el",
  "models.Room.properties.livePeopleCount.description": "Cette valeur est mise \xE0 jour par les capteurs de comptage des personnes pr\xE9sent dans l'espace et fournit le nombre de personnes pr\xE9sent en temps r\xE9el dans l'espace",
  "models.Room.properties.picture.label": "Photo de l'espace",
  "models.Room.properties.picture.description": "La photo de l'espace permet de le visualiser facilement",
  "models.Room.properties.capacity.label": "Capacit\xE9 hors assises",
  "models.Room.properties.capacity.description": "La capacit\xE9 declar\xE9e peut \xEAtre utilis\xE9 pour d\xE9finir le nombre de places disponibles dans un espace ou pour conna\xEEtre le maximum de personnes qu'on peut mettre dans un espace, ce chiffre s'ajoute au nombre de places assises pour donner la capacit\xE9 totale",
  "models.Room.properties.workplacesCount.label": "Nombre de postes de travail",
  "models.Room.properties.workplacesCount.description": "Le nombre de postes de travail dans l'espace est calcul\xE9 automatiquement",
  "models.Room.properties.workplacesRatio.label": "Ratio par poste de travail",
  "models.Room.properties.workplacesRatio.description": "Le ratio par poste de travail est le nombre de m\xE9tres carr\xE9s de l'espace divis\xE9 par le nombre de postes de travail, cette valeur est calcul\xE9e automatiquement",
  "models.Room.properties.peopleCount.label": "Nombre d'affectations",
  "models.Room.properties.peopleCount.description": "Le nombre de personnes affect\xE9es dans l'espace, soit directement, soit \xE0 travers un poste de travail",
  "models.Room.properties.peopleRatio.label": "Ratio d'occupation",
  "models.Room.properties.peopleRatio.description": "Le ratio d'occupation est le nombre de m\xE9tres carr\xE9s de l'espace divis\xE9 par le nombre de personnes affect\xE9es aux espaces, soit directement, soit via un poste de travail , cette valeur est calcul\xE9e",
  "models.Room.properties.freeWorkplacesCount.label": "Nombre de postes libres",
  "models.Room.properties.freeWorkplacesCount.description": "Nombre de postes libres dans l'espace",
  "models.Room.properties.flexWorkplacesCount.label": "Nombre de postes flex",
  "models.Room.properties.flexWorkplacesCount.description": "Nombre de postes flex dans l'espace",
  "models.Room.properties.sharedWorkplacesCount.label": "Nombre de postes de travail partag\xE9s",
  "models.Room.properties.sharedWorkplacesCount.description": "Nombre de postes de travail partag\xE9s par au moins 2 personnes",
  "models.Room.properties.transitWorkplacesCount.label": "Nombre de postes de travail de passage",
  "models.Room.properties.transitWorkplacesCount.description": "Nombre de postes de travail de passage, ces postes ne sont pas comptabilis\xE9s dans les postes libres et ne sont pas en flex",
  "models.Room.properties.sharedWorkplacesRatio.label": "Taux de postes de travail partag\xE9s",
  "models.Room.properties.sharedWorkplacesRatio.description": "Taux de postes de travail partag\xE9s par au moins 2 personnes par rapport \xE0 l'ensemble des postes de travail de l'espace",
  "models.Room.properties.flexRatio.label": "Taux de postes de travail en flex",
  "models.Room.properties.flexRatio.description": "Le taux de poste de travail en flex est calcul\xE9 en divisant le nombre de postes de travail en flex par le nombre total de postes de travail",
  "models.Room.properties.name.label": "Nom de l'espace",
  "models.Room.properties.name.description": "Le nom d'espace est utilis\xE9 pour le d\xE9finir et le retrouver facilement.",
  "models.Room.properties.area.label": "Surface",
  "models.Room.properties.area.description": "La surface qualifi\xE9e au sol pour cet espace",
  "models.Room.properties.perimeter.label": "P\xE9rim\xE8tre",
  "models.Room.properties.perimeter.description": "Le p\xE9rim\xE8tre d'espace repr\xE9sente son contour",
  "models.Room.properties.costCenter.description": "Permet de connaitre \xE0 quel centre de co\xFBt associer l'espace quand il s'agit de g\xE9rer la refacturation au centre de co\xFBt par espace",
  "models.Room.properties.distributionCostType.description": "Permet de d\xE9terminer le mode de calcul de la cl\xE9 de r\xE9partition des co\xFBts",
  "models.Room.properties.info.label": "Information suppl\xE9mentaire",
  "models.Room.properties.info.description": "Permet de conserver des informations suppl\xE9mentaires de type texte sur l'espace",
  "models.Room.properties.bookingEmail.label": "Email utilis\xE9 pour la r\xE9servation de cet espace",
  "models.Room.properties.bookingEmail.description": "Ce courriel permet de r\xE9server cette salle via le syst\xE8me de messagerie",
  "models.Room.properties.keyCylinderCode.label": "Num\xE9ro de cylindre",
  "models.Room.properties.keyCylinderCode.description": "Le num\xE9ro de cylindre permet de d\xE9finir le num\xE9ro de cylindre de la serrure de la porte de l'espace ou un \xE9lement en relation avec l'acc\xE8s physique de l'espace",
  "models.Room.reports.mouvementMatrix.fileName": "Matrice de transfert",
  "models.Room.reports.mouvementMatrix.help": "Cr\xE9er une matrice de transfert dans excel permettant de r\xE9aliser facilement les d\xE9placements de vos collaborateurs",
  "models.PersonWorkingLocation.singular": "Emplacement de travail des personnes",
  "models.PersonWorkingLocation.plural": "Emplacements de travail des personnes",
  "models.PersonWorkingLocation.determinant.defined": "l'emplacement de travail des personnes'",
  "models.PersonWorkingLocation.determinant.undefined": "un emplacement de travail des personnes",
  "models.PersonWorkingLocation.determinants.defined": "les emplacements de travail des personnes",
  "models.PersonWorkingLocation.determinants.undefined": "des emplacements de travail des personnes",
  "models.PersonWorkingLocation.description": "Un emplacement de travail des personnes d\xE9finie le lieu de travail des personnes",
  "models.PersonWorkingLocation.views.my-planning.help": "G\xE9rer mon planning des prochaines semaines",
  "models.PersonWorkingLocation.views.my-planning.label": "G\xE9rer mon planning",
  "models.PersonToWorkplaceBooking.singular": "R\xE9servation au poste de travail des personnes",
  "models.PersonToWorkplaceBooking.plural": "R\xE9servations au poste de travail des personnes",
  "models.PersonToWorkplaceBooking.description": "Les r\xE9servations des postes de travail des personnes sont enregistr\xE9es et disponibles avec les dates de d\xE9but et de fin de r\xE9servation",
  "models.PersonToWorkplaceBooking.determinant.defined": "la r\xE9servation au poste de travail des personnes",
  "models.PersonToWorkplaceBooking.determinant.undefined": "une r\xE9servation au poste de travail des personnes",
  "models.PersonToWorkplaceBooking.determinants.defined": "les r\xE9servations au poste de travail des personnes",
  "models.PersonToWorkplaceBooking.determinants.undefined": "des r\xE9servations au poste de travail des personnes",
  "models.PersonToWorkplaceBooking.properties.startDatetime.label": "D\xE9but de la r\xE9servation",
  "models.PersonToWorkplaceBooking.properties.startDatetime.description": "La date et l'heure de d\xE9but de la r\xE9servation",
  "models.PersonToWorkplaceBooking.properties.endDatetime.label": "Fin de la r\xE9servation",
  "models.PersonToWorkplaceBooking.properties.endDatetime.description": "La date et l'heure de fin de la r\xE9servation",
  "models.PersonToWorkplaceBooking.views.dashboard-index.label": "Tableau de bord",
  "models.PersonToWorkplaceBooking.views.dashboard-index.help": "Tableau de bord des r\xE9servations au poste de travail des personnes",
  "models.PersonToRoomBooking.singular": "R\xE9servation \xE0 l'espace des personnes",
  "models.PersonToRoomBooking.plural": "R\xE9servations \xE0 l'espace des personnes",
  "models.PersonToRoomBooking.description": "Les r\xE9servations aux espaces des personnes sont enregistr\xE9es et disponibles avec les dates de d\xE9but et de fin de r\xE9servation",
  "models.PersonToRoomBooking.determinant.defined": "la r\xE9servation \xE0 l'espace des personnes",
  "models.PersonToRoomBooking.determinant.undefined": "une r\xE9servation \xE0 l'espace des personnes",
  "models.PersonToRoomBooking.determinants.defined": "les r\xE9servations \xE0 l'espace des personnes",
  "models.PersonToRoomBooking.determinants.undefined": "des r\xE9servations \xE0 l'espace des personnes",
  "models.PersonToRoomBooking.properties.startDatetime.label": "D\xE9but de la r\xE9servation",
  "models.PersonToRoomBooking.properties.startDatetime.description": "La date et l'heure de d\xE9but de la r\xE9servation",
  "models.PersonToRoomBooking.properties.endDatetime.label": "Fin de la r\xE9servation",
  "models.PersonToRoomBooking.properties.endDatetime.description": "La date et l'heure de fin de la r\xE9servation",
  "models.PersonToPersonType.singular": "Type de relation entre personnes",
  "models.PersonToPersonType.plural": "Types de relation entre personnes",
  "models.PersonToPersonType.determinant.defined": "le type de relation entre personnes",
  "models.PersonToPersonType.determinant.undefined": "un type de relation entre personnes",
  "models.PersonToPersonType.determinants.defined": "les types de relation entre personnes",
  "models.PersonToPersonType.determinants.undefined": "des types de relation entre personnes",
  "models.PersonToPersonType.properties.labelForward.label": "Relation naturelle [en avant]",
  "models.PersonToPersonType.properties.labelForward.description": "La d\xE9finition de la relation dans le sens naturel, par exemple entre un p\xE8re et son fils, la d\xE9finition naturelle est 'est le p\xE8re de'",
  "models.PersonToPersonType.properties.labelBackward.label": "Relation inverse",
  "models.PersonToPersonType.properties.labelBackward.description": "La d\xE9finition de la relation dans le sens inverse du sens naturel, par exemple entre un p\xE8re et son fils, la d\xE9finition inverse du sens naturel est 'est le fils de'",
  "models.PersonToPerson.singular": "Relation personne \xE0 personne",
  "models.PersonToPerson.plural": "Relations personne \xE0 personne",
  "models.PersonToPerson.determinant.defined": "la relation de personne \xE0 personne",
  "models.PersonToPerson.determinant.undefined": "une relation de personne \xE0 personne",
  "models.PersonToPerson.determinants.defined": "les relations de personne \xE0 personne",
  "models.PersonToPerson.determinants.undefined": "des relations de personne \xE0 personne",
  "models.PersonToPerson.properties.personSource.label": "Personne source",
  "models.PersonToPerson.properties.personTarget.label": "Personne destination",
  "models.PersonToDimensionBooking.singular": "R\xE9servation au calque d'affectation des personnes",
  "models.PersonToDimensionBooking.plural": "R\xE9servations au calque d'affectation des personnes",
  "models.PersonToDimensionBooking.description": "Les r\xE9servations aux calques d'affectation des personnes sont enregistr\xE9es et disponibles avec les dates de d\xE9but et de fin de r\xE9servation",
  "models.PersonToDimensionBooking.determinant.defined": "la r\xE9servation au calque d'affectation des personnes",
  "models.PersonToDimensionBooking.determinant.undefined": "une r\xE9servation au calque d'affectation des personnes",
  "models.PersonToDimensionBooking.determinants.defined": "les r\xE9servations au calque d'affectation des personnes",
  "models.PersonToDimensionBooking.determinants.undefined": "des r\xE9servations au calque d'affectation des personnes",
  "models.PersonToDimensionBooking.properties.startDatetime.label": "D\xE9but de la r\xE9servation",
  "models.PersonToDimensionBooking.properties.startDatetime.description": "La date et l'heure de d\xE9but de la r\xE9servation",
  "models.PersonToDimensionBooking.properties.endDatetime.label": "Fin de la r\xE9servation",
  "models.PersonToDimensionBooking.properties.endDatetime.description": "La date et l'heure de fin de la r\xE9servation",
  "models.PersonState.singular": "statut des personnes",
  "models.PersonState.plural": "statut des personnes",
  "models.PersonState.description": "Permet de d\xE9finir tous les types de contrat des personnes vis \xE0 vis de l'entreprise",
  "models.PersonState.determinant.defined": "le statut des personnes",
  "models.PersonState.determinant.undefined": "un statut des personnes",
  "models.PersonState.determinants.defined": "les statuts des personnes",
  "models.PersonState.determinants.undefined": "des statuts des personnes",
  "models.PersonState.properties.id.label": "Identifiant du statut des personnes",
  "models.PersonState.properties.name.label": "Nom du statut de la personne",
  "models.PersonToBuilding.singular": "Affection au b\xE2timent",
  "models.PersonToBuilding.plural": "affectations au b\xE2timent",
  "models.PersonToBuilding.description": "Permet d'attribuer une personne \xE0 un b\xE2timent, sans information suppl\xE9mentaire. L'affectation peut \xEAtre comptabilis\xE9e, ou non.",
  "models.PersonToBuilding.determinant.defined": "l'affection au b\xE2timent",
  "models.PersonToBuilding.determinant.undefined": "une affection au b\xE2timent",
  "models.PersonToBuilding.determinants.defined": "les affections au b\xE2timent",
  "models.PersonToBuilding.determinants.undefined": "des affections au b\xE2timent",
  "models.PersonToBuilding.properties.addToPeopleCount.label": "Comptabiliser l'affectation",
  "models.PersonToBuilding.properties.addToPeopleCount.description": "Ajouter cette affectation au nombre total des personnes affect\xE9es au b\xE2timent",
  "models.PersonSecurityProfile.singular": "profil de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.plural": "profils de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.description": "Permet de d\xE9finir les diff\xE9rents profils s\xE9curit\xE9 associables \xE0 des personnes",
  "models.PersonSecurityProfile.determinant.defined": "le profil de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.determinant.undefined": "un profil de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.determinants.defined": "les profils de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.determinants.undefined": "des profils de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.properties.id.label": "Identifiant du profil de s\xE9curit\xE9 des personnes",
  "models.PersonSecurityProfile.properties.name.label": "Nom du profil de s\xE9curit\xE9",
  "models.PersonSecurityProfile.properties.name.description": "Permet de d\xE9finir les diff\xE9rents profils s\xE9curit\xE9 associables \xE0 des personnes",
  "models.PersonSecurityProfile.properties.color.label": "Couleur du profil de s\xE9curit\xE9",
  "models.PersonSecurityProfile.properties.color.description": "Permet de colorier le poste de travail d'affectation et l'ic\xF4ne s\xE9curit\xE9 de la personne en fonction de son profil s\xE9curit\xE9",
  "models.PersonSecurityProfile.properties.icon.label": "Ic\xF4ne du profil de s\xE9curit\xE9",
  "models.PersonSecurityProfile.properties.icon.description": "Permet d'attribuer une ic\xF4ne \xE0 un profil s\xE9curit\xE9 afin de visualiser clairement les profils s\xE9curit\xE9 sur le plan ou dans les listes",
  "models.PersonCompanyToRoomType.singular": "Type d'espace du prestataire",
  "models.PersonCompanyToRoomType.plural": "Types d'espaces des prestataires",
  "models.PersonCompanyToRoomType.description": "Les types d'espaces des prestataires permettent de d\xE9finir une relation entre un type d'espaces et le prestataire et d'y d\xE9finir une mission",
  "models.PersonCompanyToRoomType.determinant.defined": "le type d'espace du prestataire",
  "models.PersonCompanyToRoomType.determinant.undefined": "un type d'espace du prestataire",
  "models.PersonCompanyToRoomType.determinants.defined": "les types d'espaces des prestataires",
  "models.PersonCompanyToRoomType.determinants.undefined": "des types d'espaces des prestataires",
  "models.PersonGender.singular": "Genre de la personne",
  "models.PersonGender.plural": "Genres des personnes",
  "models.PersonGender.description": "Permet de d\xE9nombrer chaque genre, par exemple pour la gestion des sanitaires",
  "models.PersonGender.determinant.defined": "le genre de la personne",
  "models.PersonGender.determinant.undefined": "un genre de personne",
  "models.PersonGender.determinants.defined": "les genres de personnes",
  "models.PersonGender.determinants.undefined": "des genres de personnes",
  "models.PersonGender.properties.name.label": "Nom",
  "models.PersonGender.properties.name.description": "Le nom du genre de la personne",
  "models.PersonCompanyToItemType.singular": "Type d'objet du prestataire",
  "models.PersonCompanyToItemType.plural": "Types d'objets des prestataires",
  "models.PersonCompanyToItemType.description": "Les types d'objets des prestataires permettent de d\xE9finir une relation entre le type d'objet et le prestataires et d'y d\xE9finir la mission",
  "models.PersonCompanyToItemType.determinant.defined": "le type d'objet du prestataire",
  "models.PersonCompanyToItemType.determinant.undefined": "un type d'objet du prestataire",
  "models.PersonCompanyToItemType.determinants.defined": "les types d'objets des prestataires",
  "models.PersonCompanyToItemType.determinants.undefined": "des types d'objets des prestataires",
  "models.PersonCompanyToItem.singular": "Intervention sur un objet",
  "models.PersonCompanyToItem.plural": "Interventions sur des objet",
  "models.PersonCompanyToItem.description": "Les interventions des prestataires sur des objets permettent de d\xE9finir par exemple la date d'une visite sur un extincteur",
  "models.PersonCompanyToItem.determinant.defined": "l'intervention sur un objet",
  "models.PersonCompanyToItem.determinant.undefined": "une intervention sur un objet",
  "models.PersonCompanyToItem.determinants.defined": "les interventions sur des objets",
  "models.PersonCompanyToItem.determinants.undefined": "des interventions sur des objets",
  "models.PersonCompanyToItem.properties.datetime.label": "Date et heure de l'intervention",
  "models.PersonCompanyToItem.properties.datetime.description": "Le moment auquel l'intervention a eu lieu",
  "models.PersonCompanyToItem.properties.comment.label": "Commentaire",
  "models.PersonCompanyToItem.properties.comment.description": "Un commentaire sur l'intervention",
  "models.PersonCompanyMission.singular": "mission du prestataire",
  "models.PersonCompanyMission.plural": "missions des prestataires",
  "models.PersonCompanyMission.description": "Les missions des prestataires permettent de connaitre le domaine d'intervention des prestataires",
  "models.PersonCompanyMission.determinant.defined": "la mission du prestataire",
  "models.PersonCompanyMission.determinant.undefined": "une mission du prestataire",
  "models.PersonCompanyMission.determinants.defined": "les missions des prestataires",
  "models.PersonCompanyMission.determinants.undefined": "des missions des prestataires",
  "models.PersonCompanyMission.properties.name.label": "Nom",
  "models.PersonCompanyMission.properties.name.description": "Le nom de la mission du prestataire",
  "models.PersonCompany.singular": "entreprise prestataire",
  "models.PersonCompany.plural": "entreprises prestataires",
  "models.PersonCompany.description": "L'entreprise prestataire permet de g\xE9rer le personnel prestataire par entreprise d'appartenance",
  "models.PersonCompany.determinant.defined": "l'entreprise prestataire",
  "models.PersonCompany.determinant.undefined": "une entreprise prestataire",
  "models.PersonCompany.determinants.defined": "les entreprises prestataires",
  "models.PersonCompany.determinants.undefined": "des entreprises prestataires",
  "models.PersonCompany.properties.name.label": "Nom",
  "models.PersonCompany.properties.name.description": "Le nom du prestataire, par exemple le nom de l'entreprise d'un prestataire de service",
  "models.PersonCompany.properties.comment.label": "Informations compl\xE9mentaires",
  "models.PersonCompany.properties.comment.description": "Des informations compl\xE9mentaires sur le prestataire, comme sa mission, ses valeurs, la couverture fonctionelle de sa pr\xE9station etc",
  "models.PersonCompany.properties.contact.label": "Contact",
  "models.PersonCompany.properties.contact.description": "Les informations de contact du prestataire",
  "models.PersonCompany.properties.documents.label": "Documents associ\xE9s",
  "models.PersonCompany.properties.documents.description": "Le lien vers les documents associ\xE9s \xE0 ce prestataire",
  "models.Person.singular": "personne",
  "models.Person.plural": "personnes",
  "models.Person.description": "Ce sont les personnes entr\xE9es dans la base de donn\xE9es de Surfy",
  "models.Person.determinant.defined": "la personne",
  "models.Person.determinant.undefined": "une personne",
  "models.Person.determinants.defined": "les personnes",
  "models.Person.determinants.undefined": "des personnes",
  "models.Person.properties.id.label": "Identifiant Surfy",
  "models.Person.properties.fullname.label": "Nom complet",
  "models.Person.properties.fullname.description": "Le nom complet de la personne permettant de le retrouver plus facilement",
  "models.Person.properties.personState.label": "Statut",
  "models.Person.properties.personState.description": "Permet d'indiquer le type de contrat de la personne vis \xE0 vis de l'entreprise",
  "models.Person.properties.personSecurityProfile.label": "Profil de s\xE9curit\xE9",
  "models.Person.properties.personSecurityProfile.description": "Permet d'indiquer le profil de s\xE9curit\xE9 de la personne pour la gestion de la s\xE9curit\xE9",
  "models.Person.properties.firstname.label": "Pr\xE9nom",
  "models.Person.properties.firstname.description": "Le pr\xE9nom de la personne",
  "models.Person.properties.lastname.label": "Nom de famille",
  "models.Person.properties.lastname.description": "Le nom de famille de la personne",
  "models.Person.properties.email.label": "Email",
  "models.Person.properties.email.description": "Le courriel de la personne",
  "models.Person.properties.picture.label": "Photo de profil",
  "models.Person.properties.picture.description": "La photo de la personne pour l'avoir en trombinoscope ou dans la recherche",
  "models.Person.properties.monitorReference.label": "R\xE9f\xE9rence \xE9cran",
  "models.Person.properties.monitorReference.description": "La r\xE9f\xE9rence de l'\xE9cran informatique associ\xE9 \xE0 cette personne",
  "models.Person.properties.computerReference.label": "R\xE9f\xE9rence ordinateur",
  "models.Person.properties.computerReference.description": "La r\xE9f\xE9rence de l'ordinateur associ\xE9 \xE0 cette personne",
  "models.Person.properties.cellphone.label": "T\xE9l\xE9phone portable",
  "models.Person.properties.cellphone.description": "Le t\xE9l\xE9phone portable de la personne",
  "models.Person.properties.telephone.label": "T\xE9l\xE9phone fixe",
  "models.Person.properties.telephone.description": "Le t\xE9l\xE9phone fixe de la personne",
  "models.Person.properties.title.label": "Titre",
  "models.Person.properties.title.description": "Le titre de la personne",
  "models.Person.properties.badgeNumber.label": "Num\xE9ro de badge",
  "models.Person.properties.badgeNumber.description": "Le num\xE9ro de badge de la personne",
  "models.Person.properties.boxNumber.label": "Num\xE9ro de casier",
  "models.Person.properties.boxNumber.description": "Le num\xE9ro de casier de la personne",
  "models.Person.properties.badgeRestaurant.label": "Badge RIE",
  "models.Person.properties.badgeRestaurant.description": "La r\xE9f\xE9rence du badge du RIE ou du restaurant d'entreprise",
  "models.Person.properties.registrationNumber.label": "Immatriculation",
  "models.Person.properties.registrationNumber.description": "Le num\xE9ro d'immatriculation de la personne",
  "models.Person.properties.startDate.label": "Date d'entr\xE9e",
  "models.Person.properties.startDate.description": "La date d'entr\xE9e de la personne dans l'entreprise",
  "models.Person.properties.endDate.label": "Date de sortie",
  "models.Person.properties.endDate.description": "La date de sortie de la personne de l'entreprise",
  "models.Person.properties.code.label": "Matricule",
  "models.Person.properties.code.description": "Le matricule RH de la personne",
  "models.Person.properties.personToPersonTargets.label": "Relations vers cette personne",
  "models.Person.properties.personToPersonTargets.description": "Permet de connaitre la relation ascendante entre deux personnes, par exemple la relation hi\xE9rarchique",
  "models.Person.properties.personToPersonSources.label": "Relations depuis cette personne",
  "models.Person.properties.personToPersonSources.description": "Permet de connaitre la relation descendante entre deux personnes, par exemple la relation hi\xE9rarchique",
  "models.Person.properties.organization.label": "L'organisation de la personne",
  "models.Person.properties.organization.description": "Le Service de rattachement de la personne",
  "models.Person.properties.info.label": "Commentaire",
  "models.Person.properties.info.description": "Commentaire sur la personne permettant de conserver des informations suppl\xE9mentaires ou diverses",
  "models.Person.properties.notAffectable.label": "Non Affectable",
  "models.Person.properties.notAffectable.description": "La personne ne peut pas \xEAtre affect\xE9e \xE0 un poste de travail, un espace, un b\xE2timent ou un calque d'affectation",
  "models.Person.views.home.help": "Voir la fiche de la personne <b>%{name}</b> avec ses informations et affectations",
  "models.Person.views.home.label": "Fiche de la personne",
  "models.Person.views.relationship-list.help": "Lister les relations entre personnes",
  "models.Person.views.relationship-list.label": "Liste des relations",
  "models.Person.views.dq-only-associated-to-building.help": "Lister les personnes affectables qui sont affect\xE9es \xE0 un b\xE2timent et comptabilis\xE9es sans \xEAtre affect\xE9es (poste de travail, calque d'affectation, espace)",
  "models.Person.views.dq-only-associated-to-building.label": "Personnes affect\xE9es \xE0 un b\xE2timent sans autre affectation",
  "models.Person.views.dq-near-end-date.help": "Lister les personnes qui ont une date de fin de contrat apr\xE8s aujourd'hui et qui sont affect\xE9es \xE0 un poste de travail",
  "models.Person.views.dq-near-end-date.label": "Personnes quittant l'entreprise",
  "models.Person.views.dq-no-affectations.label": "Personnes sans affectations",
  "models.Person.views.dq-no-affectations.help": "Lister les personnes affectables n'ayant pas d'affectations (b\xE2timent, poste de travail, calque d'affectation, espace)",
  "models.Person.views.dq-person-duplicate.label": "Personnes en doublon",
  "models.Person.views.dq-person-duplicate.help": "Lister les personnes en doublon",
  "models.PartnerApiCredential.singular": "Cl\xE9 d'api partenaire",
  "models.PartnerApiCredential.plural": "Cl\xE9s d'api partenaire",
  "models.PartnerApiCredential.determinant.defined": "la cl\xE9 d'api partenaire",
  "models.PartnerApiCredential.determinant.undefined": "une cl\xE9 d'api partenaire",
  "models.PartnerApiCredential.determinants.defined": "les cl\xE9s d'api partenaire",
  "models.PartnerApiCredential.determinants.undefined": "des cl\xE9s d'api partenaire",
  "models.PartnerApiCredential.properties.enable.label": "Activ\xE9",
  "models.PartnerApiCredential.properties.enable.description": "Il faut activer la cl\xE9 pour pouvoir l'utiliser",
  "models.OrganizationFloor.singular": "Organisation des \xE9tages",
  "models.OrganizationFloor.plural": "Organisations des \xE9tages",
  "models.OrganizationFloor.determinant.defined": "l'organisation des \xE9tages",
  "models.OrganizationFloor.determinant.undefined": "une organisation des \xE9tages",
  "models.OrganizationFloor.determinants.defined": "les organisations des \xE9tages",
  "models.OrganizationFloor.determinants.undefined": "des organisations des \xE9tages",
  "models.OrganizationBuilding.singular": "Organisation des b\xE2timents",
  "models.OrganizationBuilding.plural": "Organisations des b\xE2timents",
  "models.OrganizationBuilding.determinant.defined": "l'organisation des b\xE2timents",
  "models.OrganizationBuilding.determinant.undefined": "une organisation des b\xE2timents",
  "models.OrganizationBuilding.determinants.defined": "les organisations des b\xE2timents",
  "models.OrganizationBuilding.determinants.undefined": "des organisations des b\xE2timents",
  "models.Organization.singular": "organisation",
  "models.Organization.plural": "organisations",
  "models.Organization.determinant.defined": "l'organisation",
  "models.Organization.determinant.undefined": "une organisation",
  "models.Organization.determinants.defined": "les organisations",
  "models.Organization.determinants.undefined": "des organisations",
  "models.Organization.description": "Les organisations ont deux niveaux hi\xE9rarchiques : les directions et les services, et permettent de d\xE9finir la structure organisationnelle de l'entreprise",
  "models.Organization.properties.id.label": "Identifiant de l'organisation",
  "models.Organization.properties.name.label": "Nom",
  "models.Organization.properties.name.description": "Nom qui va d\xE9finir l'organisation",
  "models.Organization.properties.code.label": "Code",
  "models.Organization.properties.code.description": "Ce code peut \xEAtre utilis\xE9 pour contenir la codification de l'organisation ou la cl\xE9 pour l'identification via un logiciel tiers",
  "models.Organization.properties.organizationId.label": "Identifiant de la direction",
  "models.Organization.properties.organizationId.description": "C'est gr\xE2ce \xE0 cet identifiant qu'il est possible de cr\xE9er la hierarchie organisationnelle",
  "models.Organization.properties.organization.label": "Direction",
  "models.Organization.properties.organizations.label": "Services",
  "models.Organization.views.hierarchy.label": "Hi\xE9rarchie",
  "models.Organization.views.hierarchy.help": "Voir la hi\xE9rarchie des organisations",
  "models.Organization.views.dq-organization-to-room.label": "Erreurs sur les organisations des espaces",
  "models.Organization.views.dq-organization-to-room.help": "D\xE9tecter les associations d'espaces avec les organisations qui ne sont pas valides",
  "models.Organization.views.dq-organization-hierarchy.label": "Erreurs sur la hi\xE9rarchie des organisations",
  "models.Organization.views.dq-organization-hierarchy.help": "D\xE9tecter les organisations qui ne sont pas dans la bonne hi\xE9rarchie",
  "models.OpenerPostMessageHost.singular": "H\xF4te de message pour fen\xEAtre contextuelle",
  "models.OpenerPostMessageHost.plural": "H\xF4tes de messages pour fen\xEAtre contextuelle",
  "models.OpenerPostMessageHost.determinant.defined": "l'h\xF4te de message pour fen\xEAtre contextuelle",
  "models.OpenerPostMessageHost.determinant.undefined": "un h\xF4te de message pour fen\xEAtre contextuelle",
  "models.OpenerPostMessageHost.determinants.defined": "les h\xF4tes de message pour fen\xEAtre contextuelle",
  "models.OpenerPostMessageHost.determinants.undefined": "des h\xF4tes de message pour fen\xEAtre contextuelle",
  "models.OpenerPostMessageHost.description": "Un h\xF4te de message pour fen\xEAtre contextuelle est un \xE9l\xE9ment qui permet de communiquer avec une fen\xEAtre contextuelle ouverte sur les actions du plan",
  "models.OccupancyStatus.singular": "\xE9tat d'occupation",
  "models.OccupancyStatus.plural": "\xE9tats d'occupation",
  "models.OccupancyStatus.determinant.defined": "l'\xE9tat d'occupation",
  "models.OccupancyStatus.determinant.undefined": "un \xE9tat d'occupation",
  "models.OccupancyStatus.determinants.defined": "les \xE9tats d'occupation",
  "models.OccupancyStatus.determinants.undefined": "des \xE9tats d'occupation",
  "models.OccupancyStatus.description": "L'\xE9tat d'occupation permet d'identifier l'\xE9tat en temps r\xE9el d'un espace ou d'un poste de travail, comme par exemple s'il est libre, occup\xE9 ou squat\xE9, l'\xE9tat d'occupation est mis \xE0 jour par les objets connect\xE9s pr\xE9sent dans l'espace",
  "models.OccupancyStatus.properties.id.label": "Identifiant de l'\xE9tat d'occupation",
  "models.OccupancyStatus.properties.name.label": "Nom de l'\xE9tat d'occupation",
  "models.OccupancyStatus.properties.color.label": "Couleur",
  "models.OccupancyStatus.properties.color.description": "La couleur permet de colorier les espaces ou les postes de travail sur les plans en fonction de leur \xE9tat d'occupation",
  "models.OccupancyStatus.properties.code.label": "Code de l'\xE9tat d'occupation",
  "models.OccupancyStatus.properties.code.description": "Le code permet d'identifier et de r\xE9aliser des op\xE9rations techniques sur l'\xE9tat d'occupation",
  "models.Object3dModel.singular": "Mod\xE8le 3d",
  "models.Object3dModel.plural": "Mod\xE8les 3d",
  "models.Object3dModel.determinant.defined": "le mod\xE8le 3d",
  "models.Object3dModel.determinant.undefined": "un mod\xE8le 3d",
  "models.Object3dModel.determinants.defined": "les mod\xE8les 3d",
  "models.Object3dModel.determinants.undefined": "des mod\xE8les 3d",
  "models.Object3dModel.description": "Le Mod\xE8le 3D permet une repr\xE9sentation 3D r\xE9aliste des objets plac\xE9s sur le plan; En absence de mod\xE8le 3D les objets sont repr\xE9sent\xE9s en forme pleine dans la vue 3D",
  "models.Object3dModel.properties.origin.label": "Orientation",
  "models.Object3dModel.properties.origin.description": "Utiliser X si l'objet est orient\xE9 \xE0 droite ou Y si l'objet est orient\xE9 vers le bas",
  "models.MapScale.singular": "\xE9chelle plan",
  "models.MapScale.plural": "\xE9chelles plan",
  "models.MapScale.determinant.defined": "l'\xE9chelle",
  "models.MapScale.determinant.undefined": "une \xE9chelle",
  "models.MapScale.determinants.defined": "les \xE9chelles",
  "models.MapScale.determinants.undefined": "des \xE9chelles",
  "models.MapScale.properties.id.label": "Identifiant de l'\xE9chelle",
  "models.MapScale.properties.p1.description": "Point de d\xE9part",
  "models.MapScale.properties.p2.description": "Point d'arriv\xE9",
  "models.MapScale.properties.name.label": "Nom de l'\xE9chelle",
  "models.MapScale.properties.name.description": "Pour se r\xE9m\xE9morer le nom et le r\xE9utiliser sur d'autres \xE9tages",
  "models.MapScale.properties.length.label": "Distance",
  "models.MapScale.properties.length.description": "La distance represent\xE9e sur le plan entre les 2 points en m\xE8tre",
  "models.MapScale.properties.roomTextSize.label": "Taille du texte des espaces",
  "models.MapScale.properties.roomTextSize.description": "La taille du texte des espaces sur le plan pour optimiser l'affichage",
  "models.MapScale.properties.workplaceTextSize.label": "Taille du texte sur les objets",
  "models.MapScale.properties.workplaceTextSize.description": "La taille du texte sur les postes de travail et sur les objets sur le plan pour optimiser l'affichage",
  "models.MapScale.properties.segmentDistanceTextSize.label": "Taille du texte des segments",
  "models.MapScale.properties.segmentDistanceTextSize.description": "La taille du texte sur les distances entre les points sur le plan pour optimiser l'affichage",
  "models.MapScale.properties.itemTypeIconSize.label": "Taille des ic\xF4nes des types d'objet",
  "models.MapScale.properties.itemTypeIconSize.description": "La taille des icones des types d'objet sur le plan, la taille sera limit\xE9e par la taille de l'espace",
  "models.MapScale.properties.roomIconSize.label": "Taille des ic\xF4nes des types d'espace",
  "models.MapScale.properties.roomIconSize.description": "La taille des icones sur le plan dans les espaces par rapport aux types d'espace",
  "models.MapScale.properties.strokeWidth.label": "Epaisseur des lignes",
  "models.MapScale.properties.strokeWidth.description": "Il est possible de r\xE9duire l'\xE9paisseur des lignes pour augmenter la lisibilit\xE9 du plan",
  "models.MapScale.views.dq-not-used.label": "Les \xE9chelles non utilis\xE9es",
  "models.MapScale.views.dq-not-used.help": "Voir les \xE9chelles qui ne sont pas utilis\xE9es sur les \xE9tages et qui peuvent \xEAtre supprim\xE9es",
  "models.MapScale.views.dq-uniq-name.label": "Proposition de noms pour les \xE9chelles",
  "models.MapScale.views.dq-uniq-name.help": "Propose des noms uniques pour les \xE9chelles incluant les \xE9tages et b\xE2timents o\xF9 elles sont utilis\xE9es",
  "models.Manufacturer.singular": "Fabricant du type d'objet",
  "models.Manufacturer.plural": "Fabricants du type d'objet",
  "models.Manufacturer.determinant.defined": "le fabricant du type d'objet",
  "models.Manufacturer.determinant.undefined": "un fabricant du type d'objet",
  "models.Manufacturer.determinants.defined": "les fabricants des types d'objet",
  "models.Manufacturer.determinants.undefined": "des fabricants types d'objet",
  "models.Manufacturer.properties.name.label": "Nom du fabricant du type d'objet",
  "models.Manufacturer.properties.name.description": "Permet d'identifier le nom du fabricant ou la marque",
  "models.Manufacturer.properties.website.label": "Site internet",
  "models.Manufacturer.properties.website.description": "L'adresse du site internet du fabricant",
  "models.Legend.singular": "L\xE9gende",
  "models.Legend.plural": "L\xE9gende",
  "models.Legend.determinant.defined": "la l\xE9gende",
  "models.Legend.determinant.undefined": "une l\xE9gende",
  "models.Legend.determinants.defined": "les l\xE9gendes",
  "models.Legend.determinants.undefined": "des l\xE9gendes",
  "models.Legend.description": "La l\xE9gende permet de configurer les propri\xE9t\xE9 visible quand le plan est sauvegard\xE9 en image",
  "models.JupUserCompanyToJupRole.singular": "R\xF4le de l'utilisateur de l'entreprise",
  "models.JupUserCompanyToJupRole.plural": "R\xF4les de l'utilisateur de l'entreprise",
  "models.JupUserCompanyToJupRole.determinant.defined": "le r\xF4le de l'utilisateur de l'entreprise",
  "models.JupUserCompanyToJupRole.determinant.undefined": "un r\xF4le de l'utilisateur de l'entreprise",
  "models.JupUserCompanyToJupRole.determinants.defined": "les r\xF4les de l'utilisateur de l'entreprise",
  "models.JupUserCompanyToJupRole.determinants.undefined": "des r\xF4les de l'utilisateur de l'entreprise",
  "models.JupUiView.singular": "Vue d'interface",
  "models.JupUiView.plural": "Vues d'interface",
  "models.JupUiView.determinant.defined": "la vue d'interface",
  "models.JupUiView.determinant.undefined": "une vue d'interface",
  "models.JupUiView.determinants.defined": "les vues d'interface",
  "models.JupUiView.determinants.undefined": "des vues d'interface",
  "models.JupUiTenantOperation.singular": "Op\xE9ration d'interface pour une entreprise",
  "models.JupUiTenantOperation.plural": "Op\xE9rations d'interface pour une entreprise",
  "models.JupUiTenantOperation.determinant.defined": "l'op\xE9ration d'interface pour une entreprise",
  "models.JupUiTenantOperation.determinant.undefined": "une op\xE9ration d'interface pour une entreprise",
  "models.JupUiTenantOperation.determinants.defined": "les op\xE9rations d'interface pour une entreprise",
  "models.JupUiTenantOperation.determinants.undefined": "des op\xE9rations d'interface pour une entreprise",
  "models.JupUiOption.singular": "Option d'interface",
  "models.JupUiOption.plural": "Options d'interface",
  "models.JupUiOption.determinant.defined": "l'option d'interface",
  "models.JupUiOption.determinant.undefined": "une option'interface",
  "models.JupUiOption.determinants.defined": "les options d'interface",
  "models.JupUiOption.determinants.undefined": "des options d'interface",
  "models.JupUiOperation.singular": "Op\xE9ration d'interface",
  "models.JupUiOperation.plural": "Op\xE9rations d'interface",
  "models.JupUiOperation.determinant.defined": "l'op\xE9ration d'interface",
  "models.JupUiOperation.determinant.undefined": "une op\xE9ration d'interface",
  "models.JupUiOperation.determinants.defined": "les op\xE9rations d'interface",
  "models.JupUiOperation.determinants.undefined": "des op\xE9rations d'interface",
  "models.JupUiLayout.singular": "Vision du plan",
  "models.JupUiLayout.plural": "Visions du plan",
  "models.JupUiLayout.determinant.defined": "la vision du plan",
  "models.JupUiLayout.determinant.undefined": "une vision du plan",
  "models.JupUiLayout.determinants.defined": "les visions du plan",
  "models.JupUiLayout.determinants.undefined": "des visions du plan",
  "models.JupRoleToJupUiView.singular": "Association r\xF4le aux vues d'interface",
  "models.JupRoleToJupUiView.plural": "Associations r\xF4le aux vues d'interface",
  "models.JupRoleToJupUiView.determinant.defined": "l'association du r\xF4le aux vues d'interface",
  "models.JupRoleToJupUiView.determinant.undefined": "une association du r\xF4le aux vues d'interface",
  "models.JupRoleToJupUiView.determinants.defined": "les associations du r\xF4le aux vues d'interface",
  "models.JupRoleToJupUiView.determinants.undefined": "des associations du r\xF4le aux vues d'interface",
  "models.JupRoleToJupUiView.properties.canSee.label": "Peut voir la vue",
  "models.JupRoleToJupUiView.properties.canSee.description": "Autorise la vue a \xEAtre vue par le r\xF4le",
  "models.JupRoleToJupUiOption.singular": "Association r\xF4le aux visions du plan",
  "models.JupRoleToJupUiOption.plural": "Associations r\xF4le aux visions du plan",
  "models.JupRoleToJupUiOption.determinant.defined": "l'association du r\xF4le aux visions du plan",
  "models.JupRoleToJupUiOption.determinant.undefined": "une association du r\xF4le aux visions du plan",
  "models.JupRoleToJupUiOption.determinants.defined": "les associations du r\xF4le aux visions du plan",
  "models.JupRoleToJupUiOption.determinants.undefined": "des associations du r\xF4le aux visions du plan",
  "models.JupRoleToJupUiOption.properties.canSee.label": "Peut voir l'option",
  "models.JupRoleToJupUiOption.properties.canSee.description": "Autorise l'option a \xEAtre vue par le r\xF4le",
  "models.JupRoleToJupUiOperation.singular": "Association r\xF4le aux op\xE9rations d'interface",
  "models.JupRoleToJupUiOperation.plural": "Association r\xF4le aux op\xE9rations d'interface",
  "models.JupRoleToJupUiOperation.determinant.defined": "l'association du r\xF4le aux op\xE9rations d'interface",
  "models.JupRoleToJupUiOperation.determinant.undefined": "une association du r\xF4le aux op\xE9rations d'interface",
  "models.JupRoleToJupUiOperation.determinants.defined": "les associations du r\xF4le aux op\xE9rations d'interface",
  "models.JupRoleToJupUiOperation.determinants.undefined": "des associations du r\xF4le aux op\xE9rations d'interface",
  "models.JupRoleToJupObjectType.singular": "Association r\xF4le \xE0 type d'objet",
  "models.JupRoleToJupObjectType.plural": "Associations r\xF4le \xE0 type d'objet",
  "models.JupRoleToJupObjectType.determinant.defined": "l'association du r\xF4le au type d'objet",
  "models.JupRoleToJupObjectType.determinant.undefined": "une association du r\xF4le au type d'objet",
  "models.JupRoleToJupObjectType.determinants.defined": "les associations du r\xF4le au type d'objet",
  "models.JupRoleToJupObjectType.determinants.undefined": "des associations du r\xF4le au type d'objet",
  "models.JupRoleToJupObjectType.properties.arCreate.label": "Cr\xE9ation (C)",
  "models.JupRoleToJupObjectType.properties.arCreate.description": "Autorise la cr\xE9ation d'entit\xE9",
  "models.JupRoleToJupObjectType.properties.arRead.label": "Lecture (R)",
  "models.JupRoleToJupObjectType.properties.arRead.description": "Autorise la lecture des entit\xE9s",
  "models.JupRoleToJupObjectType.properties.arUpdate.label": "Mise \xE0 jour (U)",
  "models.JupRoleToJupObjectType.properties.arUpdate.description": "Autorise la mise \xE0 jour des entit\xE9s",
  "models.JupRoleToJupObjectType.properties.arDelete.label": "Suppression (D)",
  "models.JupRoleToJupObjectType.properties.arDelete.description": "Autorise la suppression d'entit\xE9s",
  "models.JupRole.singular": "R\xF4le",
  "models.JupRole.plural": "R\xF4les",
  "models.JupRole.determinant.defined": "le r\xF4le",
  "models.JupRole.determinant.undefined": "un r\xF4le",
  "models.JupRole.determinants.defined": "les r\xF4les",
  "models.JupRole.determinants.undefined": "des r\xF4les",
  "models.JupRole.views.matrix.help": "La matrice de s\xE9curit\xE9 du r\xF4le %{name}",
  "models.JupRole.views.matrix.label": "Matrice",
  "models.JupRole.views.help.help": "Le r\xE9sum\xE9 des droits des r\xF4les",
  "models.JupRole.views.help.label": "Aide",
  "models.JupObjectType.singular": "Type d'entit\xE9",
  "models.JupObjectType.plural": "Types d'entit\xE9",
  "models.JupObjectType.determinant.defined": "le type d'entit\xE9",
  "models.JupObjectType.determinant.undefined": "un type d'entit\xE9",
  "models.JupObjectType.determinants.defined": "les types d'entit\xE9",
  "models.JupObjectType.determinants.undefined": "des types d'entit\xE9",
  "models.ItemTypePoint.singular": "Point des types d'objet",
  "models.ItemTypePoint.plural": "Points des types d'objet",
  "models.ItemTypePoint.determinant.defined": "le point des types d'objet",
  "models.ItemTypePoint.determinant.undefined": "un point des types d'objet",
  "models.ItemTypePoint.determinants.defined": "les points des types d'objet",
  "models.ItemTypePoint.determinants.undefined": "des points des types d'objet",
  "models.ItemTypePoint.properties.id.label": "Identifiant",
  "models.ItemTypePoint.properties.id.description": "",
  "models.ItemTypePoint.properties.x.label": "x",
  "models.ItemTypePoint.properties.x.description": "",
  "models.ItemTypePoint.properties.y.label": "y",
  "models.ItemTypePoint.properties.y.description": "",
  "models.ItemTypePoint.properties.externalId.label": "Identifiant externe",
  "models.ItemTypePoint.properties.externalId.description": "",
  "models.ItemTypePoint.properties.itemTypeId.label": "Identifiant du type d'objet",
  "models.ItemTypePoint.properties.itemTypeId.description": "",
  "models.ItemTypePoint.properties.sortIndex.label": "Index de tri",
  "models.ItemTypePoint.properties.sortIndex.description": "",
  "models.ItemTypePoint.properties.itemType.label": "Type d'objet",
  "models.ItemTypePoint.properties.itemType.description": "",
  "models.ItemTypeFamily.singular": "famille de types d'objet",
  "models.ItemTypeFamily.plural": "familles de types d'objet",
  "models.ItemTypeFamily.determinant.defined": "la famille de types d'objet",
  "models.ItemTypeFamily.determinant.undefined": "une famille de types d'objet",
  "models.ItemTypeFamily.determinants.defined": "les familles de types d'objet",
  "models.ItemTypeFamily.determinants.undefined": "des familles de types d'objet",
  "models.ItemTypeFamily.description": "Permet d\u2019afficher les objets par Famille sur les plans et dans l\u2019inventaire en pdf",
  "models.ItemTypeFamily.properties.id.label": "Identifiant de la famille de types de l'objet",
  "models.ItemTypeFamily.properties.name.label": "Nom de la famille de types de l'objet",
  "models.ItemTypeFamily.properties.name.description": "Le nom de la famille permet de l'identifier, ce nom est utilis\xE9 pour regrouper les types d'objet",
  "models.ItemType.singular": "type d'objet",
  "models.ItemType.plural": "types d'objet",
  "models.ItemType.determinant.defined": "le type d'objet",
  "models.ItemType.determinant.undefined": "un type d'objet",
  "models.ItemType.determinants.defined": "les types d'objet",
  "models.ItemType.determinants.undefined": "des types d'objet",
  "models.ItemType.properties.id.label": "Identifiant du type de l'objet",
  "models.ItemType.properties.id.description": "Identifiant du type de l'objet",
  "models.ItemType.properties.description.label": "Description",
  "models.ItemType.properties.description.description": "Permet d'avoir des informations suppl\xE9mentaires sur le type d'objet",
  "models.ItemType.properties.name.label": "Nom du type d'objet",
  "models.ItemType.properties.name.description": "Permet d'identifier rapidement le type d'objet avec un nom complet, logique et descriptif; On peut y indiquer les dimensions, par exemple: Table de R\xE9union 340x120; Conseil: commencer toujours par la dimension la plus grande",
  "models.ItemType.properties.zIndex.label": "Indice de hauteur",
  "models.ItemType.properties.zIndex.description": "Plus l'indice de hauteur est \xE9lev\xE9 plus l'objet sera positionn\xE9 au dessus des autres; Il peut \xEAtre n\xE9gatif; par exemple pour un si\xE8ge: -1; Conseil: pour les Icones, fixer l'indice \xE0 9",
  "models.ItemType.properties.picture.label": "Photo",
  "models.ItemType.properties.picture.description": "Permet de charger la photo du type d\u2019objet, qui sera visible dans l\u2019inventaire en pdf et sur la fiche de l\u2019objet s\xE9lectionn\xE9 sur le plan",
  "models.ItemType.properties.iconShape.label": "Forme de l'icone",
  "models.ItemType.properties.iconShape.description": "La forme de l'icone permet d'influencer son affichage sur le plan",
  "models.ItemType.properties.displayItemReferenceInMap.label": "Afficher les informations sur le plan",
  "models.ItemType.properties.displayItemReferenceInMap.description": "Permet d\u2019afficher le champ \xAB R\xE9f\xE9rence \xBB de chaque objet sur le plan",
  "models.ItemType.properties.code.label": "Code",
  "models.ItemType.properties.code.description": "Permet d'avoir acc\xE8s rapidement au type d\u2019objet en tapant le code dans la recherche lors de la cr\xE9ation d\u2019objet",
  "models.ItemType.properties.icon.label": "Ic\xF4ne",
  "models.ItemType.properties.icon.description": "Vous donne acc\xE8s \xE0 trois types d\u2019ic\xF4ne: 1) Les Icones de \xAB Fontawsome \xBB, visibles en cochant \xAB tout afficher \xBB ou en recherchant par mot cl\xE9 en anglais dans la case de recherche; 2) Les Icones \xAB SURFY \xBB destin\xE9es aux illustrations ajout\xE9es sur les plans aux endroits strat\xE9giques (Toilettes, Escaliers, Ascenseurs, Points Copie, etc) mais qui peuvent \xE9galement \xEAtre utilis\xE9es comme des icones classiques; 3) Les Icones \xAB SURFY 2 \xBB listant les icones r\xE9glementaires de la norme de S\xE9curit\xE9 ISO 7010; Leur forme peut \xEAtre ronde, carr\xE9e ou triangulaire",
  "models.ItemType.properties.color.label": "Couleur",
  "models.ItemType.properties.color.description": "Peut \xEAtre choisie parmi une pr\xE9 s\xE9lection, ou en s\xE9lection avanc\xE9e par code Hexa ou RGB pour respecter votre charte graphique",
  "models.ItemType.properties.height.label": "Hauteur",
  "models.ItemType.properties.height.description": "Permet de donner la hauteur en centim\xE8tres du type d'objet dans la vision en 3d",
  "models.ItemType.properties.price.label": "Prix",
  "models.ItemType.properties.price.description": "Le prix d'achat du type d'objet",
  "models.ItemType.properties.seatsCount.label": "Nombre de places assises",
  "models.ItemType.properties.seatsCount.description": "Le nombre de places assises de ce type d'objet (fauteuil, si\xE8ge, canap\xE9, etc) est cumul\xE9 dans Surfy par espace, \xE9tage et b\xE2timent",
  "models.ItemType.properties.manufacturer.description": "Permet d'identifier le fabricant du type d'objet",
  "models.ItemType.properties.carbonFootprint.label": "Empreinte Carbone",
  "models.ItemType.properties.carbonFootprint.description": "L'empreinte carbone est le poids en Kilogrammes de CO2 \xE9mis par chaque objet issu de ce type d'objet; il est donn\xE9 par le fabricant",
  "models.ItemType.properties.iconBackgroundColor.label": "Couleur de fond de l'ic\xF4ne",
  "models.ItemType.properties.iconBackgroundColor.description": "La couleur de fond permet de configurer correctement les icones multi-couleurs, notamment triangulaires",
  "models.ItemType.properties.iconBorderColor.label": "Couleur de bordure de l'ic\xF4ne",
  "models.ItemType.properties.iconBorderColor.description": "La couleur de bordure permet de configurer correctement les icones multi-couleurs, notamment triangulaires",
  "models.ItemType.properties.isAffectable.label": "Est associable \xE0 une personne ?",
  "models.ItemType.properties.isAffectable.description": "Permet de savoir si le type d'objet est associable \xE0 une personne",
  "models.ItemType.properties.excludeFromPathfinding.label": "Activer la navigation",
  "models.ItemType.properties.excludeFromPathfinding.description": "Permet d'activer la navigation pour ce type d'objet",
  "models.ItemType.views.shape-editor.help": "Editer la forme du type d'objet %{name}",
  "models.ItemType.views.shape-editor.label": "Editer la forme",
  "models.ItemType.views.avatar.help": "Voir la forme de %{name}",
  "models.ItemType.views.avatar.label": "Forme",
  "models.ItemType.views.dq-not-used.label": "Non utilis\xE9s",
  "models.ItemType.views.dq-not-used.help": "Lister tous les types d'objets non utilis\xE9s via des objets ou via des types de poste de travail non utilis\xE9s",
  "models.ItemToPerson.singular": "Association d'objet \xE0 personne",
  "models.ItemToPerson.plural": "Associations d'objet \xE0 personne",
  "models.ItemToPerson.description": "Permet d'associer un objet \xE0 une personne (si\xE8ge ergonomique, casier)",
  "models.ItemToPerson.determinant.defined": "l'association d'objet \xE0 personne",
  "models.ItemToPerson.determinant.undefined": "une association d'objet \xE0 personne",
  "models.ItemToPerson.determinants.defined": "les associations d'objet \xE0 personne",
  "models.ItemToPerson.determinants.undefined": "des associations d'objet \xE0 personne",
  "models.ItemFact.singular": "Mouvement d'objet",
  "models.ItemFact.plural": "Mouvements d'objet",
  "models.ItemFact.determinant.defined": "le mouvement d'un objet",
  "models.ItemFact.determinant.undefined": "un mouvement d'objet",
  "models.ItemFact.determinants.defined": "les mouvements d'objet",
  "models.ItemFact.determinants.undefined": "des mouvements d'objet",
  "models.Item.singular": "objet",
  "models.Item.plural": "objets",
  "models.Item.determinant.defined": "l'objet",
  "models.Item.determinant.undefined": "un objet",
  "models.Item.determinants.defined": "les objets",
  "models.Item.determinants.undefined": "des objets",
  "models.Item.views.dq-item-not-in-workplace-room.label": "Espaces des objets differents des espaces des postes de travail",
  "models.Item.views.dq-item-not-in-workplace-room.help": "Liste des objets physiques dans des postes de travail qui sont dans des espaces qui sont differents des espaces des postes de travail",
  "models.Item.properties.id.label": "Identifiant de l'objet",
  "models.Item.properties.price.label": "Prix",
  "models.Item.properties.price.description": "Le prix d'achat de l'objet s'il est diff\xE9rent du prix du type d'objet",
  "models.Item.properties.reference.label": "R\xE9f\xE9rence de l'objet",
  "models.Item.properties.reference.description": "La r\xE9f\xE9rence de l'objet est utilis\xE9 pour le retrouver et pour differencier cet objet des autres",
  "models.Item.properties.code.label": "Code d'immobilisation",
  "models.Item.properties.code.description": "Le num\xE9ro d'immobilisation est utilis\xE9 pour conserver le num\xE9ro comptable",
  "models.Item.properties.purchaseDate.label": "Date d'achat",
  "models.Item.properties.purchaseDate.description": "La date d'achat de l'objet",
  "models.Item.properties.room.label": "Espace de l'objet",
  "models.Item.properties.itemAffectationsCount.label": "Nombre d'associations aux personnes",
  "models.Item.properties.itemAffectationsCount.description": "Le nombre d'associations de cet objet aux personnes",
  "models.Floor.singular": "\xE9tage",
  "models.Floor.plural": "\xE9tages",
  "models.Floor.determinant.defined": "l'\xE9tage",
  "models.Floor.determinant.undefined": "un \xE9tage",
  "models.Floor.determinants.defined": "les \xE9tages",
  "models.Floor.determinants.undefined": "des \xE9tages",
  "models.Floor.description": "Les \xE9tages represent un plateau de travail ou un niveau d'un b\xE2timent",
  "models.Floor.views.map.help": "Le plan de l'\xE9tage %{name} en 2d",
  "models.Floor.views.map.label": "Plan 2d",
  "models.Floor.views.3d.help": "Le plan de l'\xE9tage %{name} en 3d",
  "models.Floor.views.3d.label": "Plan 3d",
  "models.Floor.views.cuby.help": "Le plan de l'\xE9tage %{name} en 3d",
  "models.Floor.views.cuby.label": "3d",
  "models.Floor.views.simple-list.help": "Lister les \xE9tages avec peu de d\xE9tails",
  "models.Floor.views.simple-list.label": "Liste Simple",
  "models.Floor.views.geojson.help": "Voir les infos en GeoJson",
  "models.Floor.views.geojson.label": "Copier les coordonn\xE9es GeoJson",
  "models.Floor.views.standalone-2d-map.help": "Le plan de l'\xE9tage %{name} en 2d sans menu",
  "models.Floor.views.standalone-2d-map.label": "Plan 2d uniquement",
  "models.Floor.properties.id.label": "Identifiant de l'\xE9tage",
  "models.Floor.properties.name.label": "Nom de l'\xE9tage",
  "models.Floor.properties.name.description": "Le nom de l'\xE9tage est utilis\xE9 pour pouvoir le retrouver facilement.",
  "models.Floor.properties.level.label": "Niveau",
  "models.Floor.properties.level.description": "Le niveau de l'\xE9tage permet de d\xE9finir sa position par rapport aux autres \xE9tages, par exemple utilisez 0 pour le RDC ou -1 pour les parkings",
  "models.Floor.properties.backgroundLayout.label": "Fond de plan",
  "models.Floor.properties.backgroundLayout.description": "Le fond de plan permet d'avoir un premier niveau de calque afin de pouvoir redessiner les plans, il doit \xEAtre \xE0 l'\xE9chelle",
  "models.Floor.properties.backgroundLayoutOpacity.label": "Opacit\xE9 du fond de plan",
  "models.Floor.properties.backgroundLayoutOpacity.description": "L'opacit\xE9 permet de voir plus ou moins le fond de plan",
  "models.Floor.properties.regulatoryCapacity.label": "Capacit\xE9 r\xE9glementaire",
  "models.Floor.properties.regulatoryCapacity.description": "La capacit\xE9 r\xE9glementaire du plateau, permet de g\xE9rer l'\xE9vacuation du public et des employ\xE9s",
  "models.Floor.properties.pathfindingGraph.label": "Graphe de navigation de l'\xE9tage",
  "models.Floor.properties.pathfindingGraph.description": "Le graphe de navigation permet de calculer les chemins les plus courts entre les points de l'\xE9tage",
  "models.Floor.properties.workplacesCount.label": "Nombre de postes de travail",
  "models.Floor.properties.workplacesCount.description": "Le nombre de postes de travail dans l'\xE9tage est calcul\xE9 automatiquement",
  "models.Floor.properties.workplacesRatio.label": "Ratio postes de travail",
  "models.Floor.properties.workplacesRatio.description": "Le ratio postes de travail est le nombre de m\xE9tres carr\xE9s dans l'\xE9tage divis\xE9 par le nombre de postes de travail, cette valeur est calcul\xE9 automatiquement",
  "models.Floor.properties.peopleCount.label": "Nombre d'affectations",
  "models.Floor.properties.peopleCount.description": "Le nombre de personnes affect\xE9es dans la l'\xE9tage, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail",
  "models.Floor.properties.totalPeopleCount.label": "Nombre d'affectations totale",
  "models.Floor.properties.totalPeopleCount.description": "Le nombre de personnes affect\xE9es dans la l'\xE9tage, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail",
  "models.Floor.properties.peopleRatio.label": "Ratio d'occupation",
  "models.Floor.properties.peopleRatio.description": "Le ratio d'occupation est le nombre de m\xE9tres carr\xE9s dans l'\xE9tage divis\xE9 par le nombre de personnes affect\xE9es soit directement dans les espaces, soit via un poste de travail, cette valeur est calcul\xE9e",
  "models.Floor.properties.freeWorkplacesCount.label": "Nombre de postes libres",
  "models.Floor.properties.freeWorkplacesCount.description": "Nombre de postes libres dans l'\xE9tage",
  "models.Floor.properties.flexWorkplacesCount.label": "Nombre de postes flex",
  "models.Floor.properties.flexWorkplacesCount.description": "Nombre de postes flex dans l'\xE9tage",
  "models.Floor.properties.roomsArea.label": "Surface qualifi\xE9e",
  "models.Floor.properties.roomsArea.description": "La surface qualifi\xE9e est la somme des surfaces des espaces",
  "models.Floor.properties.roomsCount.label": "Nombre d'espaces",
  "models.Floor.properties.roomsCount.description": "Le nombre d'espaces pr\xE9sent dans cet \xE9tage",
  "models.Floor.properties.sharedWorkplacesCount.label": "Nombre de postes de travail partag\xE9s",
  "models.Floor.properties.sharedWorkplacesCount.description": "Nombre de postes de travail partag\xE9s dans l'\xE9tage par au moins 2 personnes",
  "models.Floor.properties.sharedWorkplacesRatio.label": "Taux de postes de travail partag\xE9s",
  "models.Floor.properties.sharedWorkplacesRatio.description": "Taux de postes de travail partag\xE9s par au moins 2 personnes par rapport \xE0 l'ensemble des postes de travail de l'\xE9tage",
  "models.Floor.properties.flexRatio.label": "Taux de postes de travail en flex",
  "models.Floor.properties.flexRatio.description": "Le taux de poste de travail en flex est calcul\xE9 en divisant le nombre de postes de travail en flex par le nombre total de postes de travail",
  "models.Floor.properties.transitWorkplacesCount.label": "Nombre de postes de travail de passage",
  "models.Floor.properties.transitWorkplacesCount.description": "Nombre de postes de travail de passage, ces postes ne sont pas comptabilis\xE9s dans les postes libres et ne sont pas en flex",
  "models.Floor.properties.height.label": "Hauteur sous plafond",
  "models.Floor.properties.height.description": "La hauteur sous plafond de l'\xE9tage",
  "models.Floor.properties.mapScale.label": "\xC9chelle du plan",
  "models.Floor.properties.mapScale.description": "L'\xE9chelle permet de calculer en proportion les surfaces r\xE9elles et la taille des objets",
  "models.FactType.singular": "Type de Fait",
  "models.FactType.plural": "Types de Fait",
  "models.FactType.determinant.defined": "le type de fait",
  "models.FactType.determinant.undefined": "un type de fait",
  "models.FactType.determinants.defined": "les types de fait",
  "models.FactType.determinants.undefined": "des types de fait",
  "models.Fact.singular": "Fait",
  "models.Fact.plural": "Faits",
  "models.Fact.determinant.defined": "le fait",
  "models.Fact.determinant.undefined": "un fait",
  "models.Fact.determinants.defined": "les faits",
  "models.Fact.determinants.undefined": "des faits",
  "models.DistributionCostType.singular": "type de distribution des co\xFBts",
  "models.DistributionCostType.plural": "types de distribution des co\xFBts",
  "models.DistributionCostType.determinant.defined": "le type de distribution des co\xFBts",
  "models.DistributionCostType.determinant.undefined": "un type de distribution des co\xFBts",
  "models.DistributionCostType.determinants.defined": "les types de distribution des co\xFBts",
  "models.DistributionCostType.determinants.undefined": "des types de distribution des co\xFBts",
  "models.DistributionCostType.properties.name.label": "Nom du type de distribution des co\xFBts",
  "models.DistributionCostType.properties.code.labe": "Code",
  "models.DistributionCostType.properties.code.description": "Le code est utilis\xE9 afin de pouvoir calculer automatiquement les co\xFBts associ\xE9s",
  "models.DimensionTypeToBuilding.singular": "Type de calque d'affectation du b\xE2timent",
  "models.DimensionTypeToBuilding.plural": "Types de calques d'affectation du b\xE2timent",
  "models.DimensionTypeToBuilding.determinant.defined": "le type de calque d'affectation du b\xE2timent",
  "models.DimensionTypeToBuilding.determinant.undefined": "un type de calque d'affectation du b\xE2timent",
  "models.DimensionTypeToBuilding.determinants.defined": "les types de calques d'affectation du b\xE2timent",
  "models.DimensionTypeToBuilding.determinants.undefined": "des types de calques d'affectation du b\xE2timent",
  "models.DimensionTypeToBuilding.description": "Les types de calques d'affectation du b\xE2timent permettent de d\xE9finir les diff\xE9rents types de calques d'affectation du b\xE2timent. En associant un type de calque d'affectation \xE0 un b\xE2timent, cela permet de transformer un calque d'analyse en calque d'affectation.",
  "models.DimensionType.singular": "Type de calque",
  "models.DimensionType.plural": "Types de calque",
  "models.DimensionType.determinant.defined": "le type de calque",
  "models.DimensionType.determinant.undefined": "un type de calque",
  "models.DimensionType.determinants.defined": "les types de calque",
  "models.DimensionType.determinants.undefined": "des types de calque par \xE9tage",
  "models.DimensionType.properties.id.label": "Identifiant du type de dimension",
  "models.DimensionType.properties.order.label": "Ordre d'affichage",
  "models.DimensionType.properties.order.description": "Permet de trier les types de calque pour les afficher",
  "models.DimensionType.properties.name.label": "Nom du type de dimension",
  "models.DimensionType.properties.code.label": "Code du type de dimension",
  "models.DimensionType.properties.code.description": "Le code permet d'identifier le type de dimension, il est utilis\xE9 lorsque des calculs sp\xE9cifiques s'appliquent sur le type de dimension",
  "models.DimensionToPerson.singular": "Affectation au calque d'affectation",
  "models.DimensionToPerson.plural": "Affectations aux calques d'affectation",
  "models.DimensionToPerson.description": "Permet d'affecter une personne \xE0 un quartier, territoire ou village",
  "models.DimensionToPerson.determinant.defined": "l'affectation au calque d'affectation",
  "models.DimensionToPerson.determinant.undefined": "une affectation au calque d'affectation ",
  "models.DimensionToPerson.determinants.defined": "les affectations aux calques d'affectation",
  "models.DimensionToPerson.determinants.undefined": "des affectations aux calques d'affectation",
  "models.DimensionRoom.singular": "Calque d'analyse des espaces",
  "models.DimensionRoom.plural": "Calques d'analyse des espaces",
  "models.DimensionRoom.determinant.defined": "le calque d'analyse des espaces",
  "models.DimensionRoom.determinant.undefined": "un calque d'analyse des espaces",
  "models.DimensionRoom.determinants.defined": "les calques d'analyse des espaces",
  "models.DimensionRoom.determinants.undefined": "des calques d'analyse des espaces",
  "models.DimensionRoom.properties.id.label": "Identifiant du calque d'analyse des espaces",
  "models.DimensionFloor.singular": "Calque d'analyse par \xE9tage",
  "models.DimensionFloor.plural": "Calques d'analyse par \xE9tage",
  "models.DimensionFloor.determinant.defined": "le calque d'analyse par \xE9tage",
  "models.DimensionFloor.determinant.undefined": "un calque d'analyse par \xE9tage",
  "models.DimensionFloor.determinants.defined": "les calques d'analyse par \xE9tage",
  "models.DimensionFloor.determinants.undefined": "des calques d'analyse par \xE9tage",
  "models.DimensionFloor.properties.id.label": "Identifiant du calque d'analyse par \xE9tage",
  "models.DimensionFloor.properties.peopleCount.label": "Nombre d'affectations",
  "models.DimensionFloor.properties.peopleCount.description": "Le nombre de personnes affect\xE9es, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail pour cet \xE9tage",
  "models.DimensionFloor.properties.totalPeopleCount.label": "Nombre total d'affectations indirects sur l'\xE9tage",
  "models.DimensionFloor.properties.totalPeopleCount.description": "Le nombre total de personnes affect\xE9es indirects sur l'\xE9tage, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail, mais pas via les calques d'affectations qui sont qu'au niveau du b\xE2timent",
  "models.DimensionBuilding.singular": "Calque d'analyse par b\xE2timent",
  "models.DimensionBuilding.plural": "Calques d'analyse par b\xE2timent",
  "models.DimensionBuilding.determinant.defined": "le calque d'analyse par b\xE2timent",
  "models.DimensionBuilding.determinant.undefined": "un calque d'analyse par b\xE2timent",
  "models.DimensionBuilding.determinants.defined": "les calques d'analyse par b\xE2timent",
  "models.DimensionBuilding.determinants.undefined": "des calques d'analyse par b\xE2timent",
  "models.DimensionBuilding.properties.id.label": "Identifiant du calque d'analyse par b\xE2timent",
  "models.DimensionBuilding.properties.dimensionPeopleCount.label": "Nombre d'affectations directement \xE0 ce calque d'affectation",
  "models.DimensionBuilding.properties.dimensionPeopleCount.description": "Le nombre de personnes qui sont affect\xE9es \xE0 ce calque d'affectation pour l'ensemble du b\xE2timent",
  "models.DimensionBuilding.properties.totalPeopleCount.label": "Nombre total d'affectations",
  "models.DimensionBuilding.properties.totalPeopleCount.description": "Le nombre total de personnes affect\xE9es, soit directement aff\xE9ct\xE9 aux espaces, soit \xE0 travers un poste de travail, soit via un calque d'affectation",
  "models.Dimension.singular": "Calque d'analyse",
  "models.Dimension.plural": "Calques d'analyse",
  "models.Dimension.determinant.defined": "le calque d'analyse",
  "models.Dimension.determinant.undefined": "un calque d'analyse",
  "models.Dimension.determinants.defined": "les calques d'analyse",
  "models.Dimension.determinants.undefined": "des calques d'analyse",
  "models.Dimension.properties.id.label": "Identifiant du calque d'analyse",
  "models.Dimension.properties.id.description": "Identifiant interne \xE0 Surfy",
  "models.Dimension.properties.name.label": "Nom du calque d'analyse",
  "models.Dimension.properties.name.description": "Utile pour diff\xE9rencier le calque parmis d'autres",
  "models.Dimension.properties.color.label": "Couleur",
  "models.Dimension.properties.color.description": "La couleur de calque d'analyse permet de diff\xE9rencier les espaces sur le plan",
  "models.Dimension.properties.value.label": "Valeur num\xE9rique",
  "models.Dimension.properties.value.description": "La valeur peut \xEAtre utilis\xE9 pour associ\xE9 le calque \xE0 une valeur num\xE9rique afin de pouvoir r\xE9aliser des statisques analytiques",
  "models.Dimension.properties.peopleCount.label": "Nombre d'affectations directes",
  "models.Dimension.properties.peopleCount.description": "Le nombre de personnes qui sont affect\xE9es directement \xE0 ce calque d'affectation dans le b\xE2timent",
  "models.Dimension.properties.manualPeopleCount.label": "Nombre d'affectations directes manuelle",
  "models.Dimension.properties.manualPeopleCount.description": "Le nombre de personnes qui sont affect\xE9es directement \xE0 ce calque d'affectation sans tenir compte des affectations avec des personnes r\xE9elles",
  "models.Dimension.properties.totalPeopleCount.label": "Nombre total d'affectations directes",
  "models.Dimension.properties.totalPeopleCount.description": "Le nombre de personnes total qui sont affect\xE9es directement \xE0 ce calque d'affectation dans le b\xE2timent, l'addition des personnes r\xE9elles affect\xE9s et du nombre de personnes affect\xE9s manuellement",
  "models.Dimension.properties.carbonFootprintPerMeter.label": "Empreinte carbone par m\xE8tre carr\xE9",
  "models.Dimension.properties.carbonFootprintPerMeter.description": "L'empreinte carbone par m\xE8tre carr\xE9 permet de calculer l'empreinte carbone en kilogramme de CO2 d'un calque d'analyse par m\xE8tres carr\xE9s",
  "models.CostCenterFloor.singular": "centre de co\xFBt des \xE9tages",
  "models.CostCenterFloor.plural": "centres de co\xFBt des \xE9tages",
  "models.CostCenterFloor.determinant.defined": "le centre de co\xFBt des \xE9tages ",
  "models.CostCenterFloor.determinant.undefined": "un centre de co\xFBt des \xE9tages",
  "models.CostCenterFloor.determinants.defined": "les centres de co\xFBt des \xE9tages",
  "models.CostCenterFloor.determinants.undefined": "des centres de co\xFBt des \xE9tages",
  "models.CostCenterBuilding.singular": "centre de co\xFBt des b\xE2timents",
  "models.CostCenterBuilding.plural": "centres de co\xFBt des b\xE2timents",
  "models.CostCenterBuilding.determinant.defined": "le centre de co\xFBt des b\xE2timents ",
  "models.CostCenterBuilding.determinant.undefined": "un centre de co\xFBt des b\xE2timents",
  "models.CostCenterBuilding.determinants.defined": "les centres de co\xFBt des b\xE2timents",
  "models.CostCenterBuilding.determinants.undefined": "des centres de co\xFBt des b\xE2timents",
  "models.CostCenter.singular": "centre de co\xFBt",
  "models.CostCenter.plural": "centres de co\xFBt",
  "models.CostCenter.description": "Le centre de co\xFBt permet de r\xE9partir les espaces dynamiquement pour la refacturation",
  "models.CostCenter.determinant.defined": "le centre de co\xFBt",
  "models.CostCenter.determinant.undefined": "un centre de co\xFBt",
  "models.CostCenter.determinants.defined": "les centres de co\xFBt",
  "models.CostCenter.determinants.undefined": "des centres de co\xFBt",
  "models.CostCenter.properties.id.label": "Identifiant du centre de co\xFBt",
  "models.CostCenter.properties.name.label": "Nom du centre de co\xFBt",
  "models.CostCenter.properties.color.label": "Couleur",
  "models.CostCenter.properties.distributeByFloor.label": "Distribuer par \xE9tage",
  "models.CostCenter.properties.distributeByFloor.description": "R\xE9partir au prorata l'espace utilis\xE9 par ce centre de co\xFBt sur l'\xE9tage sur les autres centres de co\xFBt du m\xEAme l'\xE9tage",
  "models.CostCenter.properties.distributeByBuilding.label": "Distribuer par b\xE2timent",
  "models.CostCenter.properties.distributeByBuilding.description": "R\xE9partir au prorata l'espace utilis\xE9 par ce centre de co\xFBt dans le b\xE2timent sur les autres centres de co\xFBt dans le b\xE2timent",
  "models.ContentRoleToUserCompany.singular": "R\xF4le de contenu de l'utilisateur de l'entreprise",
  "models.ContentRoleToUserCompany.plural": "R\xF4les de contenu de l'utilisateur de l'entreprise",
  "models.ContentRoleToUserCompany.determinant.defined": "le r\xF4le de contenu de l'utilisateur de l'entreprise",
  "models.ContentRoleToUserCompany.determinant.undefined": "un r\xF4le de contenu de l'utilisateur de l'entreprise",
  "models.ContentRoleToUserCompany.determinants.defined": "les r\xF4les de contenu de l'utilisateur de l'entreprise",
  "models.ContentRoleToUserCompany.determinants.undefined": "des r\xF4les de contenu de l'utilisateur de l'entreprise",
  "models.ContentRoleToJupUiTenantOperation.singular": "Association r\xF4le de contenu aux op\xE9rations d'interface pour une entreprise",
  "models.ContentRoleToJupUiTenantOperation.plural": "Association r\xF4le de contenu aux op\xE9rations d'interface pour une entreprise",
  "models.ContentRoleToJupUiTenantOperation.determinant.defined": "l'association du r\xF4le de contenu aux op\xE9rations d'interface pour une entreprise",
  "models.ContentRoleToJupUiTenantOperation.determinant.undefined": "une association du r\xF4le de contenu aux op\xE9rations d'interface pour une entreprise",
  "models.ContentRoleToJupUiTenantOperation.determinants.defined": "les associations du r\xF4le de contenu aux op\xE9rations d'interface pour une entreprise",
  "models.ContentRoleToJupUiTenantOperation.determinants.undefined": "des associations du r\xF4le de contenu aux op\xE9rations d'interface pour une entreprise",
  "models.ContentRoleToFloor.singular": "Association r\xF4le de contenu aux \xE9tages",
  "models.ContentRoleToFloor.plural": "Associations r\xF4le de contenu aux \xE9tages",
  "models.ContentRoleToFloor.determinant.defined": "l'association du r\xF4le de contenu aux \xE9tages",
  "models.ContentRoleToFloor.determinant.undefined": "une association du r\xF4le de contenu aux \xE9tages",
  "models.ContentRoleToFloor.determinants.defined": "les associations du r\xF4le de contenu aux \xE9tages",
  "models.ContentRoleToFloor.determinants.undefined": "des associations du r\xF4le de contenu aux \xE9tages",
  "models.ContentRoleToBuilding.singular": "Association r\xF4le de contenu aux b\xE2timents",
  "models.ContentRoleToBuilding.plural": "Associations r\xF4le de contenu aux b\xE2timents",
  "models.ContentRoleToBuilding.determinant.defined": "l'association du r\xF4le de contenu aux b\xE2timents",
  "models.ContentRoleToBuilding.determinant.undefined": "une association du r\xF4le de contenu aux b\xE2timents",
  "models.ContentRoleToBuilding.determinants.defined": "les associations du r\xF4le de contenu aux b\xE2timents",
  "models.ContentRoleToBuilding.determinants.undefined": "des associations du r\xF4le de contenu aux b\xE2timents",
  "models.ContentRole.singular": "R\xF4le de contenu",
  "models.ContentRole.plural": "R\xF4les de contenu",
  "models.ContentRole.determinant.defined": "le r\xF4le de contenu",
  "models.ContentRole.determinant.undefined": "un r\xF4le de contenu",
  "models.ContentRole.determinants.defined": "les r\xF4les de contenu",
  "models.ContentRole.determinants.undefined": "des r\xF4les de contenu",
  "models.CompanyType.singular": "type d'entreprise",
  "models.CompanyType.plural": "type d'entreprises",
  "models.CompanyType.determinant.defined": "le type d'entreprise",
  "models.CompanyType.determinant.undefined": "un type d'entreprise",
  "models.CompanyType.determinants.defined": "les types d'entreprises",
  "models.CompanyType.determinants.undefined": "des types d'entreprises",
  "models.CompanyType.properties.name.label": "Nom du type d'entreprise",
  "models.Company.singular": "entreprise",
  "models.Company.plural": "entreprises",
  "models.Company.determinant.defined": "l'entreprise",
  "models.Company.determinant.undefined": "une entreprise",
  "models.Company.determinants.defined": "les entreprises",
  "models.Company.determinants.undefined": "des entreprises",
  "models.Company.properties.id.label": "Identifiant de l'entreprise",
  "models.Company.properties.logoPath.label": "Logo",
  "models.Company.properties.logoPath.description": "Le chemin du logo de votre entreprise",
  "models.Company.properties.iconPath.label": "Icon",
  "models.Company.properties.iconPath.description": "Le logo de l'entreprise en carr\xE9",
  "models.Company.properties.name.label": "Nom de l'entreprise",
  "models.Company.properties.workingDaysCount.label": "Nombre de jours de travail par semaine",
  "models.Company.properties.workingDaysCount.description": "Le nombre de jours de travail par semaine peut \xEAtre 5 pour les jours ouvr\xE9s, 6 incluant le samedi et 7 incluant le dimanche",
  "models.Company.views.usage.label": "Utilisation des plateformes",
  "models.Company.views.usage.help": "Comprendre l'usage des plateformes disponibles",
  "models.Company.views.cards.help": "Vue des entreprises en tuile",
  "models.Company.views.cards.label": "Tuiles",
  "models.Company.views.dq-fix-inventory.label": "Coh\xE9rence de l'inventaire",
  "models.Company.views.dq-fix-inventory.help": "Trouver et r\xE9parer les incoh\xE9rences de l'inventaire physique et virtuel pour les postes de travail",
  "models.Company.views.dq-shapes-position.label": "Emplacement des formes",
  "models.Company.views.dq-shapes-position.help": "Trouver et repositionner les formes qui se trouvent sur le plan dans un autre espace que celui dans la base de donn\xE9es",
  "models.Company.views.people-info.label": "Statistiques sur les cr\xE9ations d'affectations des personnes",
  "models.Company.views.people-info.help": "Voir les statistiques sur les affectations",
  "models.Company.reports.export-all.fileName": "sauvegarde",
  "models.Company.reports.export-all.help": "Sauvegarder toutes les donn\xE9es de Surfy",
  "models.Company.reports.export-all-duplicate.fileName": "duplication",
  "models.Company.reports.export-all-duplicate.help": "Sauvegarder les donn\xE9es de l'entreprise pour faire une copie de la plateforme",
  "models.Campus.singular": "campus",
  "models.Campus.plural": "campus",
  "models.Campus.description": "Le campus est utilis\xE9 pour regrouper des b\xE2timents qui sont au m\xEAme endroit.",
  "models.Campus.determinant.defined": "le campus",
  "models.Campus.determinant.undefined": "un campus",
  "models.Campus.determinants.defined": "les campus",
  "models.Campus.determinants.undefined": "des campus",
  "models.Campus.views.cards.help": "Vue group\xE9e des b\xE2timents",
  "models.Campus.views.cards.label": "Infos",
  "models.Campus.properties.id.label": "Identifiant du campus",
  "models.Campus.properties.name.label": "Nom du campus",
  "models.Campus.properties.name.description": "Nom du campus",
  "models.Campus.properties.color.label": "Couleur",
  "models.Campus.properties.color.description": "Couleur du campus",
  "models.Campus.properties.externalId.label": "Identifiant externe",
  "models.BuildingType.singular": "type de b\xE2timent",
  "models.BuildingType.plural": "types de b\xE2timents",
  "models.BuildingType.determinant.defined": "le type de b\xE2timent",
  "models.BuildingType.determinant.undefined": "un type de b\xE2timent",
  "models.BuildingType.determinants.defined": "les types de b\xE2timent",
  "models.BuildingType.determinants.undefined": "des types de b\xE2timent",
  "models.BuildingType.properties.id.label": "Identifiant du type de b\xE2timent",
  "models.BuildingType.properties.name.label": "Nom du type de b\xE2timent",
  "models.BuildingType.properties.name.description": "Nom du type de b\xE2timent",
  "models.BuildingType.properties.code.label": "Code",
  "models.BuildingType.properties.code.description": "",
  "models.BuildingType.properties.externalId.label": "Identifiant externe",
  "models.BuildingType.properties.externalId.description": "",
  "models.Building.singular": "b\xE2timent",
  "models.Building.plural": "b\xE2timents",
  "models.Building.determinant.defined": "le b\xE2timent",
  "models.Building.determinant.undefined": "un b\xE2timent",
  "models.Building.determinants.defined": "les b\xE2timents",
  "models.Building.determinants.undefined": "des b\xE2timents",
  "models.Building.description": "Le b\xE2timent est utilis\xE9 pour regrouper les \xE9tages",
  "models.Building.reports.workplaces.fileName": "Postes de travail",
  "models.Building.reports.workplaces.help": "Rapport des postes de travail du b\xE2timent",
  "models.Building.reports.allWorkplaces.fileName": "Postes de travail avec affectations",
  "models.Building.reports.allWorkplaces.help": "Rapport de tous les postes de travail du b\xE2timent incluant les affectations",
  "models.Building.reports.workplaceAffectations.fileName": "Affectations de poste de travail",
  "models.Building.reports.workplaceAffectations.help": "Rapport des affectations aux postes de travail du b\xE2timent",
  "models.Building.reports.buildingPeople.fileName": "Personnes",
  "models.Building.reports.buildingPeople.help": "Rapport des personnes affect\xE9es dans le b\xE2timent",
  "models.Building.reports.organizations.fileName": "Organisations",
  "models.Building.reports.organizations.help": "Rapport des organisations du b\xE2timent",
  "models.Building.reports.buildingItems.fileName": "Inventaire",
  "models.Building.reports.buildingItems.help": "Rapport de l'inventaire du b\xE2timent",
  "models.Building.reports.area.fileName": "Espaces",
  "models.Building.reports.area.help": "Rapport des espaces du b\xE2timent",
  "models.Building.reports.buildingCleaning.fileName": "Prestations",
  "models.Building.reports.buildingCleaning.help": "Rapport des prestations de nettoyage du b\xE2timent",
  "models.Building.reports.buildingDimensions.fileName": "Calques d'analyse",
  "models.Building.reports.buildingDimensions.help": "Rapport des calques d'analyse des espaces du b\xE2timent",
  "models.Building.views.cards.help": "Vue des b\xE2timents en tuile",
  "models.Building.views.cards.label": "Infos",
  "models.Building.views.pictures.help": "Voir les b\xE2timents avec des photos",
  "models.Building.views.pictures.label": "Photos",
  "models.Building.views.gmap.help": "Voir les b\xE2timents sur une carte",
  "models.Building.views.gmap.label": "Carte",
  "models.Building.views.cost-distribution-by-cost-center.help": "<b>Cl\xE9s de r\xE9partition</b> et surface qualifi\xE9es par centre de co\xFBt pour le batiment %{name}",
  "models.Building.views.cost-distribution-by-cost-center.label": "Cl\xE9s de r\xE9partition",
  "models.Building.views.3d-cards.help": "Voir les b\xE2timents en 3d",
  "models.Building.views.3d-cards.label": "3d",
  "models.Building.views.assets.help": "Les actifs immobiliers",
  "models.Building.views.assets.label": "Immobilier",
  "models.Building.views.cuby.help": "Le plan en <b>3d</b> interactif du b\xE2timent %{name}",
  "models.Building.views.cuby.label": "Plan 3d",
  "models.Building.views.3d.help": "Le plan en 3d du b\xE2timent %{name} (cuby)",
  "models.Building.views.3d.label": "Plan 3d",
  "models.Building.views.clone.help": "Les <b>sc\xE9narios</b> et projets du b\xE2timent %{name}",
  "models.Building.views.clone.label": "Sc\xE9narios",
  "models.Building.views.building-ifc.help": "Exporter ce b\xE2timent en IFC pour le BIM",
  "models.Building.views.building-ifc.label": "IFC",
  "models.Building.views.zbre-sync.help": "Synchroniser le b\xE2timent avec la plateforme Zbre",
  "models.Building.views.zbre-sync.label": "Synchronisation Zbre",
  "models.Building.views.inventory.help": "<b>L'inventaire</b> du b\xE2timent %{name}",
  "models.Building.views.inventory.label": "Inventaire",
  "models.Building.views.list-simple.help": "Lister les b\xE2timents avec peu de d\xE9tails",
  "models.Building.views.list-simple.label": "Liste simple",
  "models.Building.views.building-3d-gmap.label": "B\xE2timent 3d sur le plan",
  "models.Building.views.building-3d-gmap.help": "Voir le b\xE2timent en 3d sur un plan",
  "models.Building.properties.id.label": "Identifiant du b\xE2timent",
  "models.Building.properties.name.label": "Nom du b\xE2timent",
  "models.Building.properties.name.description": "Nom du b\xE2timent ou du sc\xE9nario",
  "models.Building.properties.picture.label": "Photo du b\xE2timent",
  "models.Building.properties.picture.description": "Vous pouvez utiliser une photo de votre b\xE2timent pour le rep\xE9rer rapidement depuis la page d'accueil (voir les b\xE2timents avec des photos) ou pour illustrer les vues des collaborateurs",
  "models.Building.properties.documents.label": "Documents associ\xE9s",
  "models.Building.properties.documents.description": "Conservez un lien vers l'emplacement des documents associ\xE9s \xE0 ce b\xE2timent dans votre GED",
  "models.Building.properties.securityDeposit.label": "D\xE9p\xF4t de garantie",
  "models.Building.properties.securityDeposit.description": "Montant de la caution d\xE9pos\xE9e \xE0 la signature du bail",
  "models.Building.properties.buildings.label": "B\xE2timents sc\xE9narios",
  "models.Building.properties.buildings.description": "Sc\xE9narios g\xE9n\xE9r\xE9s \xE0 partir de ce b\xE2timent",
  "models.Building.properties.constructionYear.label": "Ann\xE9e de construction de l'immeuble",
  "models.Building.properties.constructionYear.description": "Ann\xE9e de construction de l'immeuble permettant de mesurer sa v\xE9tust\xE9",
  "models.Building.properties.parkingSpaceCount.label": "Nombre de places de parking",
  "models.Building.properties.parkingSpaceCount.description": "Nombre de places de parking disponibles",
  "models.Building.properties.yearlyParkingRent.label": "Loyer annuel des parkings",
  "models.Building.properties.yearlyParkingRent.description": "Part du loyer allou\xE9e au parking",
  "models.Building.properties.yearlyTaxFees.label": "Montant des taxes annuelles",
  "models.Building.properties.yearlyTaxFees.description": "Montant total des taxes et imp\xF4ts",
  "models.Building.properties.yearlyExploitationFees.label": "Charges d'exploitation annuelles",
  "models.Building.properties.yearlyExploitationFees.description": "Montant annuel des charges d'exploitations (exemple : eau, \xE9l\xE9ctricit\xE9)",
  "models.Building.properties.rentReferenceIndex.label": "Indice de r\xE9f\xE9rence des loyers",
  "models.Building.properties.rentReferenceIndex.description": "L'indice de r\xE9f\xE9rence des loyers (IRL) sert de base pour r\xE9viser les loyers des logements vides ou meubl\xE9s",
  "models.Building.properties.color.label": "Couleur",
  "models.Building.properties.color.description": "La couleur du b\xE2timent est utilis\xE9e pour d\xE9finir la couleur de fond dans les pr\xE9sentations des \xE9tages ou du b\xE2timent et pouvoir distinguer ce b\xE2timent des autres",
  "models.Building.properties.roomsCount.label": "Nombre d'espaces",
  "models.Building.properties.roomsCount.description": "Le nombre d'espaces cr\xE9\xE9s dans ce b\xE2timent",
  "models.Building.properties.roomsArea.label": "Surface qualifi\xE9e",
  "models.Building.properties.roomsArea.description": "La surface qualifi\xE9e repr\xE9sente l'ensemble des zones mod\xE9lis\xE9es dans Surfy",
  "models.Building.properties.workplacesCount.label": "Nombre de postes de travail",
  "models.Building.properties.workplacesCount.description": "Le nombre de postes de travail dans le b\xE2timent est calcul\xE9 automatiquement",
  "models.Building.properties.workplacesRatio.label": "Ratio postes de travail",
  "models.Building.properties.workplacesRatio.description": "Le ratio par poste de travail est le nombre de m\xE9tres carr\xE9s dans le b\xE2timent divis\xE9 par le nombre de postes de travail, cette valeur est calcul\xE9e automatiquement",
  "models.Building.properties.peopleCount.label": "Nombre d'affectations",
  "models.Building.properties.peopleCount.description": "Le nombre de personnes affect\xE9es dans le b\xE2timent, aux quartiers, aux espaces ou aux postes de travail",
  "models.Building.properties.peopleRatio.label": "Ratio d'occupation",
  "models.Building.properties.peopleRatio.description": "Le ratio d'occupation est le nombre de m\xE9tres carr\xE9s dans le b\xE2timent divis\xE9 par le nombre de personnes affect\xE9es soit directement dans les quartiers, espaces, ou postes de travail, cette valeur est calcul\xE9e",
  "models.Building.properties.freeWorkplacesCount.label": "Nombre de postes libres",
  "models.Building.properties.freeWorkplacesCount.description": "Nombre de postes libres dans le b\xE2timent",
  "models.Building.properties.flexWorkplacesCount.label": "Nombre de postes flex",
  "models.Building.properties.flexWorkplacesCount.description": "Nombre de postes de travail en flex dans le b\xE2timent",
  "models.Building.properties.address.label": "Adresse",
  "models.Building.properties.address.description": "L'adresse du b\xE2timent pour le localiser sur la carte",
  "models.Building.properties.yearlyCondominiumFees.label": "Charges annuelles",
  "models.Building.properties.yearlyCondominiumFees.description": "Montant des charges annuelles de gestion ou de copropri\xE9t\xE9 par exemple",
  "models.Building.properties.yearlyRent.label": "Loyer annuel",
  "models.Building.properties.yearlyRent.description": "Montant du loyer annuel pour ce b\xE2timent",
  "models.Building.properties.leaseStartDate.label": "Date du d\xE9but du bail",
  "models.Building.properties.leaseStartDate.description": "Date du d\xE9but du bail",
  "models.Building.properties.leaseEndDate.label": "Date de fin du bail",
  "models.Building.properties.leaseEndDate.description": "Date de fin du bail",
  "models.Building.properties.purchaseDate.label": "Date d'achat du b\xE2timent",
  "models.Building.properties.purchaseDate.description": "Date d'achat du b\xE2timent",
  "models.Building.properties.buildingId.label": "Identifiant du b\xE2timent de r\xE9f\xE9rence",
  "models.Building.properties.buildingId.description": "L'identifiant du b\xE2timent de r\xE9f\xE9rence est utilis\xE9 dans le cadre de la cr\xE9ation de sc\xE9narios, l'identifiant permet l'association avec ce b\xE2timent",
  "models.Building.properties.building.label": "B\xE2timent d'origine",
  "models.Building.properties.building.description": "Le b\xE2timent d'origne ou de r\xE9f\xE9rence est utilis\xE9 dans le cadre de la cr\xE9ation de sc\xE9narios, il permet d'identifier le b\xE2timent d'origine depuis lequel le b\xE2timent a \xE9t\xE9 cr\xE9e",
  "models.Building.properties.jupUiLayout.label": "Vision du plan par d\xE9faut",
  "models.Building.properties.jupUiLayout.description": "\xC0 la premi\xE8re ouverture d'un plan de ce b\xE2timent, la vision par d\xE9faut sera s\xE9lectionn\xE9, suite \xE0 la premi\xE8re ouverture, ce sera la vision encours qui sera appliqu\xE9",
  "models.Building.properties.sharedWorkplacesCount.label": "Nombre de postes de travail partag\xE9s",
  "models.Building.properties.sharedWorkplacesCount.description": "Nombre de postes de travail partag\xE9s dans le b\xE2timent par au moins 2 personnes",
  "models.Building.properties.sharedWorkplacesRatio.label": "Taux de postes de travail partag\xE9s",
  "models.Building.properties.sharedWorkplacesRatio.description": "Taux de postes de travail partag\xE9s par au moins 2 personnes par rapport \xE0 l'ensemble des postes de travail du b\xE2timent",
  "models.Building.properties.flexRatio.label": "Taux de postes de travail en flex",
  "models.Building.properties.flexRatio.description": "Le taux de poste de travail en flex est calcul\xE9 en divisant le nombre de postes de travail en flex par le nombre total de postes de travail",
  "models.Building.properties.transitWorkplacesCount.label": "Nombre de postes de travail de passage",
  "models.Building.properties.transitWorkplacesCount.description": "Nombre de postes de travail de passage, ces postes ne sont pas comptabilis\xE9s dans les postes libres et ne sont pas en flex",
  "models.Building.properties.regulatoryCapacity.label": "Capacit\xE9 r\xE9glementaire",
  "models.Building.properties.regulatoryCapacity.description": "La capacit\xE9 r\xE9glementaire du plateau, permet de g\xE9rer l'\xE9vacuation du public et des employ\xE9s",
  "models.Building.properties.dimensionPeopleCount.label": "Nombre d'affectations aux calques",
  "models.Building.properties.dimensionPeopleCount.description": "Le nombre de personnes qui sont affect\xE9es aux calques d'affectations associ\xE9 \xE0 ce b\xE2timent",
  "models.Building.properties.userCompanyOwner.label": "Utilisateur propri\xE9taire du b\xE2itment",
  "models.Building.properties.userCompanyOwner.description": "L'utilisateur propri\xE9taire du b\xE2timent voit toujours le b\xE2timent m\xEAme en pr\xE9sence de r\xF4le de contenu, en cas de cr\xE9ation de sc\xE9nario, l'utilisateur qui a cr\xE9e le sc\xE9nario devient le propri\xE9taire, le propri\xE9taire peut \xEAtre chang\xE9 par la suite",
  "models.AuthentificationConnection.singular": "Connection d'authentification",
  "models.AuthentificationConnection.plural": "Connections d'authentification",
  "models.AuthentificationConnection.determinant.defined": "la connection d'authentification",
  "models.AuthentificationConnection.determinant.undefined": "une connection d'authentification",
  "models.AuthentificationConnection.determinants.defined": "les connections d'authentification",
  "models.AuthentificationConnection.determinants.undefined": "des connections d'authentification",
  "models.ApiUserToJupRole.singular": "Association d'utilisateur d'api au r\xF4le",
  "models.ApiUserToJupRole.plural": "Associations d'utilisateur d'api au r\xF4le",
  "models.ApiUserToJupRole.determinant.defined": "l'association d'utilisateur d'api au r\xF4le",
  "models.ApiUserToJupRole.determinant.undefined": "une association d'utilisateur d'api au r\xF4le",
  "models.ApiUserToJupRole.determinants.defined": "les associations d'utilisateur d'api au r\xF4le",
  "models.ApiUserToJupRole.determinants.undefined": "des associations d'utilisateur d'api au r\xF4le",
  "models.ApiUserToContentRole.singular": "Association d'utilisateur d'api au r\xF4le de contenu",
  "models.ApiUserToContentRole.plural": "Associations d'utilisateur d'api au r\xF4le de contenu",
  "models.ApiUserToContentRole.determinant.defined": "l'association d'utilisateur d'api au r\xF4le de contenu",
  "models.ApiUserToContentRole.determinant.undefined": "une association d'utilisateur d'api au r\xF4le de contenu",
  "models.ApiUserToContentRole.determinants.defined": "les associations d'utilisateur d'api au r\xF4le de contenu",
  "models.ApiUserToContentRole.determinants.undefined": "des associations d'utilisateur d'api au r\xF4le de contenu",
  "models.ApiUser.singular": "Utilisateur d'api",
  "models.ApiUser.plural": "Utilisateurs d'api",
  "models.ApiUser.determinant.defined": "l'utilisateur d'api",
  "models.ApiUser.determinant.undefined": "un utilisateur d'api",
  "models.ApiUser.determinants.defined": "les utilisateurs d'api",
  "models.ApiUser.determinants.undefined": "des utilisateurs d'api",
  "models.ApiUser.properties.clientSecret.label": "Code secret",
  "models.ApiUser.properties.clientSecret.description": "le mot de passe secret de votre compte API peut \xEAtre g\xE9n\xE9r\xE9 et ne devrait jamais \xEAtre communiqu\xE9",
  "ToggleZbreSyncCheckbox.label": "Synchroniser avec les occupations temps r\xE9el dans Z#bre",
  "ToggleZbreSyncCheckbox.help": "La synchronisation permet de colorier les espaces et les postes de travail en fonction des capteurs plac\xE9s dans Z#bre",
  "FloorSpaceSlider.title": "Espace entre chaque \xE9tage en centim\xE8tres",
  "FloorSelector.title": "S\xE9lectionner les \xE9tages",
  "FloorSelector.focus": "S\xE9lectionner uniquement cet \xE9tage",
  "FloorSelector.selectAll.false": "S\xE9lectionner tous les \xE9tages",
  "FloorSelector.selectAll.true": "D\xE9s\xE9lectionner tous les \xE9tages",
  "ToggleEnableMissingFloors.label": "Afficher les \xE9tages fant\xF4mes",
  "ToggleEnableMissingFloors.help": "Afficher les \xE9tages fant\xF4mes pour les \xE9tages manquantes entre l'\xE9tage de niveau 0 et l'\xE9tage la plus haute en fonction des niveaux des vraies \xE9tages",
  "RoomGraphHandler.buttons.generateGraph.label": "G\xE9n\xE9rer le graphe d'orientation",
  "RoomGraphHandler.buttons.generateGraph.description": "G\xE9n\xE9rer le graphe d'orientation permet de calculer les n\u0153uds par lesquels la recherche de chemin peut trouver les espaces et le mobilier. Si l'espace d'origine peut \xEAtre s\xE9lectionn\xE9, le graphe a d\xE9j\xE0 \xE9t\xE9 g\xE9n\xE9r\xE9.",
  "RoomGraphHandler.buttons.selectOriginRoom.label": "S\xE9lectionner l'espace d'origine",
  "RoomGraphHandler.buttons.selectOriginRoom.description": "Veuillez s\xE9lectionner un espace puis vous pourrez via cette option le d\xE9finir comme espace de d\xE9part",
  "RoomGraphHandler.icons.displayNodes.description": "Afficher les chemins dans les pi\xE8ces",
  "RoomGraphHandler.icons.displayBoundingBoxes.description": "Afficher les espaces d'exclusions du mobilier",
  "RoomGraphHandler.icons.enablePathfinding.description": "Activer le trac\xE9 du chemin depuis l'espace source avec la forme sous la souris",
  "RoomGraphHandler.rooms.origin": "Espace d'origine",
  "ThemeModeSwitchMenuItem.dark.label": "Passer en mode lumineux",
  "ThemeModeSwitchMenuItem.dark.help": "Utiliser le mode lumineux permet de travailler avec un fond blanc",
  "ThemeModeSwitchMenuItem.light.label": "Passer en mode sombre",
  "ThemeModeSwitchMenuItem.light.help": "Utiliser le mode sombre permet de travailler avec des couleurs sombre en fond pour moins se fatiguer les yeux",
  "copilot.actions.add.door": "Une porte vient d'\xEAtre ajout\xE9e par Surfy Copilot",
  "generateDocumentation.properties.technicalName": "Nom technique",
  "generateDocumentation.properties.belongsTo": "Entit\xE9s associ\xE9es (unique)",
  "generateDocumentation.properties.hasMany": "Entit\xE9s associ\xE9es (liste)",
  "generateDocumentation.properties.base": "Propri\xE9t\xE9s de base",
  "generateDocumentation.properties.mandatory": "Propri\xE9t\xE9s obligatoires",
  "help.key1": "hello %{name}",
  "help.key2": "bye %{name}"
};

// public/assets/i18n/en.json
var en_default = {
  "ImportUpdateOption.label": "Update",
  "ImportUpdateOption.help": "Update selected objects",
  "ImportUpdateEntitiesTable.description": "List of objects that require updating",
  "PropertyTypeErrors.title": "The following values do not exist for property <b>%{propertyTypeLabel}</b> in <b>%{objectTypeLabel}</b>",
  "ImportDeleteOption.label": "Remove",
  "ImportDeleteOption.help": "Delete selected objects in Surfy",
  "ImportDeleteEntitiesTable.description": "List of objects that require deletion in Surfy",
  "ImportCreateOption.label": "Create",
  "ImportCreateOption.help": "Perform creation of selected objects in Surfy",
  "ImportCreateEntitiesTable.description": "List of objects that require creation",
  "ImportCreateEntitiesTable.open.label": "View entities to create",
  "ImportCreateEntitiesTable.open.help": "See the details of the entities to create because there are more than 500 lines, for performance reasons the lines are hidden by default",
  "ImportCreateAllOption.label": "Create All",
  "ImportCreateAllOption.help": "Perform the creation of all objects without selecting them individually",
  "entitiesImportType.date.wrongImportFormat": "The format of the date %{value} is not correct, the expected format is %{excelImportDateFormat}",
  "InfoTabContent.description": "Notable errors or information during import",
  "InfoTabContent.noChange": "No change was observed in comparison",
  "InfoTabContent.copyIds": "Copy entity IDs to clipboard",
  "InfoTabContent.equals.multiple": "%{count} existing and unmodified objects",
  "InfoTabContent.equals.one": "A single object already existing and not modified",
  "InfoTabContent.open.label": "See import details",
  "InfoTabContent.open.help": "See import detail for identical comparisons",
  "ImportObjectType.tabs.create.label": "Creation",
  "ImportObjectType.tabs.update.label": "Update",
  "ImportObjectType.tabs.errors.label": "Info",
  "ImportObjectType.tabs.delete.label": "Deletion",
  "ImportObjectType.usedKeys": "The reconciliation key used is:",
  "ImportObjectType.errors.noChange": "No modification was observed in comparison",
  "CompareEntities.buttons.reset.label": "Restart",
  "CompareEntities.buttons.reset.help": "Restart the import",
  "ObjectTypeImportKeys.title": "The keys available to reconcile %{determinants.undefined} in the order of your choice, if you wish to modify one of the key properties you must use the identifier as key",
  "ObjectTypeImportScalarProperties.help": "Copy to clipboard",
  "ImportHelpDrawerIconButton.icon.help": "See help on importing data for %{determinants.defined}",
  "ImportHelpDrawerIconButton.drawer.title": "Help with import %{determinants.undefined}",
  "ImportHelpDrawerIconButton.drawer.tabLabel": "Import help",
  "DownloadObjectTypeImportTemplateFileButton.label": "Download the import template",
  "DownloadObjectTypeImportTemplateFileButton.help": "Download an import template in execl with the names of the columns that you can choose",
  "ImportHelpDrawer.tab": "Help import %{objectTypeLabel}",
  "BelongsToListItem.clipboard": "Copy column title to clipboard",
  "BelongsToListItem.noKeys": "No unique key available",
  "BelongsToImportHelp.title": "Object types associated with %{objectTypeLabel} sorted by available import keys",
  "FileDropZone.dropZone": "Move and drag the import file into this area or click in the area to select your file",
  "EntitiesImporter.tabs.file": "File",
  "EntitiesImporter.tabs.copypaste": "Copy and paste",
  "TextAreaImporter.errors.title": "Errors encountered during import",
  "TextAreaImporter.textarea.placeholder": "Copy and paste your columns from Excel with the title to find the properties to update",
  "TextAreaImporter.help": "Use tab between each column by including the name of each column in the first row or paste directly from excel",
  "ImportOptionsBar.buttons.compare.label": "Compare",
  "ImportOptionsBar.buttons.compare.help": "Start the comparison with the data in surfy in order to determine the modifications to import",
  "ImportErrors.errors.title": "Errors encountered during import",
  "DashboardView.tabs.reports": "Excel reports",
  "IconShape.values.circle": "Circle",
  "IconShape.values.rectangle": "Rectangle",
  "IconShape.values.triangle": "Triangle",
  "EntityDialogSearchList.NoResult": "No results were found, please clear your filters or change your search",
  "FieldTypeEntity.edit": "Change %{determinant.defined}",
  "FieldTypeEntity.remove": "Remove %{determinant.defined}",
  "FieldTypeEntity.add": "Add %{determinant.undefined}",
  "LegendSelector.title": "Select legend",
  "LegendSelector.labels.default": "Default caption",
  "HasManyStandaloneNoData.noData": "There is no associated %{targetObjectTypeLabel} for %{determinant.defined}",
  "FieldTypeAddress.edit": "Change address",
  "FieldTypeAddress.remove": "Delete address",
  "AutocompleteAddress.autocomplete.placeholder": "Find your address here",
  "AddressDialog.search": "Find address",
  "AddressDialog.validate": "Validate",
  "FieldTypePassword.icons.copy": "Copy the contents of the password to the clipboard",
  "FieldTypePassword.icons.generate": "Generate a unique password",
  "FieldTypeModel3d.Remove": "Remove 3D model",
  "FieldTypeModel3d.Upload": "Change 3D model",
  "FieldTypeImage.Remove": "Remove image",
  "FieldTypeImage.Upload": "Change image",
  "FieldTypeIcon.Edit": "Change icon",
  "FieldTypeIcon.Remove": "Remove the icon",
  "FieldTypeColor.Remove": "Remove color",
  "FieldTypeColor.NoColorHelp": "Select a color",
  "FieldTypeColor.NotHexMatchError": "The field does not respect the hexadecimal format of a color",
  "CopyImagePathToClipboard.CopyUrl": "Copy url",
  "ColorBox.NoColorHelp": "Select a color via the palette",
  "ChangeColor.classic": "Select a color with the advanced plate",
  "weight.kilogram": "Kilogram",
  "weight.gram": "Gram",
  "distance.meter": "Meters",
  "distance.centimeter": "Centimeters",
  "FieldTypeIndexBoolean.help": "Modify the value directly",
  "FieldTypeIndexBoolean.values.true": "Yes",
  "FieldTypeIndexBoolean.values.false": "No",
  "calculatedProperties.properties.workplacesCount.label": "Number of workstations",
  "calculatedProperties.properties.workplacesCount.description": "The total number of workstations in the spaces",
  "calculatedProperties.properties.workplacesRatio.label": "Workstation ratio",
  "calculatedProperties.properties.workplacesRatio.description": "The workstation ratio is the number of square meters divided by the number of workstations",
  "calculatedProperties.properties.peopleCount.label": "Number of assignments",
  "calculatedProperties.properties.peopleCount.description": "The number of people affected, either directly assigned to the spaces or through a workstation",
  "calculatedProperties.properties.totalPeopleCount.label": "Total number of assignments",
  "calculatedProperties.properties.totalPeopleCount.description": "The total number of people assigned, either directly assigned to spaces or through a workstation",
  "calculatedProperties.properties.peopleRatio.label": "Occupancy ratio",
  "calculatedProperties.properties.peopleRatio.description": "The occupancy ratio is the number of square meters divided by the number of people assigned either directly to the spaces or via a workstation",
  "calculatedProperties.properties.freeWorkplacesCount.label": "Number of vacancies",
  "calculatedProperties.properties.freeWorkplacesCount.description": "Total number of vacancies",
  "calculatedProperties.properties.flexWorkplacesCount.label": "Number of flex positions",
  "calculatedProperties.properties.flexWorkplacesCount.description": "Total number of flex positions",
  "calculatedProperties.properties.occupancyRate.label": "Occupancy rate",
  "calculatedProperties.properties.occupancyRate.description": "Allows you to know the occupancy rate of workstations, it is the number of people assigned divided by the number of workstations",
  "calculatedProperties.properties.expansionRatio.label": "Expansion rate",
  "calculatedProperties.properties.expansionRatio.description": "Allows to know the rate of use of workstations, it is the inverse of the number of people affected divided by the number of workstations",
  "calculatedProperties.properties.roomsArea.label": "Qualified surface",
  "calculatedProperties.properties.roomsArea.description": "The qualified surface is the sum of the surfaces of the spaces",
  "calculatedProperties.properties.roomsCount.label": "Number of spaces",
  "calculatedProperties.properties.roomsCount.description": "The total number of spaces",
  "calculatedProperties.properties.sharedWorkplacesCount.label": "Number of shared workstations",
  "calculatedProperties.properties.sharedWorkplacesCount.description": "Total number of workstations shared by at least 2 people",
  "calculatedProperties.properties.sharedWorkplacesRatio.label": "Rate of shared workstations",
  "calculatedProperties.properties.sharedWorkplacesRatio.description": "Percentage of workstations shared by at least 2 people compared to all workstations",
  "calculatedProperties.properties.flexRatio.label": "Rate of flex workstations",
  "calculatedProperties.properties.flexRatio.description": "The flex workstation rate is calculated by dividing the number of flex workstations by the total number of workstations",
  "calculatedProperties.properties.transitWorkplacesCount.label": "Number of transit workstations",
  "calculatedProperties.properties.transitWorkplacesCount.description": "Number of temporary workstations, these positions are not counted in free positions and are not flex",
  "calculatedProperties.properties.seatsCount.label": "Number of seats",
  "calculatedProperties.properties.seatsCount.description": "The total number of seats",
  "calculatedProperties.properties.seatsPeopleRatio.label": "Seating rate by assignment",
  "calculatedProperties.properties.seatsPeopleRatio.description": "The number of seats per person affected",
  "calculatedProperties.properties.carbonFootprint.label": "Carbon footprint",
  "calculatedProperties.properties.carbonFootprint.description": "The carbon footprint is the number of CO2 emitted",
  "calculatedProperties.properties.totalCapacityCount.label": "Total capacity",
  "calculatedProperties.properties.totalCapacityCount.description": "The total seat capacity is the sum of the number of seats and the non-seated capacity at the space level.",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.label": "Rate of seats per workstation",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.description": "The rate of places per workstation is the total capacity of the spaces divided by the number of workstations, this allows us to understand the rate of places according to the number of workstations",
  "DeleteMultipleDialog.title": "Remove %{determinants.undefined}",
  "DeleteMultipleDialog.content": "You are about to delete <b>%{determinants.undefined}</b> , this action is not reversible and may have impacts, are you sure you want to perform this action?",
  "DeleteMultipleDialog.cancel.label": "Cancel",
  "DeleteMultipleDialog.cancel.help": "Undelete",
  "DeleteMultipleDialog.delete.label": "Remove",
  "DeleteMultipleDialog.delete.help": "Permanently delete %{determinants.defined}",
  "DownloadTableToExcelIconButton.help": "Export %{determinants.defined} selected",
  "DeleteMultipleEntities.help": "Delete selected %{determinants.defined}",
  "EntityCreateModeSelect.open-on-create.text": "Open after creation",
  "EntityCreateModeSelect.open-on-create.help": "Once your object is created, you will be redirected to the object's view page to see its properties and associations.",
  "EntityCreateModeSelect.keep-creating.text": "Continue to create",
  "EntityCreateModeSelect.keep-creating.help": "This option allows you to continue creating several objects in succession while retaining the properties of the old creation",
  "EntityCreateModeSelect.edit-on-create.text": "Edit after creation",
  "EntityCreateModeSelect.edit-on-create.help": "Once your object is created, you will be redirected to the object's edition page in order to complete its properties and associations",
  "TableView.options": "options",
  "ErrorImpossibleToFindTheEntity.text": "It is not possible to find %{determinant.defined} wanted",
  "ErrorImpossibleToFindTheEntities.text": "Cannot find the %{determinants.defined}",
  "EntityPropertyTypesMandatoryNotRespected.title": "The following properties are required",
  "entity.properties.mandatory": "The property %{name} is required.",
  "entity.properties.calculated": "The %{name} is calculated automatically.",
  "entity.properties.readonly-lock": "The %{name} is read-only and can not be modified from this page.",
  "EntityHasManyProperties.associations.others": "Associations for %{determinant.defined}",
  "EntityHasManyProperties.associations.reporting": "Reporting associations for %{determinant.defined}",
  "EntityHasManyProperties.associations.security": "Security associations for %{determinant.defined}",
  "EntitiesView.NoItem": "There is no %{objectType} , you can create your first %{objectType} using the button below",
  "DeleteDialog.title": "Remove %{determinant.undefined}",
  "DeleteDialog.content": "You are about to delete <b>%{determinant.undefined}</b> , this action is not reversible and may have impacts, are you sure you want to perform this action?",
  "DeleteDialog.cancel.label": "Cancel",
  "DeleteDialog.cancel.help": "Undelete",
  "DeleteDialog.delete.label": "Remove",
  "DeleteDialog.delete.help": "Permanently delete %{determinant.defined}",
  "ExportQueryNodeToFileButton.help.list": "Download in excel %{determinants.defined}",
  "entity.excel.headers.count": "%{label} : Number",
  "entity.properties.externalId.label": "External key",
  "entity.properties.externalId.description": "This field can be used to remember the correspondence key in another software",
  "entity.properties.createdAt.label": "Creation date",
  "entity.properties.createdAt.description": "Date of creation in Surfy, allows you to know the history of creation in Surfy",
  "entity.properties.userCompanyCreatedBy.label": "Created by user",
  "entity.properties.userCompanyCreatedBy.description": "Create by this user in Surfy, allows you to know the history of the creation in Surfy",
  "entity.properties.userCompanyCreatedById.label": "ID of the user who created",
  "entity.properties.userCompanyCreatedById.description": "Create by the identifier of this user in Surfy, allows you to know the history of the creation in Surfy",
  "entity.properties.userCompanyUpdatedById.label": "ID of the user who modified",
  "entity.properties.userCompanyUpdatedById.description": "Updated by the identifier of this user in Surfy, allows you to know the history of the creation in Surfy",
  "entity.properties.userCompanyUpdatedBy.label": "Updated by user",
  "entity.properties.userCompanyUpdatedBy.description": "Updated by this user in Surfy, allows to know the history of the modification in Surfy",
  "entity.properties.updatedAt.label": "Date of update",
  "entity.properties.updatedAt.description": "Update date in Surfy, allows you to know the history of modifications",
  "entity.delete.button.label": "Remove",
  "entity.delete.button.help": "Delete %{determinant.defined} %{name}",
  "entity.cancel": "Cancel",
  "entity.see.label": "See",
  "entity.see.help": "See %{determinant.defined} %{name}",
  "entity.views.dataquality.help": "Reports and actions for data quality for %{determinants.defined}",
  "entity.views.dataquality.label": "Data quality",
  "entity.views.list.help": "List %{determinants.defined}",
  "entity.views.list.label": "List",
  "entity.views.import.help": "Import %{determinants.undefined}",
  "entity.views.import.label": "Import",
  "entity.views.details.help": "See %{determinant.defined} %{name}",
  "entity.views.details.label": "See",
  "entity.views.create.help": "Create %{determinant.undefined}",
  "entity.views.create.label": "Create",
  "entity.views.edit.help": "Edit %{determinant.defined} %{name}",
  "entity.views.edit.label": "Edit",
  "entity.views.dashboard.help": "Dashboard for %{determinant.defined} %{name}",
  "entity.views.dashboard.label": "Dashboard",
  "entity.create.validate.help": "Validate creative for %{determinant.defined}",
  "entity.create.validate.label": "Validate the creation",
  "entity.create.button.help": "Start creation for %{determinant.defined}",
  "entity.create.button.label": "Create %{determinant.defined}",
  "entity.create.association.help": "Start creation for %{determinant.undefined}",
  "entity.create.association.label": "Create %{determinant.undefined}",
  "entity.update.button.label": "Save",
  "entity.update.button.help": "Save %{determinant.defined} %{name}",
  "entity.createAndAssociate.button.label": "Create and associate",
  "entity.createAndAssociate.button.help": "Create and associate %{determinant.undefined}",
  "entity.associate.button.label": "Associate",
  "entity.associate.button.help": "Associate %{determinant.undefined}",
  "entity.back": "Return",
  "WorkCanvas.Options.ZoomCanvasOption.label.enable": "Enable magnifier around mouse",
  "WorkCanvas.Options.ZoomCanvasOption.label.disable": "Disable magnifier around mouse",
  "WorkCanvas.Options.ZoomCanvasOption.help.enable": "Activating the magnifying glass allows you to keep an overview of an area or floor and see the behavior of the mouse in a precise way",
  "WorkCanvas.Options.ZoomCanvasOption.help.disable": "Stop mouse magnifier",
  "WorkCanvas.Options.AddSegmentPointOption.label.enable": "Add a vertex on a segment",
  "WorkCanvas.Options.AddSegmentPointOption.label.disable": "Stop adding a vertex on a segment",
  "WorkCanvas.Options.AddSegmentPointOption.help.enable": "Adding a vertex on a segment allows you to put a point anywhere without taking into account the other points",
  "WorkCanvas.Options.AddSegmentPointOption.help.disable": "Stop creating vertices on segments",
  "WorkCanvas.Options.AddSegmentPointOption.description": "Select a space to be able to create a vertex on one of the segments",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.enable": "Activate the inversion of the orientation of the creation of the vertices",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.disable": "Disable the inversion of the orientation of the creation of the vertices",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.enable": "Activating the inversion of the orientation of the creation of the vertices allows to change the direction of creation of the vertices",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.disable": "Deactivate the inversion to find the initial direction of creation of the vertices",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.enable": "Activate the inversion of the right angle for the creation of the vertices",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.disable": "Disable inversion of the right angle for the creation of vertices",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.enable": "Activate the inversion allows to use the right angle during the creation of the vertices on the other segment",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.disable": "Disable inversion allows to use the right angle on the initial segment",
  "LoadingSvgCircle.pleaseWait": "Please wait while syncing",
  "WorkCanvas.Options.AddRoomPointOption.label.enable": "Add a summit",
  "WorkCanvas.Options.AddRoomPointOption.label.disable": "Stop adding a vertex",
  "WorkCanvas.Options.AddRoomPointOption.help.enable": "Adding a vertex makes it possible to rework with more precision a form",
  "WorkCanvas.Options.AddRoomPointOption.help.disable": "Stop creating summits",
  "WorkCanvas.Options.SplitPolygoneOption.label": "Separate space",
  "WorkCanvas.Options.SplitPolygoneOption.help": "Create 2 spaces from another space by choosing 2 vertices",
  "WorkCanvas.Options.SplitRoomPointOption.help": "Split vertex allows multiple vertices to be reused for each segment and thus create separate spaces",
  "WorkCanvas.Options.SplitRoomPointOption.label": "Separate vertex",
  "WorkCanvas.Options.MergeRoomPointsOption.help": "Merge vertices allows to reuse the same vertex for different spaces",
  "WorkCanvas.Options.MergeRoomPointsOption.label": "Merge vertices",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.help": "Remove vertices from space",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.label": "Remove selected vertices",
  "WorkCanvas.Options.ZoomOnEdgePoints.help": "Focus on one or more points so you can work quietly",
  "WorkCanvas.Options.ZoomOnEdgePoints.label": "Focus on points",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.enable": "Move object type",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.disable": "Stop moving",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.enable": "Move the object type on the plane",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.disable": "Stop moving object type",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.help": "Remove object type from workstation type",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.label": "Remove object type",
  "WorkCanvas.Options.DeleteItemTypePointsOption.help": "Remove vertices from object type",
  "WorkCanvas.Options.DeleteItemTypePointsOption.label": "Remove selected vertices",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.enable": "Add a shape",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.disable": "Stop adding the shape",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.enable": "Add a shape for an object type on the plan",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.disable": "Stop creating the shape",
  "WorkCanvas.Options.AddItemTypeShapeSaveOption.help": "Save the type of object being created",
  "WorkCanvas.Options.AddItemTypePointOption.label.enable": "Add a summit",
  "WorkCanvas.Options.AddItemTypePointOption.label.disable": "Stop adding a vertex",
  "WorkCanvas.Options.AddItemTypePointOption.help.enable": "Adding a vertex makes it possible to rework with more precision a form",
  "WorkCanvas.Options.AddItemTypePointOption.help.disable": "Stop creating summits",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.enable": "Move spaces",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.disable": "Stop travel",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.enable": "Enable moving spaces on the plan",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.disable": "Stop Moving Spaces",
  "WorkCanvas.Options.ToggleMoveRoomOption.description": "Once activated, select a space and you can move it",
  "WorkCanvas.Options.DuplicateShapesOption.label": "Duplicate shapes",
  "WorkCanvas.Options.DuplicateShapesOption.help": "Duplicate shapes without properties to quickly create objects or workstations on the plan",
  "CancelDuplicateShapsToRoomMouse.help": "Undo duplicate shapes",
  "ToggleWorkplaceFreeConditionTypeIconButton.or": "See free workstations for all requested days",
  "ToggleWorkplaceFreeConditionTypeIconButton.and": "See free workstations for at least one of the requested days",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.false": "Color free posts %{day}",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.true": "Stop coloring free posts %{day}",
  "FreeWorkplacesDayList.title": "See free places %{days}",
  "FreeWorkplacesDayList.conditions.and": "And",
  "FreeWorkplacesDayList.conditions.or": "Or",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.enable": "Color the checkpoints",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.disable": "Stop coloring crossing posts",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.enable": "See on the color map the workstations that are passing through",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.disable": "No longer seeing passing workstations in a different way on the map",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.enable": "Color shared posts",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.disable": "Stop coloring shared posts",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.enable": "See on the color plan the workstations that are shared by at least 2 people",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.disable": "No longer see shared workstations in a different way on the map",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.enable": "Color the objects without association",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.disable": "Stop coloring objects without association",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.enable": "See free objects on the map",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.disable": "No longer see free objects differently on the map",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.enable": "Color the reservable positions",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.disable": "Stop coloring reservable positions",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.enable": "See on the color plan the workstations that are reservable",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.disable": "No longer see reservable workstations differently in terms of",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.enable": "Coloring free positions",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.disable": "Stop coloring free posts",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.enable": "See the free positions on the map",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.disable": "No longer see free positions differently on the plan",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.enable": "Color the posts in flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.disable": "Stop coloring posts in flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.enable": "See the flex positions on the map",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.disable": "No longer see flex positions differently on the plan",
  "WorkCanvas.Options.CalibrateLayoutOption.help.enable": "Calibrate the map allows you to enlarge or reduce the size of all spaces or move them all on the map",
  "WorkCanvas.Options.CalibrateLayoutOption.help.disable": "Stop calibrating the plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.enable": "Calibrate the plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.disable": "Stop calibrating the plan",
  "CalibrateLayoutDrawer.title": "Calibrate the plan",
  "CalibrateLayoutDrawer.options.mapScale.label": "Align plan scale",
  "CalibrateLayoutDrawer.options.mapScale.help": "Apply the scale factor to the elements of the scale (length and size of texts)",
  "CalibrateLayoutDrawer.options.inputs.scale.label": "Scale factor",
  "CalibrateLayoutDrawer.options.inputs.step.label": "Translation value",
  "CalibrateLayoutDrawer.options.inputs.translate.x.label": "The X axis",
  "CalibrateLayoutDrawer.options.inputs.translate.y.label": "Y axis",
  "CalibrateLayoutDrawer.options.reduce.label": "Reduce",
  "CalibrateLayoutDrawer.options.save.label": "To register",
  "CalibrateLayoutDrawer.options.save.help": "Save the calibration on the plan",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.enable": "Activate the display of icons on the plan in 2d",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.disable": "Disable the display of icons on the map",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.enable": "The icons associated with the types of spaces make it easier to visualize the types of spaces on the plan",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.disable": "View space information",
  "WorkCanvasToggleOptionHelp.shortcut": "Keyboard shortcut: <b>%{shortcut}</b>",
  "WorkCanvasShortcutTooltipHelp.help": "Keyboard shortcut: <b>%{shortcut}</b>",
  "WorkCanvas.Options.ZoomOutOption.label": "Zoom out on the map",
  "WorkCanvas.Options.ZoomOutOption.help": "Zoom out on the map by centering on the position of the mouse",
  "WorkCanvas.Options.ZoomOutOption.description": "You can use the mouse wheel and your touchpad to zoom out",
  "WorkCanvas.Options.ZoomOnMousePosition.help": "Zoom in on the mouse position to be able to work more precisely on an area",
  "WorkCanvas.Options.ZoomOnMousePosition.label": "Zoom in on the mouse position",
  "WorkCanvasLoadingIcon.title": "Loading the plan",
  "WorkCanvas.Options.ZoomOnItemsOption.help": "Zoom in on one or more objects in order to be able to work more precisely",
  "WorkCanvas.Options.ZoomOnItemsOption.label": "Zoom in on the selection",
  "WorkCanvas.Options.ZoomOnDimensionsOption.label": "Zoom into assignment layers",
  "WorkCanvas.Options.ZoomOnDimensionsOption.help": "Zoom directly to the assignment layers in which you can reserve on the plan",
  "WorkCanvas.Options.ZoomInOption.label": "Zoom in on the map",
  "WorkCanvas.Options.ZoomInOption.help": "Zoom in on the map by centering towards the top left of the screen",
  "WorkCanvas.Options.ZoomInOption.description": "You can use the mouse wheel and your touchpad to zoom",
  "WorkCanvas.Options.ToggleSelectModeOption.help.enable": "Get the plan options to be able to zoom or see the details of the shapes and activate the keyboard shortcuts, you can also click in the plan to activate the manipulation",
  "WorkCanvas.Options.ToggleSelectModeOption.help.disable": "???",
  "WorkCanvas.Options.ToggleSelectModeOption.label.enable": "Start working with the workspace",
  "WorkCanvas.Options.ToggleSelectModeOption.label.disable": "Stop the manipulation of the workspace",
  "WorkCanvas.Options.ToggleSelectModeOption.description": "You can select multiple shapes by holding <b>SHIFT</b> and clicking on the shapes",
  "WorkCanvas.Options.ToggleEditModeOption.label.enable": "Enable plan edit mode",
  "WorkCanvas.Options.ToggleEditModeOption.label.disable": "Disable plan edit mode",
  "WorkCanvas.Options.ToggleEditModeOption.help.enable": "Activate the editing mode of the plan allows you to create and move shapes or create spaces",
  "WorkCanvas.Options.ToggleEditModeOption.help.disable": "Deactivate plan editing mode to return to plan reading mode",
  "WorkCanvas.Options.ToggleEditModeOption.description": "When rotating objects and workstations, by default an angle of 45 \xB0 is applied, to deactivate it use the keyboard key <b>SHIFT</b>",
  "WorkCanvas.Options.FitToViewOption.label": "Center the map to see everything",
  "WorkCanvas.Options.FitToViewOption.help": "Allows you to have an overview of the plan",
  "HeatMapSelection.title": "Color the spaces with a heat map to understand the densities, the heat maps are not exportable in image for the moment",
  "HeatMapSelection.heatmaps.seatsCount.label": "Seating density",
  "HeatMapSelection.heatmaps.seatsCount.description": "Color the spaces according to the number of seats",
  "HeatMapSelection.heatmaps.workplacesCount.label": "Workstation density",
  "HeatMapSelection.heatmaps.workplacesCount.description": "Color the spaces according to the number of workstations",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.label": "Density of assignments to workstations",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.description": "Color the spaces according to the number of workstation assignments",
  "HeatMapSelection.heatmaps.carbonFootprintCount.label": "Furniture Carbon Footprint Density",
  "HeatMapSelection.heatmaps.carbonFootprintCount.description": "Color the spaces according to the carbon footprint of the furniture",
  "FurnituresSelectionDragZone.help": "Move group",
  "FurnituresSelection.move": "Move the whole group",
  "WorkCanvas.Options.TextAnchorOption.label.enable": "Set display text location",
  "WorkCanvas.Options.TextAnchorOption.label.disable": "Stop display text management",
  "WorkCanvas.Options.TextAnchorOption.help.enable": "Move display text",
  "WorkCanvas.Options.TextAnchorOption.help.disable": "Stop moving display text",
  "TextAnchorDrawer.title": "Change display text location for %{determinant.defined} %{name}",
  "WorkCanvas.Options.TextAnchorDrawer.label.enable": "Move display text",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.label": "Customize text position",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.help": "Allows you to activate the customization of the text position of the map",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.label": "Activate anchor display",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.help": "Allows you to activate the display of the segment and the anchor point for this space",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.label": "Reset text position",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.help": "This option returns the text position for this space to its original location",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.label": "Reset anchor position",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.help": "This option returns the anchor position for this space to its original location",
  "ShapeTextAnchorDrawer.empty": "Please select a compatible shape to move the display text",
  "IconsPicker.DisplayAll.text": "Show all",
  "IconsPicker.DisplayAll.help": "Attention loading can be a bit long",
  "IconsPicker.close": "Close icon selection",
  "IconPickerSearch.SearchPlaceholder": "Look for an icon with at least 3 letters",
  "EntitiesAutocomplete.searchEmpty.help.false": "Select %{determinants.defined} without %{objectTypeName}",
  "EntitiesAutocomplete.searchEmpty.help.true": "Return to standard search mode",
  "SearchFieldString.searchEmpty.help.false": "Search for empty or worthless elements",
  "SearchFieldString.searchEmpty.help.true": "Re-enable standard search",
  "SearchFilters.buttons.clear.label": "Clear all filters",
  "SearchFilters.buttons.clear.help": "Clear all filters and reset them to their initial state to ensure you can see all available entities",
  "RightSearchFilterDrawer.filter": "Filter %{determinants.defined}",
  "RightSearchFilterDrawer.tabLabel": "Filter",
  "RightSearchFilterDrawer.buttons.clear.label": "Clear all filters",
  "RightSearchFilterDrawer.buttons.clear.help": "Clear all filters and reset them to their initial state to ensure you can see all available entities",
  "PropertSelectorDrawer.help": "Select the properties you want to display in the table",
  "PropertSelectorDrawer.options.reset.label": "Reset selection",
  "PropertSelectorDrawer.options.reset.help": "Return the selection of properties to their initial state",
  "PropertSelectorDrawer.tabLabel": "Properties",
  "TableSelectionAllCheckbox.checked.true": "Unselect all",
  "TableSelectionAllCheckbox.checked.false": "Select all",
  "TableSelectionAllCheckbox.help": "Select or deselect all rows (including those not visible in the paginated list)",
  "TableOptionsRow.checked.true": "Unselect all",
  "TableOptionsRow.checked.false": "Select all",
  "TableOptionsRow.help": "Select or deselect all lines",
  "ErrorTextZone.reload": "Redo the operation",
  "ReportErrorSteps.report.title": "You have just encountered an error",
  "ReportErrorSteps.report.description": "This error has been reported to our teams and we will try to correct it as quickly as possible.",
  "ReportErrorSteps.report.steps.title": "You can try in order",
  "ReportErrorSteps.report.steps.reload": "Reload the page and see if the error is resolved",
  "ReportErrorSteps.report.steps.logout": "Disconnect and return to this page after reconnecting",
  "ReportErrorSteps.report.steps.contact": "Contact us so that we can offer you an alternative as quickly as possible",
  "ReportErrorByMailButton.label": "Contact us",
  "RefreshPageButton.label": "Reload page",
  "Errors.networkError": "Connection or network issues have been detected, please wait and try again in a few seconds",
  "ShowEntityDrawer.title.show": "See %{determinant.defined}",
  "ShowEntityDrawer.title.listItem": "See information for %{determinant.defined} in the sidebar",
  "EditEntityDrawer.title.edit": "Edit %{determinant.defined}",
  "RightDrawerContent.close": "Close the right panel by clicking on the cross.",
  "DropDownOptions.moreOptions": "See more options for %{determinant.defined} %{name}",
  "BuildingFloorsList.title": "Navigate the floors",
  "RefetchEntityButton.refetch": "Reload data",
  "RefetchEntitiesButton.refetch": "Reload visible object data",
  "RefetchObjectTypeIcon.help": "Reload data for %{determinant.defined}",
  "ImpactButtonReload.help.single": "Update calculated data for %{determinant.defined}",
  "ImpactButtonReload.help.list": "Update calculated data for %{determinants.defined}",
  "EditInlineToggleIconButton.edit.label": "Edit",
  "EditInlineToggleIconButton.edit.help": "Edit the properties for %{determinant.defined} directly on this page",
  "EditInlineToggleIconButton.cancel.help": "Stop editing without saving",
  "ConfirmationButtons.confirm": "Confirm the completion of the action",
  "ConfirmationButtons.cancel": "Cancel",
  "ConfirmationButtons.loading": "The action is running, please wait",
  "EmailNotVerified.errorMessage": "Please validate your email ( %{email} ), once validated, you can log out and then log back in to access Surfy",
  "NoRoleAssociated.noRole": "No role seems to be associated with your user for the company %{tenant} , please contact your administrator",
  "NoCompanies.title.whatIsSurfy": "What is Surfy?",
  "NoCompanies.NoCompanyAssigned": "You are not associated with any platform, you can not use surfy for the moment",
  "NoCompanies.whatIsSurfy": "Surfy offers to digitize building plans to facilitate management of the work environment.<br/> You can use the Surfy app to<ul><li> arrange spaces</li><li> assign employees</li><li> rebill spaces</li><li> analyze spaces</li><li> manage compliance and regulations</li><li> connect spaces</li><li> manage attendance schedules</li><li> reserve workspaces</li></ul>",
  "NoCompanies.whatIsSurfyForTeams": "Surfy offers to digitize building plans to facilitate management of the work environment. You can use the Surfy app to<ul><li> manage your presence schedule</li><li> declare your presence at the office</li><li> reserve a workspace</li><li> indicate that you are teleworking</li><li> see which colleagues have reserved a workstation on the plan</li></ul>",
  "NoCompanies.ContactUs.text": "Log in to your company platform",
  "NoCompanies.ContactUs.subject": "Access Surfy",
  "NoCompanies.ContactUs.body": "Hello, could you let me access the Surfy app? Thank you.",
  "NoCompanies.accessSurfy.title": "Why can't I access Surfy?",
  "NoCompanies.accessSurfy.alreadyUsing": "If your company already uses Surfy, please contact your work environment manager to request access or contact us via the following link",
  "NoCompanies.accessSurfy.joinTenant": "Join your company's platform",
  "NoCompanies.notUsing.title": "Your company doesn't use Surfy yet?",
  "NoCompanies.knowMore": "Learn more about Surfy",
  "AuthenticationButton.connections.google-oauth2.label": "Google",
  "AuthenticationButton.connections.google-oauth2.help": "Log in with your Google account",
  "AuthenticationButton.connections.AzureADv2.label": "Office 365",
  "AuthenticationButton.connections.AzureADv2.help": "Connect with your Microsoft professional account via Office 365",
  "AuthenticationButton.connections.auth0.label": "Surfy Account",
  "AuthenticationButton.connections.auth0.help": "Log in with your Surfy account",
  "Auth0AuthenticationButton.connections.auth0.label": "Surfy account (open id)",
  "Auth0AuthenticationButton.connections.auth0.help": "Log in with your Surfy account",
  "EnterpriseConnectionButton.label": "Business",
  "EnterpriseConnectionButton.help": "Log in with your company account via a dedicated authentication like OKTA or DigitalP@ss",
  "EnterpriseConnectionForm.title": "Please enter your email so we can recognize your business",
  "EnterpriseConnectionForm.forms.email.placeholder": "E-mail",
  "EnterpriseConnectionForm.error": "Unable to identify your company with your email",
  "EnterpriseConnectionForm.buttons.validate.label": "Validate",
  "EnterpriseConnectionForm.buttons.validate.help": "Validate the email allows you to know your company and direct you to the right authentication platform",
  "EnterpriseConnectionForm.buttons.back.label": "Return",
  "EnterpriseConnectionForm.buttons.back.help": "Return to the authentication page with all options",
  "LoginView.loadingPage": "Loading the authentication page",
  "LoginView.connections.google-oauth2.label": "Google",
  "LoginView.connections.google-oauth2.help": "Log in with your Google account",
  "LoginView.connections.AzureADv2.label": "Office 365",
  "LoginView.connections.AzureADv2.help": "Connect with your Microsoft professional account via Office 365",
  "LoginView.connections.Username-Password-Authentication.label": "Surfy Account",
  "LoginView.connections.Username-Password-Authentication.help": "Log in with your Surfy account",
  "LoginView.texts.title": "Log in",
  "LoginView.texts.description": "Access Surfy",
  "LoginView.helpers.register": "Register your business with Surfy",
  "LoginView.helpers.moreInfo": "Learn more about Surfy",
  "LoginView.helpers.privacy": "Privacy Policy",
  "CustomUserRegisterForm.tabs.login": "To log in",
  "CustomUserRegisterForm.tabs.signup": "Register",
  "CustomUserRegisterForm.form.email": "E-mail",
  "CustomUserRegisterForm.form.password": "Password",
  "CustomUserRegisterForm.form.firstName": "First name",
  "CustomUserRegisterForm.form.lastName": "Last name",
  "CustomUserRegisterForm.form.confirmPassword": "Password confirmation",
  "CustomUserRegisterForm.buttons.login.label": "Validate",
  "CustomUserRegisterForm.buttons.login.help": "Log in if you already have an account",
  "CustomUserRegisterForm.buttons.signup.label": "Validate",
  "CustomUserRegisterForm.buttons.signup.help": "Subscribe to Surfy if you don't have an account",
  "ReportChart.NoValue": "Without value",
  "ChangeLanguage.title": "Change the language",
  "ChangeLanguage.help": "Change the language of the application",
  "DataQualityTable.numberOfLines": "Number of lines",
  "AllTenantsDataQualityTable.enableAllTenants.label": "Include all platforms",
  "SingleNodeQuery.refetch": "Reload data",
  "ListRefetchButton.refetch": "Reload visible object data",
  "ImpactObjectTypeIconButton.refetch": "Reload all data regardless of filters",
  "CollapseSwitchButton.help.true": "Hide the detail",
  "CollapseSwitchButton.help.false": "See the detail",
  "menu.logout": "Sign out",
  "menu.tenantOperations": "Synchronization",
  "menu.menuLeft.shoppingCart": "Shopping Cart",
  "menu.menuLeft.personCompanies": "Providers",
  "menu.menuLeft.workplace": "Personal work places",
  "menu.menuLeft.security": "security",
  "menu.menuLeft.globalSecurity": "Global security",
  "menu.menuLeft.all": "Administration",
  "menu.menuLeft.operations": "operations",
  "menu.menuLeft.types": "types",
  "menu.menuLeft.roomTypes": "Space typologies",
  "menu.menuLeft.inventory": "inventories",
  "menu.menuLeft.people": "People",
  "menu.menuLeft.spaces": "Spaces",
  "menu.menuLeft.organizations": "Organizations",
  "menu.menuLeft.dimensions": "Analysis layers",
  "menu.menuLeft.api": "API",
  "menu.menuLeft.authentification": "Authentication",
  "menu.menuLeft.globalAdmin": "Global administration",
  "menu.menuLeft.human": "People",
  "menu.menuLeft.things": "Furniture",
  "menu.menuLeft.admin": "Administration",
  "menu.menuLeft.surfy": "Surfy",
  "menu.menuLeft.partnerExportMapping": "Partners",
  "menu.menuLeft.personType": "types",
  "menu.menuLeft.personRelations": "Relationships",
  "menu.menuLeft.affectations": "assignments",
  "menu.menuLeft.buildings": "Buildings",
  "menu.menuLeft.thingsType": "types",
  "menu.menuLeft.spacePoints": "Points",
  "menu.menuLeft.adminReporting": "Reporting",
  "menu.menuLeft.adminCostCenterReporting": "Cost center",
  "menu.menuLeft.adminDimensionReporting": "Dimensions",
  "menu.menuLeft.adminRoomTypeReporting": "Type of spaces",
  "menu.menuLeft.adminOrganizationReporting": "Organizations",
  "menu.menuLeft.adminRoomTypeGroupReporting": "Space typology groups",
  "menu.menuLeft.buildingFacts": "Time-stamped building data",
  "menu.menuLeft.itemsFact": "Time-stamped object data",
  "menu.menuLeft.segments": "Segments",
  "menu.menuLeft.connectors": "Connectors",
  "menu.menuLeft.planning": "Schedules",
  "menu.menuLeft.bookings": "Reservations",
  "menu.menuLeft.help": "Assistance",
  "menu.menuLeft.company": "Platforms",
  "ReduceMenuSwitch.open.true": "Expand menu",
  "ReduceMenuSwitch.open.false": "Collapse the menu to take advantage of the workspace",
  "LogoutMenuLink.logout": "Sign out",
  "HelpPortalListItemLink.label": "Help portal",
  "HelpPortalListItemLink.help": "Discover the Surfy help portal with all our tutorials and user guides",
  "ChangeLogListItemLink.label": "News",
  "ChangeLogListItemLink.help": "Know what's new and changed in Surfy",
  "DisplayRoomTexts.dragOption": "Hold down and change the order in which properties are displayed on the map by moving the field up or down",
  "DisplayRoomTexts.roomPeopleDimensions.label": "Neighborhood",
  "DisplayRoomTexts.roomPeopleDimensions.help": "Show or hide the neighborhood on the map",
  "DisplayRoomTexts.roomSeatsCount.label": "Number of seats",
  "DisplayRoomTexts.roomSeatsCount.help": "Display or not the number of seats on the map",
  "DisplayRoomTexts.roomCapacity.label": "Space Capacity",
  "DisplayRoomTexts.roomCapacity.help": "Show or not the space capacity on the plan",
  "DisplayRoomTexts.roomCostCenter.label": "Cost center",
  "DisplayRoomTexts.roomCostCenter.help": "Show or not the space cost center on the plan",
  "DisplayRoomTexts.roomMergedName.label": "Merged name",
  "DisplayRoomTexts.roomMergedName.help": "Display or not the merged name of the space on the plan, this name groups the display name and the name of the space",
  "DisplayRoomTexts.roomName.label": "Space name",
  "DisplayRoomTexts.roomName.help": "Show or not the name of the space on the plan",
  "DisplayRoomTexts.roomPrettyName.label": "Display name",
  "DisplayRoomTexts.roomPrettyName.help": "Whether or not to display the display name of the space on the map",
  "DisplayRoomTexts.roomArea.label": "Area",
  "DisplayRoomTexts.roomArea.help": "Show or not the surface area of \u200B\u200Bthe space on the plan",
  "DisplayRoomTexts.roomType.label": "Space typology",
  "DisplayRoomTexts.roomType.help": "Display or not the space typology",
  "DisplayRoomTexts.roomPerimeter.label": "Perimeter",
  "DisplayRoomTexts.roomPerimeter.help": "Show or not the perimeter of the space on the plan",
  "DisplayRoomTexts.roomOrganizationLevel1.label": "Service",
  "DisplayRoomTexts.roomOrganizationLevel1.help": "Display or not the name of the space service on the plan",
  "DisplayRoomTexts.roomOrganizationTopLevel.label": "Direction",
  "DisplayRoomTexts.roomOrganizationTopLevel.help": "Show or not the name of the direction of the space on the plan",
  "DisplayRoomTexts.roomPeople.label": "People assigned to spaces",
  "DisplayRoomTexts.roomPeople.help": "Display or not the names of the people assigned to this space on the plan",
  "DisplayRoomTexts.roomWorkplaceAffectations.label": "People assigned to workstations",
  "DisplayRoomTexts.roomWorkplaceAffectations.help": "Display or not the names of people assigned to workstations in this space on the plan",
  "DisplayRoomTexts.roomPeopleCount.label": "Number of assignments",
  "DisplayRoomTexts.roomPeopleCount.help": "Display or not the number of people assigned to this space on the plan",
  "DisplayRoomTexts.roomPeopleRatio.label": "Occupancy ratio",
  "DisplayRoomTexts.roomPeopleRatio.help": "Show or not the space occupancy ratio on the plan",
  "DisplayRoomTexts.roomWorkplacesCount.label": "Number of workstations",
  "DisplayRoomTexts.roomWorkplacesCount.help": "Show or not the number of workstations in the space on the plan",
  "DisplayRoomTexts.roomWorkplacesRatio.label": "Workstation ratio",
  "DisplayRoomTexts.roomWorkplacesRatio.help": "Show or not the ratio of workstations of the space on the plan",
  "DisplayRoomTexts.roomOccupancyRate.label": "Occupancy rate",
  "DisplayRoomTexts.roomOccupancyRate.help": "Display or not the space occupancy rate on the plan",
  "DisplayRoomTexts.roomExpansionRatio.label": "Expansion rate",
  "DisplayRoomTexts.roomExpansionRatio.help": "Show or not the space expansion rate on the plan",
  "DisplayRoomTexts.roomFreeWorkplacesCount.label": "Number of vacancies",
  "DisplayRoomTexts.roomFreeWorkplacesCount.help": "Display or not the number of free positions on the plan",
  "DisplayRoomTexts.roomFlexWorkplacesCount.label": "Number of flex positions",
  "DisplayRoomTexts.roomFlexWorkplacesCount.help": "Display or not the number of flex positions on the plan",
  "DisplayRoomOptions.roomSeatsCount.one": "%{value} seat",
  "DisplayRoomOptions.roomSeatsCount.more": "%{value} seats",
  "DisplayRoomOptions.roomCapacity.one": "Capacity: %{value} place",
  "DisplayRoomOptions.roomCapacity.more": "Capacity: %{value} places",
  "DisplayRoomOptions.roomFreeWorkplacesCount.one": "%{value} free position",
  "DisplayRoomOptions.roomFreeWorkplacesCount.more": "%{value} vacancies",
  "DisplayRoomOptions.roomFlexWorkplacesCount.one": "%{value} flex position",
  "DisplayRoomOptions.roomFlexWorkplacesCount.more": "%{value} flex positions",
  "DisplayRoomOptions.roomWorkplacesCount.one": "%{value} workstation",
  "DisplayRoomOptions.roomWorkplacesCount.more": "%{value} workstations",
  "DisplayRoomOptions.roomPeopleCount.one": "%{value} affected person",
  "DisplayRoomOptions.roomPeopleCount.more": "%{value} people affected",
  "DisplayRoomOptions.roomOccupancyRate": "Occupation: %{value}",
  "DisplayRoomOptions.roomExpansionRatio": "Expansion: %{value}",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.enable": "Manage space display texts",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.disable": "Close display text management",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.enable": "Allows you to configure the texts that will be displayed on the plan for each space",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.disable": "Return to the normal mode of editing the plan.",
  "DisplayRoomTextsDrawer.tabs.map": "Plan",
  "DisplayRoomTextsDrawer.tabs.tooltip": "Tooltip",
  "DisplayRoomTextsDrawer.tabs.base.tabs.rooms": "Spaces",
  "DisplayRoomTextsDrawer.tabs.base.tabs.people": "People",
  "DisplayRoomTextsDrawer.tabs.base.people.description": "To define the properties of the people to display on the plan, please choose in the spaces tab the people assigned to the spaces or to the workstations then choose the properties in this tab",
  "DisplayWorkplaceTexts.workplaceName.label": "Workstation name",
  "DisplayWorkplaceTexts.workplaceName.help": "Display or not the name of the workstation on the map",
  "DisplayWorkplaceTexts.workplaceCostCenter.label": "Cost center",
  "DisplayWorkplaceTexts.workplaceCostCenter.help": "Display or not the cost center of the workstation on the plan",
  "DisplayWorkplaceTexts.people.label": "Show people",
  "DisplayWorkplaceTexts.people.help": "Display or not the people assigned to the workstation on the plan",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.label": "Direction",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.help": "Display or not the directions of the workstations on the plan",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.label": "Service",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.help": "Display or not the services of the workstations on the plan",
  "DisplayPersonTexts.personPicture.label": "People photo",
  "DisplayPersonTexts.personPicture.help": "Display or not the photo of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personName.label": "Name of persons",
  "DisplayPersonTexts.personName.help": "Display or not the name of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personSecurityProfile.label": "Security profile",
  "DisplayPersonTexts.personSecurityProfile.help": "Display or not the security profile of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personOrganizationLevel0.label": "Direction",
  "DisplayPersonTexts.personOrganizationLevel0.help": "Display or not the direction of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personOrganizationLevel1.label": "Service",
  "DisplayPersonTexts.personOrganizationLevel1.help": "Display or not the service of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personOrganizationHierarchy.label": "Organization hierarchy",
  "DisplayPersonTexts.personOrganizationHierarchy.help": "Display or not the department and the direction of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personCostCenter.label": "Cost center",
  "DisplayPersonTexts.personCostCenter.help": "Display or not the cost center of the people assigned to the workstations on the plan",
  "DisplayPersonTexts.personCode.label": "Registration number",
  "DisplayPersonTexts.personCode.help": "Whether or not to display the number of the people assigned to the workstations on the plan",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.enable": "Manage workstation display texts",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.disable": "Close display text management",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.enable": "Allows you to configure the texts that will be displayed on the map for each workstation",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.disable": "Return to the normal mode of editing the plan.",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.enable": "Activate the transparency of the background colors of the spaces",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.disable": "Turn off color transparency",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.enable": "Enabling color transparency allows the background to be seen through spaces",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.disable": "Turning off color transparency resets the colors of spaces",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.description": "The transparency of the colors of the spaces makes it possible to see the background of the plan",
  "WorkCanvas.Options.MapScaleOption.label.enable": "Manage the scale",
  "WorkCanvas.Options.MapScaleOption.label.disable": "Close scale management",
  "WorkCanvas.Options.MapScaleOption.help.enable": "Mandatory configure the scale on your plan in order to have the spaces and objects in the correct scale",
  "WorkCanvas.Options.MapScaleOption.help.disable": "Return to the normal mode of editing the plan.",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.label": "Delete scale",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.help": "Deleting the scale is the same as removing the scale from the plan and deleting it from the base, it will no longer be accessible via other plans. It is not possible to delete a scale that is on multiple floors.",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.label": "Dissociate the scale",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.help": "Unlinking the scale from this plane removes it from the plane, but keeps the scale in the database for future use",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.label": "Zoom in on the scale",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.help": "Zooming makes it easy to find the scale on the map.",
  "WorkCanvas.Options.DrawMapScaleOption.help": "You must configure the scale on your plan, click on the start and end of the scale on the plan in order to calibrate it",
  "ToggleCopilotEnable.label.false": "Activate Surfy Copilot",
  "ToggleCopilotEnable.label.true": "Disable Surfy Copilot",
  "ToggleCopilotEnable.help.false": "Enable Surfy Copilot to enable automatic door recognition",
  "ToggleCopilotEnable.help.true": "Disable Surfy Copilot and return to manual modeling",
  "WorkCanvas.Options.CopilotOption.label.enable": "Surfy Copilot",
  "WorkCanvas.Options.CopilotOption.label.disable": "Close Surfy Copilot options ",
  "WorkCanvas.Options.CopilotOption.help.enable": "Enable and adjust Surfy Copilot options",
  "WorkCanvas.Options.CopilotOption.help.disable": "Return to the plan's normal mode.",
  "WorkCanvas.Options.AddRoomShapeOption.label.enable": "Add a space",
  "WorkCanvas.Options.AddRoomShapeOption.label.disable": "Cancel adding a space",
  "WorkCanvas.Options.AddRoomShapeOption.help.enable": "Add a space on the plan",
  "WorkCanvas.Options.AddRoomShapeOption.help.disable": "Cancel space creation",
  "WorkCanvas.Options.AddRoomShapeOption.description": "The angles of creation are locked at 45\xB0, to unlock them keep pressed the <b>SHIFT</b> keyboard key and continue the creation, to create your vertex position the mouse in the circle at the intersection of the triangle, To start a space by reusing a existing vertex, keep the <b>ALT</b> keyboard key pressed and click on the vertex.",
  "WorkCanvas.Options.AddRoomShapeSaveOption.label": "Save the space currently being modeled",
  "WorkCanvas.Options.AddRoomShapeSaveOption.help": "Save space will automatically close the space and save it allowing you to add objects or workstations to it",
  "WorkCanvas.Options.ViewLegendOption.label.enable": "Preview Legend",
  "WorkCanvas.Options.ViewLegendOption.label.disable": "Close the save legend in the plan image",
  "WorkCanvas.Options.ViewLegendOption.help.enable": "See what the legend section of the plan corresponds to",
  "WorkCanvas.Options.ViewLegendOption.help.disable": "Return to the plan's normal mode.",
  "DownloadImageQualitySlider.label": "Quality of the exported image",
  "DownloadImagePdfButton.label": "Download the plan without legend (PDF)",
  "DownloadImagePdfButton.help": "Download the plan in PDF without legend, this functionality is in beta",
  "WorkCanvas.Options.DownloadImageOption.label.enable": "Save as image",
  "WorkCanvas.Options.DownloadImageOption.label.disable": "Close the plan image save options",
  "WorkCanvas.Options.DownloadImageOption.help.enable": "Save the plan as an image via this option",
  "WorkCanvas.Options.DownloadImageOption.help.disable": "Return to the plan's normal mode.",
  "DownloadImageDrawer.ViewImage.text": "Download the plan with legend (PNG)",
  "DownloadImageDrawer.ViewImage.help": "Download the whole plan in good quality with the legend, the export may take longer.",
  "DownloadImageDrawer.ViewImageNoLegend.text": "Download the plan without legend (PNG)",
  "DownloadImageDrawer.ViewImageNoLegend.help": "Download the whole plan in good quality without the caption, the export may take longer.",
  "DownloadImageDrawer.ScreenshotNoLegend.text": "Screenshot without caption",
  "DownloadImageDrawer.ScreenshotNoLegend.help": "Download the image of what you see on the screen without caption, the output will be fast but the quality of the export will not be optimal",
  "DownloadBuildingImagesAccordion.accordion.title": "Export images of the whole building",
  "DownloadBuildingImagesAccordion.buttons.download.help": "Download all the plans of all the floors of the building in png format in a zip, the waiting time for this extraction can be long",
  "DownloadBuildingImagesAccordion.buttons.download.label": "Download ZIP",
  "DisplayTexts.dragOption": "You can sort and choose the display of properties on the map by moving the small bars on the field up or down",
  "DisplayRoomTextsPeople.roomPeopleFullName.label": "Persons full name",
  "DisplayRoomTextsPeople.roomPeopleFullName.help": "Whether or not to show the person's full name on the map",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.label": "Security profile",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.help": "Display or not the security profile of the people assigned to the spaces on the plan",
  "NumberOfPeoplePerRowField.label": "Number of people per line for space assignments",
  "WorkCanvas.Options.BackgroundLayoutOption.label.enable": "Manage the background map",
  "WorkCanvas.Options.BackgroundLayoutOption.label.disable": "Close background image management",
  "WorkCanvas.Options.BackgroundLayoutOption.help.enable": "Used to manage the background map",
  "WorkCanvas.Options.BackgroundLayoutOption.help.disable": "Return to the normal mode of editing the plan.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.label": "Delete scale",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.help": "Deleting the scale is the same as removing the scale from the plan and deleting it from the base, it will no longer be accessible via other plans. It is not possible to delete a scale that is on multiple floors.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.label": "Dissociate the scale",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.help": "Ungrouping the scale from this plan removes it from the plan, but keeps the scale in the database for future use",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.label": "Zoom in on the scale",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.help": "Zooming makes it easy to find the scale on the map.",
  "WorkplaceCanvasItem.workplace.free": "The workstation is not busy",
  "WorkplaceCanvasItem.workplace.isFlex": "The workstation is in flex",
  "WorkplaceCanvasItem.workplace.isTransit": "The workstation is passing through",
  "WorkplaceCanvasItem.workplace.isBookable": "The workstation is reservable",
  "WrongRoomsTable.table.headers.objectType": "Nature",
  "WrongRoomsTable.table.headers.type": "Type",
  "WrongRoomsTable.table.headers.identity": "Identity",
  "WrongRoomsTable.table.headers.currentRoom": "current space",
  "WrongRoomsTable.table.headers.newRoom": "new space",
  "WrongRoomsTable.SelectAll.checked.true": "Unselect all",
  "WrongRoomsTable.SelectAll.checked.false": "Select all",
  "WrongRoomsTable.SelectAll.help": "Select or deselect all lines",
  "WrongRoomsListner.dialog.title": "Validate the choice of spaces",
  "WrongRoomsListner.dialog.description": "There are shapes that are not in their starting space",
  "WrongRoomsListner.close.label": "To close",
  "WrongRoomsListner.close.help": "close this window",
  "MoveShapestoNewRoomAsyncButton.label": "Apply Space Change",
  "MoveShapestoNewRoomAsyncButton.help": "Change the spaces of the selected shapes to put them in the spaces they are in on the plan",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.enable": "Move object type",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.disable": "Stop moving object type",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.enable": "Move an object type on the plane",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.disable": "Stop moving object type",
  "ResetRotationAngle.resetRotationAngle": "Reset to 0\xB0 the angle of the rotation which is currently %{initialRotation}",
  "TenantOperations.sephora-sync-sap-success-factors.label": "MSC synchronization",
  "TenantOperations.st-grenoble-import-hr-file.label": "Importing the HR file",
  "TenantOperations.egis-import-hr-file.label": "Import HR File",
  "TenantOperations.essilor-import-hr-file.label": "Import HR File",
  "TenantOperations.agpm-import-hr-file.label": "Import of the HR file (STILOG)",
  "ConnectedPartnerContext.title": "You are connected to <b>%{label}</b> ( %{host} )",
  "Operations.talentsoft-import.label": "Talentsoft import",
  "Operations.zbre-sync.label": "Z#ber synchronization",
  "Operations.exportZbre.label": "Export Z # bre",
  "GenericNoChangeTable.open.label": "View data",
  "GenericNoChangeTable.open.help": "See the detail of the identical data",
  "Operations.sharingcloud-sync.label": "Sharingcloud synchronization",
  "Operations.moffi-sync.label": "Moffi synchronization",
  "Operations.lucca-sync.label": "Lucca Synchronization",
  "CompareObjectTypeUpdateIcon.help": "This synchronization will perform an update of the entities",
  "CompareObjectTypeDeleteIcon.help": "This synchronization will perform a deletion of entities that do not come from the source",
  "CompareObjectTypeCreateIcon.help": "This synchronization will perform a creation of entities that do not exist in the target",
  "RoomTooltip.roomWorkplaceAffectations": "Workstation assignments",
  "RoomSegmentRoomsList.title": "The spaces attached to this segment",
  "MeetingRoomCard.seats.1": "%{count} seat",
  "MeetingRoomCard.seats.n": "%{count} seats",
  "MeetingRoomCard.locateSpace": "Locate the space on the plan",
  "MeetingRoomCard.viewPicture": "See the photo from space",
  "days.monday": "Monday",
  "days.tuesday": "Tuesday",
  "days.wednesday": "Wednesday",
  "days.thursday": "THURSDAY",
  "days.friday": "Friday",
  "days.saturday": "SATURDAY",
  "days.sunday": "Sunday",
  "WorkplaceAffectationDailyTitle.all": "This person is affected every day",
  "WorkplaceAffectationDailyTitle.person.affected": "This person is assigned %{daysText}",
  "WorkplaceAffectationDailyTitle.person.notAffected": "This person is unaffected",
  "WorkplaceAffectationDailyTitle.calculatedRate": "The average assignment rate is %{calculatedRate}",
  "WorkplaceNestedList.title": "People assigned to workstations",
  "WorkplaceList.workplace.free": "This workstation is free",
  "WorkplaceList.workplace.flex": "This workstation is in flex",
  "WorkplaceList.workplace.transit": "This workstation is shared",
  "WorkplaceList.zoomOnWorkplace": "Zoom to the workstation on the plan",
  "WorkplaceAffectionPersonListItem.remove.help": "Remove the person's assignment to the workstation",
  "WorkplaceAffectations.edit.help": "Assign a person to this workstation",
  "WorkplaceAffectationDays.all": "This person is affected every day",
  "WorkplaceAffectationDays.and": "%{days} and %{lastDay}",
  "WorkplaceAffectationDays.one": "on %{day}",
  "WorkplaceAffectationDays.person.affected": "This person is assigned %{daysText}",
  "WorkplaceAffectationDays.person.notAffected": "This person is unaffected",
  "RoomWorkplaceList.EmptyList": "There are no workstations in this space",
  "RoomCard.buttons.edit.false": "Edit space properties",
  "RoomCard.buttons.edit.true": "Stop editing",
  "RoomCard.tabs.people": "assignments",
  "RoomCard.tabs.inventory": "Inventory",
  "RoomCard.tabs.room": "Space",
  "RoomAffectationsOnlyList.title": "People assigned to spaces",
  "RoomAffectationsList.title": "People assigned to spaces",
  "RoomAffectationsList.EmptyList": "There is no one assigned to this space",
  "ItemsInventory.EmptyList": "There are no objects in this space",
  "MovePersonFromWorkplaceToRoomListButtonItem.label": "Move this person from their workstation to the workstation space",
  "MovePersonFromWorkplaceToRoomListButtonItem.help": "This option requires refreshing the page to see the result, it is possible to chain several movements without refreshing",
  "CollapseWorkplaceAffectationList.title": "Assign this person for the following days only",
  "CollapseWorkplaceAffectationList.updateAffectationDay.true": "Affect this person %{day}",
  "CollapseWorkplaceAffectationList.updateAffectationDay.false": "Remove this person's assignment %{day}",
  "CancelAddWorkplaceToRoom.help": "Cancel the addition of the workstation",
  "CancelAddItemToRoom.help": "Cancel adding the object",
  "AddPersonToRoom.help": "Assign a person to space %{name}",
  "SecurityComplianceModeSwitch.label": "Filter people with security profiles",
  "SecurityComplianceModeSwitch.description": "See only people with security profiles on the map",
  "layoutViewSets.roomType.label": "Typologies of spaces",
  "layoutViewSets.roomType.description": "See the floor plan according to the typology of spaces",
  "layoutViewSets.costCenter.label": "Re-invoicing",
  "layoutViewSets.costCenter.description": "Analyze the keys to the financial distribution of spaces",
  "layoutViewSets.workplaces.label": "Occupations",
  "layoutViewSets.workplaces.description": "Focus on occupying workstations",
  "layoutViewSets.organizationLevel0.label": "Directions",
  "layoutViewSets.organizationLevel0.description": "Occupation by direction",
  "layoutViewSets.flex.label": "Flex",
  "layoutViewSets.flex.description": "Flexible occupancy of spaces",
  "layoutViewSets.walls.label": "Partitions",
  "layoutViewSets.walls.description": "Focus on spaces and partitions",
  "layoutViewSets.securityCompliance.label": "Security Compliance",
  "layoutViewSets.securityCompliance.description": "Analyze the compliance of your security prevention plan and the security profiles of the people affected",
  "layoutViewSets.peopleDimensionTypes.label": "Neighborhoods",
  "layoutViewSets.peopleDimensionTypes.description": "Analyze assignment layers and navigate by neighborhood or zone",
  "LayoutViewSwitch.title": "Changing the vision of the plan",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.viewSet": "Vision",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.help": "You can change the view via the plan menus",
  "SurfyLegendBottomLogo.text": "Plan generated by Surfy",
  "SurfyLegendBottomLogo.caption": "https://www.surfy.pro",
  "MapLegendWorkplace.title": "Workplace",
  "MapLegendWorkplace.workplaces.free": "Workstations are free",
  "MapLegendWorkplace.workplaces.flex": "The workstations are in flex",
  "MapLegendRoom.title": "Spaces",
  "MapLegendPersonSecurityProfile.title": "Security Profiles",
  "MapLegendFloor.title.building": "Building",
  "MapLegendFloor.title.floor": "Floor",
  "MapLegend.workplaces": "Personal work places",
  "MapLegend.rooms": "Spaces",
  "PersonSecurityProfileTabContent.tabs.merged": "By security profiles",
  "PersonSecurityProfileTabContent.tabs.split": "By assignments",
  "DimensionInfo.infos.building": "Calculated Building Information",
  "DimensionInfo.infos.impactBuildings": "Reload calculated building data",
  "DimensionToPeopleList.title": "People assigned to %{name}",
  "DimensionToPeopleList.noDimensionPerson": "There is no one assigned directly to this analysis layer",
  "DimensionPeople.title": "People assigned to spaces",
  "AddPersonToDimension.help": "Assign person to %{name}",
  "CubyWallModeSelect.label": "Partition display",
  "CubyWallModeSelect.options.no": "None",
  "CubyWallModeSelect.options.half": "Half partitions",
  "CubyWallModeSelect.options.reality": "Reality",
  "CubyWallModeSelect.options.cuby": "Cuby",
  "CubySaveAsImageButton.label": "Save Image",
  "CubySaveAsImageButton.help": "Save Floor Plan Image",
  "CubyFitToViewIsometricButtonOption.label": "Center the plane in isometric view",
  "CubyFitToViewIsometricButtonOption.help": "Center plan on spaces in isometric view",
  "CubyFitToViewZenithalButtonOption.label": "Center the plane in zenith view",
  "CubyFitToViewZenithalButtonOption.help": "Center the plan on the spaces in zenithal view",
  "RefetchFloorLayoutButton.refetch": "Reload plan data",
  "ItemTypesMapFilterZone.tabs.options": "options",
  "FloorMap.tabs.layout": "Change the view of the plan. The current view is <b>%{layoutName}</b>",
  "FloorMap.tabs.floor": "View floor information",
  "FloorMap.tabs.building": "View building information",
  "FloorMap.tabs.roomTypes": "Color the spaces on the plan according to the <b>space typologies</b>",
  "FloorMap.tabs.roomTypeGroups": "See the space indicators on the plan according to the <b>groups of space typologies</b>",
  "FloorMap.tabs.analyticsDimensionTypes": "Color the spaces on the plan according to the <b>analysis layers</b>",
  "FloorMap.tabs.itemTypes": "Display on the map the <b> objects </b> by family and type of objects",
  "FloorMap.tabs.workplaceTypes": "Display on the map the <b> workstations </b> by type of workstation",
  "FloorMap.tabs.organizations": "Color the spaces on the plan according to the <b>organizations</b>",
  "FloorMap.tabs.costCenters": "Color spaces and workstations in relation to <b>cost centers</b>",
  "FloorMap.tabs.users": "Color workstations versus people",
  "FloorMap.tabs.selection": "See the details of the elements selected on the plan",
  "FloorMap.tabs.rooms": "Details of selected <b>spaces</b>",
  "FloorMap.tabs.items": "Details of selected <b> objects </b>",
  "FloorMap.tabs.workplaces": "Details of the <b> workstations </b> selected",
  "FloorMap.tabs.all": "See all selected shapes in list",
  "FloorMap.tabs.peopleDimensionTypes": "Color the spaces on the plan according <b>to the assignment layers</b>",
  "FloorMap.tabs.workplaceUsage": "Color the workstations according to their <b>state</b>",
  "FloorMap.tabs.options": "See plan options",
  "FloorMap.tabs.heatmap": "Coloring with heat maps",
  "FloorMap.tabs.pathFinding": "Finding your way in spaces",
  "DateDimensionSelect.options.day": "Day",
  "DateDimensionSelect.options.week": "Week",
  "DateDimensionSelect.options.month": "Month",
  "DateDimensionSelect.options.year": "Year",
  "DateDimensionSelect.options.quarter": "Quarter",
  "JupDateRangePicker.chooseRange": "Choose a period",
  "WorkpaceBookingPeopleCountByDate.title": "Number of people who booked by date",
  "WorkpaceBookingPeopleCountByDate.labels.line": "Number of people",
  "WorkpaceBookingCountByDate.title": "Workstation reservations by date",
  "WorkpaceBookingCountByDate.labels.line": "Number of reservations",
  "WorkpaceBookingAverageByWeekDay.title": "Reservation of workstations by day of the week",
  "WorkpaceBookingAverageByWeekDay.labels.line": "Average per week",
  "WorkpaceBookingAverageByWeekDay.labels.bar": "Number of reservations",
  "PersonPanelWorkplaceAffectations.title": "Workstation assignments",
  "PersonPanelRoomAffectations.title": "Assignments to spaces",
  "PersonPanelDimensionToPeople.title": "Assignments to %{dimensionTypeName}",
  "PersonPanelBuildingAffectations.title": "Allocations to buildings",
  "PersonPanelBuildingAffectations.addToPeopleCount.false": "This person is not accounting in the building",
  "PersonAffectationsPanel.title": "assignments",
  "PersonAffectationsPanel.description": "The person's assignments",
  "PersonSecurityPanel.title": "security",
  "PersonSecurityPanel.description": "Safety and Evacuation Information",
  "PersonRelationsPanel.title": "Relationships",
  "PersonRelationsPanel.description": "This person's relationships",
  "PersonInventoryPanel.title": "Inventory",
  "PersonInventoryPanel.description": "Inventory Information",
  "PersonInventoryPanel.items.subheader": "List of associated objects",
  "PersonInfoPanel.title": "Personal informations",
  "PersonContractPanel.title": "Contract",
  "PersonContractPanel.description": "Contract information",
  "PersonContactPanel.title": "Contact",
  "PersonContactPanel.description": "How to contact this person?",
  "PersonBadgePanel.title": "Various",
  "PersonBadgePanel.description": "Miscellaneous information about the person",
  "AvatarPersonDrawer.help": "See more information about %{name}",
  "TopLevelOrganizationFilter.Empty": "There is no organization associated with spaces, you can add more by modifying a space and associating it with an organization, then you can control their display from this section",
  "OrganizationTabsFilter.tabs.topLevel": "Directions",
  "OrganizationTabsFilter.tabs.hierarchy": "Hierarchy",
  "OrganizationTabsFilter.tabs.level1": "Services",
  "OrganizationFloorMapFilter.TooltipTitle.notSelected": "Select %{organization} to color the spaces on the plan",
  "OrganizationFloorMapFilter.TooltipTitle.selected": "Deselecting %{organization} will remove colors from the plan",
  "OrganizationFloorMapFilter.tooltip.true": "Select all the types of objects below in order to color them on the map",
  "OrganizationFloorMapFilter.tooltip.false": "Deselect all organizations below",
  "Level1OrganizationFilter.Empty": "There is no organization associated with spaces, you can add more by modifying a space and associating it with an organization, then you can control their display from this section",
  "HierarchyOrganizationFilter.Empty": "There is no organization associated with spaces, you can add more by modifying a space and associating it with an organization, then you can control their display from this section",
  "CompanyDashboard.dashboards.workplace": "Desktop Dashboard",
  "CompanyDashboard.dashboards.area": "Surfaces Dashboard",
  "ChangeCompanyMenu.ChangeCompany": "See another company in a new page",
  "WorkplaceTypeDataQualityNotUsed.columns.name": "Workstation type name",
  "WorkplaceTypeDataQualityNotUsed.columns.shape": "Form",
  "workplaceTypeLayoutFilter.Empty": "There are no workstations at the moment in spaces, you can add more by modifying a space and adding workstations to it, then you can control their display from this section",
  "WorkplaceTypeInfo.help": "The number of workstations is %{count}",
  "CopyWorkplaceTypeToCart.help": "Copy workstation types to cart",
  "WorkCanvas.Options.ZoomOnWorkplaceType.label": "Zoom in on the type of workstation",
  "WorkCanvas.Options.ZoomOnWorkplaceType.help": "Zooming in on the type of workstation allows you to locate it in the work area",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.enable": "List the types of objects",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.disable": "Close the list of object types",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.enable": "See the list of object types for this type of workstation",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.disable": "Close the list of object types for this type of workstation",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.open": "Unfold options",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.close": "Fold options",
  "WorkplaceTypeItemTypesDrawer.title": "List of object types",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.help": "Add an object type to be able to compose the type of workstation",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.label": "Add an object type",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.help": "Cancel the addition of an object type in this workstation",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.label": "Cancel adding an object type",
  "WorkCanvas.Options.DeleteStructureShapeOption.help": "Completely remove the shape of the power structure, for example redraw it entirely",
  "WorkCanvas.Options.DeleteStructureShapeOption.label": "Delete shape",
  "WorkCanvas.Options.AddStructurePointOption.label.enable": "Add a summit",
  "WorkCanvas.Options.AddStructurePointOption.label.disable": "Stop adding a vertex",
  "WorkCanvas.Options.AddStructurePointOption.help.enable": "Adding a vertex makes it possible to rework with more precision a form",
  "WorkCanvas.Options.AddStructurePointOption.help.disable": "Stop creating summits",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloorButton.label": "Reserve a workstation at %{floorName}",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloor": "Reserve a workstation at %{floorName} for the period %{slotString}",
  "BookPersonBuildingWorkplace.availableWorkplaces": "%{freeWorkplaces} places available",
  "BookPersonBuildingWorkplace.help": "%{bookedWorkplaces} reservation(s), %{freeWorkplaces} workstations available on %{totalFloorWorkplacesCount}",
  "booking.snackbar.delete.workplace": "The reservation at workstation %{workplaceName} has been cancelled for the period %{slot}",
  "booking.snackbar.delete.room": "The reservation at space %{roomName} has been cancelled for the period %{slot}",
  "BookingWorkplaceTitle.booked": "This workstation is already reserved",
  "BookingWorkplaceTitle.userBooked": "You have reserved this workstation",
  "BookingWorkplaceTitle.free": "Reserve this workstation",
  "PlanningPersonAffectations.alerts.noAffectation.title": "Unable to reserve a workstation",
  "PlanningPersonAffectations.alerts.noAffectation.message": "You are not associated with any territory, please contact your assignment manager to be able to reserve a workspace",
  "WorkingLocationToggle.locations.OFFICE": "Office",
  "WorkingLocationToggle.locations.REMOTE": "Remote",
  "PersonBookingListItem.workplaceBookedOnFloor": "View the %{workplaceName} workstation on the floor plan at %{floorName}",
  "PersonBookingList.noBooking": "No colleague will be present in the office on the same slot for the moment",
  "PersonBookingList.bookings.one": "A colleague will be present on the same slot",
  "PersonBookingList.bookings.more": "%{count} colleagues will be present on the same slot",
  "ParkingBookIcon.parking.booked": "Your parking is reserved",
  "ParkingBookIcon.parking.release.help": "Release parking reservation",
  "ParkingBookIcon.parking.viewOnMap": "See the reserved parking on the map",
  "ParkingBookIcon.parking.book.label": "Reserve a parking space",
  "ParkingBookIcon.parking.book.help": "Reserve a parking space which will be automatically allocated to the slot",
  "HalfDayWorkingLocationToggle.am.label": "Morning",
  "HalfDayWorkingLocationToggle.am.help": "Morning hours are from 8:00 a.m. to 1:30 p.m.",
  "HalfDayWorkingLocationToggle.pm.label": "Afternoon",
  "HalfDayWorkingLocationToggle.pm.help": "Afternoon hours are from 2:00 p.m. to 7:00 p.m.",
  "DirectBuildingPlanningLabel.youAreAssigned": "You are assigned to the building %{buildingName}",
  "DimensionBuildingPlanningLabel.youAreAssigned": "You are assigned to %{dimensionTypeName} %{dimensionName}",
  "BookedBuildingWorkplaceList.noWorkplaceBooked": "No reserved workstations",
  "BookedBuildingWorkplaceList.workplaceIsBooked": "Your workstation is reserved",
  "BookedBuildingWorkplaceList.viewBookedWorkplaceOnMap": "View the workstation %{workplaceName} which is reserved on the plan",
  "BookedBuildingWorkplaceList.freeWorkplaceBooking": "Release this reservation",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.noFloor": "The size is not on any floor impossible to book at the moment from the plan",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.moreThanOneFloor": "The size is on several floors impossible to reserve at the moment since the plan",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.drawer.title": "Reserve a specific workstation for the period %{slotString}",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.help": "Reserve a specific workstation on the plan for this slot",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.label": "Reserve a workstation in %{dimensionName}",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.peopleCount": "There are %{count} person(s) with security profile %{name} assigned to workstations",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.workplaceCount": "There are %{count} workstation(s) with at least one person with security profile %{name}",
  "PersonSecurityProfileWorkplaceFilter.Empty": "Your people do not have a security profile or are not assigned to workstations, it is not possible to color the workstations according to the security profiles of the people",
  "PersonSecurityProfileWorkplaceFilter.title": "The security profiles of the people assigned to the workstations",
  "PersonSecurityProfileMerged.title": "List of security profiles grouped by profile type",
  "PersonSecurityProfileMerged.empty": "No profile is associated with spaces or workstations",
  "PersonSecurityProfileInRooms.title": "The security profiles of the people assigned to the spaces",
  "PersonSecurityProfileInRoomListItem.peopleCount": "There are %{count} person(s) with security profile %{name} assigned to spaces",
  "PersonSecurityProfileInRoomListItem.roomsCount": "There is %{count} space(s) with at least one person with security profile %{name}",
  "ToggleAllOpenInfoState.true": "Close all details and indicators",
  "ToggleAllOpenInfoState.false": "Open all details and indicators",
  "MapFiltersNodesToggleAll.help.true": "Select all",
  "MapFiltersNodesToggleAll.help.false": "unselect all",
  "MapFiltersNode.info.open": "See detail and indicators for %{label}",
  "MapFiltersNode.info.close": "Close additional information",
  "MapFiltersCategory.CategoryHasChildrenSelected": "Items are selected",
  "MapFilterNodeToggleAll.action.true": "Select all",
  "MapFilterNodeToggleAll.action.false": "unselect all",
  "MapFilterNodeIsAllSelected.help": "All the selection below will be loaded, even if new objects are created",
  "JupRoleToObjectTypeMatrix.views.help.true": "Hide interface view",
  "JupRoleToObjectTypeMatrix.views.help.false": "Show interface view",
  "JupRoleToObjectTypeMatrix.objectTypes.help.checkbox": "Update property ( %{name} )",
  "GlobalOptions.CartCopyItemTypeOption.help": "Copy item types to cart",
  "GlobalOptions.CartCopyWorkplaceTypeOption.help": "Copy workstation types to cart",
  "GlobalOptions.CartCopyBuildingOption.help": "Copy buildings to cart",
  "CheckAllDefaultViews.shortcuts.title": "Configuration shortcuts",
  "CheckAllDefaultViews.shortcuts.views.title": "Shortcuts for default interface views",
  "CheckAllDefaultViews.shortcuts.views.buttonsHelp": "Check this view for all types of entities",
  "CheckAllDefaultViews.shortcuts.objectTypes.title": "Shortcuts for entity types",
  "CheckAllDefaultViews.shortcuts.objectTypes.buttonsHelp": "Check this rule for all types of objects",
  "RemoveItemColorsOption.label": "Do not color objects",
  "RemoveItemColorsOption.help": "Color objects white so you can focus on other elements on the map",
  "ItemTypeOptions.help": "The number of objects is %{count}",
  "ItemTypeMapFilter.TooltipTitle.notSelected": "Select %{itemType} to see the objects on the map",
  "ItemTypeMapFilter.TooltipTitle.selected": "Deselecting %{itemType} will remove the associated color from the plan",
  "ItemTypeMapFilter.tooltip.true": "Select all the types of objects below in order to display them on the map",
  "ItemTypeMapFilter.tooltip.false": "Deselect all types of objects below",
  "ItemTypeMapFilter.NoNode": "There are no objects at the moment in spaces, you can add more by modifying a space and adding objects to it, then you can control their display from this section",
  "ItemTypeMapFilter.NoCategory": "There are no objects at the moment in spaces, you can add more by modifying a space and adding objects to it, then you can control their display from this section",
  "ItemTypeDataQualityNotUsed.columns.name": "Object type name",
  "ItemTypeDataQualityNotUsed.columns.shape": "Form",
  "ItemTypeDataQualityNotUsed.columns.workplaceTypeCount": "Number of workstation type",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.help": "Choose a reference plane to create the shape in order to be able to draw your type of object by locating itself on a plane and having the right scale",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.label": "Choose a reference plane to create the shape",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.help": "Choose a reference plane to compose the type of workstation with existing types of objects by locating on a plane and have the right scale and correctly position the types of objects",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.label": "Choose a reference plane to compose the shape of the type of workstation",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.help": "Choose a reference plane to create the shape in order to be able to draw the structure by locating yourself on a plan and having the right scale",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.label": "Choose a reference plane to create the structure",
  "ItemTypeAvatarSingleView.copy": "Copy points to clipboard",
  "ItemTypeAvatarSingleView.debug.label": "Enable advanced mode for 3d",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.help": "Completely remove the shape from the object type so that you can, for example, redraw it entirely or transform it into an icon",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.label": "Delete shape",
  "CopyItemTypesToCart.help": "Copy item types to cart",
  "PhysicalItemNotInsideWorkplaceRoom.alignRooms": "Change object spaces to that of the workstation",
  "AddPersonToItem.text": "Associate a person with this object",
  "AddPersonToItem.help": "Associate a person with this object, you can add several people for the same object",
  "DimensionTypeDescription.NoDescription": "There is no description for this type of analysis layer, you can add more by modifying it",
  "dimensionTypes.room_ground_type.one": "Nature of the soil",
  "dimensionTypes.room_ground_type.description": "Allows you to know the composition of the soil in the space",
  "dimensionTypes.room_usage.one": "Nature of spaces",
  "dimensionTypes.room_usage.description": "Allows you to identify spaces according to their uses",
  "dimensionTypes.frequency.one": "Frequency",
  "dimensionTypes.frequency.description": "Allows you to know the frequency of passage in space",
  "dimensionTypes.evacuation_zone.one": "security",
  "dimensionTypes.evacuation_zone.description": "Manage security and evacuation zones",
  "dimensionTypes.referent.one": "Referent",
  "dimensionTypes.referent.description": "Allows you to know who is assigned to the maintenance of this space",
  "DimensionTypesByTab.action.true": "Select all",
  "DimensionTypesByTab.action.false": "unselect all",
  "DimensionTypesByTab.ListItemHasChildrenSelected": "Dimensions are selected",
  "DimensionListItem.notSelected": "Select %{dimension} to see the spaces on the plan with the associated color",
  "DimensionListItem.selected": "Deselect %{dimension}",
  "DimensionInfo.roomsArea.help": "The area for %{dimensionType} %{dimension} is %{value} m\xB2",
  "DimensionInfo.roomsCount.help": "There are %{value} space(s) for %{dimensionType} %{dimension}",
  "DimensionInfo.peopleCount.help": "There are %{value} person(s) affected for %{dimensionType} %{dimension}",
  "DimensionInfo.totalPeopleCount.help": "There are %{value} person(s) affected in total for %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesCount.help": "There is %{value} workstation (s) for %{dimensionType} %{dimension}",
  "DimensionInfo.peopleRatio.help": "There is %{value} m\xB2 per affected person for %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesRatio.help": "There are %{value} m\xB2 per workstation for %{dimensionType} %{dimension}",
  "DimensionInfo.occupancyRate.help": "The occupancy rate is %{value} % for %{dimensionType} %{dimension}",
  "DimensionInfo.expansionRatio.help": "The sprawl rate is %{value} for %{dimensionType} %{dimension}",
  "DimensionInfo.freeWorkplacesCount.help": "There are %{value} workstation (s) for %{dimensionType} %{dimension}",
  "DimensionInfo.flexWorkplacesCount.help": "There are %{value} flex workstation (s) for %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesCount.help": "There are %{value} shared workstation (s) for %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesRatio.help": "Shared desktop rate is %{value} for %{dimensionType} %{dimension}",
  "DimensionInfo.flexRatio.help": "The rate of flex workstations",
  "DimensionInfo.transitWorkplacesCount.help": "There are %{value} workstation (s) for %{dimensionType} %{dimension}",
  "DimensionInfo.dimensionPeopleCount.help": "There are %{value} affected person(s) in %{dimensionType} %{dimension}",
  "DimensionInfo.seatsCount.help": "There are %{value} seats for %{dimensionType} %{dimension}",
  "DimensionInfo.seatsPeopleRatio.help": "Seating rate is %{value} seats available per person for %{dimensionType} %{dimension}",
  "DimensionInfo.carbonFootprint.help": "The carbon footprint is %{value} of CO2 emitted for %{dimensionType} %{dimension}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.peopleCount": "There are %{count} people with cost center %{costCenterName}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.workplaceCount": "There are %{count} workstations with at least one person with cost center %{costCenterName}",
  "PersonCostCenterWorkplaceFilter.Empty": "There are no cost centers associated with people",
  "NoDataOnBuildingInfo.noData": "Please select all the floors in the plan options to have data, there must not be any data for the floors you have selected",
  "CostCenterWorkplaceMapFilter.nodeInfo.workplacesCount": "There are %{count} workstations with cost center %{name}",
  "CostCenterMapFilterTabs.tabs.rooms": "Spaces",
  "CostCenterMapFilterTabs.tabs.workplaces": "Personal work places",
  "CostCenterMapFilterTabs.tabs.people": "People",
  "CostCenterMapFilter.Empty": "There are no cost centers currently associated with spaces, you can add more by modifying a space and associating a cost center with it, then you can control their display from this section",
  "CostCenterWorkplaceMapFilter.Empty": "There is currently no cost center associated with the workstations, you can add one by modifying a workstation and associating a cost center with it, then you can control their display from this section",
  "BuildingReports.items.sheets.physicals": "Physical Objects",
  "BuildingReports.items.sheets.virtuals": "Virtual Objects",
  "BuildingReports.items.sheets.merged": "Merger",
  "BuildingInventory.floor": "Floor",
  "BuildingInventory.quantity": "Amount",
  "BuildingInventory.price": "Price",
  "BuildingInventory.manufacturer": "Maker",
  "BuildingInventory.quantityTotal": "Total",
  "BuildingInventory.title": "Building inventory %{building.name}",
  "BuildingInventory.buttons.viewPDF.help": "Download the file in PDF so that you can download or share it",
  "BuildingInventory.buttons.viewPDF.label": "Download PDF version",
  "BuildingInventory.itemTypesFamilySectionTitle": "Inventory categories",
  "BuildingInventory.fileNamePrefix": "inventory",
  "BuildingLabel.scenario": "This building is a scenario of the building %{name}",
  "CopyBuildingToCart.help": "Copy building structure",
  "BuildingClonePropertiesSelector.properties.clone.workplaces": "Copy workstations",
  "BuildingClonePropertiesSelector.properties.clone.items": "Copy Objects",
  "BuildingDistributionCost.floors.excel.tabs.floors": "Distribution keys by floor",
  "BuildingDistributionCost.floors.excel.tabs.building": "Distribution keys for the building",
  "BuildingDistributionCost.floors.excel.tabs.buildingDetailed": "Building details by cost center",
  "BuildingDistributionCost.floors.excel.download.label": "Download the excel file with the breakdowns",
  "BuildingDistributionCost.floors.excel.download.help": "Download the excel file to be able to share and export the distribution keys and qualified areas by cost center and by floor, the export includes the distribution by floor or by building of the cost centers",
  "BuildingDistributionCost.floors.excel.headers.floors.floorName": "Name of the floor",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterName": "Cost center",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterArea": "Surface area of spaces including floor distributions",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterRoomsArea": "Area of cost center spaces",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterDistributedFloorRatio": "Usage ratio in the floor",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterFloorDistributedArea": "Total area of the spaces to be distributed on the floor for this cost center",
  "BuildingDistributionCost.floors.excel.headers.floors.floorArea": "Total floor area including the floor distributions",
  "BuildingDistributionCost.floors.excel.headers.floors.totalFloorDistributedArea": "Surface to be distributed in the floor",
  "BuildingDistributionCost.floors.excel.headers.floors.totalBuildingDistributedArea": "Floor area to be distributed in the building",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterName": "Cost center",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterArea": "Total cost center area",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterBuildingRatio": "Building use ratio",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterDistributedBuildingArea": "Total area of distributed building spaces",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterRoomsArea": "Area of cost center spaces",
  "BuildingDistributionCost.floors.excel.headers.building.buildingArea": "Total area of building spaces",
  "BuildingDistributionCost.floors.excel.headers.building.buildingDistributedArea": "Area to be distributed in the building",
  "BuildingDistributionCost.floors.excel.headers.building.totalBuildingArea": "Total building area",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.buildingName": "Building",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterName": "Cost center",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterArea": "Cost center area",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterBuildingRatio": "Distribution key in the building",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.distributedCostCenterArea": "Distribution of cost center %{costCenterName}",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterTotalArea": "Total area to be re-invoiced",
  "BuildingDistributionCost.excel.tabs.distributionCost": "Distribution keys",
  "BuildingDistributionCost.excel.tabs.distributionCostDetails": "Details",
  "BuildingDistributionCost.excel.download.label": "Download the excel file without the breakdowns",
  "BuildingDistributionCost.excel.download.help": "Download the excel file to be able to share and export the distribution keys and qualified areas by cost center",
  "BuildingDistributionCost.Title": "Distribution keys and qualified areas by cost center without breakdowns",
  "BuildingDistributionCost.table.type": "Type",
  "BuildingDistributionCost.table.distributionKey": "Distribution key",
  "BuildingDistributionCost.table.costCenterDistributionKey": "Allocation key for the cost center",
  "BuildingDistributionCost.table.workplacesCount": "Number of workstations",
  "BuildingDistributionCost.table.workplaceTotalCount": "Total number of workstations",
  "BuildingFloorSelection.title": "The floors to duplicate in your scenario",
  "BuildingFloorSelection.all.select": "Select all floors",
  "BuildingFloorSelection.all.unselect": "Deselect all floors",
  "BuildingCloneFloorSelection.title": "The floors to duplicate in your scenario",
  "BuildingCloneFloorSelection.all.select": "Select all floors",
  "BuildingCloneFloorSelection.all.unselect": "Deselect all floors",
  "BuildingClone.noClone": "No scenario has been created yet, you can create your first scenario for this building",
  "BuildingClone.buttons.CreateClone.label": "Create a scenario",
  "BuildingClone.buttons.CreateClone.help": "The scenario will duplicate the building with the properties checked",
  "BuildingClone.accordion.title": "Create a new scenario",
  "BuildingClone.properties.clone.people": "Duplicate assignments",
  "BuildingClone.properties.clone.workplaces": "Duplicate workstations",
  "BuildingClone.properties.clone.items": "Duplicate objects",
  "BuildingClone.properties.clone.dimensions": "Associate analysis and assignment layers with spaces",
  "BuildingClone.properties.clone.organization": "Associate organizations with spaces",
  "BuildingDashboard.dashboards.workplace": "Desktop Dashboard",
  "BuildingDashboard.dashboards.area": "Surfaces Dashboard",
  "CampusBuildingsAccordion.buildingCount": "The number of buildings",
  "CalculatedPropertiesAccordions.mesures": "Measures",
  "CalculatedPropertiesAccordions.kpi": "Indicators",
  "DimensionMapFilter.TooltipTitle.notSelected": "Select %{dimension} to see the spaces on the plan with the associated color",
  "DimensionMapFilter.TooltipTitle.selected": "Deselecting %{dimension} will remove the associated color from the plane",
  "DimensionMapFilter.tooltip.true": "Select all the filters below to color them on the map",
  "DimensionMapFilter.tooltip.false": "Deselect all filters below",
  "DimensionMapFilter.NoNode": "There are no analysis layers at the moment, you can add more by editing a space and adding analysis layers to it",
  "DimensionMapFilter.NoCategory": "There are no analysis layers available, you must first associate some to the spaces",
  "SelectDimensionTypeNavigationLayoutIcon.select": "Select this layer type for navigation",
  "SelectDimensionTypeNavigationLayoutIcon.unselect": "Remove navigation by analysis layer and return to navigation by spaces",
  "SelectDimensionTypeNavigationLayoutIcon.help": "Navigation by analysis layer allows you to click on a space, select the corresponding layer and see the people assigned to this layer or the workstations and objects associated with this layer through the spaces",
  "DimensionTypeNavigationWarning.message": "You are browsing by %{name} , spaces will be grouped together when selected. Click to cancel and return to browsing by space",
  "RoomCardSelectDimensions.needSave": "Please save or cancel your changes before you can modify the analysis layers of this space",
  "AssignPersonToWorkplaceCheckListDialogTitle.title": "You have assigned %{personName} to workstation %{workplaceName}",
  "AssignPersonToRoomCheckListDialogTitle.title": "You assigned %{personName} to space %{roomName}",
  "WorkplaceFullName.noName": "Unnamed workstation",
  "RoomFullName.noName": "unnamed space",
  "AssignPersonCheckListWorkplaceTransit.title": "The workstation %{workplaceName} is a temporary workstation",
  "AssignPersonCheckListWorkplaceTransit.RemoveIsTransit": "Remove the &quot;is passing&quot; type from the workstation",
  "AssignPersonCheckListWorkplaceAffectations.title": "This person is already assigned on other workstations, do you want to remove the following assignments for %{personFullname}",
  "AssignPersonCheckListRoomAffectations.title": "This person is already directly assigned to other spaces, do you want to remove the following assignments for %{personFullname}",
  "AssignPersonCheckListDialogApplyButton.help": "Delete selected assignments that may match the person's old assignments",
  "AssignPersonCheckListDialogApplyButton.label": "Delete selected assignments",
  "AssignPersonCheckListDialog.actions.close.label": "To close",
  "AssignPersonCheckListDialog.actions.close.help": "Close and don't delete any other assignments",
  "AssignPersonCheckListBuildingAffectations.title": "This person is already directly assigned on other buildings, do you want to remove the following assignments for %{personFullname}",
  "WorkplaceVirtualInventory.title": "Virtual workstation inventory",
  "WorkplacePhysicalInventory.title": "Physical inventory of the workstation",
  "WorkplaceTypeSeatsCount.label": "Number of seats",
  "WorkplaceTypeSeatsCount.help": "The number of seats counted for this type of workstation",
  "WorkplaceTypeCarbonFootprintCount.label": "Carbon footprint",
  "WorkplaceTypeCarbonFootprintCount.help": "The carbon footprint is the amount of greenhouse gases emitted by the furniture objects of this type of workstation",
  "DeleteWorkplace.help": "Delete workstation: [ %{name} ], assignments will also be deleted",
  "AddPersonToWorkplace.text": "Assign a person",
  "AddPersonToWorkplace.help": "Add assignment to this workstation, you can add multiple assignments for the same workstation",
  "MouvementMatrixImport.errors.noSheet": "Could not find excel sheet with name %{name} [ %{objectTypeName} ]",
  "RoomTypeGroupMapFilter.Empty": "There is no space type group associated with spaces via space types, you can add more by editing a space type group and adding associating a space type to it, then you can control their display from this section",
  "RoomTypeGroupLabel.exclude.tooltip": "The space typology group excludes associated space types",
  "RoomTypeGroupHelpTitle.exclude": "The %{name} space type grouping is of type exclusion. It groups all spaces except the following space typologies:",
  "RoomTypeGroupHelpTitle.include": "The %{name} space type grouping groups the following space typologies:",
  "RoomTypeGroupToRoomTypeLabel.exclude.tooltip": "The space typology is excluded",
  "RoomMapFilter.Empty": "There is no space type associated with spaces, you can add more by modifying a space and adding an associated type to it, then you can control their display from this section",
  "LayoutFiltersTabZone.collapse.help": "The menu is closed, you can open it by clicking on the first icon to open it and see the details of the elements of the plan",
  "LayoutFiltersTabOpenToggleIcon.open.true": "Close the map menu to optimize the space of the map display",
  "LayoutFiltersTabOpenToggleIcon.open.false": "Open the plan menu to see detailed information related to the plan",
  "CompanyTypeLabel.notClassified": "Unclassified platform",
  "BuildingMenuItem.menu.scenario": "Scenarios ( %{count} )",
  "SearchMenuItem.icon.tooltip": "Search",
  "RemoveFromCartIconButton.help": "Remove from cart",
  "CopyCartContentIntoTenant.buttons.single.paste.help": "Import to this company",
  "IndexContextMenuItem.navigation": "Navigation",
  "GlobalSearchIncludeScenarios.label": "Include scenarios in search",
  "GlobalSearch.Input.placeholder": "Search",
  "GlobalSearch.Start": "You can search for example people, spaces, workstations, objects or other entities, the search will start from the 2nd character",
  "GlobalSearch.NoResult": "No results were found for your search",
  "GlobalSearch.close.help": "Clear search",
  "models.PartnerExportMappingConfigurationToFloor.singular": "Floor included in the configuration of the transformation of partner exports",
  "models.PartnerExportMappingConfigurationToFloor.plural": "Floors included in the configuration of the transformation of partner exports",
  "models.PartnerExportMappingConfigurationToFloor.determinant.defined": "the floor included in the configuration of the transformation of partner exports",
  "models.PartnerExportMappingConfigurationToFloor.determinant.undefined": "a floor included in the configuration of the transformation of partner exports",
  "models.PartnerExportMappingConfigurationToFloor.determinants.defined": "the floors included in the configurations of the transformations of the partner exports",
  "models.PartnerExportMappingConfigurationToFloor.determinants.undefined": "floors included in the configurations of partner export transformations",
  "models.PartnerExportMappingToRoomType.singular": "Transformation of partner exports for space types",
  "models.PartnerExportMappingToRoomType.plural": "Partner export transformations for space types",
  "models.PartnerExportMappingToRoomType.determinant.defined": "transformation of partner exports for space types",
  "models.PartnerExportMappingToRoomType.determinant.undefined": "a transformation of partner exports for space types",
  "models.PartnerExportMappingToRoomType.determinants.defined": "Partner export transformations for space types",
  "models.PartnerExportMappingToRoomType.determinants.undefined": "transformations of partner exports for space types",
  "models.PartnerExportMappingConfiguration.singular": "Configuring Partner Export Transformation",
  "models.PartnerExportMappingConfiguration.plural": "Partner export transformation configurations",
  "models.PartnerExportMappingConfiguration.determinant.defined": "the configuration of the transformation of partner exports",
  "models.PartnerExportMappingConfiguration.determinant.undefined": "a configuration of the transformation of partner exports",
  "models.PartnerExportMappingConfiguration.determinants.defined": "partner export transformation configurations",
  "models.PartnerExportMappingConfiguration.determinants.undefined": "configurations of partner export transformations",
  "models.PartnerExportMapping.singular": "Transformation of partner exports",
  "models.PartnerExportMapping.plural": "Transformations of partner exports",
  "models.PartnerExportMapping.determinant.defined": "the transformation of partner exports",
  "models.PartnerExportMapping.determinant.undefined": "a transformation of partner exports",
  "models.PartnerExportMapping.determinants.defined": "transformations of partner exports",
  "models.PartnerExportMapping.determinants.undefined": "transformations of partner exports",
  "models.WorkplaceTypeItemType.singular": "object type in workstation type",
  "models.WorkplaceTypeItemType.plural": "object types in workstation type",
  "models.WorkplaceTypeItemType.determinant.defined": "the object type in the workstation type",
  "models.WorkplaceTypeItemType.determinant.undefined": "an object type in a workstation type",
  "models.WorkplaceTypeItemType.determinants.defined": "object types in workstation types",
  "models.WorkplaceTypeItemType.determinants.undefined": "object types in workstation types",
  "models.WorkplaceTypeItemType.properties.id.label": "Object type identifier in the workstation type",
  "models.WorkplaceTypeItemType.properties.zIndex.label": "Height index",
  "models.WorkplaceTypeItemType.properties.zIndex.description": "The height index allows you to define the order of display of object types, the larger the index, the more the object will be above the others",
  "models.WorkplaceTypeItemType.properties.physicalInventory.label": "Physical inventory",
  "models.WorkplaceTypeItemType.properties.physicalInventory.description": "If this option is checked for each workstation a physical object will be created in Surfy, this object may have a unique reference, in all cases the building inventory will be up to date",
  "models.WorkplaceTypeItemType.properties.seatsCount.label": "Number of seats",
  "models.WorkplaceTypeItemType.properties.seatsCount.description": "Allows you to define the number of seats available in the workstation type for this object type",
  "models.WorkplaceType.singular": "type of workstation",
  "models.WorkplaceType.plural": "types of workstations",
  "models.WorkplaceType.determinant.defined": "the type of workstation",
  "models.WorkplaceType.determinant.undefined": "a type of workstation",
  "models.WorkplaceType.determinants.defined": "types of workstations",
  "models.WorkplaceType.determinants.undefined": "types of workstations",
  "models.WorkplaceType.properties.id.label": "Workstation typology identifier",
  "models.WorkplaceType.properties.id.description": "???",
  "models.WorkplaceType.properties.name.label": "Workstation type name",
  "models.WorkplaceType.properties.name.description": "???",
  "models.WorkplaceType.views.editor.help": "Edit shapes and locations of object types for workstation type %{name}",
  "models.WorkplaceType.views.editor.label": "Edit shapes",
  "models.WorkplaceType.views.avatar.help": "See the form of the workstation type %{name}",
  "models.WorkplaceType.views.avatar.label": "See the shape",
  "models.WorkplaceType.views.dq-not-used.label": "Not used",
  "models.WorkplaceType.views.dq-not-used.help": "List all types of unused workstations via workstations",
  "models.WorkplaceAffectation.singular": "Work station assignment",
  "models.WorkplaceAffectation.plural": "Workstation assignments",
  "models.WorkplaceAffectation.description": "Allows a fixed workstation to be assigned to a person",
  "models.WorkplaceAffectation.determinant.defined": "job assignment",
  "models.WorkplaceAffectation.determinant.undefined": "job assignment",
  "models.WorkplaceAffectation.determinants.defined": "job assignments",
  "models.WorkplaceAffectation.determinants.undefined": "job assignments",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.help": "Import workstation transfer matrices",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.label": "Import transfer matrix",
  "models.Workplace.singular": "workplace",
  "models.Workplace.plural": "personal work places",
  "models.Workplace.determinant.defined": "desktop",
  "models.Workplace.determinant.undefined": "a workstation",
  "models.Workplace.determinants.defined": "work stations",
  "models.Workplace.determinants.undefined": "work stations",
  "models.Workplace.views.assign-current-user.label": "Occupy the workstation",
  "models.Workplace.views.assign-current-user.help": "Occupy workstation %{name}",
  "models.Workplace.properties.id.label": "Workstation identifier",
  "models.Workplace.properties.id.description": "???",
  "models.Workplace.properties.color.label": "Color",
  "models.Workplace.properties.color.description": "The color that the workstation type will take on the plan",
  "models.Workplace.properties.name.label": "Workstation name",
  "models.Workplace.properties.name.description": "The name of the workstation is used to identify it more simply",
  "models.Workplace.properties.isFlex.label": "Is flex?",
  "models.Workplace.properties.isFlex.description": "If this station is used in Flex mode",
  "models.Workplace.properties.isShared.label": "Is shared ?",
  "models.Workplace.properties.isShared.description": "If this workstation is shared by several people, this automatic field is validated as soon as there are at least 2 assignments on the workstation",
  "models.Workplace.properties.isTransit.label": "Is passing through?",
  "models.Workplace.properties.isTransit.description": "If this position is transient, this position will be excluded from free workstations without being reservable in flex, a transient position makes it possible to have a workstation available for all those who wish to use it without being included in a system of reservation",
  "models.Workplace.properties.isBookable.label": "Is bookable?",
  "models.Workplace.properties.isBookable.description": "If this workstation is reservable in a reservation system",
  "models.Workplace.properties.position.label": "Position",
  "models.Workplace.properties.position.description": "The position of the workstation in space",
  "models.Workplace.properties.rotation.label": "Rotation",
  "models.Workplace.properties.rotation.description": "The angle of rotation of the workstation in space",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.label": "Average assignment rate",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.description": "Average assignment rate of the workstation according to the assignment of the days of presence of the people",
  "models.Workplace.properties.workplaceAffectationsCount.label": "Number of assignments",
  "models.Workplace.properties.workplaceAffectationsCount.description": "Number of assignments on the workstation",
  "models.Workplace.properties.comment.label": "Comment",
  "models.Workplace.properties.comment.description": "Additional information about the workstation",
  "models.Workplace.properties.room.label": "Workstation space",
  "models.UserRegistrationTenantRuleToJupRole.singular": "Association of authentication rule to role",
  "models.UserRegistrationTenantRuleToJupRole.plural": "Authentication rule-to-role associations",
  "models.UserRegistrationTenantRuleToJupRole.determinant.defined": "association of authentication rule to role",
  "models.UserRegistrationTenantRuleToJupRole.determinant.undefined": "an authentication rule-to-role association",
  "models.UserRegistrationTenantRuleToJupRole.determinants.defined": "authentication rule-to-role associations",
  "models.UserRegistrationTenantRuleToJupRole.determinants.undefined": "role-to-role authentication rule associations",
  "models.UserRegistrationTenantRuleToContentRole.singular": "Authentication rule to content role association",
  "models.UserRegistrationTenantRuleToContentRole.plural": "Authentication rule to content role associations",
  "models.UserRegistrationTenantRuleToContentRole.determinant.defined": "Authentication rule to content role association",
  "models.UserRegistrationTenantRuleToContentRole.determinant.undefined": "an authentication rule to content role association",
  "models.UserRegistrationTenantRuleToContentRole.determinants.defined": "authentication rule to content role associations",
  "models.UserRegistrationTenantRuleToContentRole.determinants.undefined": "content role-to-authentication rule associations",
  "models.UserRegistrationTenantRule.singular": "Authentication rule",
  "models.UserRegistrationTenantRule.plural": "Authentication rules",
  "models.UserRegistrationTenantRule.determinant.defined": "the authentication rule",
  "models.UserRegistrationTenantRule.determinant.undefined": "an authentication rule",
  "models.UserRegistrationTenantRule.determinants.defined": "authentication rules",
  "models.UserRegistrationTenantRule.determinants.undefined": "authentication rules",
  "models.UserRegistrationTenantRule.properties.domains.label": "Areas",
  "models.UserRegistrationTenantRule.properties.domains.description": "Separate domains with spaces and include the at sign",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.label": "Automatically associate roles",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.description": "Automatically associate roles and content roles with users who meet this rule",
  "models.UserCompany.singular": "business user",
  "models.UserCompany.plural": "business users",
  "models.UserCompany.description": "Enterprise users have access to their company's Surfy platform",
  "models.UserCompany.determinant.defined": "the business user",
  "models.UserCompany.determinant.undefined": "a business user",
  "models.UserCompany.determinants.defined": "business users",
  "models.UserCompany.determinants.undefined": "enterprise users",
  "models.UserCompany.properties.id.label": "Company user ID",
  "models.UserCompany.properties.buildingOwners.label": "Proprietary buildings",
  "models.UserCompany.properties.buildingOwners.description": "Buildings owned by the user",
  "models.User.singular": "user",
  "models.User.plural": "users",
  "models.User.determinant.defined": "the user",
  "models.User.determinant.undefined": "an user",
  "models.User.determinants.defined": "the users",
  "models.User.determinants.undefined": "users",
  "models.User.properties.id.label": "User ID",
  "models.User.properties.id.description": "???",
  "models.User.properties.firstname.label": "First name",
  "models.User.properties.firstname.description": "The user's first name",
  "models.User.properties.lastname.label": "Last name",
  "models.User.properties.lastname.description": "The user's last name",
  "models.User.properties.email.label": "E-mail",
  "models.User.properties.email.description": "The email used by the user for correspondence or for authentication",
  "models.Structure.singular": "structure",
  "models.Structure.plural": "structures",
  "models.Structure.determinant.defined": "the structure",
  "models.Structure.determinant.undefined": "a structure",
  "models.Structure.determinants.defined": "the structures",
  "models.Structure.determinants.undefined": "structures",
  "models.Structure.properties.nom.label": "Name of the stucture",
  "models.Structure.properties.nom.description": "To find and reuse the structure easily",
  "models.Structure.properties.transform.label": "Transformation",
  "models.Structure.properties.transform.description": "Transformation of the structure to calibrate it on a map",
  "models.Structure.views.editor.label": "Edit shape",
  "models.Structure.views.editor.help": "Modify the shape of the structure",
  "models.Structure.views.gmap-calibrate.label": "Calibrate the structure on a map",
  "models.Structure.views.gmap-calibrate.help": "Calibrate the structure on a map in order to associate geographic coordinates",
  "models.RoomTypeGroupToRoomType.singular": "association of space typology group with space typology",
  "models.RoomTypeGroupToRoomType.plural": "associations groups of space typologies to space typologies",
  "models.RoomTypeGroupToRoomType.determinant.defined": "the association of space typology group with space typology",
  "models.RoomTypeGroupToRoomType.determinant.undefined": "a group association of space typology to space typology",
  "models.RoomTypeGroupToRoomType.determinants.defined": "group associations of space typologies to space typologies",
  "models.RoomTypeGroupToRoomType.determinants.undefined": "group associations of space typologies to space typologies",
  "models.RoomTypeGroupFloor.singular": "floor space typology group",
  "models.RoomTypeGroupFloor.plural": "floor space typology groups",
  "models.RoomTypeGroupFloor.determinant.defined": "the space typology group of floors",
  "models.RoomTypeGroupFloor.determinant.undefined": "a group of floor space typology",
  "models.RoomTypeGroupFloor.determinants.defined": "the space typology group of floors",
  "models.RoomTypeGroupFloor.determinants.undefined": "groups of floor space typologies",
  "models.RoomTypeGroupBuilding.singular": "building space typology group",
  "models.RoomTypeGroupBuilding.plural": "groups of building space typologies",
  "models.RoomTypeGroupBuilding.determinant.defined": "the building space typology group",
  "models.RoomTypeGroupBuilding.determinant.undefined": "a group of building space typology",
  "models.RoomTypeGroupBuilding.determinants.defined": "the building space typology group",
  "models.RoomTypeGroupBuilding.determinants.undefined": "groups of building space typologies",
  "models.RoomTypeGroup.singular": "space typology group",
  "models.RoomTypeGroup.plural": "space typology groups",
  "models.RoomTypeGroup.determinant.defined": "the space typology group",
  "models.RoomTypeGroup.determinant.undefined": "a space typology group",
  "models.RoomTypeGroup.determinants.defined": "space typology groups",
  "models.RoomTypeGroup.determinants.undefined": "groups of space typologies",
  "models.RoomTypeGroup.properties.id.label": "Space typology group identifier",
  "models.RoomTypeGroup.properties.name.label": "Space typology group name",
  "models.RoomTypeGroup.properties.code.label": "Code",
  "models.RoomTypeGroup.properties.color.label": "Color",
  "models.RoomTypeGroup.properties.exclude.label": "Exclude",
  "models.RoomTypeGroup.properties.exclude.description": "Exclude space typologies from this group",
  "models.RoomTypeFloor.singular": "floor space typology",
  "models.RoomTypeFloor.plural": "floor space typologies",
  "models.RoomTypeFloor.determinant.defined": "the typology of floor space",
  "models.RoomTypeFloor.determinant.undefined": "a typology of floor space",
  "models.RoomTypeFloor.determinants.defined": "floor space typologies",
  "models.RoomTypeFloor.determinants.undefined": "floor space typologies",
  "models.RoomTypeBuilding.singular": "building space typology",
  "models.RoomTypeBuilding.plural": "building space typologies",
  "models.RoomTypeBuilding.determinant.defined": "the typology of building space",
  "models.RoomTypeBuilding.determinant.undefined": "a typology of building space",
  "models.RoomTypeBuilding.determinants.defined": "building space typologies",
  "models.RoomTypeBuilding.determinants.undefined": "building space typologies",
  "models.RoomType.singular": "space typology",
  "models.RoomType.plural": "space typologies",
  "models.RoomType.determinant.defined": "space typology",
  "models.RoomType.determinant.undefined": "a typology of space",
  "models.RoomType.determinants.defined": "space typologies",
  "models.RoomType.determinants.undefined": "space typologies",
  "models.RoomType.properties.id.label": "Space typology identifier",
  "models.RoomType.properties.name.label": "Space type name",
  "models.RoomType.properties.color.label": "2d color",
  "models.RoomType.properties.color.description": "The color of the type of space makes it possible to differentiate each type on the 2d plan",
  "models.RoomType.properties.color3d.label": "3d color",
  "models.RoomType.properties.color3d.description": "Allows you to manage the color of the type of space in 3d, this option is only applicable to the 3d vision of the floor",
  "models.RoomType.properties.displayWallsOn3d.label": "Show walls",
  "models.RoomType.properties.displayWallsOn3d.description": "Allows you to display or not the walls of the space in the 3d floor plan, the undisplayed walls are dotted in 2d, this allows you to have a more pleasant view, especially for open spaces",
  "models.RoomType.properties.icon.label": "Icon",
  "models.RoomType.properties.icon.description": "The icon for the type of space makes it possible to display for this type of space an icon in 2d and 3d plans instead of the classic information on the plan, associated with the background color this makes it possible to render the more pleasant reading of the plan",
  "models.RoomType.properties.cadence.label": "Cadence",
  "models.RoomType.properties.cadence.description": "The rate is a numerical value indicating the difficulty of cleaning the type of space. It is equal to the number of m\xB2 that can be treated in one hour in this type (circulation, laboratory, etc.)",
  "models.RoomType.properties.isBookable.label": "Is bookable?",
  "models.RoomType.properties.isBookable.description": "Check this box if this type of space can be reserved",
  "models.RoomPointSegmentType.singular": "Segment type",
  "models.RoomPointSegmentType.plural": "Segment types",
  "models.RoomPointSegmentType.determinant.defined": "the type of segment",
  "models.RoomPointSegmentType.determinant.undefined": "a type of segment",
  "models.RoomPointSegmentType.determinants.defined": "segment types",
  "models.RoomPointSegmentType.determinants.undefined": "segment types",
  "models.RoomPointSegment.singular": "segment qualification",
  "models.RoomPointSegment.plural": "segment qualifications",
  "models.RoomPointSegment.determinant.defined": "segment qualification",
  "models.RoomPointSegment.determinant.undefined": "a segment qualification",
  "models.RoomPointSegment.determinants.defined": "segment qualifications",
  "models.RoomPointSegment.determinants.undefined": "segment qualifications",
  "models.RoomPointSegment.properties.reversePoints.label": "Reverse points",
  "models.RoomPointSegment.properties.reversePoints.description": "Reverse the points of the segment in order to have the display, for example, of doors in the right direction",
  "models.RoomPointSegment.properties.displayBothSides.label": "Show on both sides",
  "models.RoomPointSegment.properties.displayBothSides.description": "Show segment on both sides of segment",
  "models.RoomPointSegment.views.dq-not-uniq.label": "Non-unique point segments",
  "models.RoomPointSegment.views.dq-not-uniq.help": "Allows you to check that there is no exact duplicate segment on the same points",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.label": "The points of the segments are on 2 different floors",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.help": "Allows you to check that the points of the segments are on the same floor",
  "models.RoomPointRoom.singular": "Association between a point and a space",
  "models.RoomPointRoom.plural": "Associations between a point and a space",
  "models.RoomPointRoom.determinant.defined": "the association between a point and a space",
  "models.RoomPointRoom.determinant.undefined": "a point",
  "models.RoomPointRoom.description": "The association between a point and a space makes it possible to preserve the order of the points in a space in order to constitute a polyon",
  "models.RoomPointRoom.properties.id.label": "Identifier of the association between a point and a space",
  "models.RoomPointRoom.properties.id.description": "???",
  "models.RoomPointRoom.properties.roomId.label": "Space ID",
  "models.RoomPointRoom.properties.roomId.description": "???",
  "models.RoomPointRoom.properties.externalId.label": "External identifier",
  "models.RoomPointRoom.properties.externalId.description": "???",
  "models.RoomPointRoom.properties.sortIndex.label": "Sort index",
  "models.RoomPointRoom.properties.sortIndex.description": "???",
  "models.RoomPointRoom.properties.roomPointId.label": "Point identifier",
  "models.RoomPointRoom.properties.roomPointId.description": "???",
  "models.RoomPoint.singular": "point of spaces",
  "models.RoomPoint.plural": "points of spaces",
  "models.RoomPoint.determinant.defined": "the point of spaces",
  "models.RoomPoint.determinant.undefined": "a point of spaces",
  "models.RoomPoint.properties.id.label": "Identifier of the point of spaces",
  "models.RoomPoint.properties.x.label": "x",
  "models.RoomPoint.properties.x.description": "Coordinate on the X axis",
  "models.RoomPoint.properties.y.label": "there",
  "models.RoomPoint.properties.y.description": "Y axis coordinate",
  "models.RoomPoint.properties.sort_index.label": "Order",
  "models.RoomPoint.properties.sort_index.description": "The index used for sorting",
  "models.RoomPoint.properties.room.description": "???",
  "models.RoomPoint.properties.externalId.label": "External identifier",
  "models.RoomPoint.properties.externalId.description": "???",
  "models.RoomPoint.views.dq-uniq-position.label": "Single point position",
  "models.RoomPoint.views.dq-uniq-position.help": "Allows you to check that there is no exact duplicate position on the points",
  "models.RoomPoint.views.dq-not-used.label": "Unused points",
  "models.RoomPoint.views.dq-not-used.help": "Allows you to see points that are not used in spaces",
  "models.RoomConnector.singular": "Space connector",
  "models.RoomConnector.plural": "Space connectors",
  "models.RoomConnector.determinant.defined": "the space connector",
  "models.RoomConnector.determinant.undefined": "a space connector",
  "models.RoomConnector.determinants.defined": "space connectors",
  "models.RoomConnector.determinants.undefined": "space connectors",
  "models.RoomConnector.description": "Space connectors allow you to create a link between several spaces on different floors",
  "models.RoomConnector.properties.id.label": "Space Connector ID",
  "models.RoomConnector.properties.name.label": "Space connector name",
  "models.RoomConnector.properties.waitTime.label": "Average waiting time",
  "models.RoomConnector.properties.waitTime.description": "The average wait time before the space connector becomes available",
  "models.RoomConnector.properties.timePerFloor.label": "Time between each floor",
  "models.RoomConnector.properties.timePerFloor.description": "The time required to be able to move from each floor to the next",
  "models.RoomAffectation.singular": "Space allocation",
  "models.RoomAffectation.plural": "Space assignments",
  "models.RoomAffectation.description": "Allows you to assign a person to a single space",
  "models.RoomAffectation.determinant.defined": "space allocation",
  "models.RoomAffectation.determinant.undefined": "a space allocation",
  "models.RoomAffectation.determinants.defined": "space assignments",
  "models.RoomAffectation.determinants.undefined": "space assignments",
  "models.RoomAffectation.views.room-mouvement-matrix-import.help": "Import spaces transfer matrices",
  "models.RoomAffectation.views.room-mouvement-matrix-import.label": "Import transfer matrix",
  "models.Room.singular": "space",
  "models.Room.plural": "spaces",
  "models.Room.determinant.defined": "space",
  "models.Room.determinant.undefined": "an area",
  "models.Room.determinants.defined": "the spaces",
  "models.Room.determinants.undefined": "spaces",
  "models.Room.description": "Spaces are workplaces or areas in order to divide a floor into sub-spaces.",
  "models.Room.views.map.help": "View space plan %{name}",
  "models.Room.views.map.label": "Plan",
  "models.Room.views.dq-uniq-name.help": "Suggests names for spaces that do not have a name or the name is not unique on the same floor",
  "models.Room.views.dq-uniq-name.label": "Proposed names for spaces",
  "models.Room.views.dq-no-point.help": "Spaces that have 0, 1, or 2 points and therefore should have zero area",
  "models.Room.views.dq-no-point.label": "Spaces without enough points",
  "models.Room.views.dq-capacity-equals-seats-count.help": "Spaces which have a capacity excluding seats equal to the number of seats and which have a total capacity doubled",
  "models.Room.views.dq-capacity-equals-seats-count.label": "Spaces with a capacity excluding seats equal to the number of seats",
  "models.Room.views.dq-capacity-gt-0.help": "Allows you to see if there are any inconsistencies in the capacities of spaces or detect, for example, furniture that does not yet have seats",
  "models.Room.views.dq-capacity-gt-0.label": "Spaces which have a capacity excluding seats different from 0",
  "models.Room.views.meeting-rooms.help": "View and navigate meeting rooms",
  "models.Room.views.meeting-rooms.label": "Meeting rooms",
  "models.Room.properties.prettyName.label": "Display name",
  "models.Room.properties.prettyName.description": "Allows to have a display name in addition to the technical name of the space, for example for meeting rooms",
  "models.Room.properties.id.label": "Space ID",
  "models.Room.properties.livePeopleCount.label": "Number of people in space in real time",
  "models.Room.properties.livePeopleCount.description": "This value is updated by the people counting sensors present in the space and provides the number of people present in real time in the space",
  "models.Room.properties.picture.label": "Photo from space",
  "models.Room.properties.picture.description": "The photo of the space makes it easy to visualize",
  "models.Room.properties.capacity.label": "Capacity excluding seats",
  "models.Room.properties.capacity.description": "The declared capacity can be used to define the number of seats available in a space or to know the maximum number of people that can be put in a space, this figure is added to the number of seats to give the total capacity",
  "models.Room.properties.workplacesCount.label": "Number of workstations",
  "models.Room.properties.workplacesCount.description": "The number of workstations in the space is calculated automatically",
  "models.Room.properties.workplacesRatio.label": "Ratio per workstation",
  "models.Room.properties.workplacesRatio.description": "The ratio per workstation is the number of square meters of space divided by the number of workstations, this value is calculated automatically",
  "models.Room.properties.peopleCount.label": "Number of assignments",
  "models.Room.properties.peopleCount.description": "The number of people assigned to the space, either directly or through a workstation",
  "models.Room.properties.peopleRatio.label": "Occupancy ratio",
  "models.Room.properties.peopleRatio.description": "The occupancy ratio is the number of square meters of the space divided by the number of people assigned to the spaces, either directly or via a workstation, this value is calculated",
  "models.Room.properties.freeWorkplacesCount.label": "Number of vacancies",
  "models.Room.properties.freeWorkplacesCount.description": "Number of free positions in the space",
  "models.Room.properties.flexWorkplacesCount.label": "Number of flex positions",
  "models.Room.properties.flexWorkplacesCount.description": "Number of flex positions in the space",
  "models.Room.properties.sharedWorkplacesCount.label": "Number of shared workstations",
  "models.Room.properties.sharedWorkplacesCount.description": "Number of workstations shared by at least 2 people",
  "models.Room.properties.transitWorkplacesCount.label": "Number of transit workstations",
  "models.Room.properties.transitWorkplacesCount.description": "Number of temporary workstations, these positions are not counted in free positions and are not flex",
  "models.Room.properties.sharedWorkplacesRatio.label": "Rate of shared workstations",
  "models.Room.properties.sharedWorkplacesRatio.description": "Rate of workstations shared by at least 2 people compared to all workstations in the space",
  "models.Room.properties.flexRatio.label": "Rate of flex workstations",
  "models.Room.properties.flexRatio.description": "The flex workstation rate is calculated by dividing the number of flex workstations by the total number of workstations",
  "models.Room.properties.name.label": "Space name",
  "models.Room.properties.name.description": "The space name is used to define it and find it easily.",
  "models.Room.properties.area.label": "Area",
  "models.Room.properties.area.description": "The qualified floor space for this space",
  "models.Room.properties.perimeter.label": "Perimeter",
  "models.Room.properties.perimeter.description": "The perimeter of space represents its outline",
  "models.Room.properties.costCenter.description": "Allows you to know which cost center to associate the space with when it comes to managing re-invoicing to the cost center by space",
  "models.Room.properties.distributionCostType.description": "Allows you to determine the method of calculating the cost distribution key",
  "models.Room.properties.info.label": "Additional information",
  "models.Room.properties.info.description": "Allows you to keep additional text-type information on the space",
  "models.Room.properties.bookingEmail.label": "Email used to reserve this space",
  "models.Room.properties.bookingEmail.description": "This email is used to reserve this room via the messaging system",
  "models.Room.properties.keyCylinderCode.label": "Cylinder number",
  "models.Room.properties.keyCylinderCode.description": "The cylinder number allows you to define the cylinder number of the space door lock or an element related to the physical access to the space",
  "models.Room.reports.mouvementMatrix.fileName": "Transfer matrix",
  "models.Room.reports.mouvementMatrix.help": "Create a transfer matrix in Excel allowing you to easily carry out the trips of your employees",
  "models.PersonWorkingLocation.singular": "People's work location",
  "models.PersonWorkingLocation.plural": "People's work locations",
  "models.PersonWorkingLocation.determinant.defined": "people's work location",
  "models.PersonWorkingLocation.determinant.undefined": "a place where people work",
  "models.PersonWorkingLocation.determinants.defined": "people's work locations",
  "models.PersonWorkingLocation.determinants.undefined": "people's work locations",
  "models.PersonWorkingLocation.description": "A workplace of people defines the workplace of people",
  "models.PersonWorkingLocation.views.my-planning.help": "Manage my schedule for the next few weeks",
  "models.PersonWorkingLocation.views.my-planning.label": "Manage my schedule",
  "models.PersonToWorkplaceBooking.singular": "Reservation at people's workstations",
  "models.PersonToWorkplaceBooking.plural": "Reservations at people's workstations",
  "models.PersonToWorkplaceBooking.description": "People's workstation reservations are recorded and available with reservation start and end dates",
  "models.PersonToWorkplaceBooking.determinant.defined": "reservation at people's workstation",
  "models.PersonToWorkplaceBooking.determinant.undefined": "a reservation at the people's workstation",
  "models.PersonToWorkplaceBooking.determinants.defined": "reservations at people's workstations",
  "models.PersonToWorkplaceBooking.determinants.undefined": "reservations at people's workstations",
  "models.PersonToWorkplaceBooking.properties.startDatetime.label": "Start of booking",
  "models.PersonToWorkplaceBooking.properties.startDatetime.description": "The start date and time of the reservation",
  "models.PersonToWorkplaceBooking.properties.endDatetime.label": "End of reservation",
  "models.PersonToWorkplaceBooking.properties.endDatetime.description": "The date and time the reservation ends",
  "models.PersonToWorkplaceBooking.views.dashboard-index.label": "Dashboard",
  "models.PersonToWorkplaceBooking.views.dashboard-index.help": "People Workstation Reservations Dashboard",
  "models.PersonToRoomBooking.singular": "Reservation for the people area",
  "models.PersonToRoomBooking.plural": "Reservations for the people area",
  "models.PersonToRoomBooking.description": "Reservations for people's spaces are recorded and available with the reservation start and end dates",
  "models.PersonToRoomBooking.determinant.defined": "reservation in the people's area",
  "models.PersonToRoomBooking.determinant.undefined": "a reservation for the people area",
  "models.PersonToRoomBooking.determinants.defined": "reservations for the people area",
  "models.PersonToRoomBooking.determinants.undefined": "reservations for the people area",
  "models.PersonToRoomBooking.properties.startDatetime.label": "Start of booking",
  "models.PersonToRoomBooking.properties.startDatetime.description": "The start date and time of the reservation",
  "models.PersonToRoomBooking.properties.endDatetime.label": "End of reservation",
  "models.PersonToRoomBooking.properties.endDatetime.description": "The date and time the reservation ends",
  "models.PersonToPersonType.singular": "Type of relationship between people",
  "models.PersonToPersonType.plural": "Types of relationship between people",
  "models.PersonToPersonType.determinant.defined": "the type of relationship between people",
  "models.PersonToPersonType.determinant.undefined": "a type of relationship between people",
  "models.PersonToPersonType.determinants.defined": "types of relationships between people",
  "models.PersonToPersonType.determinants.undefined": "types of relationships between people",
  "models.PersonToPersonType.properties.labelForward.label": "Natural relationship (forward)",
  "models.PersonToPersonType.properties.labelForward.description": "The definition of relationship in the natural sense, for example between a father and his son, the natural definition is 'is the father of'",
  "models.PersonToPersonType.properties.labelBackward.label": "Inverse relationship",
  "models.PersonToPersonType.properties.labelBackward.description": "The definition of relationship in the reverse of the natural sense, for example between a father and his son, the reverse definition of the natural sense is 'is the son of'",
  "models.PersonToPerson.singular": "Person-to-person relationship",
  "models.PersonToPerson.plural": "Person-to-person relationships",
  "models.PersonToPerson.determinant.defined": "the person-to-person relationship",
  "models.PersonToPerson.determinant.undefined": "a person-to-person relationship",
  "models.PersonToPerson.determinants.defined": "person-to-person relationships",
  "models.PersonToPerson.determinants.undefined": "person-to-person relationships",
  "models.PersonToPerson.properties.personSource.label": "Source person",
  "models.PersonToPerson.properties.personTarget.label": "Destination person",
  "models.PersonToDimensionBooking.singular": "Reservation to the people assignment layer",
  "models.PersonToDimensionBooking.plural": "Reservations on the people assignment layer",
  "models.PersonToDimensionBooking.description": "Reservations to people assignment layers are recorded and available with reservation start and end dates",
  "models.PersonToDimensionBooking.determinant.defined": "reservation at the people assignment layer",
  "models.PersonToDimensionBooking.determinant.undefined": "a reservation on the people assignment layer",
  "models.PersonToDimensionBooking.determinants.defined": "reservations on the people assignment layer",
  "models.PersonToDimensionBooking.determinants.undefined": "reservations to the people assignment layer",
  "models.PersonToDimensionBooking.properties.startDatetime.label": "Start of booking",
  "models.PersonToDimensionBooking.properties.startDatetime.description": "The start date and time of the reservation",
  "models.PersonToDimensionBooking.properties.endDatetime.label": "End of reservation",
  "models.PersonToDimensionBooking.properties.endDatetime.description": "The date and time the reservation ends",
  "models.PersonState.singular": "status of persons",
  "models.PersonState.plural": "status of persons",
  "models.PersonState.description": "Allows you to define all types of contracts between people and the company",
  "models.PersonState.determinant.defined": "the status of people",
  "models.PersonState.determinant.undefined": "a status of persons",
  "models.PersonState.determinants.defined": "the status of persons",
  "models.PersonState.determinants.undefined": "of the statutes of persons",
  "models.PersonState.properties.id.label": "Person status identifier",
  "models.PersonState.properties.name.label": "Person Status Name",
  "models.PersonToBuilding.singular": "Affection to the building",
  "models.PersonToBuilding.plural": "building assignments",
  "models.PersonToBuilding.description": "Allows you to assign a person to a building, without additional information. The assignment can be counted, or not.",
  "models.PersonToBuilding.determinant.defined": "affection for the building",
  "models.PersonToBuilding.determinant.undefined": "an affection for the building",
  "models.PersonToBuilding.determinants.defined": "building affections",
  "models.PersonToBuilding.determinants.undefined": "building ailments",
  "models.PersonToBuilding.properties.addToPeopleCount.label": "Count assignment",
  "models.PersonToBuilding.properties.addToPeopleCount.description": "Add this assignment to the total number of people assigned to the building",
  "models.PersonSecurityProfile.singular": "personal safety profile",
  "models.PersonSecurityProfile.plural": "personal safety profiles",
  "models.PersonSecurityProfile.description": "Allows you to define the different security profiles that can be associated with people",
  "models.PersonSecurityProfile.determinant.defined": "personal safety profile",
  "models.PersonSecurityProfile.determinant.undefined": "a personal safety profile",
  "models.PersonSecurityProfile.determinants.defined": "personal security profiles",
  "models.PersonSecurityProfile.determinants.undefined": "personal security profiles",
  "models.PersonSecurityProfile.properties.id.label": "Personal security profile identifier",
  "models.PersonSecurityProfile.properties.name.label": "Security profile name",
  "models.PersonSecurityProfile.properties.name.description": "Allows you to define the different security profiles that can be associated with people",
  "models.PersonSecurityProfile.properties.color.label": "Security profile color",
  "models.PersonSecurityProfile.properties.color.description": "Allows you to color the person's assigned workstation and security icon according to their security profile",
  "models.PersonSecurityProfile.properties.icon.label": "Security profile icon",
  "models.PersonSecurityProfile.properties.icon.description": "Allows you to assign an icon to a security profile in order to clearly visualize the security profiles on the map or in the lists",
  "models.PersonCompanyToRoomType.singular": "Type of provider space",
  "models.PersonCompanyToRoomType.plural": "Types of provider spaces",
  "models.PersonCompanyToRoomType.description": "The types of spaces of the service providers make it possible to define a relationship between a type of space and the service provider and to define a mission.",
  "models.PersonCompanyToRoomType.determinant.defined": "the type of space of the service provider",
  "models.PersonCompanyToRoomType.determinant.undefined": "a type of space of the service provider",
  "models.PersonCompanyToRoomType.determinants.defined": "the types of service providers\u2019 spaces",
  "models.PersonCompanyToRoomType.determinants.undefined": "types of service providers\u2019 spaces",
  "models.PersonGender.singular": "gender of the person",
  "models.PersonGender.plural": "Kinds of people",
  "models.PersonGender.description": "Allows you to count each gender, for example for managing toilets",
  "models.PersonGender.determinant.defined": "the gender of the person",
  "models.PersonGender.determinant.undefined": "a kind of person",
  "models.PersonGender.determinants.defined": "types of people",
  "models.PersonGender.determinants.undefined": "kinds of people",
  "models.PersonGender.properties.name.label": "Last name",
  "models.PersonGender.properties.name.description": "The gender name of the person",
  "models.PersonCompanyToItemType.singular": "Provider object type",
  "models.PersonCompanyToItemType.plural": "Provider object types",
  "models.PersonCompanyToItemType.description": "The service provider object types make it possible to define a relationship between the object type and the service provider and to define the mission.",
  "models.PersonCompanyToItemType.determinant.defined": "the type of object of the service provider",
  "models.PersonCompanyToItemType.determinant.undefined": "a type of provider object",
  "models.PersonCompanyToItemType.determinants.defined": "the types of service providers\u2019 objects",
  "models.PersonCompanyToItemType.determinants.undefined": "types of service providers\u2019 objects",
  "models.PersonCompanyToItem.singular": "Intervention on an object",
  "models.PersonCompanyToItem.plural": "Interventions on objects",
  "models.PersonCompanyToItem.description": "The interventions of service providers on objects make it possible to define, for example, the date of a visit to a fire extinguisher",
  "models.PersonCompanyToItem.determinant.defined": "intervention on an object",
  "models.PersonCompanyToItem.determinant.undefined": "an intervention on an object",
  "models.PersonCompanyToItem.determinants.defined": "interventions on objects",
  "models.PersonCompanyToItem.determinants.undefined": "interventions on objects",
  "models.PersonCompanyToItem.properties.datetime.label": "Date and time of intervention",
  "models.PersonCompanyToItem.properties.datetime.description": "When the intervention took place",
  "models.PersonCompanyToItem.properties.comment.label": "Comment",
  "models.PersonCompanyToItem.properties.comment.description": "A comment on the intervention",
  "models.PersonCompanyMission.singular": "mission of the service provider",
  "models.PersonCompanyMission.plural": "service provider missions",
  "models.PersonCompanyMission.description": "The missions of the service providers make it possible to know the area of \u200B\u200Bintervention of the service providers",
  "models.PersonCompanyMission.determinant.defined": "the mission of the service provider",
  "models.PersonCompanyMission.determinant.undefined": "a mission of the service provider",
  "models.PersonCompanyMission.determinants.defined": "the missions of the service providers",
  "models.PersonCompanyMission.determinants.undefined": "service providers\u2019 missions",
  "models.PersonCompanyMission.properties.name.label": "Last name",
  "models.PersonCompanyMission.properties.name.description": "The name of the service provider\u2019s mission",
  "models.PersonCompany.singular": "service provider company",
  "models.PersonCompany.plural": "service companies",
  "models.PersonCompany.description": "The service provider company allows you to manage service provider personnel by company to which they belong",
  "models.PersonCompany.determinant.defined": "the service provider company",
  "models.PersonCompany.determinant.undefined": "a service company",
  "models.PersonCompany.determinants.defined": "service companies",
  "models.PersonCompany.determinants.undefined": "service companies",
  "models.PersonCompany.properties.name.label": "Last name",
  "models.PersonCompany.properties.name.description": "The name of the service provider, for example the company name of a service provider",
  "models.PersonCompany.properties.comment.label": "Further information",
  "models.PersonCompany.properties.comment.description": "Additional information on the service provider, such as its mission, its values, the functional coverage of its service, etc.",
  "models.PersonCompany.properties.contact.label": "Contact",
  "models.PersonCompany.properties.contact.description": "Contact information of the service provider",
  "models.PersonCompany.properties.documents.label": "Related documents",
  "models.PersonCompany.properties.documents.description": "The link to the documents associated with this service provider",
  "models.Person.singular": "person",
  "models.Person.plural": "people",
  "models.Person.description": "These are the people entered into Surfy's database",
  "models.Person.determinant.defined": "the person",
  "models.Person.determinant.undefined": "one person",
  "models.Person.determinants.defined": "the people",
  "models.Person.determinants.undefined": "people",
  "models.Person.properties.id.label": "Surfy ID",
  "models.Person.properties.fullname.label": "Full Name",
  "models.Person.properties.fullname.description": "The full name of the person making it easier to find",
  "models.Person.properties.personState.label": "Status",
  "models.Person.properties.personState.description": "Allows you to indicate the type of contract the person has with the company",
  "models.Person.properties.personSecurityProfile.label": "Security profile",
  "models.Person.properties.personSecurityProfile.description": "Allows to indicate the security profile of the person for security management",
  "models.Person.properties.firstname.label": "First name",
  "models.Person.properties.firstname.description": "The first name of the person",
  "models.Person.properties.lastname.label": "Last name",
  "models.Person.properties.lastname.description": "Person's last name",
  "models.Person.properties.email.label": "E-mail",
  "models.Person.properties.email.description": "The person's email",
  "models.Person.properties.picture.label": "Profile picture",
  "models.Person.properties.picture.description": "The photo of the person to have it in the trombinoscope or in research",
  "models.Person.properties.monitorReference.label": "Screen reference",
  "models.Person.properties.monitorReference.description": "The reference of the computer screen associated with this person",
  "models.Person.properties.computerReference.label": "Computer reference",
  "models.Person.properties.computerReference.description": "The reference of the computer associated with this person",
  "models.Person.properties.cellphone.label": "Cellphone",
  "models.Person.properties.cellphone.description": "The person's mobile phone",
  "models.Person.properties.telephone.label": "Phone",
  "models.Person.properties.telephone.description": "The person's landline phone",
  "models.Person.properties.title.label": "title",
  "models.Person.properties.title.description": "The title of the person",
  "models.Person.properties.badgeNumber.label": "Badge number",
  "models.Person.properties.badgeNumber.description": "The person's badge number",
  "models.Person.properties.boxNumber.label": "Locker number",
  "models.Person.properties.boxNumber.description": "The person's locker number",
  "models.Person.properties.badgeRestaurant.label": "RIE badge",
  "models.Person.properties.badgeRestaurant.description": "The reference of the RIE or company restaurant badge",
  "models.Person.properties.registrationNumber.label": "Registration",
  "models.Person.properties.registrationNumber.description": "The person's registration number",
  "models.Person.properties.startDate.label": "Entry date",
  "models.Person.properties.startDate.description": "The date the person joined the company",
  "models.Person.properties.endDate.label": "Release date",
  "models.Person.properties.endDate.description": "The person's exit date from the company",
  "models.Person.properties.code.label": "Registration number",
  "models.Person.properties.code.description": "The person's HR number",
  "models.Person.properties.personToPersonTargets.label": "Relations with this person",
  "models.Person.properties.personToPersonTargets.description": "Allows you to know the ascending relationship between two people, for example the hierarchical relationship",
  "models.Person.properties.personToPersonSources.label": "Relationships from this person",
  "models.Person.properties.personToPersonSources.description": "Allows you to know the descending relationship between two people, for example the hierarchical relationship",
  "models.Person.properties.organization.label": "The organization of the person",
  "models.Person.properties.organization.description": "The person's attachment service",
  "models.Person.properties.info.label": "Comment",
  "models.Person.properties.info.description": "Comment on the person allowing to keep additional or miscellaneous information",
  "models.Person.properties.notAffectable.label": "Not Assignable",
  "models.Person.properties.notAffectable.description": "The person cannot be assigned to a workstation, space, building or assignment layer",
  "models.Person.views.home.help": "See the file of the person <b>%{name}</b> with his information and assignments",
  "models.Person.views.home.label": "Person file",
  "models.Person.views.relationship-list.help": "List the relationships between people",
  "models.Person.views.relationship-list.label": "List of relationships",
  "models.Person.views.dq-only-associated-to-building.help": "List assignable people who are assigned to a building and counted without being assigned (workstation, assignment layer, space)",
  "models.Person.views.dq-only-associated-to-building.label": "Persons assigned to a building without other assignment",
  "models.Person.views.dq-near-end-date.help": "List the people who have a contract end date after today and who are assigned to a workstation",
  "models.Person.views.dq-near-end-date.label": "People leaving the company",
  "models.Person.views.dq-no-affectations.label": "People without assignments",
  "models.Person.views.dq-no-affectations.help": "List assignable people who have no assignments (building, workstation, assignment layer, space)",
  "models.Person.views.dq-person-duplicate.label": "Duplicate people",
  "models.Person.views.dq-person-duplicate.help": "List duplicate people",
  "models.PartnerApiCredential.singular": "Partner API key",
  "models.PartnerApiCredential.plural": "Partner API keys",
  "models.PartnerApiCredential.determinant.defined": "the partner API key",
  "models.PartnerApiCredential.determinant.undefined": "a partner API key",
  "models.PartnerApiCredential.determinants.defined": "partner API keys",
  "models.PartnerApiCredential.determinants.undefined": "partner API keys",
  "models.PartnerApiCredential.properties.enable.label": "Enabled",
  "models.PartnerApiCredential.properties.enable.description": "You must activate the key to use it",
  "models.OrganizationFloor.singular": "Organization of floors",
  "models.OrganizationFloor.plural": "Floor organization",
  "models.OrganizationFloor.determinant.defined": "the organization of floors",
  "models.OrganizationFloor.determinant.undefined": "an organization of floors",
  "models.OrganizationFloor.determinants.defined": "floor organizations",
  "models.OrganizationFloor.determinants.undefined": "floor organizations",
  "models.OrganizationBuilding.singular": "Organization of buildings",
  "models.OrganizationBuilding.plural": "Building organizations",
  "models.OrganizationBuilding.determinant.defined": "organization of buildings",
  "models.OrganizationBuilding.determinant.undefined": "an organization of buildings",
  "models.OrganizationBuilding.determinants.defined": "building organizations",
  "models.OrganizationBuilding.determinants.undefined": "building organizations",
  "models.Organization.singular": "organization",
  "models.Organization.plural": "organizations",
  "models.Organization.determinant.defined": "the organization",
  "models.Organization.determinant.undefined": "an organization",
  "models.Organization.determinants.defined": "organizations",
  "models.Organization.determinants.undefined": "organizations",
  "models.Organization.description": "Organizations have two hierarchical levels: departments and services, and help define the organizational structure of the company.",
  "models.Organization.properties.id.label": "Organization ID",
  "models.Organization.properties.name.label": "Last name",
  "models.Organization.properties.name.description": "Name that will define the organization",
  "models.Organization.properties.code.label": "Code",
  "models.Organization.properties.code.description": "This code can be used to contain the organization coding or the key for identification via third party software",
  "models.Organization.properties.organizationId.label": "Management ID",
  "models.Organization.properties.organizationId.description": "It is thanks to this identifier that it is possible to create the organizational hierarchy",
  "models.Organization.properties.organization.label": "Direction",
  "models.Organization.properties.organizations.label": "Services",
  "models.Organization.views.hierarchy.label": "Hierarchy",
  "models.Organization.views.hierarchy.help": "View Organization Hierarchy",
  "models.Organization.views.dq-organization-to-room.label": "Errors in the organization of spaces",
  "models.Organization.views.dq-organization-to-room.help": "Detect space associations with organizations that are not valid",
  "models.Organization.views.dq-organization-hierarchy.label": "Organization Hierarchy Errors",
  "models.Organization.views.dq-organization-hierarchy.help": "Detect organizations that are not in the correct hierarchy",
  "models.OpenerPostMessageHost.singular": "Message host for pop-up window",
  "models.OpenerPostMessageHost.plural": "Message hosts for pop-up window",
  "models.OpenerPostMessageHost.determinant.defined": "the message host for pop-up window",
  "models.OpenerPostMessageHost.determinant.undefined": "a message host for pop-up window",
  "models.OpenerPostMessageHost.determinants.defined": "pop-up message hosts",
  "models.OpenerPostMessageHost.determinants.undefined": "pop-up message hosts",
  "models.OpenerPostMessageHost.description": "A pop-up message host is an element that allows you to communicate with a pop-up window opened on the actions in the plan.",
  "models.OccupancyStatus.singular": "occupancy status",
  "models.OccupancyStatus.plural": "occupancy states",
  "models.OccupancyStatus.determinant.defined": "the state of occupancy",
  "models.OccupancyStatus.determinant.undefined": "a state of occupation",
  "models.OccupancyStatus.determinants.defined": "occupancy states",
  "models.OccupancyStatus.determinants.undefined": "states of occupation",
  "models.OccupancyStatus.description": "The occupancy status makes it possible to identify the real-time status of a space or workstation, for example if it is free, occupied or squatted, the occupancy status is updated. day by connected objects present in space",
  "models.OccupancyStatus.properties.id.label": "Occupancy status identifier",
  "models.OccupancyStatus.properties.name.label": "Name of occupancy state",
  "models.OccupancyStatus.properties.color.label": "Color",
  "models.OccupancyStatus.properties.color.description": "Color allows you to color spaces or workstations on plans according to their occupancy status",
  "models.OccupancyStatus.properties.code.label": "Occupancy status code",
  "models.OccupancyStatus.properties.code.description": "The code makes it possible to identify and carry out technical operations on the occupancy state",
  "models.Object3dModel.singular": "3d model",
  "models.Object3dModel.plural": "3d models",
  "models.Object3dModel.determinant.defined": "the 3d model",
  "models.Object3dModel.determinant.undefined": "a 3d model",
  "models.Object3dModel.determinants.defined": "3d models",
  "models.Object3dModel.determinants.undefined": "3d models",
  "models.Object3dModel.description": "The 3D Model allows a realistic 3D representation of objects placed on the plan; In the absence of a 3D model, the objects are represented in full form in the 3D view",
  "models.Object3dModel.properties.origin.label": "Orientation",
  "models.Object3dModel.properties.origin.description": "Use X if the object is facing right or Y if the object is facing down",
  "models.MapScale.singular": "plane scale",
  "models.MapScale.plural": "flat scales",
  "models.MapScale.determinant.defined": "the scale",
  "models.MapScale.determinant.undefined": "scale",
  "models.MapScale.determinants.defined": "the scales",
  "models.MapScale.determinants.undefined": "scales",
  "models.MapScale.properties.id.label": "Scale identifier",
  "models.MapScale.properties.p1.description": "Starting point",
  "models.MapScale.properties.p2.description": "Point of arrival",
  "models.MapScale.properties.name.label": "Name of the scale",
  "models.MapScale.properties.name.description": "To remember the name and reuse it on other floors",
  "models.MapScale.properties.length.label": "Distance",
  "models.MapScale.properties.length.description": "The distance shown on the plan between the 2 points in meters",
  "models.MapScale.properties.roomTextSize.label": "Space text size",
  "models.MapScale.properties.roomTextSize.description": "The size of the text of the spaces on the plan to optimize the display",
  "models.MapScale.properties.workplaceTextSize.label": "Text size on objects",
  "models.MapScale.properties.workplaceTextSize.description": "The size of the text on the workstations and on the objects on the map to optimize the display",
  "models.MapScale.properties.segmentDistanceTextSize.label": "Segment text size",
  "models.MapScale.properties.segmentDistanceTextSize.description": "The size of the text on the distances between the points on the map to optimize the display",
  "models.MapScale.properties.itemTypeIconSize.label": "Size of object type icons",
  "models.MapScale.properties.itemTypeIconSize.description": "The size of the object type icons on the map, the size will be limited by the size of the space",
  "models.MapScale.properties.roomIconSize.label": "Size of space type icons",
  "models.MapScale.properties.roomIconSize.description": "The size of icons on the map in spaces relative to space types",
  "models.MapScale.properties.strokeWidth.label": "Line thickness",
  "models.MapScale.properties.strokeWidth.description": "It is possible to reduce the thickness of the lines to increase the readability of the plan",
  "models.MapScale.views.dq-not-used.label": "Unused scales",
  "models.MapScale.views.dq-not-used.help": "See scales that are not used on floors and can be removed",
  "models.MapScale.views.dq-uniq-name.label": "Proposed names for scales",
  "models.MapScale.views.dq-uniq-name.help": "Provides unique names for scales including the floors and buildings where they are used",
  "models.Manufacturer.singular": "Object type manufacturer",
  "models.Manufacturer.plural": "Object type manufacturers",
  "models.Manufacturer.determinant.defined": "the object type manufacturer",
  "models.Manufacturer.determinant.undefined": "a manufacturer of the object type",
  "models.Manufacturer.determinants.defined": "object type manufacturers",
  "models.Manufacturer.determinants.undefined": "typical manufacturers of objects",
  "models.Manufacturer.properties.name.label": "Object type vendor name",
  "models.Manufacturer.properties.name.description": "Identifies the manufacturer's name or brand",
  "models.Manufacturer.properties.website.label": "Website",
  "models.Manufacturer.properties.website.description": "Manufacturer's website address",
  "models.Legend.singular": "Legend",
  "models.Legend.plural": "Legend",
  "models.Legend.determinant.defined": "the legend",
  "models.Legend.determinant.undefined": "a legend",
  "models.Legend.determinants.defined": "the legends",
  "models.Legend.determinants.undefined": "legends",
  "models.Legend.description": "The legend allows you to configure the properties visible when the plan is saved as an image",
  "models.JupUserCompanyToJupRole.singular": "Role of the business user",
  "models.JupUserCompanyToJupRole.plural": "Company user roles",
  "models.JupUserCompanyToJupRole.determinant.defined": "the role of the business user",
  "models.JupUserCompanyToJupRole.determinant.undefined": "a role of the user of the company",
  "models.JupUserCompanyToJupRole.determinants.defined": "company user roles",
  "models.JupUserCompanyToJupRole.determinants.undefined": "company user roles",
  "models.JupUiView.singular": "Interface view",
  "models.JupUiView.plural": "Interface views",
  "models.JupUiView.determinant.defined": "the interface view",
  "models.JupUiView.determinant.undefined": "an interface view",
  "models.JupUiView.determinants.defined": "interface views",
  "models.JupUiView.determinants.undefined": "interface views",
  "models.JupUiTenantOperation.singular": "Interface operation for a company",
  "models.JupUiTenantOperation.plural": "Interface operations for a business",
  "models.JupUiTenantOperation.determinant.defined": "the interface operation for a company",
  "models.JupUiTenantOperation.determinant.undefined": "an interface operation for a company",
  "models.JupUiTenantOperation.determinants.defined": "interface operations for a company",
  "models.JupUiTenantOperation.determinants.undefined": "interface operations for a company",
  "models.JupUiOption.singular": "Interface option",
  "models.JupUiOption.plural": "Interface options",
  "models.JupUiOption.determinant.defined": "interface option",
  "models.JupUiOption.determinant.undefined": "an interface option",
  "models.JupUiOption.determinants.defined": "interface options",
  "models.JupUiOption.determinants.undefined": "interface options",
  "models.JupUiOperation.singular": "Interface operation",
  "models.JupUiOperation.plural": "Interface operations",
  "models.JupUiOperation.determinant.defined": "interface operation",
  "models.JupUiOperation.determinant.undefined": "an interface operation",
  "models.JupUiOperation.determinants.defined": "interface operations",
  "models.JupUiOperation.determinants.undefined": "interface operations",
  "models.JupUiLayout.singular": "View of the plan",
  "models.JupUiLayout.plural": "Visions of the plan",
  "models.JupUiLayout.determinant.defined": "the vision of the plan",
  "models.JupUiLayout.determinant.undefined": "a vision of the plan",
  "models.JupUiLayout.determinants.defined": "the visions of the plan",
  "models.JupUiLayout.determinants.undefined": "visions of the plan",
  "models.JupRoleToJupUiView.singular": "Role association with interface views",
  "models.JupRoleToJupUiView.plural": "Role associations with interface views",
  "models.JupRoleToJupUiView.determinant.defined": "associating the role with interface views",
  "models.JupRoleToJupUiView.determinant.undefined": "an association of the role to the interface views",
  "models.JupRoleToJupUiView.determinants.defined": "role associations with interface views",
  "models.JupRoleToJupUiView.determinants.undefined": "role associations with interface views",
  "models.JupRoleToJupUiView.properties.canSee.label": "Can see the view",
  "models.JupRoleToJupUiView.properties.canSee.description": "Allow the view to be seen by the role",
  "models.JupRoleToJupUiOption.singular": "Association role to visions of the plan",
  "models.JupRoleToJupUiOption.plural": "Role associations to plan visions",
  "models.JupRoleToJupUiOption.determinant.defined": "the association of the role with the visions of the plan",
  "models.JupRoleToJupUiOption.determinant.undefined": "an association of the role with the visions of the plan",
  "models.JupRoleToJupUiOption.determinants.defined": "associations of the role to the visions of the plan",
  "models.JupRoleToJupUiOption.determinants.undefined": "associations of the role to the visions of the plan",
  "models.JupRoleToJupUiOption.properties.canSee.label": "Can see option",
  "models.JupRoleToJupUiOption.properties.canSee.description": "Allow the option to be seen by the role",
  "models.JupRoleToJupUiOperation.singular": "Role association with interface operations",
  "models.JupRoleToJupUiOperation.plural": "Role association with interface operations",
  "models.JupRoleToJupUiOperation.determinant.defined": "association of the role with interface operations",
  "models.JupRoleToJupUiOperation.determinant.undefined": "an association of the role to interface operations",
  "models.JupRoleToJupUiOperation.determinants.defined": "role associations with interface operations",
  "models.JupRoleToJupUiOperation.determinants.undefined": "role associations with interface operations",
  "models.JupRoleToJupObjectType.singular": "Role to object type association",
  "models.JupRoleToJupObjectType.plural": "Role to object type associations",
  "models.JupRoleToJupObjectType.determinant.defined": "the association of the role with the type of object",
  "models.JupRoleToJupObjectType.determinant.undefined": "an association of the role to the type of object",
  "models.JupRoleToJupObjectType.determinants.defined": "the associations of the role to the type of object",
  "models.JupRoleToJupObjectType.determinants.undefined": "associations of the role to the type of object",
  "models.JupRoleToJupObjectType.properties.arCreate.label": "Creation (C)",
  "models.JupRoleToJupObjectType.properties.arCreate.description": "Allows entity creation",
  "models.JupRoleToJupObjectType.properties.arRead.label": "Reading (R)",
  "models.JupRoleToJupObjectType.properties.arRead.description": "Allows reading of entities",
  "models.JupRoleToJupObjectType.properties.arUpdate.label": "Update (U)",
  "models.JupRoleToJupObjectType.properties.arUpdate.description": "Allows updating of entities",
  "models.JupRoleToJupObjectType.properties.arDelete.label": "Suppression (D)",
  "models.JupRoleToJupObjectType.properties.arDelete.description": "Allows deletion of entities",
  "models.JupRole.singular": "Role",
  "models.JupRole.plural": "Roles",
  "models.JupRole.determinant.defined": "the role",
  "models.JupRole.determinant.undefined": "a role",
  "models.JupRole.determinants.defined": "the roles",
  "models.JupRole.determinants.undefined": "roles",
  "models.JupRole.views.matrix.help": "The security matrix of the role %{name}",
  "models.JupRole.views.matrix.label": "Matrix",
  "models.JupRole.views.help.help": "Summary of role permissions",
  "models.JupRole.views.help.label": "Assistance",
  "models.JupObjectType.singular": "Entity type",
  "models.JupObjectType.plural": "Entity Types",
  "models.JupObjectType.determinant.defined": "the type of entity",
  "models.JupObjectType.determinant.undefined": "an entity type",
  "models.JupObjectType.determinants.defined": "entity types",
  "models.JupObjectType.determinants.undefined": "entity types",
  "models.ItemTypePoint.singular": "Point of object types",
  "models.ItemTypePoint.plural": "Points of object types",
  "models.ItemTypePoint.determinant.defined": "point of object types",
  "models.ItemTypePoint.determinant.undefined": "a point of object types",
  "models.ItemTypePoint.determinants.defined": "points of object types",
  "models.ItemTypePoint.determinants.undefined": "points of object types",
  "models.ItemTypePoint.properties.id.label": "login",
  "models.ItemTypePoint.properties.id.description": "???",
  "models.ItemTypePoint.properties.x.label": "x",
  "models.ItemTypePoint.properties.x.description": "???",
  "models.ItemTypePoint.properties.y.label": "there",
  "models.ItemTypePoint.properties.y.description": "???",
  "models.ItemTypePoint.properties.externalId.label": "External identifier",
  "models.ItemTypePoint.properties.externalId.description": "???",
  "models.ItemTypePoint.properties.itemTypeId.label": "Object type identifier",
  "models.ItemTypePoint.properties.itemTypeId.description": "???",
  "models.ItemTypePoint.properties.sortIndex.label": "Sort index",
  "models.ItemTypePoint.properties.sortIndex.description": "???",
  "models.ItemTypePoint.properties.itemType.label": "Type of object",
  "models.ItemTypePoint.properties.itemType.description": "???",
  "models.ItemTypeFamily.singular": "family of object types",
  "models.ItemTypeFamily.plural": "families of object types",
  "models.ItemTypeFamily.determinant.defined": "the family of object types",
  "models.ItemTypeFamily.determinant.undefined": "a family of object types",
  "models.ItemTypeFamily.determinants.defined": "object type families",
  "models.ItemTypeFamily.determinants.undefined": "families of object types",
  "models.ItemTypeFamily.description": "Allows you to display objects by Family on the plans and in the pdf inventory",
  "models.ItemTypeFamily.properties.id.label": "Identifier of the object's type family",
  "models.ItemTypeFamily.properties.name.label": "Name of the object's type family",
  "models.ItemTypeFamily.properties.name.description": "The name of the family allows it to be identified, this name is used to group the types of object",
  "models.ItemType.singular": "object type",
  "models.ItemType.plural": "object types",
  "models.ItemType.determinant.defined": "the type of object",
  "models.ItemType.determinant.undefined": "an object type",
  "models.ItemType.determinants.defined": "object types",
  "models.ItemType.determinants.undefined": "object types",
  "models.ItemType.properties.id.label": "Identifier of the type of the object",
  "models.ItemType.properties.id.description": "Identifier of the type of the object",
  "models.ItemType.properties.description.label": "Description",
  "models.ItemType.properties.description.description": "Allows you to have additional information on the type of object",
  "models.ItemType.properties.name.label": "Object type name",
  "models.ItemType.properties.name.description": "Allows you to quickly identify the type of object with a complete, logical and descriptive name; You can indicate the dimensions, for example: Meeting Table 340x120; Tip: always start with the largest dimension",
  "models.ItemType.properties.zIndex.label": "Height index",
  "models.ItemType.properties.zIndex.description": "The higher the height index, the more the object will be positioned above the others; It can be negative; for example for a seat: -1; Tip: for Icons, set the index to 9",
  "models.ItemType.properties.picture.label": "Photo",
  "models.ItemType.properties.picture.description": "Allows you to load the photo of the type of object, which will be visible in the inventory in PDF and on the sheet of the object selected on the plan",
  "models.ItemType.properties.iconShape.label": "Icon shape",
  "models.ItemType.properties.iconShape.description": "The shape of the icon can influence its display on the plan",
  "models.ItemType.properties.displayItemReferenceInMap.label": "Show plan information",
  "models.ItemType.properties.displayItemReferenceInMap.description": "Allows you to display the \u201CReference\u201D field of each object on the plan",
  "models.ItemType.properties.code.label": "Code",
  "models.ItemType.properties.code.description": "Allows you to quickly access the object type by typing the code in the search during object creation",
  "models.ItemType.properties.icon.label": "Icon",
  "models.ItemType.properties.icon.description": "Gives you access to three types of icon: 1) \u201CFontawsome\u201D Icons, visible by checking \u201Cshow all\u201D or by searching by keyword in English in the search box; 2) \u201CSURFY\u201D Icons intended for illustrations added to plans in strategic locations (Toilets, Stairs, Elevators, Copy Points, etc.) but which can also be used as classic icons; 3) The \u201CSURFY 2\u201D Icons listing the regulatory icons of the ISO 7010 Safety standard; Their shape can be round, square or triangular",
  "models.ItemType.properties.color.label": "Color",
  "models.ItemType.properties.color.description": "Can be chosen from a pre-selection, or in advanced selection by Hexa or RGB code to respect your graphic charter",
  "models.ItemType.properties.height.label": "Height",
  "models.ItemType.properties.height.description": "Allows you to give the height in centimeters of the type of object in 3d vision",
  "models.ItemType.properties.price.label": "Price",
  "models.ItemType.properties.price.description": "The purchase price of the item type",
  "models.ItemType.properties.seatsCount.label": "Number of seats",
  "models.ItemType.properties.seatsCount.description": "The number of seats for this type of object (armchair, seat, sofa, etc.) is accumulated in Surfy by space, floor and building",
  "models.ItemType.properties.manufacturer.description": "Allows you to identify the manufacturer of the object type",
  "models.ItemType.properties.carbonFootprint.label": "Carbon footprint",
  "models.ItemType.properties.carbonFootprint.description": "The carbon footprint is the weight in Kilograms of CO2 emitted by each object from this type of object; it is given by the manufacturer",
  "models.ItemType.properties.iconBackgroundColor.label": "Icon background color",
  "models.ItemType.properties.iconBackgroundColor.description": "The background color allows you to correctly configure multi-color icons, particularly triangular ones.",
  "models.ItemType.properties.iconBorderColor.label": "Icon border color",
  "models.ItemType.properties.iconBorderColor.description": "The border color allows you to correctly configure multi-color icons, especially triangular ones.",
  "models.ItemType.properties.isAffectable.label": "Is it associatable with a person ?",
  "models.ItemType.properties.isAffectable.description": "Allows you to know if the object type is associable with a person",
  "models.ItemType.properties.excludeFromPathfinding.label": "Enable navigation",
  "models.ItemType.properties.excludeFromPathfinding.description": "Enables navigation for this object type",
  "models.ItemType.views.shape-editor.help": "Edit the shape of the object type %{name}",
  "models.ItemType.views.shape-editor.label": "Edit shape",
  "models.ItemType.views.avatar.help": "See the form of %{name}",
  "models.ItemType.views.avatar.label": "Form",
  "models.ItemType.views.dq-not-used.label": "Not used",
  "models.ItemType.views.dq-not-used.help": "List all unused object types via objects or via unused workstation types",
  "models.ItemToPerson.singular": "Object-to-person association",
  "models.ItemToPerson.plural": "Object-to-person associations",
  "models.ItemToPerson.description": "Allows you to associate an object with a person (ergonomic seat, locker)",
  "models.ItemToPerson.determinant.defined": "association of object to person",
  "models.ItemToPerson.determinant.undefined": "an object-to-person association",
  "models.ItemToPerson.determinants.defined": "object-to-person associations",
  "models.ItemToPerson.determinants.undefined": "object-to-person associations",
  "models.ItemFact.singular": "Object movement",
  "models.ItemFact.plural": "Object movements",
  "models.ItemFact.determinant.defined": "the movement of an object",
  "models.ItemFact.determinant.undefined": "an object movement",
  "models.ItemFact.determinants.defined": "object movements",
  "models.ItemFact.determinants.undefined": "object movements",
  "models.Item.singular": "object",
  "models.Item.plural": "objects",
  "models.Item.determinant.defined": "subject",
  "models.Item.determinant.undefined": "an object",
  "models.Item.determinants.defined": "Objects",
  "models.Item.determinants.undefined": "items",
  "models.Item.views.dq-item-not-in-workplace-room.label": "Object spaces different from workstation spaces",
  "models.Item.views.dq-item-not-in-workplace-room.help": "List of physical objects in workstations that are in spaces that are different from the workstation spaces",
  "models.Item.properties.id.label": "Identifier of the object",
  "models.Item.properties.price.label": "Price",
  "models.Item.properties.price.description": "The purchase price of the item if it is different from the price of the item type",
  "models.Item.properties.reference.label": "Object reference",
  "models.Item.properties.reference.description": "The object reference is used to find it and to differentiate this object from others",
  "models.Item.properties.code.label": "Immobilizer code",
  "models.Item.properties.code.description": "The asset number is used to keep the accounting number",
  "models.Item.properties.purchaseDate.label": "Date of purchase",
  "models.Item.properties.purchaseDate.description": "The date of purchase of the object",
  "models.Item.properties.room.label": "Object space",
  "models.Item.properties.itemAffectationsCount.label": "Number of associations to people",
  "models.Item.properties.itemAffectationsCount.description": "The number of associations of this object with people",
  "models.Floor.singular": "floor",
  "models.Floor.plural": "floors",
  "models.Floor.determinant.defined": "upstairs",
  "models.Floor.determinant.undefined": "a floor",
  "models.Floor.determinants.defined": "The floors",
  "models.Floor.determinants.undefined": "floors",
  "models.Floor.description": "Floors represent a work platform or a level of a building.",
  "models.Floor.views.map.help": "Floor plan %{name} in 2d",
  "models.Floor.views.map.label": "Plan 2d",
  "models.Floor.views.3d.help": "Floor plan %{name} in 3d",
  "models.Floor.views.3d.label": "3d plane",
  "models.Floor.views.cuby.help": "Floor plan %{name} in 3d",
  "models.Floor.views.cuby.label": "3d",
  "models.Floor.views.simple-list.help": "List floors with few details",
  "models.Floor.views.simple-list.label": "Simple List",
  "models.Floor.views.geojson.help": "View info in GeoJson",
  "models.Floor.views.geojson.label": "Copy GeoJson Coordinates",
  "models.Floor.views.standalone-2d-map.help": "The floor plan %{name} in 2d without menu",
  "models.Floor.views.standalone-2d-map.label": "2d plan only",
  "models.Floor.properties.id.label": "Identifier of the floor",
  "models.Floor.properties.name.label": "Name of the floor",
  "models.Floor.properties.name.description": "The name of the floor is used to be able to find it easily.",
  "models.Floor.properties.level.label": "Level",
  "models.Floor.properties.level.description": "The level of the floor allows to define its position relative to the other floors, for example use 0 for the ground floor or -1 for the car parks",
  "models.Floor.properties.backgroundLayout.label": "Background",
  "models.Floor.properties.backgroundLayout.description": "The background allows you to have a first layer level in order to redraw the plans, it must be to scale",
  "models.Floor.properties.backgroundLayoutOpacity.label": "Background opacity",
  "models.Floor.properties.backgroundLayoutOpacity.description": "The opacity allows you to see more or less the background",
  "models.Floor.properties.regulatoryCapacity.label": "Regulatory capacity",
  "models.Floor.properties.regulatoryCapacity.description": "The regulatory capacity of the platform, makes it possible to manage the evacuation of the public and employees",
  "models.Floor.properties.pathfindingGraph.label": "Floor navigation graph",
  "models.Floor.properties.pathfindingGraph.description": "The navigation graph allows you to calculate the shortest paths between the points on the floor",
  "models.Floor.properties.workplacesCount.label": "Number of workstations",
  "models.Floor.properties.workplacesCount.description": "The number of workstations in the floor is calculated automatically",
  "models.Floor.properties.workplacesRatio.label": "Workstation ratio",
  "models.Floor.properties.workplacesRatio.description": "The workstation ratio is the number of square meters in the floor divided by the number of workstations, this value is calculated automatically",
  "models.Floor.properties.peopleCount.label": "Number of assignments",
  "models.Floor.properties.peopleCount.description": "The number of people assigned to the floor, either directly assigned to spaces, or through a workstation",
  "models.Floor.properties.totalPeopleCount.label": "Number of total assignments",
  "models.Floor.properties.totalPeopleCount.description": "The number of people assigned to the floor, either directly assigned to spaces, or through a workstation",
  "models.Floor.properties.peopleRatio.label": "Occupancy ratio",
  "models.Floor.properties.peopleRatio.description": "The occupancy ratio is the number of square meters on the floor divided by the number of people assigned either directly to the spaces or via a workstation, this value is calculated",
  "models.Floor.properties.freeWorkplacesCount.label": "Number of vacancies",
  "models.Floor.properties.freeWorkplacesCount.description": "Number of free extensions on the floor",
  "models.Floor.properties.flexWorkplacesCount.label": "Number of flex positions",
  "models.Floor.properties.flexWorkplacesCount.description": "Number of flex posts in the floor",
  "models.Floor.properties.roomsArea.label": "Qualified surface",
  "models.Floor.properties.roomsArea.description": "The qualified surface is the sum of the surfaces of the spaces",
  "models.Floor.properties.roomsCount.label": "Number of spaces",
  "models.Floor.properties.roomsCount.description": "The number of spaces present in this floor",
  "models.Floor.properties.sharedWorkplacesCount.label": "Number of shared workstations",
  "models.Floor.properties.sharedWorkplacesCount.description": "Number of workstations shared on the floor by at least 2 people",
  "models.Floor.properties.sharedWorkplacesRatio.label": "Rate of shared workstations",
  "models.Floor.properties.sharedWorkplacesRatio.description": "Rate of workstations shared by at least 2 people compared to all the workstations on the floor",
  "models.Floor.properties.flexRatio.label": "Rate of flex workstations",
  "models.Floor.properties.flexRatio.description": "The flex workstation rate is calculated by dividing the number of flex workstations by the total number of workstations",
  "models.Floor.properties.transitWorkplacesCount.label": "Number of transit workstations",
  "models.Floor.properties.transitWorkplacesCount.description": "Number of temporary workstations, these positions are not counted in free positions and are not flex",
  "models.Floor.properties.height.label": "Ceiling height",
  "models.Floor.properties.height.description": "The height under the ceiling of the floor",
  "models.Floor.properties.mapScale.label": "Plan scale",
  "models.Floor.properties.mapScale.description": "The scale allows us to calculate in proportion the actual areas and sizes of objects",
  "models.FactType.singular": "Type of Fact",
  "models.FactType.plural": "Types of Fact",
  "models.FactType.determinant.defined": "the type of fact",
  "models.FactType.determinant.undefined": "a type of fact",
  "models.FactType.determinants.defined": "types of fact",
  "models.FactType.determinants.undefined": "types of fact",
  "models.Fact.singular": "Fact",
  "models.Fact.plural": "Facts",
  "models.Fact.determinant.defined": "the fact",
  "models.Fact.determinant.undefined": "a fact",
  "models.Fact.determinants.defined": "facts",
  "models.Fact.determinants.undefined": "facts",
  "models.DistributionCostType.singular": "type of cost distribution",
  "models.DistributionCostType.plural": "types of cost distribution",
  "models.DistributionCostType.determinant.defined": "the type of cost distribution",
  "models.DistributionCostType.determinant.undefined": "a type of cost distribution",
  "models.DistributionCostType.determinants.defined": "types of cost distribution",
  "models.DistributionCostType.determinants.undefined": "types of cost distribution",
  "models.DistributionCostType.properties.name.label": "Name of the cost distribution type",
  "models.DistributionCostType.properties.code.labe": "Code",
  "models.DistributionCostType.properties.code.description": "The code is used in order to be able to automatically calculate the associated costs",
  "models.DimensionTypeToBuilding.singular": "Building assignment layer type",
  "models.DimensionTypeToBuilding.plural": "Types of building assignment layers",
  "models.DimensionTypeToBuilding.determinant.defined": "the type of building assignment layer",
  "models.DimensionTypeToBuilding.determinant.undefined": "a type of building assignment layer",
  "models.DimensionTypeToBuilding.determinants.defined": "building assignment layer types",
  "models.DimensionTypeToBuilding.determinants.undefined": "types of building assignment layers",
  "models.DimensionTypeToBuilding.description": "Building assignment layer types are used to define the different types of building assignment layers. By associating an assignment layer type with a building, this allows an analysis layer to be transformed into an assignment layer.",
  "models.DimensionType.singular": "Layer type",
  "models.DimensionType.plural": "Layer Types",
  "models.DimensionType.determinant.defined": "the type of layer",
  "models.DimensionType.determinant.undefined": "a type of layer",
  "models.DimensionType.determinants.defined": "layer types",
  "models.DimensionType.determinants.undefined": "layer types per floor",
  "models.DimensionType.properties.id.label": "Identifier of the type of dimension",
  "models.DimensionType.properties.order.label": "order of appearance",
  "models.DimensionType.properties.order.description": "Allows you to sort layer types to display them",
  "models.DimensionType.properties.name.label": "Name of the dimension type",
  "models.DimensionType.properties.code.label": "Dimension type code",
  "models.DimensionType.properties.code.description": "The code identifies the type of dimension, it is used when specific calculations apply to the type of dimension",
  "models.DimensionToPerson.singular": "Assignment to Assignment Layer",
  "models.DimensionToPerson.plural": "Assignments to Assignment Layers",
  "models.DimensionToPerson.description": "Allows you to assign a person to a district, territory or village",
  "models.DimensionToPerson.determinant.defined": "the assignment to the assignment layer",
  "models.DimensionToPerson.determinant.undefined": "an assignment to the assignment layer",
  "models.DimensionToPerson.determinants.defined": "assignments to assignment layers",
  "models.DimensionToPerson.determinants.undefined": "assignments to assignment layers",
  "models.DimensionRoom.singular": "Space analysis layer",
  "models.DimensionRoom.plural": "Space analysis layers",
  "models.DimensionRoom.determinant.defined": "the space analysis layer",
  "models.DimensionRoom.determinant.undefined": "a space analysis layer",
  "models.DimensionRoom.determinants.defined": "space analysis layers",
  "models.DimensionRoom.determinants.undefined": "space analysis layers",
  "models.DimensionRoom.properties.id.label": "Identifier of the space analysis layer",
  "models.DimensionFloor.singular": "Analysis layer per floor",
  "models.DimensionFloor.plural": "Analysis layers per floor",
  "models.DimensionFloor.determinant.defined": "the analysis layer per floor",
  "models.DimensionFloor.determinant.undefined": "one analysis layer per floor",
  "models.DimensionFloor.determinants.defined": "analysis layers by floor",
  "models.DimensionFloor.determinants.undefined": "analysis layers per floor",
  "models.DimensionFloor.properties.id.label": "Analysis layer identifier by floor",
  "models.DimensionFloor.properties.peopleCount.label": "Number of assignments",
  "models.DimensionFloor.properties.peopleCount.description": "The number of people assigned, either directly assigned to spaces, or through a workstation for this floor",
  "models.DimensionFloor.properties.totalPeopleCount.label": "Total number of indirect assignments on the floor",
  "models.DimensionFloor.properties.totalPeopleCount.description": "The total number of people indirectly assigned to the floor, either directly assigned to spaces, or through a workstation, but not via the assignment layers which are only at the building level",
  "models.DimensionBuilding.singular": "Analysis layer by building",
  "models.DimensionBuilding.plural": "Analysis layers by building",
  "models.DimensionBuilding.determinant.defined": "the analysis layer by building",
  "models.DimensionBuilding.determinant.undefined": "one analysis layer per building",
  "models.DimensionBuilding.determinants.defined": "analysis layers by building",
  "models.DimensionBuilding.determinants.undefined": "analysis layers by building",
  "models.DimensionBuilding.properties.id.label": "Analysis layer identifier by building",
  "models.DimensionBuilding.properties.dimensionPeopleCount.label": "Number of assignments directly to this assignment layer",
  "models.DimensionBuilding.properties.dimensionPeopleCount.description": "The number of people who are assigned to this assignment layer for the entire building",
  "models.DimensionBuilding.properties.totalPeopleCount.label": "Total number of assignments",
  "models.DimensionBuilding.properties.totalPeopleCount.description": "The total number of people assigned, either directly assigned to spaces, or through a workstation, or via an assignment layer",
  "models.Dimension.singular": "Analysis layer",
  "models.Dimension.plural": "Analysis layers",
  "models.Dimension.determinant.defined": "the analysis layer",
  "models.Dimension.determinant.undefined": "an analysis layer",
  "models.Dimension.determinants.defined": "analysis layers",
  "models.Dimension.determinants.undefined": "analysis layers",
  "models.Dimension.properties.id.label": "Analysis layer identifier",
  "models.Dimension.properties.id.description": "Surfy internal identifier",
  "models.Dimension.properties.name.label": "Name of the analysis layer",
  "models.Dimension.properties.name.description": "Useful to differentiate the layer among others",
  "models.Dimension.properties.color.label": "Color",
  "models.Dimension.properties.color.description": "The analysis layer color allows you to differentiate spaces on the plan",
  "models.Dimension.properties.value.label": "Numerical value",
  "models.Dimension.properties.value.description": "The value can be used to associate the layer with a numerical value in order to be able to carry out analytical statistics",
  "models.Dimension.properties.peopleCount.label": "Number of direct assignments",
  "models.Dimension.properties.peopleCount.description": "The number of people who are directly assigned to this assignment layer in the building",
  "models.Dimension.properties.manualPeopleCount.label": "Number of direct manual assignments",
  "models.Dimension.properties.manualPeopleCount.description": "The number of people who are assigned directly to this assignment layer without considering assignments with real people",
  "models.Dimension.properties.totalPeopleCount.label": "Total number of direct assignments",
  "models.Dimension.properties.totalPeopleCount.description": "The total number of people who are assigned directly to this assignment layer in the building, the addition of the actual people assigned and the number of people assigned manually",
  "models.Dimension.properties.carbonFootprintPerMeter.label": "Carbon footprint per square meter",
  "models.Dimension.properties.carbonFootprintPerMeter.description": "The carbon footprint per square meter calculates the carbon footprint in kilograms of CO2 of an analysis layer per square meters",
  "models.CostCenterFloor.singular": "floor cost center",
  "models.CostCenterFloor.plural": "floor cost centers",
  "models.CostCenterFloor.determinant.defined": "the cost center of floors",
  "models.CostCenterFloor.determinant.undefined": "a floor cost center",
  "models.CostCenterFloor.determinants.defined": "floor cost centers",
  "models.CostCenterFloor.determinants.undefined": "floor cost centers",
  "models.CostCenterBuilding.singular": "building cost center",
  "models.CostCenterBuilding.plural": "building cost centers",
  "models.CostCenterBuilding.determinant.defined": "the cost center of buildings",
  "models.CostCenterBuilding.determinant.undefined": "a building cost center",
  "models.CostCenterBuilding.determinants.defined": "building cost centers",
  "models.CostCenterBuilding.determinants.undefined": "building cost centers",
  "models.CostCenter.singular": "cost center",
  "models.CostCenter.plural": "cost centers",
  "models.CostCenter.description": "The cost center allows spaces to be distributed dynamically for re-invoicing",
  "models.CostCenter.determinant.defined": "the cost center",
  "models.CostCenter.determinant.undefined": "a cost center",
  "models.CostCenter.determinants.defined": "cost centers",
  "models.CostCenter.determinants.undefined": "cost centers",
  "models.CostCenter.properties.id.label": "Cost center identifier",
  "models.CostCenter.properties.name.label": "Name of cost center",
  "models.CostCenter.properties.color.label": "Color",
  "models.CostCenter.properties.distributeByFloor.label": "Distribute by floor",
  "models.CostCenter.properties.distributeByFloor.description": "Prorate the space used by this cost center on the floor to other cost centers on the same floor",
  "models.CostCenter.properties.distributeByBuilding.label": "Distribute by building",
  "models.CostCenter.properties.distributeByBuilding.description": "Prorate the space used by this cost center in the building to the other cost centers in the building",
  "models.ContentRoleToUserCompany.singular": "Company user content role",
  "models.ContentRoleToUserCompany.plural": "Company User Content Roles",
  "models.ContentRoleToUserCompany.determinant.defined": "the content role of the business user",
  "models.ContentRoleToUserCompany.determinant.undefined": "a business user content role",
  "models.ContentRoleToUserCompany.determinants.defined": "company user content roles",
  "models.ContentRoleToUserCompany.determinants.undefined": "company user content roles",
  "models.ContentRoleToJupUiTenantOperation.singular": "Associating content role to interface operations for an enterprise",
  "models.ContentRoleToJupUiTenantOperation.plural": "Associating content role to interface operations for an enterprise",
  "models.ContentRoleToJupUiTenantOperation.determinant.defined": "associating the content role with interface operations for an enterprise",
  "models.ContentRoleToJupUiTenantOperation.determinant.undefined": "an association of the content role to interface operations for an enterprise",
  "models.ContentRoleToJupUiTenantOperation.determinants.defined": "content role associations to interface operations for an enterprise",
  "models.ContentRoleToJupUiTenantOperation.determinants.undefined": "content role associations to interface operations for an enterprise",
  "models.ContentRoleToFloor.singular": "Association role of content to floors",
  "models.ContentRoleToFloor.plural": "Role associations of content to floors",
  "models.ContentRoleToFloor.determinant.defined": "the association of the role of content to the floors",
  "models.ContentRoleToFloor.determinant.undefined": "an association of the role of content to floors",
  "models.ContentRoleToFloor.determinants.defined": "the associations of the role of content to floors",
  "models.ContentRoleToFloor.determinants.undefined": "associations of the role of content to floors",
  "models.ContentRoleToBuilding.singular": "Role association of content with buildings",
  "models.ContentRoleToBuilding.plural": "Role associations of content to buildings",
  "models.ContentRoleToBuilding.determinant.defined": "the association of the role of content to buildings",
  "models.ContentRoleToBuilding.determinant.undefined": "an association of the role of content to buildings",
  "models.ContentRoleToBuilding.determinants.defined": "associations of the role of content to buildings",
  "models.ContentRoleToBuilding.determinants.undefined": "associations of the role of content to buildings",
  "models.ContentRole.singular": "Content role",
  "models.ContentRole.plural": "Content roles",
  "models.ContentRole.determinant.defined": "the role of content",
  "models.ContentRole.determinant.undefined": "a content role",
  "models.ContentRole.determinants.defined": "content roles",
  "models.ContentRole.determinants.undefined": "content roles",
  "models.CompanyType.singular": "type of company",
  "models.CompanyType.plural": "type of businesses",
  "models.CompanyType.determinant.defined": "the type of business",
  "models.CompanyType.determinant.undefined": "a type of business",
  "models.CompanyType.determinants.defined": "types of businesses",
  "models.CompanyType.determinants.undefined": "types of businesses",
  "models.CompanyType.properties.name.label": "Business type name",
  "models.Company.singular": "business",
  "models.Company.plural": "business",
  "models.Company.determinant.defined": "the company",
  "models.Company.determinant.undefined": "a company",
  "models.Company.determinants.defined": "businesses",
  "models.Company.determinants.undefined": "enterprises",
  "models.Company.properties.id.label": "Company ID",
  "models.Company.properties.logoPath.label": "Logo",
  "models.Company.properties.logoPath.description": "The path of your company's logo",
  "models.Company.properties.iconPath.label": "icon",
  "models.Company.properties.iconPath.description": "The company logo in square",
  "models.Company.properties.name.label": "Company Name",
  "models.Company.properties.workingDaysCount.label": "Number of working days per week",
  "models.Company.properties.workingDaysCount.description": "The number of working days per week can be 5 for working days, 6 including Saturday and 7 including Sunday",
  "models.Company.views.usage.label": "Use of platforms",
  "models.Company.views.usage.help": "Understanding the use of available platforms",
  "models.Company.views.cards.help": "View of tile businesses",
  "models.Company.views.cards.label": "Roof tiles",
  "models.Company.views.dq-fix-inventory.label": "Inventory Consistency",
  "models.Company.views.dq-fix-inventory.help": "Find and repair physical and virtual inventory inconsistencies for workstations",
  "models.Company.views.dq-shapes-position.label": "Placement of shapes",
  "models.Company.views.dq-shapes-position.help": "Find and reposition shapes that are on the plan in a different space than the one in the database",
  "models.Company.views.people-info.label": "Statistics on people's assignment creations",
  "models.Company.views.people-info.help": "View assignment statistics",
  "models.Company.reports.export-all.fileName": "backup",
  "models.Company.reports.export-all.help": "Back up all Surfy data",
  "models.Company.reports.export-all-duplicate.fileName": "duplication",
  "models.Company.reports.export-all-duplicate.help": "Backup company data to make a copy of the platform",
  "models.Campus.singular": "campus",
  "models.Campus.plural": "campus",
  "models.Campus.description": "The campus is used to group buildings that are in the same location.",
  "models.Campus.determinant.defined": "the campus",
  "models.Campus.determinant.undefined": "a campus",
  "models.Campus.determinants.defined": "the campuses",
  "models.Campus.determinants.undefined": "campuses",
  "models.Campus.views.cards.help": "Grouped view of buildings",
  "models.Campus.views.cards.label": "Info",
  "models.Campus.properties.id.label": "Campus ID",
  "models.Campus.properties.name.label": "Campus Name",
  "models.Campus.properties.name.description": "Campus Name",
  "models.Campus.properties.color.label": "Color",
  "models.Campus.properties.color.description": "Campus Color",
  "models.Campus.properties.externalId.label": "External identifier",
  "models.BuildingType.singular": "type of building",
  "models.BuildingType.plural": "types of buildings",
  "models.BuildingType.determinant.defined": "the type of building",
  "models.BuildingType.determinant.undefined": "a type of building",
  "models.BuildingType.determinants.defined": "building types",
  "models.BuildingType.determinants.undefined": "building types",
  "models.BuildingType.properties.id.label": "Identifier of the type of building",
  "models.BuildingType.properties.name.label": "Name of the type of building",
  "models.BuildingType.properties.name.description": "Name of the type of building",
  "models.BuildingType.properties.code.label": "Code",
  "models.BuildingType.properties.code.description": "???",
  "models.BuildingType.properties.externalId.label": "External identifier",
  "models.BuildingType.properties.externalId.description": "???",
  "models.Building.singular": "building",
  "models.Building.plural": "buildings",
  "models.Building.determinant.defined": "building",
  "models.Building.determinant.undefined": "a building",
  "models.Building.determinants.defined": "the buildings",
  "models.Building.determinants.undefined": "buildings",
  "models.Building.description": "The building is used to group the floors",
  "models.Building.reports.workplaces.fileName": "Personal work places",
  "models.Building.reports.workplaces.help": "Building workstation report",
  "models.Building.reports.allWorkplaces.fileName": "Workstations with assignments",
  "models.Building.reports.allWorkplaces.help": "Report of all workstations in the building including assignments",
  "models.Building.reports.workplaceAffectations.fileName": "Workstation assignments",
  "models.Building.reports.workplaceAffectations.help": "Building Workstation Assignment Report",
  "models.Building.reports.buildingPeople.fileName": "People",
  "models.Building.reports.buildingPeople.help": "Report of persons affected in the building",
  "models.Building.reports.organizations.fileName": "Organizations",
  "models.Building.reports.organizations.help": "Building organizations report",
  "models.Building.reports.buildingItems.fileName": "Inventory",
  "models.Building.reports.buildingItems.help": "Building inventory report",
  "models.Building.reports.area.fileName": "Spaces",
  "models.Building.reports.area.help": "Building spaces report",
  "models.Building.reports.buildingCleaning.fileName": "Benefits",
  "models.Building.reports.buildingCleaning.help": "Building cleaning services report",
  "models.Building.reports.buildingDimensions.fileName": "Analysis layers",
  "models.Building.reports.buildingDimensions.help": "Building Space Analysis Layers Report",
  "models.Building.views.cards.help": "View of tiled buildings",
  "models.Building.views.cards.label": "Info",
  "models.Building.views.pictures.help": "See the buildings with photos",
  "models.Building.views.pictures.label": "Pictures",
  "models.Building.views.gmap.help": "See the buildings on a map",
  "models.Building.views.gmap.label": "Map",
  "models.Building.views.cost-distribution-by-cost-center.help": "<b>Distribution keys</b> and qualified surface area by cost center for the building %{name}",
  "models.Building.views.cost-distribution-by-cost-center.label": "Distribution keys",
  "models.Building.views.3d-cards.help": "See 3d buildings",
  "models.Building.views.3d-cards.label": "3d",
  "models.Building.views.assets.help": "Real estate assets",
  "models.Building.views.assets.label": "Immovable",
  "models.Building.views.cuby.help": "The interactive <b>3d</b> plan of the building %{name}",
  "models.Building.views.cuby.label": "3d plane",
  "models.Building.views.3d.help": "The 3d plan of the building %{name} (cuby)",
  "models.Building.views.3d.label": "3d plane",
  "models.Building.views.clone.help": "Building <b>scenarios</b> and projects %{name}",
  "models.Building.views.clone.label": "Scenarios",
  "models.Building.views.building-ifc.help": "Export this building to IFC for BIM",
  "models.Building.views.building-ifc.label": "IFC",
  "models.Building.views.zbre-sync.help": "Synchronize the building with the Zbre platform",
  "models.Building.views.zbre-sync.label": "Zbre synchronization",
  "models.Building.views.inventory.help": "Building <b>inventory</b> %{name}",
  "models.Building.views.inventory.label": "Inventory",
  "models.Building.views.list-simple.help": "List buildings with few details",
  "models.Building.views.list-simple.label": "Simple list",
  "models.Building.views.building-3d-gmap.label": "3d building on the plan",
  "models.Building.views.building-3d-gmap.help": "See the building in 3d on a plan",
  "models.Building.properties.id.label": "Building identifier",
  "models.Building.properties.name.label": "Name of Building",
  "models.Building.properties.name.description": "Name of building or scenario",
  "models.Building.properties.picture.label": "Photo of the building",
  "models.Building.properties.picture.description": "You can use a photo of your building to quickly find it from the home page (see buildings with photos) or to illustrate collaborators' views",
  "models.Building.properties.documents.label": "Related documents",
  "models.Building.properties.documents.description": "Maintain a link to the location of documents associated with this building in your GED",
  "models.Building.properties.securityDeposit.label": "Security deposit",
  "models.Building.properties.securityDeposit.description": "Amount of the deposit deposited upon signing the lease",
  "models.Building.properties.buildings.label": "Buildings scenarios",
  "models.Building.properties.buildings.description": "Scenarios generated from this building",
  "models.Building.properties.constructionYear.label": "Year of construction of the building",
  "models.Building.properties.constructionYear.description": "Year of construction of the building allowing its obsolescence to be measured",
  "models.Building.properties.parkingSpaceCount.label": "Number of parking spaces",
  "models.Building.properties.parkingSpaceCount.description": "Number of parking spaces available",
  "models.Building.properties.yearlyParkingRent.label": "Annual rent for car parks",
  "models.Building.properties.yearlyParkingRent.description": "Share of rent allocated to parking",
  "models.Building.properties.yearlyTaxFees.label": "Amount of annual fees",
  "models.Building.properties.yearlyTaxFees.description": "Total amount of taxes",
  "models.Building.properties.yearlyExploitationFees.label": "Annual operating expenses",
  "models.Building.properties.yearlyExploitationFees.description": "Annual amount of operating expenses (example: water, electricity)",
  "models.Building.properties.rentReferenceIndex.label": "Rent benchmark",
  "models.Building.properties.rentReferenceIndex.description": "The Rent Reference Index (RRI) is used as the basis for revising the rents for empty or furnished dwellings",
  "models.Building.properties.color.label": "Color",
  "models.Building.properties.color.description": "The color of the building is used to define the background color in the presentations of the floors or the building and to be able to distinguish this building from the others",
  "models.Building.properties.roomsCount.label": "Number of spaces",
  "models.Building.properties.roomsCount.description": "The number of spaces created in this building",
  "models.Building.properties.roomsArea.label": "Qualified surface",
  "models.Building.properties.roomsArea.description": "The qualified surface represents all of the areas modeled in Surfy",
  "models.Building.properties.workplacesCount.label": "Number of workstations",
  "models.Building.properties.workplacesCount.description": "The number of workstations in the building is calculated automatically",
  "models.Building.properties.workplacesRatio.label": "Workstation ratio",
  "models.Building.properties.workplacesRatio.description": "The ratio per workstation is the number of square meters in the building divided by the number of workstations, this value is calculated automatically",
  "models.Building.properties.peopleCount.label": "Number of assignments",
  "models.Building.properties.peopleCount.description": "The number of people assigned to the building, neighborhoods, spaces or workstations",
  "models.Building.properties.peopleRatio.label": "Occupancy ratio",
  "models.Building.properties.peopleRatio.description": "The occupancy ratio is the number of square meters in the building divided by the number of people assigned either directly to the neighborhoods, spaces, or workstations, this value is calculated",
  "models.Building.properties.freeWorkplacesCount.label": "Number of vacancies",
  "models.Building.properties.freeWorkplacesCount.description": "Number of free positions in the building",
  "models.Building.properties.flexWorkplacesCount.label": "Number of flex positions",
  "models.Building.properties.flexWorkplacesCount.description": "Number of flex workstations in the building",
  "models.Building.properties.address.label": "Address",
  "models.Building.properties.address.description": "The address of the building to locate it on the map",
  "models.Building.properties.yearlyCondominiumFees.label": "Annual charges",
  "models.Building.properties.yearlyCondominiumFees.description": "Amount of annual management or co-ownership charges, for example",
  "models.Building.properties.yearlyRent.label": "Annual rent",
  "models.Building.properties.yearlyRent.description": "Annual rent amount for this building",
  "models.Building.properties.leaseStartDate.label": "Lease start date",
  "models.Building.properties.leaseStartDate.description": "Lease start date",
  "models.Building.properties.leaseEndDate.label": "End date of the lease",
  "models.Building.properties.leaseEndDate.description": "End date of the lease",
  "models.Building.properties.purchaseDate.label": "Building purchase date",
  "models.Building.properties.purchaseDate.description": "Building purchase date",
  "models.Building.properties.buildingId.label": "Reference building identifier",
  "models.Building.properties.buildingId.description": "The identifier of the reference building is used in the context of the creation of scenarios, the identifier allows the association with this building",
  "models.Building.properties.building.label": "Original building",
  "models.Building.properties.building.description": "The original or reference building is used in the creation of scenarios, it allows you to identify the original building from which the building was created",
  "models.Building.properties.jupUiLayout.label": "Vision of the default plan",
  "models.Building.properties.jupUiLayout.description": "When a plan of this building is first opened, the default vision will be selected, following the first opening, it will be the current vision which will be applied",
  "models.Building.properties.sharedWorkplacesCount.label": "Number of shared workstations",
  "models.Building.properties.sharedWorkplacesCount.description": "Number of workstations shared in the building by at least 2 people",
  "models.Building.properties.sharedWorkplacesRatio.label": "Rate of shared workstations",
  "models.Building.properties.sharedWorkplacesRatio.description": "Rate of workstations shared by at least 2 people compared to all workstations in the building",
  "models.Building.properties.flexRatio.label": "Rate of flex workstations",
  "models.Building.properties.flexRatio.description": "The flex workstation rate is calculated by dividing the number of flex workstations by the total number of workstations",
  "models.Building.properties.transitWorkplacesCount.label": "Number of transit workstations",
  "models.Building.properties.transitWorkplacesCount.description": "Number of temporary workstations, these positions are not counted in free positions and are not flex",
  "models.Building.properties.regulatoryCapacity.label": "Regulatory capacity",
  "models.Building.properties.regulatoryCapacity.description": "The regulatory capacity of the platform, makes it possible to manage the evacuation of the public and employees",
  "models.Building.properties.dimensionPeopleCount.label": "Number of layer assignments",
  "models.Building.properties.dimensionPeopleCount.description": "The number of people who are assigned to the assignment layers associated with this building",
  "models.Building.properties.userCompanyOwner.label": "Building owner user",
  "models.Building.properties.userCompanyOwner.description": "The user who owns the building always sees the building even in the presence of a content role, in the event of a scenario creation, the user who created the scenario becomes the owner, the owner can be changed later",
  "models.AuthentificationConnection.singular": "Authentication login",
  "models.AuthentificationConnection.plural": "Authentication connections",
  "models.AuthentificationConnection.determinant.defined": "the authentication connection",
  "models.AuthentificationConnection.determinant.undefined": "an authentication connection",
  "models.AuthentificationConnection.determinants.defined": "authentication connections",
  "models.AuthentificationConnection.determinants.undefined": "authentication connections",
  "models.ApiUserToJupRole.singular": "Association of API user to role",
  "models.ApiUserToJupRole.plural": "API user associations to role",
  "models.ApiUserToJupRole.determinant.defined": "API user association with role",
  "models.ApiUserToJupRole.determinant.undefined": "an association of API user to the role",
  "models.ApiUserToJupRole.determinants.defined": "API user associations to role",
  "models.ApiUserToJupRole.determinants.undefined": "API user associations to role",
  "models.ApiUserToContentRole.singular": "Associating API user with the content role",
  "models.ApiUserToContentRole.plural": "API user associations to content role",
  "models.ApiUserToContentRole.determinant.defined": "API user association with content role",
  "models.ApiUserToContentRole.determinant.undefined": "an API user association with the content role",
  "models.ApiUserToContentRole.determinants.defined": "API user associations to the content role",
  "models.ApiUserToContentRole.determinants.undefined": "API user associations to the content role",
  "models.ApiUser.singular": "API user",
  "models.ApiUser.plural": "API users",
  "models.ApiUser.determinant.defined": "API user",
  "models.ApiUser.determinant.undefined": "an API user",
  "models.ApiUser.determinants.defined": "API users",
  "models.ApiUser.determinants.undefined": "API users",
  "models.ApiUser.properties.clientSecret.label": "Secret code",
  "models.ApiUser.properties.clientSecret.description": "the secret password for your API account can be generated and should never be disclosed",
  "ToggleZbreSyncCheckbox.label": "Synchronize with real-time occupations in Z#ber",
  "ToggleZbreSyncCheckbox.help": "Synchronization allows spaces and workstations to be colored according to the sensors placed in Z#ber",
  "FloorSpaceSlider.title": "Space between each floor in centimeters",
  "FloorSelector.title": "Select floors",
  "FloorSelector.focus": "Select only this floor",
  "FloorSelector.selectAll.false": "Select all floors",
  "FloorSelector.selectAll.true": "Deselect all floors",
  "ToggleEnableMissingFloors.label": "Show ghost floors",
  "ToggleEnableMissingFloors.help": "Show ghost floors for missing floors between level 0 floor and highest floor based on real floor levels",
  "RoomGraphHandler.buttons.generateGraph.label": "Generate the orientation graph",
  "RoomGraphHandler.buttons.generateGraph.description": "Generating the orientation graph calculates the nodes through which the path search can find spaces and furniture. If the original space can be selected, the graph has already been generated.",
  "RoomGraphHandler.buttons.selectOriginRoom.label": "Select the original space",
  "RoomGraphHandler.buttons.selectOriginRoom.description": "Please select a space and then you can use this option to set it as the starting space.",
  "RoomGraphHandler.icons.displayNodes.description": "Show paths in rooms",
  "RoomGraphHandler.icons.displayBoundingBoxes.description": "Show furniture exclusion areas",
  "RoomGraphHandler.icons.enablePathfinding.description": "Enable path tracing from source space with shape under mouse",
  "RoomGraphHandler.rooms.origin": "Original space",
  "ThemeModeSwitchMenuItem.dark.label": "Switch to light mode",
  "ThemeModeSwitchMenuItem.dark.help": "Using the bright mode allows you to work with a white background",
  "ThemeModeSwitchMenuItem.light.label": "Switch to dark mode",
  "ThemeModeSwitchMenuItem.light.help": "Using dark mode allows you to work with dark colors in the background for less eye strain",
  "copilot.actions.add.door": "A door has just been added by Surfy Copilot",
  "generateDocumentation.properties.technicalName": "Technical name",
  "generateDocumentation.properties.belongsTo": "Associated entities (unique)",
  "generateDocumentation.properties.hasMany": "Associated entities (list)",
  "generateDocumentation.properties.base": "Basic properties",
  "generateDocumentation.properties.mandatory": "Required Properties",
  "help.key1": "hello %{name}",
  "help.key2": "bye %{name}"
};

// public/assets/i18n/es.json
var es_default = {
  "ImportUpdateOption.label": "Poner al d\xEDa",
  "ImportUpdateOption.help": "Actualizar objetos seleccionados",
  "ImportUpdateEntitiesTable.description": "Lista de objetos que requieren actualizaci\xF3n",
  "PropertyTypeErrors.title": "Los siguientes valores no existen para la propiedad <b>%{propertyTypeLabel}</b> en <b>%{objectTypeLabel}</b>",
  "ImportDeleteOption.label": "eliminar",
  "ImportDeleteOption.help": "Eliminar objetos seleccionados en Surfy",
  "ImportDeleteEntitiesTable.description": "Lista de objetos que requieren eliminaci\xF3n en Surfy",
  "ImportCreateOption.label": "crear",
  "ImportCreateOption.help": "Realizar la creaci\xF3n de objetos seleccionados en Surfy",
  "ImportCreateEntitiesTable.description": "Lista de objetos que requieren creaci\xF3n",
  "ImportCreateEntitiesTable.open.label": "Ver entidades para crear",
  "ImportCreateEntitiesTable.open.help": "Ver el detalle de las entidades a crear porque hay m\xE1s de 500 l\xEDneas, por motivos de rendimiento las l\xEDneas est\xE1n ocultas por defecto",
  "ImportCreateAllOption.label": "Crear todo",
  "ImportCreateAllOption.help": "Realiza la creaci\xF3n de todos los objetos sin seleccionarlos individualmente",
  "entitiesImportType.date.wrongImportFormat": "El formato de la fecha %{value} no es correcto, el formato esperado es %{excelImportDateFormat}",
  "InfoTabContent.description": "Errores notables o informaci\xF3n durante la importaci\xF3n",
  "InfoTabContent.noChange": "No se observ\xF3 ning\xFAn cambio en comparaci\xF3n",
  "InfoTabContent.copyIds": "Copiar ID de entidad al portapapeles",
  "InfoTabContent.equals.multiple": "%{count} objetos existentes y sin modificar",
  "InfoTabContent.equals.one": "Un solo objeto ya existente y no modificado",
  "InfoTabContent.open.label": "Ver detalles de importaci\xF3n",
  "InfoTabContent.open.help": "Ver detalles de importaci\xF3n para comparaciones id\xE9nticas",
  "ImportObjectType.tabs.create.label": "Creaci\xF3n",
  "ImportObjectType.tabs.update.label": "Actualizaci\xF3n",
  "ImportObjectType.tabs.errors.label": "Info",
  "ImportObjectType.tabs.delete.label": "Supresi\xF3n",
  "ImportObjectType.usedKeys": "La clave de conciliaci\xF3n utilizada es:",
  "ImportObjectType.errors.noChange": "No se observ\xF3 ninguna modificaci\xF3n en comparaci\xF3n",
  "CompareEntities.buttons.reset.label": "Reiniciar",
  "CompareEntities.buttons.reset.help": "Reinicie la importaci\xF3n",
  "ObjectTypeImportKeys.title": "Las claves disponibles para conciliar %{determinants.undefined} en el orden de su elecci\xF3n, si desea modificar una de las propiedades de la clave debe utilizar el identificador como clave",
  "ObjectTypeImportScalarProperties.help": "Copiar al portapapeles",
  "ImportHelpDrawerIconButton.icon.help": "Ver ayuda sobre la importaci\xF3n de datos para %{determinants.defined}",
  "ImportHelpDrawerIconButton.drawer.title": "Ayuda con la importaci\xF3n %{determinants.undefined}",
  "ImportHelpDrawerIconButton.drawer.tabLabel": "Ayuda para importar",
  "DownloadObjectTypeImportTemplateFileButton.label": "Descargue la plantilla de importaci\xF3n",
  "DownloadObjectTypeImportTemplateFileButton.help": "Descarga una plantilla de importaci\xF3n en execl con los nombres de las columnas que puedes elegir",
  "ImportHelpDrawer.tab": "Ayuda a importar %{objectTypeLabel}",
  "BelongsToListItem.clipboard": "Copiar el t\xEDtulo de la columna al portapapeles",
  "BelongsToListItem.noKeys": "No hay clave \xFAnica disponible",
  "BelongsToImportHelp.title": "Tipos de objetos asociados con %{objectTypeLabel} ordenados por claves de importaci\xF3n disponibles",
  "FileDropZone.dropZone": "Mueva y arrastre el archivo de importaci\xF3n a esta \xE1rea o haga clic en el \xE1rea para seleccionar su archivo",
  "EntitiesImporter.tabs.file": "Archivo",
  "EntitiesImporter.tabs.copypaste": "Copiar y pegar",
  "TextAreaImporter.errors.title": "Errores encontrados durante la importaci\xF3n",
  "TextAreaImporter.textarea.placeholder": "Copie y pegue sus columnas de Excel con el t\xEDtulo para encontrar las propiedades para actualizar",
  "TextAreaImporter.help": "Utilice la tabulaci\xF3n entre cada columna incluyendo el nombre de cada columna en la primera fila o p\xE9guela directamente desde Excel",
  "ImportOptionsBar.buttons.compare.label": "Comparar",
  "ImportOptionsBar.buttons.compare.help": "Iniciar la comparaci\xF3n con los datos en surfy para determinar las modificaciones a importar",
  "ImportErrors.errors.title": "Errores encontrados durante la importaci\xF3n",
  "DashboardView.tabs.reports": "informes de excel",
  "IconShape.values.circle": "C\xEDrculo",
  "IconShape.values.rectangle": "Rect\xE1ngulo",
  "IconShape.values.triangle": "Tri\xE1ngulo",
  "EntityDialogSearchList.NoResult": "No se encontraron resultados, borre sus filtros o cambie su b\xFAsqueda",
  "FieldTypeEntity.edit": "Cambiar %{determinant.defined}",
  "FieldTypeEntity.remove": "Eliminar %{determinant.defined}",
  "FieldTypeEntity.add": "A\xF1adir %{determinant.undefined}",
  "LegendSelector.title": "Seleccionar leyenda",
  "LegendSelector.labels.default": "Leyenda predeterminada",
  "HasManyStandaloneNoData.noData": "No hay ning\xFAn %{targetObjectTypeLabel} asociado para %{determinant.defined}",
  "FieldTypeAddress.edit": "Cambiar direcci\xF3n",
  "FieldTypeAddress.remove": "Eliminar direcci\xF3n",
  "AutocompleteAddress.autocomplete.placeholder": "Encuentra tu direcci\xF3n aqu\xED",
  "AddressDialog.search": "Encuentra la direcci\xF3n",
  "AddressDialog.validate": "Validar",
  "FieldTypePassword.icons.copy": "Copie el contenido de la contrase\xF1a al portapapeles",
  "FieldTypePassword.icons.generate": "Genera una contrase\xF1a \xFAnica",
  "FieldTypeModel3d.Remove": "Eliminar modelo 3D",
  "FieldTypeModel3d.Upload": "Cambiar modelo 3D",
  "FieldTypeImage.Remove": "Quita la imagen",
  "FieldTypeImage.Upload": "Cambiar imagen",
  "FieldTypeIcon.Edit": "Cambiar icono",
  "FieldTypeIcon.Remove": "Eliminar el \xEDcono",
  "FieldTypeColor.Remove": "Quitar color",
  "FieldTypeColor.NoColorHelp": "Selecciona un color",
  "FieldTypeColor.NotHexMatchError": "El campo no respeta el formato hexadecimal de un color.",
  "CopyImagePathToClipboard.CopyUrl": "Copiar URL",
  "ColorBox.NoColorHelp": "Seleccione un color a trav\xE9s de la paleta",
  "ChangeColor.classic": "Selecciona un color con la placa avanzada",
  "weight.kilogram": "Kilogramo",
  "weight.gram": "Gramo",
  "distance.meter": "Metros",
  "distance.centimeter": "Cent\xEDmetros",
  "FieldTypeIndexBoolean.help": "Modificar el valor directamente",
  "FieldTypeIndexBoolean.values.true": "S\xED",
  "FieldTypeIndexBoolean.values.false": "No",
  "calculatedProperties.properties.workplacesCount.label": "Cantidad de estaciones de trabajo",
  "calculatedProperties.properties.workplacesCount.description": "El n\xFAmero total de estaciones de trabajo en los espacios.",
  "calculatedProperties.properties.workplacesRatio.label": "Proporci\xF3n de la estaci\xF3n de trabajo",
  "calculatedProperties.properties.workplacesRatio.description": "La relaci\xF3n de puestos de trabajo es el n\xFAmero de metros cuadrados dividido por el n\xFAmero de puestos de trabajo",
  "calculatedProperties.properties.peopleCount.label": "Numero de asignaciones",
  "calculatedProperties.properties.peopleCount.description": "El n\xFAmero de personas afectadas, ya sea directamente asignadas a los espacios o a trav\xE9s de una estaci\xF3n de trabajo",
  "calculatedProperties.properties.totalPeopleCount.label": "N\xFAmero total de asignaciones",
  "calculatedProperties.properties.totalPeopleCount.description": "El n\xFAmero total de personas asignadas, ya sea directamente asignadas a los espacios o a trav\xE9s de una estaci\xF3n de trabajo.",
  "calculatedProperties.properties.peopleRatio.label": "Ratio de ocupaci\xF3n",
  "calculatedProperties.properties.peopleRatio.description": "El \xEDndice de ocupaci\xF3n es el n\xFAmero de metros cuadrados dividido por el n\xFAmero de personas asignadas directamente a los espacios o a trav\xE9s de una estaci\xF3n de trabajo",
  "calculatedProperties.properties.freeWorkplacesCount.label": "Numero de vacantes",
  "calculatedProperties.properties.freeWorkplacesCount.description": "N\xFAmero total de vacantes",
  "calculatedProperties.properties.flexWorkplacesCount.label": "N\xFAmero de posiciones de flexi\xF3n",
  "calculatedProperties.properties.flexWorkplacesCount.description": "N\xFAmero total de posiciones flexibles",
  "calculatedProperties.properties.occupancyRate.label": "Tasa de ocupaci\xF3n",
  "calculatedProperties.properties.occupancyRate.description": "Permite conocer el \xEDndice de ocupaci\xF3n de los puestos de trabajo, es el n\xFAmero de personas afectadas dividido por el n\xFAmero de puestos de trabajo.",
  "calculatedProperties.properties.expansionRatio.label": "Tasa de crecimiento excesivo",
  "calculatedProperties.properties.expansionRatio.description": "Se utiliza para averiguar la tasa de uso de las estaciones de trabajo, es la inversa del n\xFAmero de personas afectadas dividido por el n\xFAmero de estaciones de trabajo.",
  "calculatedProperties.properties.roomsArea.label": "Superficie calificada",
  "calculatedProperties.properties.roomsArea.description": "La superficie calificada es la suma de las superficies de los espacios",
  "calculatedProperties.properties.roomsCount.label": "N\xFAmero de espacios",
  "calculatedProperties.properties.roomsCount.description": "El n\xFAmero total de espacios",
  "calculatedProperties.properties.sharedWorkplacesCount.label": "N\xFAmero de estaciones de trabajo compartidas",
  "calculatedProperties.properties.sharedWorkplacesCount.description": "N\xFAmero total de estaciones de trabajo compartidas por al menos 2 personas",
  "calculatedProperties.properties.sharedWorkplacesRatio.label": "Tasa de puestos de trabajo compartidos",
  "calculatedProperties.properties.sharedWorkplacesRatio.description": "Porcentaje de estaciones de trabajo compartidas por al menos 2 personas en comparaci\xF3n con todas las estaciones de trabajo",
  "calculatedProperties.properties.flexRatio.label": "Tasa de estaciones de trabajo flexibles",
  "calculatedProperties.properties.flexRatio.description": "La tasa de estaciones de trabajo flexibles se calcula dividiendo el n\xFAmero de estaciones de trabajo flexibles por el n\xFAmero total de estaciones de trabajo",
  "calculatedProperties.properties.transitWorkplacesCount.label": "N\xFAmero de estaciones de trabajo de tr\xE1nsito",
  "calculatedProperties.properties.transitWorkplacesCount.description": "N\xFAmero de puestos de trabajo temporales, estos puestos no se cuentan en puestos libres y no son flexibles",
  "calculatedProperties.properties.seatsCount.label": "Numero de asientos",
  "calculatedProperties.properties.seatsCount.description": "El n\xFAmero total de asientos",
  "calculatedProperties.properties.seatsPeopleRatio.label": "Tarifa de asientos por asignaci\xF3n",
  "calculatedProperties.properties.seatsPeopleRatio.description": "El n\xFAmero de asientos por persona afectada",
  "calculatedProperties.properties.carbonFootprint.label": "Huella de carbono",
  "calculatedProperties.properties.carbonFootprint.description": "La huella de carbono es la cantidad de CO2 emitido",
  "calculatedProperties.properties.totalCapacityCount.label": "Capacidad total",
  "calculatedProperties.properties.totalCapacityCount.description": "La capacidad total de asientos es la suma del n\xFAmero de asientos y la capacidad de no asientos a nivel de espacio.",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.label": "Tarifa de plazas por puesto de trabajo",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.description": "La tarifa de plazas por puesto de trabajo es la capacidad total de los espacios dividida por el n\xFAmero de puestos de trabajo, esto nos permite entender la tarifa de plazas seg\xFAn el n\xFAmero de puestos de trabajo.",
  "DeleteMultipleDialog.title": "Eliminar %{determinants.undefined}",
  "DeleteMultipleDialog.content": "Est\xE1 a punto de eliminar <b>%{determinants.undefined}</b> , esta acci\xF3n no es reversible y puede tener impactos, \xBFest\xE1 seguro de que desea realizar esta acci\xF3n?",
  "DeleteMultipleDialog.cancel.label": "anular",
  "DeleteMultipleDialog.cancel.help": "recuperar",
  "DeleteMultipleDialog.delete.label": "eliminar",
  "DeleteMultipleDialog.delete.help": "Eliminar permanentemente %{determinants.defined}",
  "DownloadTableToExcelIconButton.help": "Exportar %{determinants.defined} seleccionados",
  "DeleteMultipleEntities.help": "Eliminar %{determinants.defined} seleccionados",
  "EntityCreateModeSelect.open-on-create.text": "Abierto despu\xE9s de la creaci\xF3n",
  "EntityCreateModeSelect.open-on-create.help": "Una vez creado su objeto, ser\xE1 redirigido a la p\xE1gina de visualizaci\xF3n del objeto para ver sus propiedades y asociaciones.",
  "EntityCreateModeSelect.keep-creating.text": "Continuar creando",
  "EntityCreateModeSelect.keep-creating.help": "Esta opci\xF3n le permite continuar creando varios objetos en sucesi\xF3n manteniendo las propiedades de la creaci\xF3n anterior.",
  "EntityCreateModeSelect.edit-on-create.text": "Editar despu\xE9s de la creaci\xF3n",
  "EntityCreateModeSelect.edit-on-create.help": "Una vez creado su objeto, ser\xE1 redirigido a la p\xE1gina de edici\xF3n del objeto para completar sus propiedades y asociaciones.",
  "TableView.options": "opciones",
  "ErrorImpossibleToFindTheEntity.text": "No es posible encontrar %{determinant.defined} deseado",
  "ErrorImpossibleToFindTheEntities.text": "No se puede encontrar el %{determinants.defined}",
  "EntityPropertyTypesMandatoryNotRespected.title": "Se requieren las siguientes propiedades",
  "entity.properties.mandatory": "La propiedad %{name} es obligatoria.",
  "entity.properties.calculated": "La %{name} se calcula autom\xE1ticamente.",
  "entity.properties.readonly-lock": "La %{name} es de solo lectura y no se puede modificar desde esta p\xE1gina.",
  "EntityHasManyProperties.associations.others": "Asociaciones para %{determinant.defined}",
  "EntityHasManyProperties.associations.reporting": "Asociaciones de informes para %{determinant.defined}",
  "EntityHasManyProperties.associations.security": "Asociaciones de seguridad para %{determinant.defined}",
  "EntitiesView.NoItem": "No existe %{objectType} , puedes crear tu primer %{objectType} usando el bot\xF3n a continuaci\xF3n",
  "DeleteDialog.title": "Eliminar %{determinant.undefined}",
  "DeleteDialog.content": "Est\xE1 a punto de eliminar <b>%{determinant.undefined}</b> , esta acci\xF3n no es reversible y puede tener impactos, \xBFest\xE1 seguro de que desea realizar esta acci\xF3n?",
  "DeleteDialog.cancel.label": "anular",
  "DeleteDialog.cancel.help": "recuperar",
  "DeleteDialog.delete.label": "eliminar",
  "DeleteDialog.delete.help": "Eliminar permanentemente %{determinant.defined}",
  "ExportQueryNodeToFileButton.help.list": "Descargar en excel %{determinants.defined}",
  "entity.excel.headers.count": "%{label} : n\xFAmero",
  "entity.properties.externalId.label": "Llave externa",
  "entity.properties.externalId.description": "Este campo se puede utilizar para recordar la clave de correspondencia en otro software",
  "entity.properties.createdAt.label": "Fecha de creaci\xF3n",
  "entity.properties.createdAt.description": "Fecha de creaci\xF3n en Surfy, permite conocer la historia de creaci\xF3n en Surfy",
  "entity.properties.userCompanyCreatedBy.label": "Creado por el usuario",
  "entity.properties.userCompanyCreatedBy.description": "Crear por este usuario en Surfy, permite conocer la historia de la creaci\xF3n en Surfy",
  "entity.properties.userCompanyCreatedById.label": "ID del usuario que cre\xF3",
  "entity.properties.userCompanyCreatedById.description": "Crear por el identificador de este usuario en Surfy, permite conocer el historial de la creaci\xF3n en Surfy",
  "entity.properties.userCompanyUpdatedById.label": "ID del usuario que modific\xF3",
  "entity.properties.userCompanyUpdatedById.description": "Actualizado por el identificador de este usuario en Surfy, permite conocer el historial de creaci\xF3n en Surfy",
  "entity.properties.userCompanyUpdatedBy.label": "Actualizado por el usuario",
  "entity.properties.userCompanyUpdatedBy.description": "Actualizado por este usuario en Surfy, permite conocer el historial de la modificaci\xF3n en Surfy",
  "entity.properties.updatedAt.label": "Fecha de actualizaci\xF3n",
  "entity.properties.updatedAt.description": "Fecha de actualizaci\xF3n en Surfy, permite conocer el historial de modificaciones",
  "entity.delete.button.label": "eliminar",
  "entity.delete.button.help": "Eliminar %{determinant.defined} %{name}",
  "entity.cancel": "anular",
  "entity.see.label": "Ver",
  "entity.see.help": "Ver %{determinant.defined} %{name}",
  "entity.views.dataquality.help": "Informes y acciones para la calidad de los datos de %{determinants.defined}",
  "entity.views.dataquality.label": "Calidad de los datos",
  "entity.views.list.help": "Lista %{determinants.defined}",
  "entity.views.list.label": "Lister",
  "entity.views.import.help": "Importar %{determinants.undefined}",
  "entity.views.import.label": "importaci\xF3n",
  "entity.views.details.help": "Ver %{determinant.defined} %{name}",
  "entity.views.details.label": "Ver",
  "entity.views.create.help": "Crear %{determinant.undefined}",
  "entity.views.create.label": "crear",
  "entity.views.edit.help": "Editar %{determinant.defined} %{name}",
  "entity.views.edit.label": "Editar",
  "entity.views.dashboard.help": "Panel de %{determinant.defined} %{name}",
  "entity.views.dashboard.label": "Salpicadero",
  "entity.create.validate.help": "Validar creatividad para %{determinant.defined}",
  "entity.create.validate.label": "Validar la creaci\xF3n",
  "entity.create.button.help": "Iniciar la creaci\xF3n de %{determinant.defined}",
  "entity.create.button.label": "Crear %{determinant.defined}",
  "entity.create.association.help": "Iniciar la creaci\xF3n de %{determinant.undefined}",
  "entity.create.association.label": "Crear %{determinant.undefined}",
  "entity.update.button.label": "Salvar",
  "entity.update.button.help": "Ahorre %{determinant.defined} %{name}",
  "entity.createAndAssociate.button.label": "Crear y asociar",
  "entity.createAndAssociate.button.help": "Crear y asociar %{determinant.undefined}",
  "entity.associate.button.label": "asociado",
  "entity.associate.button.help": "Asociado %{determinant.undefined}",
  "entity.back": "regreso",
  "WorkCanvas.Options.ZoomCanvasOption.label.enable": "Habilitar lupa alrededor del mouse",
  "WorkCanvas.Options.ZoomCanvasOption.label.disable": "Deshabilitar la lupa alrededor del mouse",
  "WorkCanvas.Options.ZoomCanvasOption.help.enable": "Activar la lupa te permite tener una visi\xF3n general de un \xE1rea o piso y ver el comportamiento del mouse de manera precisa",
  "WorkCanvas.Options.ZoomCanvasOption.help.disable": "Detener la lupa del rat\xF3n",
  "WorkCanvas.Options.AddSegmentPointOption.label.enable": "Agregar un v\xE9rtice en un segmento",
  "WorkCanvas.Options.AddSegmentPointOption.label.disable": "Dejar de agregar un v\xE9rtice en un segmento",
  "WorkCanvas.Options.AddSegmentPointOption.help.enable": "Agregar un v\xE9rtice en un segmento le permite colocar un punto en cualquier lugar sin tener en cuenta los otros puntos",
  "WorkCanvas.Options.AddSegmentPointOption.help.disable": "Deja de crear v\xE9rtices en segmentos",
  "WorkCanvas.Options.AddSegmentPointOption.description": "Seleccione un espacio para poder crear un v\xE9rtice en uno de los segmentos",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.enable": "Activar la inversi\xF3n de la orientaci\xF3n de la creaci\xF3n de los v\xE9rtices",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.disable": "Deshabilitar la inversi\xF3n de la orientaci\xF3n de la creaci\xF3n de los v\xE9rtices",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.enable": "Activar la inversi\xF3n de la orientaci\xF3n de la creaci\xF3n de los v\xE9rtices permite cambiar la direcci\xF3n de creaci\xF3n de los v\xE9rtices",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.disable": "Desactive la inversi\xF3n para encontrar la direcci\xF3n inicial de creaci\xF3n de los v\xE9rtices.",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.enable": "Activar la inversi\xF3n del \xE1ngulo recto para la creaci\xF3n de los v\xE9rtices",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.disable": "Deshabilitar la inversi\xF3n del \xE1ngulo recto para la creaci\xF3n de v\xE9rtices",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.enable": "Activar la inversi\xF3n permite utilizar el \xE1ngulo recto durante la creaci\xF3n de los v\xE9rtices en el otro segmento",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.disable": "Desactivar la inversi\xF3n permite usar el \xE1ngulo recto en el segmento inicial",
  "LoadingSvgCircle.pleaseWait": "Espere mientras se sincroniza",
  "WorkCanvas.Options.AddRoomPointOption.label.enable": "Agregar una cumbre",
  "WorkCanvas.Options.AddRoomPointOption.label.disable": "Deja de agregar un v\xE9rtice",
  "WorkCanvas.Options.AddRoomPointOption.help.enable": "Agregar un v\xE9rtice permite volver a trabajar con mayor precisi\xF3n un formulario",
  "WorkCanvas.Options.AddRoomPointOption.help.disable": "Deja de crear cumbres",
  "WorkCanvas.Options.SplitPolygoneOption.label": "espacio separado",
  "WorkCanvas.Options.SplitPolygoneOption.help": "Crea 2 espacios a partir de otro espacio eligiendo 2 v\xE9rtices",
  "WorkCanvas.Options.SplitRoomPointOption.help": "El v\xE9rtice dividido permite reutilizar m\xFAltiples v\xE9rtices para cada segmento y as\xED crear espacios separados",
  "WorkCanvas.Options.SplitRoomPointOption.label": "v\xE9rtice separado",
  "WorkCanvas.Options.MergeRoomPointsOption.help": "Fusionar v\xE9rtices permite reutilizar el mismo v\xE9rtice para diferentes espacios",
  "WorkCanvas.Options.MergeRoomPointsOption.label": "Fusionar v\xE9rtices",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.help": "Quitar v\xE9rtices del espacio",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.label": "Eliminar v\xE9rtices seleccionados",
  "WorkCanvas.Options.ZoomOnEdgePoints.help": "Conc\xE9ntrese en uno o m\xE1s puntos para poder trabajar en silencio.",
  "WorkCanvas.Options.ZoomOnEdgePoints.label": "Centrarse en puntos",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.enable": "Mover tipo de objeto",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.disable": "Deja de moverte",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.enable": "Mover el tipo de objeto en el avi\xF3n",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.disable": "Dejar de mover el tipo de objeto",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.help": "Eliminar el tipo de objeto del tipo de estaci\xF3n de trabajo",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.label": "Eliminar tipo de objeto",
  "WorkCanvas.Options.DeleteItemTypePointsOption.help": "Eliminar v\xE9rtices del tipo de objeto",
  "WorkCanvas.Options.DeleteItemTypePointsOption.label": "Eliminar v\xE9rtices seleccionados",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.enable": "A\xF1ade una forma",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.disable": "Deja de agregar la forma",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.enable": "Agregar una forma para un tipo de objeto en el plano",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.disable": "Deja de crear la forma",
  "WorkCanvas.Options.AddItemTypeShapeSaveOption.help": "Guardar el tipo de objeto que se est\xE1 creando",
  "WorkCanvas.Options.AddItemTypePointOption.label.enable": "Agregar una cumbre",
  "WorkCanvas.Options.AddItemTypePointOption.label.disable": "Deja de agregar un v\xE9rtice",
  "WorkCanvas.Options.AddItemTypePointOption.help.enable": "Agregar un v\xE9rtice permite volver a trabajar con mayor precisi\xF3n un formulario",
  "WorkCanvas.Options.AddItemTypePointOption.help.disable": "Deja de crear cumbres",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.enable": "Mover espacios",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.disable": "dejar de viajar",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.enable": "Habilitar espacios m\xF3viles en el plano.",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.disable": "Deja de mover espacios",
  "WorkCanvas.Options.ToggleMoveRoomOption.description": "Una vez activado, selecciona un espacio y podr\xE1s moverlo.",
  "WorkCanvas.Options.DuplicateShapesOption.label": "Formas duplicadas",
  "WorkCanvas.Options.DuplicateShapesOption.help": "Duplique formas sin propiedades para crear r\xE1pidamente objetos o estaciones de trabajo en el plano",
  "CancelDuplicateShapsToRoomMouse.help": "Deshacer formas duplicadas",
  "ToggleWorkplaceFreeConditionTypeIconButton.or": "Ver estaciones de trabajo gratuitas para todos los d\xEDas solicitados",
  "ToggleWorkplaceFreeConditionTypeIconButton.and": "Ver puestos de trabajo libres durante al menos uno de los d\xEDas solicitados",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.false": "Publicaciones sin color %{day}",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.true": "Deja de colorear publicaciones gratuitas %{day}",
  "FreeWorkplacesDayList.title": "Ver lugares libres %{days}",
  "FreeWorkplacesDayList.conditions.and": "Y",
  "FreeWorkplacesDayList.conditions.or": "O",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.enable": "Colorea los puntos de control",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.disable": "Deja de colorear los postes de cruce",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.enable": "Vea en el mapa de colores las estaciones de trabajo que est\xE1n pasando",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.disable": "Ya no se ven las estaciones de trabajo que pasan de manera diferente en el mapa",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.enable": "Colorea las publicaciones compartidas",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.disable": "Deja de colorear las publicaciones compartidas",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.enable": "Vea en el plano de color las estaciones de trabajo que comparten al menos 2 personas",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.disable": "Ya no ver las estaciones de trabajo compartidas de forma diferente en el mapa",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.enable": "Objetos de color sin asociaci\xF3n.",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.disable": "Deja de colorear objetos sin asociaci\xF3n",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.enable": "Ver los objetos gratuitos en el mapa.",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.disable": "Ya no veo los objetos gratuitos de forma diferente en el mapa.",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.enable": "Colorea las posiciones reservables.",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.disable": "Dejar de colorear posiciones reservables",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.enable": "Vea en el plan de colores los puestos de trabajo reservables",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.disable": "Ya no vemos las estaciones de trabajo reservables de manera diferente en t\xE9rminos de",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.enable": "Colorear posiciones libres",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.disable": "Deja de colorear publicaciones gratuitas",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.enable": "Ver las posiciones libres en el mapa",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.disable": "Ya no ver\xE1 las posiciones libres de manera diferente en el plan",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.enable": "Colorea las publicaciones en flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.disable": "Deja de colorear publicaciones en flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.enable": "Ver las posiciones de los flex en el mapa",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.disable": "Ya no ver\xE1 las posiciones flexibles de manera diferente en el plan",
  "WorkCanvas.Options.CalibrateLayoutOption.help.enable": "Calibrar el mapa le permite ampliar o reducir el tama\xF1o de todos los espacios o moverlos todos en el mapa",
  "WorkCanvas.Options.CalibrateLayoutOption.help.disable": "Deja de calibrar el plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.enable": "Calibrar el plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.disable": "Deja de calibrar el plan",
  "CalibrateLayoutDrawer.title": "Calibrar el plan",
  "CalibrateLayoutDrawer.options.mapScale.label": "Alinear la escala del plan",
  "CalibrateLayoutDrawer.options.mapScale.help": "Aplicar el factor de escala a los elementos de la escala (longitud y tama\xF1o de los textos)",
  "CalibrateLayoutDrawer.options.inputs.scale.label": "Factor de escala",
  "CalibrateLayoutDrawer.options.inputs.step.label": "Valor de traducci\xF3n",
  "CalibrateLayoutDrawer.options.inputs.translate.x.label": "El eje X",
  "CalibrateLayoutDrawer.options.inputs.translate.y.label": "Eje Y",
  "CalibrateLayoutDrawer.options.reduce.label": "Reducir",
  "CalibrateLayoutDrawer.options.save.label": "Para registrarse",
  "CalibrateLayoutDrawer.options.save.help": "Guarde la calibraci\xF3n en el plan",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.enable": "Activar la visualizaci\xF3n de iconos en el plano en 2d",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.disable": "Desactivar la visualizaci\xF3n de iconos en el mapa",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.enable": "Los iconos asociados a los tipos de espacios facilitan la visualizaci\xF3n de los tipos de espacios en el plano",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.disable": "Ver informaci\xF3n del espacio",
  "WorkCanvasToggleOptionHelp.shortcut": "Atajo de teclado: <b>%{shortcut}</b>",
  "WorkCanvasShortcutTooltipHelp.help": "Atajo de teclado: <b>%{shortcut}</b>",
  "WorkCanvas.Options.ZoomOutOption.label": "Alejar en el mapa",
  "WorkCanvas.Options.ZoomOutOption.help": "Aleje el mapa centr\xE1ndose en la posici\xF3n del mouse",
  "WorkCanvas.Options.ZoomOutOption.description": "Puede usar la rueda del mouse y el panel t\xE1ctil para alejar",
  "WorkCanvas.Options.ZoomOnMousePosition.help": "Ampl\xEDe la posici\xF3n del mouse para poder trabajar con mayor precisi\xF3n en un \xE1rea",
  "WorkCanvas.Options.ZoomOnMousePosition.label": "Acercar la posici\xF3n del mouse",
  "WorkCanvasLoadingIcon.title": "Cargando el plan",
  "WorkCanvas.Options.ZoomOnItemsOption.help": "Ampl\xEDe uno o m\xE1s objetos para poder trabajar con mayor precisi\xF3n",
  "WorkCanvas.Options.ZoomOnItemsOption.label": "Acercar la selecci\xF3n",
  "WorkCanvas.Options.ZoomOnDimensionsOption.label": "Ampliar las capas de tareas",
  "WorkCanvas.Options.ZoomOnDimensionsOption.help": "Haga zoom directamente a las capas de asignaci\xF3n en las que puede reservar en el plan",
  "WorkCanvas.Options.ZoomInOption.label": "Acercar el mapa",
  "WorkCanvas.Options.ZoomInOption.help": "Ampl\xEDe el mapa centr\xE1ndose hacia la parte superior izquierda de la pantalla",
  "WorkCanvas.Options.ZoomInOption.description": "Puede usar la rueda del mouse y el panel t\xE1ctil para hacer zoom",
  "WorkCanvas.Options.ToggleSelectModeOption.help.enable": "Obtenga las opciones del plan para poder hacer zoom o ver los detalles de las formas y activar los atajos de teclado, tambi\xE9n puede hacer clic en el plan para activar la manipulaci\xF3n.",
  "WorkCanvas.Options.ToggleSelectModeOption.help.disable": "???",
  "WorkCanvas.Options.ToggleSelectModeOption.label.enable": "Empiece a trabajar con el espacio de trabajo",
  "WorkCanvas.Options.ToggleSelectModeOption.label.disable": "Detener la manipulaci\xF3n del espacio de trabajo.",
  "WorkCanvas.Options.ToggleSelectModeOption.description": "Puede seleccionar varias formas manteniendo presionada la <b>tecla MAY\xDAS</b> y haciendo clic en las formas",
  "WorkCanvas.Options.ToggleEditModeOption.label.enable": "Habilitar el modo de edici\xF3n de plan",
  "WorkCanvas.Options.ToggleEditModeOption.label.disable": "Deshabilitar el modo de edici\xF3n del plan",
  "WorkCanvas.Options.ToggleEditModeOption.help.enable": "Activar el modo de edici\xF3n del plano te permite crear y mover formas o crear espacios",
  "WorkCanvas.Options.ToggleEditModeOption.help.disable": "Desactivar el modo de edici\xF3n de planos para volver al modo de lectura de planos",
  "WorkCanvas.Options.ToggleEditModeOption.description": "Al rotar objetos y estaciones de trabajo, por defecto se aplica un \xE1ngulo de 45 \xB0, para desactivarlo use la tecla <b>SHIFT</b> del teclado",
  "WorkCanvas.Options.FitToViewOption.label": "Centra el mapa para verlo todo",
  "WorkCanvas.Options.FitToViewOption.help": "Le permite tener una visi\xF3n general del plan",
  "HeatMapSelection.title": "Colorea los espacios con un mapa de calor para entender las densidades, los mapas de calor no son exportables en imagen por el momento",
  "HeatMapSelection.heatmaps.seatsCount.label": "Densidad de asientos",
  "HeatMapSelection.heatmaps.seatsCount.description": "Colorea los espacios seg\xFAn el n\xFAmero de asientos",
  "HeatMapSelection.heatmaps.workplacesCount.label": "Densidad de estaciones de trabajo",
  "HeatMapSelection.heatmaps.workplacesCount.description": "Colorea los espacios seg\xFAn el n\xFAmero de estaciones de trabajo",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.label": "Densidad de asignaciones a estaciones de trabajo",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.description": "Colorea los espacios seg\xFAn el n\xFAmero de asignaciones de estaciones de trabajo",
  "HeatMapSelection.heatmaps.carbonFootprintCount.label": "Mobiliario Densidad Huella de Carbono",
  "HeatMapSelection.heatmaps.carbonFootprintCount.description": "Colorea los espacios seg\xFAn la huella de carbono del mobiliario",
  "FurnituresSelectionDragZone.help": "Mover grupo",
  "FurnituresSelection.move": "Mover a todo el grupo",
  "WorkCanvas.Options.TextAnchorOption.label.enable": "Establecer la ubicaci\xF3n del texto mostrado",
  "WorkCanvas.Options.TextAnchorOption.label.disable": "Detener visualizaci\xF3n de gesti\xF3n de texto",
  "WorkCanvas.Options.TextAnchorOption.help.enable": "Mover texto de visualizaci\xF3n",
  "WorkCanvas.Options.TextAnchorOption.help.disable": "Dejar de mover el texto de la pantalla",
  "TextAnchorDrawer.title": "Cambiar la ubicaci\xF3n del texto mostrado para %{determinant.defined} %{name}",
  "WorkCanvas.Options.TextAnchorDrawer.label.enable": "Mover texto de visualizaci\xF3n",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.label": "Personaliza la posici\xF3n del texto",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.help": "Le permite activar la personalizaci\xF3n de la posici\xF3n del texto del mapa.",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.label": "Activar pantalla de anclaje",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.help": "Le permite activar la visualizaci\xF3n del segmento y el punto de anclaje de este espacio.",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.label": "Restablecer posici\xF3n de texto",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.help": "Esta opci\xF3n devuelve la posici\xF3n del texto de este espacio a su ubicaci\xF3n original.",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.label": "Restablecer posici\xF3n de anclaje",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.help": "Esta opci\xF3n devuelve la posici\xF3n de anclaje de este espacio a su ubicaci\xF3n original.",
  "ShapeTextAnchorDrawer.empty": "Seleccione una forma compatible para mover el texto mostrado",
  "IconsPicker.DisplayAll.text": "Ver todo",
  "IconsPicker.DisplayAll.help": "Atenci\xF3n, la carga puede ser un poco larga",
  "IconsPicker.close": "Cerrar selecci\xF3n de iconos",
  "IconPickerSearch.SearchPlaceholder": "Busque un \xEDcono con al menos 3 letras",
  "EntitiesAutocomplete.searchEmpty.help.false": "Seleccione %{determinants.defined} sin %{objectTypeName}",
  "EntitiesAutocomplete.searchEmpty.help.true": "Volver al modo de b\xFAsqueda est\xE1ndar",
  "SearchFieldString.searchEmpty.help.false": "Buscar elementos vac\xEDos o sin valor",
  "SearchFieldString.searchEmpty.help.true": "Volver a habilitar la b\xFAsqueda est\xE1ndar",
  "SearchFilters.buttons.clear.label": "Borrar todos los filtros",
  "SearchFilters.buttons.clear.help": "Borre todos los filtros y rein\xEDcielos a su estado inicial para asegurarse de que puede ver todas las entidades disponibles",
  "RightSearchFilterDrawer.filter": "Filtro %{determinants.defined}",
  "RightSearchFilterDrawer.tabLabel": "Filtrar",
  "RightSearchFilterDrawer.buttons.clear.label": "Borrar todos los filtros",
  "RightSearchFilterDrawer.buttons.clear.help": "Borre todos los filtros y rein\xEDcielos a su estado inicial para asegurarse de que puede ver todas las entidades disponibles",
  "PropertSelectorDrawer.help": "Seleccione las propiedades que desea mostrar en la tabla",
  "PropertSelectorDrawer.options.reset.label": "Restablecer selecci\xF3n",
  "PropertSelectorDrawer.options.reset.help": "Restablecer la selecci\xF3n de propiedades a su estado inicial",
  "PropertSelectorDrawer.tabLabel": "Propiedades",
  "TableSelectionAllCheckbox.checked.true": "Deselecciona todo",
  "TableSelectionAllCheckbox.checked.false": "Seleccionar todo",
  "TableSelectionAllCheckbox.help": "Seleccionar o anular la selecci\xF3n de todas las filas (incluidas las que no son visibles en la lista paginada)",
  "TableOptionsRow.checked.true": "Deselecciona todo",
  "TableOptionsRow.checked.false": "Seleccionar todo",
  "TableOptionsRow.help": "Seleccionar o anular la selecci\xF3n de todas las l\xEDneas",
  "ErrorTextZone.reload": "Rehacer la operaci\xF3n",
  "ReportErrorSteps.report.title": "Acabas de encontrar un error",
  "ReportErrorSteps.report.description": "Este error ha sido informado a nuestros equipos e intentaremos corregirlo lo m\xE1s r\xE1pido posible.",
  "ReportErrorSteps.report.steps.title": "Puedes probar en orden",
  "ReportErrorSteps.report.steps.reload": "Vuelva a cargar la p\xE1gina y vea si el error se resuelve.",
  "ReportErrorSteps.report.steps.logout": "Descon\xE9ctese y regrese a esta p\xE1gina despu\xE9s de volver a conectarse",
  "ReportErrorSteps.report.steps.contact": "Cont\xE1ctanos para que podamos ofrecerte una alternativa lo m\xE1s r\xE1pido posible",
  "ReportErrorByMailButton.label": "Cont\xE1ctenos",
  "RefreshPageButton.label": "Recargar p\xE1gina",
  "Errors.networkError": "Se han detectado problemas de conexi\xF3n o de red. Espere y vuelva a intentarlo en unos segundos.",
  "ShowEntityDrawer.title.show": "Ver %{determinant.defined}",
  "ShowEntityDrawer.title.listItem": "Ver informaci\xF3n para %{determinant.defined} en la barra lateral",
  "EditEntityDrawer.title.edit": "Editar %{determinant.defined}",
  "RightDrawerContent.close": "Cierre el panel derecho haciendo clic en la cruz.",
  "DropDownOptions.moreOptions": "Ver m\xE1s opciones para %{determinant.defined} %{name}",
  "BuildingFloorsList.title": "Navegar por los pisos",
  "RefetchEntityButton.refetch": "Recargar datos",
  "RefetchEntitiesButton.refetch": "Recargar datos de objetos visibles",
  "RefetchObjectTypeIcon.help": "Recargar datos para %{determinant.defined}",
  "ImpactButtonReload.help.single": "Actualizar datos calculados para %{determinant.defined}",
  "ImpactButtonReload.help.list": "Actualizar datos calculados para %{determinants.defined}",
  "EditInlineToggleIconButton.edit.label": "Editar",
  "EditInlineToggleIconButton.edit.help": "Edite las propiedades de %{determinant.defined} directamente en esta p\xE1gina",
  "EditInlineToggleIconButton.cancel.help": "Dejar de editar sin guardar",
  "ConfirmationButtons.confirm": "Confirmar la finalizaci\xF3n de la acci\xF3n.",
  "ConfirmationButtons.cancel": "anular",
  "ConfirmationButtons.loading": "La acci\xF3n se est\xE1 ejecutando, espera",
  "EmailNotVerified.errorMessage": "Por favor valide su correo electr\xF3nico ( %{email} ), una vez validado, puede desconectarse y volver a conectarse para acceder a Surfy",
  "NoRoleAssociated.noRole": "No parece haber ning\xFAn rol asociado con su usuario para la empresa %{tenant} , comun\xEDquese con su administrador",
  "NoCompanies.title.whatIsSurfy": "\xBFQu\xE9 es Surfy?",
  "NoCompanies.NoCompanyAssigned": "No est\xE1s asociado a ninguna plataforma, por el momento no puedes usar surfy",
  "NoCompanies.whatIsSurfy": "Surfy ofrece digitalizar planos de construcci\xF3n para facilitar la gesti\xF3n del entorno laboral.<br/> Puedes usar la aplicaci\xF3n Surfy para<ul><li> organizar espacios</li><li> asignar empleados</li><li> espacios de recarga</li><li> analizar espacios</li><li> gestionar el cumplimiento y las regulaciones</li><li> conectar espacios</li><li> gestionar horarios de asistencia</li><li> reservar espacios de trabajo</li></ul>",
  "NoCompanies.whatIsSurfyForTeams": "Surfy ofrece digitalizar planos de edificaci\xF3n para facilitar la gesti\xF3n del entorno laboral. Puedes usar la aplicaci\xF3n Surfy para<ul><li> gestiona tu agenda de presencia</li><li> declarar su presencia en la oficina</li><li> reservar un espacio de trabajo</li><li> indicar que est\xE1s teletrabajando</li><li> ver qu\xE9 colegas han reservado una estaci\xF3n de trabajo en el plan</li></ul>",
  "NoCompanies.ContactUs.text": "Inicie sesi\xF3n en la plataforma de su empresa",
  "NoCompanies.ContactUs.subject": "Acceder a Surfy",
  "NoCompanies.ContactUs.body": "Hola, \xBFpodr\xEDas dejarme acceder a la aplicaci\xF3n Surfy? Gracias.",
  "NoCompanies.accessSurfy.title": "\xBFPor qu\xE9 no puedo acceder a Surfy?",
  "NoCompanies.accessSurfy.alreadyUsing": "Si su empresa ya utiliza Surfy, por favor contacte con su responsable de entorno laboral para solicitar acceso o cont\xE1ctenos a trav\xE9s del siguiente enlace",
  "NoCompanies.accessSurfy.joinTenant": "\xDAnase a la plataforma de su empresa",
  "NoCompanies.notUsing.title": "\xBFTu empresa a\xFAn no utiliza Surfy?",
  "NoCompanies.knowMore": "M\xE1s informaci\xF3n sobre Surfy",
  "AuthenticationButton.connections.google-oauth2.label": "google",
  "AuthenticationButton.connections.google-oauth2.help": "Inicia sesi\xF3n con tu cuenta de Google",
  "AuthenticationButton.connections.AzureADv2.label": "Office 365",
  "AuthenticationButton.connections.AzureADv2.help": "Con\xE9ctese con su cuenta profesional de Microsoft a trav\xE9s de Office 365",
  "AuthenticationButton.connections.auth0.label": "Cuenta Surfy",
  "AuthenticationButton.connections.auth0.help": "Inicie sesi\xF3n con su cuenta de Surfy",
  "Auth0AuthenticationButton.connections.auth0.label": "Cuenta Surfy (identificaci\xF3n abierta)",
  "Auth0AuthenticationButton.connections.auth0.help": "Inicie sesi\xF3n con su cuenta de Surfy",
  "EnterpriseConnectionButton.label": "negocios",
  "EnterpriseConnectionButton.help": "Inicie sesi\xF3n con su cuenta de empresa a trav\xE9s de una autenticaci\xF3n dedicada como OKTA o DigitalP@ss",
  "EnterpriseConnectionForm.title": "Por favor ingrese su correo electr\xF3nico para que podamos reconocer su negocio",
  "EnterpriseConnectionForm.forms.email.placeholder": "Correo electr\xF3nico",
  "EnterpriseConnectionForm.error": "No se puede identificar a su empresa con su correo electr\xF3nico",
  "EnterpriseConnectionForm.buttons.validate.label": "Validar",
  "EnterpriseConnectionForm.buttons.validate.help": "Validar el correo electr\xF3nico le permite conocer su empresa y dirigirlo a la plataforma de autenticaci\xF3n adecuada",
  "EnterpriseConnectionForm.buttons.back.label": "regreso",
  "EnterpriseConnectionForm.buttons.back.help": "Volver a la p\xE1gina de autenticaci\xF3n con todas las opciones",
  "LoginView.loadingPage": "Cargando la p\xE1gina de autenticaci\xF3n",
  "LoginView.connections.google-oauth2.label": "google",
  "LoginView.connections.google-oauth2.help": "Inicia sesi\xF3n con tu cuenta de Google",
  "LoginView.connections.AzureADv2.label": "Office 365",
  "LoginView.connections.AzureADv2.help": "Con\xE9ctese con su cuenta profesional de Microsoft a trav\xE9s de Office 365",
  "LoginView.connections.Username-Password-Authentication.label": "Cuenta Surfy",
  "LoginView.connections.Username-Password-Authentication.help": "Inicie sesi\xF3n con su cuenta de Surfy",
  "LoginView.texts.title": "acceder",
  "LoginView.texts.description": "Acceder a Surfy",
  "LoginView.helpers.register": "Registra tu negocio en Surfy",
  "LoginView.helpers.moreInfo": "M\xE1s informaci\xF3n sobre Surfy",
  "LoginView.helpers.privacy": "pol\xEDtica de privacidad",
  "CustomUserRegisterForm.tabs.login": "Conectarse",
  "CustomUserRegisterForm.tabs.signup": "Inscribirse",
  "CustomUserRegisterForm.form.email": "Email",
  "CustomUserRegisterForm.form.password": "Contrase\xF1a",
  "CustomUserRegisterForm.form.firstName": "primer nombre",
  "CustomUserRegisterForm.form.lastName": "Apellido",
  "CustomUserRegisterForm.form.confirmPassword": "confirmaci\xF3n de contrase\xF1a",
  "CustomUserRegisterForm.buttons.login.label": "Validar",
  "CustomUserRegisterForm.buttons.login.help": "Inicie sesi\xF3n si ya tiene una cuenta",
  "CustomUserRegisterForm.buttons.signup.label": "Validar",
  "CustomUserRegisterForm.buttons.signup.help": "Suscr\xEDbete a Surfy si no tienes una cuenta",
  "ReportChart.NoValue": "Sin valor",
  "ChangeLanguage.title": "Cambiar el idioma",
  "ChangeLanguage.help": "Cambiar el idioma de la aplicaci\xF3n",
  "DataQualityTable.numberOfLines": "N\xFAmero de l\xEDneas",
  "AllTenantsDataQualityTable.enableAllTenants.label": "Incluir todas las plataformas",
  "SingleNodeQuery.refetch": "Recargar datos",
  "ListRefetchButton.refetch": "Recargar datos de objetos visibles",
  "ImpactObjectTypeIconButton.refetch": "Recargar todos los datos independientemente de los filtros.",
  "CollapseSwitchButton.help.true": "ocultar el detalle",
  "CollapseSwitchButton.help.false": "Ver el detalle",
  "menu.logout": "Desconectarse",
  "menu.tenantOperations": "Sincronizaci\xF3n",
  "menu.menuLeft.shoppingCart": "Cesta",
  "menu.menuLeft.personCompanies": "Proveedores",
  "menu.menuLeft.workplace": "Estaciones de trabajo",
  "menu.menuLeft.security": "seguridad",
  "menu.menuLeft.globalSecurity": "Seguridad global",
  "menu.menuLeft.all": "administraci\xF3n",
  "menu.menuLeft.operations": "operaciones",
  "menu.menuLeft.types": "tipos",
  "menu.menuLeft.roomTypes": "Tipolog\xEDas espaciales",
  "menu.menuLeft.inventory": "inventarios",
  "menu.menuLeft.people": "Gente",
  "menu.menuLeft.spaces": "Espacios",
  "menu.menuLeft.organizations": "Organizaciones",
  "menu.menuLeft.dimensions": "Capas de an\xE1lisis",
  "menu.menuLeft.api": "API",
  "menu.menuLeft.authentification": "Autenticaci\xF3n",
  "menu.menuLeft.globalAdmin": "administraci\xF3n global",
  "menu.menuLeft.human": "Colaboradores",
  "menu.menuLeft.things": "Muebles",
  "menu.menuLeft.admin": "administraci\xF3n",
  "menu.menuLeft.surfy": "surfista",
  "menu.menuLeft.partnerExportMapping": "Socios",
  "menu.menuLeft.personType": "tipos",
  "menu.menuLeft.personRelations": "Relaciones",
  "menu.menuLeft.affectations": "asignaciones",
  "menu.menuLeft.buildings": "Edificios",
  "menu.menuLeft.thingsType": "tipos",
  "menu.menuLeft.spacePoints": "Puntos",
  "menu.menuLeft.adminReporting": "Informes",
  "menu.menuLeft.adminCostCenterReporting": "Centro de costos",
  "menu.menuLeft.adminDimensionReporting": "dimensiones",
  "menu.menuLeft.adminRoomTypeReporting": "tipo de espacios",
  "menu.menuLeft.adminOrganizationReporting": "Organizaciones",
  "menu.menuLeft.adminRoomTypeGroupReporting": "Grupos de tipolog\xEDa espacial.",
  "menu.menuLeft.buildingFacts": "Datos de construcci\xF3n con marca de tiempo",
  "menu.menuLeft.itemsFact": "Datos de objeto con marca de tiempo",
  "menu.menuLeft.segments": "Segmentos",
  "menu.menuLeft.connectors": "Conectores",
  "menu.menuLeft.planning": "Horarios",
  "menu.menuLeft.bookings": "Reservas",
  "menu.menuLeft.help": "Ayuda",
  "menu.menuLeft.company": "Plataformas",
  "ReduceMenuSwitch.open.true": "Expandir men\xFA",
  "ReduceMenuSwitch.open.false": "Contraer el men\xFA para aprovechar el espacio de trabajo",
  "LogoutMenuLink.logout": "Desconectarse",
  "HelpPortalListItemLink.label": "portal de ayuda",
  "HelpPortalListItemLink.help": "Descubre el portal de ayuda de Surfy con todos nuestros tutoriales y gu\xEDas de usuario",
  "ChangeLogListItemLink.label": "Noticias",
  "ChangeLogListItemLink.help": "Conoce las novedades y cambios en Surfy",
  "DisplayRoomTexts.dragOption": "Mantenga presionado y cambie el orden en que se muestran las propiedades en el mapa moviendo el campo hacia arriba o hacia abajo",
  "DisplayRoomTexts.roomPeopleDimensions.label": "Vecindario",
  "DisplayRoomTexts.roomPeopleDimensions.help": "Mostrar o no el barrio en el mapa",
  "DisplayRoomTexts.roomSeatsCount.label": "Numero de asientos",
  "DisplayRoomTexts.roomSeatsCount.help": "Mostrar o no el n\xFAmero de asientos en el mapa",
  "DisplayRoomTexts.roomCapacity.label": "Capacidad de espacio",
  "DisplayRoomTexts.roomCapacity.help": "Mostrar o no la capacidad del espacio en el plano.",
  "DisplayRoomTexts.roomCostCenter.label": "Centro de coste",
  "DisplayRoomTexts.roomCostCenter.help": "Mostrar o no el centro de costo del espacio en el plano.",
  "DisplayRoomTexts.roomMergedName.label": "Nombre fusionado",
  "DisplayRoomTexts.roomMergedName.help": "Mostrar o no el nombre combinado del espacio en el plano, este nombre combina el nombre para mostrar y el nombre del espacio.",
  "DisplayRoomTexts.roomName.label": "Nombre del espacio",
  "DisplayRoomTexts.roomName.help": "Mostrar o no el nombre del espacio en el plano",
  "DisplayRoomTexts.roomPrettyName.label": "Nombre para mostrar",
  "DisplayRoomTexts.roomPrettyName.help": "Mostrar o no el nombre para mostrar del espacio en el plano",
  "DisplayRoomTexts.roomArea.label": "superficie",
  "DisplayRoomTexts.roomArea.help": "Mostrar o no la superficie del espacio en el plano",
  "DisplayRoomTexts.roomType.label": "Tipolog\xEDa espacial",
  "DisplayRoomTexts.roomType.help": "Mostrar o no la tipolog\xEDa del espacio.",
  "DisplayRoomTexts.roomPerimeter.label": "per\xEDmetro",
  "DisplayRoomTexts.roomPerimeter.help": "Mostrar o no el per\xEDmetro del espacio en el plano.",
  "DisplayRoomTexts.roomOrganizationLevel1.label": "Servicio",
  "DisplayRoomTexts.roomOrganizationLevel1.help": "Mostrar o no el nombre del servicio espacial en el plano",
  "DisplayRoomTexts.roomOrganizationTopLevel.label": "Direcci\xF3n",
  "DisplayRoomTexts.roomOrganizationTopLevel.help": "Mostrar o no el nombre de la direcci\xF3n del espacio en el plano.",
  "DisplayRoomTexts.roomPeople.label": "Personas asignadas a espacios",
  "DisplayRoomTexts.roomPeople.help": "Mostrar o no los nombres de las personas asignadas a este espacio en el plano",
  "DisplayRoomTexts.roomWorkplaceAffectations.label": "Personas asignadas a estaciones de trabajo",
  "DisplayRoomTexts.roomWorkplaceAffectations.help": "Mostrar o no los nombres de las personas asignadas a las estaciones de trabajo en este espacio del plano",
  "DisplayRoomTexts.roomPeopleCount.label": "Numero de asignaciones",
  "DisplayRoomTexts.roomPeopleCount.help": "Mostrar o no el n\xFAmero de personas asignadas a este espacio en el plano",
  "DisplayRoomTexts.roomPeopleRatio.label": "Ratio de ocupaci\xF3n",
  "DisplayRoomTexts.roomPeopleRatio.help": "Mostrar o no el ratio de ocupaci\xF3n del espacio en el plano.",
  "DisplayRoomTexts.roomWorkplacesCount.label": "Cantidad de estaciones de trabajo",
  "DisplayRoomTexts.roomWorkplacesCount.help": "Mostrar o no el n\xFAmero de estaciones de trabajo en el espacio del plano.",
  "DisplayRoomTexts.roomWorkplacesRatio.label": "Proporci\xF3n de la estaci\xF3n de trabajo",
  "DisplayRoomTexts.roomWorkplacesRatio.help": "Mostrar o no la proporci\xF3n de estaciones de trabajo del espacio en el plano.",
  "DisplayRoomTexts.roomOccupancyRate.label": "Tasa de ocupaci\xF3n",
  "DisplayRoomTexts.roomOccupancyRate.help": "Mostrar o no la tasa de ocupaci\xF3n del espacio en el plano.",
  "DisplayRoomTexts.roomExpansionRatio.label": "Tasa de crecimiento excesivo",
  "DisplayRoomTexts.roomExpansionRatio.help": "Mostrar o no la tasa de expansi\xF3n del espacio en el plano.",
  "DisplayRoomTexts.roomFreeWorkplacesCount.label": "Numero de vacantes",
  "DisplayRoomTexts.roomFreeWorkplacesCount.help": "Mostrar o no el n\xFAmero de posiciones libres en el plan",
  "DisplayRoomTexts.roomFlexWorkplacesCount.label": "N\xFAmero de posiciones de flexi\xF3n",
  "DisplayRoomTexts.roomFlexWorkplacesCount.help": "Mostrar o no el n\xFAmero de posiciones flexibles en el plan",
  "DisplayRoomOptions.roomSeatsCount.one": "%{value} asiento",
  "DisplayRoomOptions.roomSeatsCount.more": "%{value} asientos",
  "DisplayRoomOptions.roomCapacity.one": "Capacidad: %{value} place",
  "DisplayRoomOptions.roomCapacity.more": "Capacidad: %{value} lugares",
  "DisplayRoomOptions.roomFreeWorkplacesCount.one": "%{value} posici\xF3n libre",
  "DisplayRoomOptions.roomFreeWorkplacesCount.more": "%{value} vacantes",
  "DisplayRoomOptions.roomFlexWorkplacesCount.one": "%{value} elemento flexible",
  "DisplayRoomOptions.roomFlexWorkplacesCount.more": "%{value} posiciones flexibles",
  "DisplayRoomOptions.roomWorkplacesCount.one": "estaci\xF3n de trabajo %{value}",
  "DisplayRoomOptions.roomWorkplacesCount.more": "%{value} estaciones de trabajo",
  "DisplayRoomOptions.roomPeopleCount.one": "%{value} persona afectada",
  "DisplayRoomOptions.roomPeopleCount.more": "%{value} personas afectadas",
  "DisplayRoomOptions.roomOccupancyRate": "Ocupaci\xF3n: %{value}",
  "DisplayRoomOptions.roomExpansionRatio": "Expansi\xF3n: %{value}",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.enable": "Administrar textos de visualizaci\xF3n de espacios",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.disable": "Cerrar pantalla de gesti\xF3n de texto",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.enable": "Permite configurar los textos que se mostrar\xE1n en el plano para cada espacio",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.disable": "Regrese al modo normal de edici\xF3n del plan.",
  "DisplayRoomTextsDrawer.tabs.map": "plan",
  "DisplayRoomTextsDrawer.tabs.tooltip": "Descripci\xF3n emergente",
  "DisplayRoomTextsDrawer.tabs.base.tabs.rooms": "Espacios",
  "DisplayRoomTextsDrawer.tabs.base.tabs.people": "Gente",
  "DisplayRoomTextsDrawer.tabs.base.people.description": "Para definir las propiedades de las personas que se mostrar\xE1n en el plan, elija en la pesta\xF1a de espacios las personas asignadas a los espacios o a las estaciones de trabajo y luego elija las propiedades en esta pesta\xF1a",
  "DisplayWorkplaceTexts.workplaceName.label": "Nombre de la estaci\xF3n de trabajo",
  "DisplayWorkplaceTexts.workplaceName.help": "Mostrar o no el nombre de la estaci\xF3n de trabajo en el mapa",
  "DisplayWorkplaceTexts.workplaceCostCenter.label": "Centro de coste",
  "DisplayWorkplaceTexts.workplaceCostCenter.help": "Mostrar o no el centro de costos de la estaci\xF3n de trabajo en el plan",
  "DisplayWorkplaceTexts.people.label": "mostrar personas",
  "DisplayWorkplaceTexts.people.help": "Mostrar o no las personas asignadas a la estaci\xF3n de trabajo en el plan",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.label": "Direcci\xF3n",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.help": "Mostrar o no las direcciones de las estaciones de trabajo en el plano",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.label": "Servicio",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.help": "Mostrar o no los servicios de las estaciones de trabajo en el plan",
  "DisplayPersonTexts.personPicture.label": "Foto de personas",
  "DisplayPersonTexts.personPicture.help": "Mostrar o no la foto de las personas asignadas a los puestos de trabajo del plan",
  "DisplayPersonTexts.personName.label": "Nombre de las personas",
  "DisplayPersonTexts.personName.help": "Mostrar o no el nombre de las personas asignadas a los puestos de trabajo del plan",
  "DisplayPersonTexts.personSecurityProfile.label": "Perfil de seguridad",
  "DisplayPersonTexts.personSecurityProfile.help": "Mostrar o no el perfil de seguridad de las personas asignadas a los puestos de trabajo del plan",
  "DisplayPersonTexts.personOrganizationLevel0.label": "Direcci\xF3n",
  "DisplayPersonTexts.personOrganizationLevel0.help": "Mostrar o no la direcci\xF3n de las personas asignadas a las estaciones de trabajo en el plan",
  "DisplayPersonTexts.personOrganizationLevel1.label": "Servicio",
  "DisplayPersonTexts.personOrganizationLevel1.help": "Mostrar o no el servicio de las personas asignadas a los puestos de trabajo del plan",
  "DisplayPersonTexts.personOrganizationHierarchy.label": "jerarqu\xEDa de la organizaci\xF3n",
  "DisplayPersonTexts.personOrganizationHierarchy.help": "Mostrar o no el departamento y la direcci\xF3n de las personas asignadas a las estaciones de trabajo en el plan",
  "DisplayPersonTexts.personCostCenter.label": "Centro de costos",
  "DisplayPersonTexts.personCostCenter.help": "Visualizar o no el centro de coste de las personas asignadas a los puestos de trabajo del plan",
  "DisplayPersonTexts.personCode.label": "N\xFAmero de registro",
  "DisplayPersonTexts.personCode.help": "Mostrar o no el n\xFAmero de personas asignadas a las estaciones de trabajo en el plan",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.enable": "Gestionar textos de visualizaci\xF3n de la estaci\xF3n de trabajo",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.disable": "Cerrar pantalla de gesti\xF3n de texto",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.enable": "Le permite configurar los textos que se mostrar\xE1n en el mapa para cada estaci\xF3n de trabajo",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.disable": "Regrese al modo normal de edici\xF3n del plan.",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.enable": "Activar la transparencia de los colores de fondo de los espacios",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.disable": "Desactivar la transparencia de color",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.enable": "Habilitar la transparencia del color permite que el fondo se vea a trav\xE9s de los espacios",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.disable": "Desactivar la transparencia de color restablece los colores de los espacios",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.description": "La transparencia de los colores de los espacios permite ver el fondo del plano",
  "WorkCanvas.Options.MapScaleOption.label.enable": "Administrar escala",
  "WorkCanvas.Options.MapScaleOption.label.disable": "Gesti\xF3n cercana de escala",
  "WorkCanvas.Options.MapScaleOption.help.enable": "Obligatorio configurar la escala en tu plano para tener los espacios y objetos en la escala correcta",
  "WorkCanvas.Options.MapScaleOption.help.disable": "Regrese al modo normal de edici\xF3n del plan.",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.label": "Eliminar escala",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.help": "Eliminar la escala equivale a quitar la escala del plano y eliminarla de la base, ya no ser\xE1 accesible a trav\xE9s de otros planos. No es posible eliminar una escala que est\xE9 en varios pisos.",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.label": "Escala de desagrupaci\xF3n",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.help": "Desvincular la escala de este plano la elimina del plano, pero mantiene la escala en la base de datos para uso futuro",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.label": "Acercar la escala",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.help": "El zoom hace que sea f\xE1cil encontrar la escala en el mapa.",
  "WorkCanvas.Options.DrawMapScaleOption.help": "Debe configurar la b\xE1scula en su plan, haga clic en el inicio y el final de la b\xE1scula en el plan para calibrarla",
  "ToggleCopilotEnable.label.false": "Activar Surfy Copiloto",
  "ToggleCopilotEnable.label.true": "Desactivar Surfy Copilot",
  "ToggleCopilotEnable.help.false": "Activa Surfy Copilot para habilitar el reconocimiento autom\xE1tico de puertas",
  "ToggleCopilotEnable.help.true": "Desactiva Surfy Copilot y vuelve al modelado manual",
  "WorkCanvas.Options.CopilotOption.label.enable": "Copiloto surfy",
  "WorkCanvas.Options.CopilotOption.label.disable": "Cerrar opciones de Surfy Copilot ",
  "WorkCanvas.Options.CopilotOption.help.enable": "Activar y ajustar las opciones de Surfy Copilot",
  "WorkCanvas.Options.CopilotOption.help.disable": "Regrese al modo normal del plan.",
  "WorkCanvas.Options.AddRoomShapeOption.label.enable": "A\xF1adir un espacio",
  "WorkCanvas.Options.AddRoomShapeOption.label.disable": "Deshacer la adici\xF3n de un espacio",
  "WorkCanvas.Options.AddRoomShapeOption.help.enable": "A\xF1adir un espacio en el plano",
  "WorkCanvas.Options.AddRoomShapeOption.help.disable": "Deshacer la creaci\xF3n de espacio",
  "WorkCanvas.Options.AddRoomShapeOption.description": "Los \xE1ngulos de creaci\xF3n est\xE1n bloqueados a 45\xB0, para desbloquearlos mantenga presionada la tecla <b>SHIFT</b> del teclado y contin\xFAe con la creaci\xF3n, para crear su v\xE9rtice coloque el mouse en el c\xEDrculo en la intersecci\xF3n del tri\xE1ngulo, para iniciar un espacio reutilizando un v\xE9rtice existente , mantenga presionada la tecla <b>ALT</b> del teclado y haga clic en el v\xE9rtice.",
  "WorkCanvas.Options.AddRoomShapeSaveOption.label": "Guarde el espacio que se est\xE1 modelando actualmente.",
  "WorkCanvas.Options.AddRoomShapeSaveOption.help": "Guardar espacio cerrar\xE1 autom\xE1ticamente el espacio y lo guardar\xE1, permiti\xE9ndole agregarle objetos o estaciones de trabajo.",
  "WorkCanvas.Options.ViewLegendOption.label.enable": "Vista previa de la leyenda",
  "WorkCanvas.Options.ViewLegendOption.label.disable": "Cierra el t\xEDtulo de la imagen para guardar del plan.",
  "WorkCanvas.Options.ViewLegendOption.help.enable": "Vea para qu\xE9 sirve la secci\xF3n de leyenda del mapa",
  "WorkCanvas.Options.ViewLegendOption.help.disable": "Regrese al modo normal del plan.",
  "DownloadImageQualitySlider.label": "Calidad de la imagen exportada",
  "DownloadImagePdfButton.label": "Descarga el plano sin leyenda (PDF)",
  "DownloadImagePdfButton.help": "Descarga el plano en PDF sin leyenda, esta funcionalidad est\xE1 en beta",
  "WorkCanvas.Options.DownloadImageOption.label.enable": "Guardar como imagen",
  "WorkCanvas.Options.DownloadImageOption.label.disable": "Cierra las opciones para guardar la imagen del plano.",
  "WorkCanvas.Options.DownloadImageOption.help.enable": "Guarde el plan como una imagen a trav\xE9s de esta opci\xF3n",
  "WorkCanvas.Options.DownloadImageOption.help.disable": "Regrese al modo normal del plan.",
  "DownloadImageDrawer.ViewImage.text": "Descarga el plano con leyenda (PNG)",
  "DownloadImageDrawer.ViewImage.help": "Descargue el plan completo en buena calidad con la leyenda, la exportaci\xF3n puede demorar m\xE1s.",
  "DownloadImageDrawer.ViewImageNoLegend.text": "Descarga el plano sin leyenda (PNG)",
  "DownloadImageDrawer.ViewImageNoLegend.help": "Descargue el plan completo en buena calidad sin el t\xEDtulo, la exportaci\xF3n puede demorar m\xE1s.",
  "DownloadImageDrawer.ScreenshotNoLegend.text": "Captura de pantalla sin t\xEDtulo",
  "DownloadImageDrawer.ScreenshotNoLegend.help": "Descargue la imagen de lo que ve en la pantalla sin t\xEDtulo, la salida ser\xE1 r\xE1pida pero la calidad de la exportaci\xF3n no ser\xE1 \xF3ptima",
  "DownloadBuildingImagesAccordion.accordion.title": "Exportar im\xE1genes de todo el edificio",
  "DownloadBuildingImagesAccordion.buttons.download.help": "Descarga todos los planos de todas las plantas del edificio en formato png en un zip, el tiempo de espera para esta extracci\xF3n puede ser largo",
  "DownloadBuildingImagesAccordion.buttons.download.label": "Descargar ZIP",
  "DisplayTexts.dragOption": "Puede ordenar y elegir la visualizaci\xF3n de propiedades en el mapa moviendo las barras peque\xF1as en el campo hacia arriba o hacia abajo",
  "DisplayRoomTextsPeople.roomPeopleFullName.label": "Nombre completo de las personas",
  "DisplayRoomTextsPeople.roomPeopleFullName.help": "Mostrar o no el nombre completo de la persona en el mapa",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.label": "Perfil de seguridad",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.help": "Mostrar o no el perfil de seguridad de las personas asignadas a los espacios del plano",
  "NumberOfPeoplePerRowField.label": "N\xFAmero de personas por l\xEDnea para asignaciones de espacio",
  "WorkCanvas.Options.BackgroundLayoutOption.label.enable": "Administrar el mapa de fondo",
  "WorkCanvas.Options.BackgroundLayoutOption.label.disable": "Cerrar gesti\xF3n de imagen de fondo",
  "WorkCanvas.Options.BackgroundLayoutOption.help.enable": "Se usa para administrar el mapa de fondo",
  "WorkCanvas.Options.BackgroundLayoutOption.help.disable": "Regrese al modo normal de edici\xF3n del plan.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.label": "Eliminar escala",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.help": "Eliminar la escala equivale a quitar la escala del plano y eliminarla de la base, ya no ser\xE1 accesible a trav\xE9s de otros planos. No es posible eliminar una escala que est\xE9 en varios pisos.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.label": "Escala de desagrupaci\xF3n",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.help": "Desagrupar la escala de este plan la elimina del plan, pero mantiene la escala en la base de datos para uso futuro",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.label": "Acercar la escala",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.help": "El zoom hace que sea f\xE1cil encontrar la escala en el mapa.",
  "WorkplaceCanvasItem.workplace.free": "La estaci\xF3n de trabajo no est\xE1 ocupada.",
  "WorkplaceCanvasItem.workplace.isFlex": "La estaci\xF3n de trabajo est\xE1 en flex",
  "WorkplaceCanvasItem.workplace.isTransit": "La estaci\xF3n de trabajo est\xE1 pasando",
  "WorkplaceCanvasItem.workplace.isBookable": "La estaci\xF3n de trabajo se puede reservar.",
  "WrongRoomsTable.table.headers.objectType": "Naturaleza",
  "WrongRoomsTable.table.headers.type": "Tipo",
  "WrongRoomsTable.table.headers.identity": "Identidad",
  "WrongRoomsTable.table.headers.currentRoom": "espacio actual",
  "WrongRoomsTable.table.headers.newRoom": "nuevo espacio",
  "WrongRoomsTable.SelectAll.checked.true": "Deselecciona todo",
  "WrongRoomsTable.SelectAll.checked.false": "Seleccionar todo",
  "WrongRoomsTable.SelectAll.help": "Seleccionar o anular la selecci\xF3n de todas las l\xEDneas",
  "WrongRoomsListner.dialog.title": "Validar la elecci\xF3n de espacios",
  "WrongRoomsListner.dialog.description": "Hay formas que no est\xE1n en su espacio inicial",
  "WrongRoomsListner.close.label": "cerca",
  "WrongRoomsListner.close.help": "cierra esta ventana",
  "MoveShapestoNewRoomAsyncButton.label": "Aplicar cambio de espacio",
  "MoveShapestoNewRoomAsyncButton.help": "Cambie los espacios de las formas seleccionadas para colocarlas en los espacios en los que se encuentran en el plano",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.enable": "Mover tipo de objeto",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.disable": "Dejar de mover el tipo de objeto",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.enable": "Mover un tipo de objeto en el avi\xF3n",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.disable": "Dejar de mover el tipo de objeto",
  "ResetRotationAngle.resetRotationAngle": "Restablecer a 0\xB0 el \xE1ngulo de rotaci\xF3n que actualmente es %{initialRotation}",
  "TenantOperations.sephora-sync-sap-success-factors.label": "sincronizaci\xF3n MSC",
  "TenantOperations.st-grenoble-import-hr-file.label": "Importando el archivo HR",
  "TenantOperations.egis-import-hr-file.label": "Importar archivo HR",
  "TenantOperations.essilor-import-hr-file.label": "Importar archivo HR",
  "TenantOperations.agpm-import-hr-file.label": "Importando el archivo HR (STILOG)",
  "ConnectedPartnerContext.title": "Est\xE1 conectado a <b>%{label}</b> ( %{host} )",
  "Operations.talentsoft-import.label": "Importaci\xF3n de Talentsoft",
  "Operations.zbre-sync.label": "Sincronizaci\xF3n Z#ber",
  "Operations.exportZbre.label": "Exportar Z # bre",
  "GenericNoChangeTable.open.label": "Ver datos",
  "GenericNoChangeTable.open.help": "Ver el detalle de los datos id\xE9nticos",
  "Operations.sharingcloud-sync.label": "Sincronizaci\xF3n de nube compartida",
  "Operations.moffi-sync.label": "Sincronizaci\xF3n Moffi",
  "Operations.lucca-sync.label": "Sincronizaci\xF3n de Lucca",
  "CompareObjectTypeUpdateIcon.help": "Esta sincronizaci\xF3n actualizar\xE1 las entidades.",
  "CompareObjectTypeDeleteIcon.help": "Esta sincronizaci\xF3n realizar\xE1 una eliminaci\xF3n de entidades que no provienen de la fuente",
  "CompareObjectTypeCreateIcon.help": "Esta sincronizaci\xF3n crear\xE1 entidades que no existen en el destino.",
  "RoomTooltip.roomWorkplaceAffectations": "Asignaciones de estaciones de trabajo",
  "RoomSegmentRoomsList.title": "Los espacios adjuntos a este segmento.",
  "MeetingRoomCard.seats.1": "%{count} asiento",
  "MeetingRoomCard.seats.n": "%{count} asientos",
  "MeetingRoomCard.locateSpace": "Localiza el espacio en el plano.",
  "MeetingRoomCard.viewPicture": "Ver foto del espacio",
  "days.monday": "Lunes",
  "days.tuesday": "Martes",
  "days.wednesday": "Mi\xE9rcoles",
  "days.thursday": "JUEVES",
  "days.friday": "Viernes",
  "days.saturday": "S\xC1BADO",
  "days.sunday": "Domingo",
  "WorkplaceAffectationDailyTitle.all": "Esta persona se ve afectada todos los d\xEDas.",
  "WorkplaceAffectationDailyTitle.person.affected": "A esta persona se le asigna %{daysText}",
  "WorkplaceAffectationDailyTitle.person.notAffected": "Esta persona no se ve afectada",
  "WorkplaceAffectationDailyTitle.calculatedRate": "La tasa de asignaci\xF3n promedio es %{calculatedRate}",
  "WorkplaceNestedList.title": "Personas asignadas a estaciones de trabajo",
  "WorkplaceList.workplace.free": "Esta estaci\xF3n de trabajo es gratuita",
  "WorkplaceList.workplace.flex": "Esta estaci\xF3n de trabajo est\xE1 en flex",
  "WorkplaceList.workplace.transit": "Esta estaci\xF3n de trabajo es compartida.",
  "WorkplaceList.zoomOnWorkplace": "Zoom a la estaci\xF3n de trabajo en el plan",
  "WorkplaceAffectionPersonListItem.remove.help": "Eliminar la asignaci\xF3n de la persona a la estaci\xF3n de trabajo",
  "WorkplaceAffectations.edit.help": "Asignar una persona a esta estaci\xF3n de trabajo",
  "WorkplaceAffectationDays.all": "Esta persona se ve afectada todos los d\xEDas.",
  "WorkplaceAffectationDays.and": "%{days} y %{lastDay}",
  "WorkplaceAffectationDays.one": "el %{day}",
  "WorkplaceAffectationDays.person.affected": "A esta persona se le asigna %{daysText}",
  "WorkplaceAffectationDays.person.notAffected": "Esta persona no se ve afectada",
  "RoomWorkplaceList.EmptyList": "No hay estaciones de trabajo en este espacio.",
  "RoomCard.buttons.edit.false": "Editar propiedades del espacio",
  "RoomCard.buttons.edit.true": "Deja de editar",
  "RoomCard.tabs.people": "asignaciones",
  "RoomCard.tabs.inventory": "inventario",
  "RoomCard.tabs.room": "Espacio",
  "RoomAffectationsOnlyList.title": "Personas asignadas a espacios",
  "RoomAffectationsList.title": "Personas asignadas a espacios",
  "RoomAffectationsList.EmptyList": "No hay nadie asignado a este espacio.",
  "ItemsInventory.EmptyList": "No hay objetos en este espacio.",
  "MovePersonFromWorkplaceToRoomListButtonItem.label": "Mover a esta persona desde su estaci\xF3n de trabajo al espacio de la estaci\xF3n de trabajo",
  "MovePersonFromWorkplaceToRoomListButtonItem.help": "Esta opci\xF3n requiere refrescar la p\xE1gina para ver el resultado, es posible encadenar varios movimientos sin refrescar",
  "CollapseWorkplaceAffectationList.title": "Asignar a esta persona solo para los d\xEDas siguientes",
  "CollapseWorkplaceAffectationList.updateAffectationDay.true": "Afecta a esta persona %{day}",
  "CollapseWorkplaceAffectationList.updateAffectationDay.false": "Quitar la tarea de esta persona %{day}",
  "CancelAddWorkplaceToRoom.help": "Cancelar la adici\xF3n de la estaci\xF3n de trabajo",
  "CancelAddItemToRoom.help": "Cancelar la adici\xF3n del objeto",
  "AddPersonToRoom.help": "Asignar una persona al espacio %{name}",
  "SecurityComplianceModeSwitch.label": "Filtrar personas con perfiles de seguridad",
  "SecurityComplianceModeSwitch.description": "Ver solo personas con perfiles de seguridad en el mapa",
  "layoutViewSets.roomType.label": "Tipolog\xEDas de espacios",
  "layoutViewSets.roomType.description": "Ver la planta seg\xFAn la tipolog\xEDa de espacios",
  "layoutViewSets.costCenter.label": "Refacturaci\xF3n",
  "layoutViewSets.costCenter.description": "Analiza las claves de la distribuci\xF3n econ\xF3mica de los espacios",
  "layoutViewSets.workplaces.label": "Ocupaciones",
  "layoutViewSets.workplaces.description": "Centrarse en ocupar puestos de trabajo",
  "layoutViewSets.organizationLevel0.label": "Direcciones",
  "layoutViewSets.organizationLevel0.description": "Ocupaci\xF3n por direcci\xF3n",
  "layoutViewSets.flex.label": "Flexionar",
  "layoutViewSets.flex.description": "El uso flexible de espacios",
  "layoutViewSets.walls.label": "Particiones",
  "layoutViewSets.walls.description": "Centrarse en espacios y particiones.",
  "layoutViewSets.securityCompliance.label": "Cumplimiento de seguridad",
  "layoutViewSets.securityCompliance.description": "Analiza el cumplimiento de tu plan de prevenci\xF3n de seguridad y los perfiles de seguridad de las personas afectadas",
  "layoutViewSets.peopleDimensionTypes.label": "Barrios",
  "layoutViewSets.peopleDimensionTypes.description": "Analice capas de asignaci\xF3n y navegue por vecindario o zona",
  "LayoutViewSwitch.title": "Cambiando la visi\xF3n del plan",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.viewSet": "Visi\xF3n",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.help": "Puede cambiar la visi\xF3n a trav\xE9s de los men\xFAs del plan.",
  "SurfyLegendBottomLogo.text": "Plano generado por Surfy",
  "SurfyLegendBottomLogo.caption": "https://www.surfy.pro",
  "MapLegendWorkplace.title": "Puesto de trabajo",
  "MapLegendWorkplace.workplaces.free": "Las estaciones de trabajo son gratuitas",
  "MapLegendWorkplace.workplaces.flex": "Las estaciones de trabajo est\xE1n en flex",
  "MapLegendRoom.title": "Espacios",
  "MapLegendPersonSecurityProfile.title": "Perfiles de seguridad",
  "MapLegendFloor.title.building": "Edificio",
  "MapLegendFloor.title.floor": "piso",
  "MapLegend.workplaces": "Estaciones de trabajo",
  "MapLegend.rooms": "Espacios",
  "PersonSecurityProfileTabContent.tabs.merged": "Por perfiles de seguridad",
  "PersonSecurityProfileTabContent.tabs.split": "por asignaciones",
  "DimensionInfo.infos.building": "Informaci\xF3n de construcci\xF3n calculada",
  "DimensionInfo.infos.impactBuildings": "Recargar datos de construcci\xF3n calculados",
  "DimensionToPeopleList.title": "Personas asignadas a %{name}",
  "DimensionToPeopleList.noDimensionPerson": "No hay nadie asignado directamente a esta capa de an\xE1lisis",
  "DimensionPeople.title": "Personas asignadas a espacios",
  "AddPersonToDimension.help": "Asignar persona a %{name}",
  "CubyWallModeSelect.label": "Pantalla de partici\xF3n",
  "CubyWallModeSelect.options.no": "Ninguno",
  "CubyWallModeSelect.options.half": "Medias particiones",
  "CubyWallModeSelect.options.reality": "Realidad",
  "CubyWallModeSelect.options.cuby": "Cuby",
  "CubySaveAsImageButton.label": "Salvar el imagen",
  "CubySaveAsImageButton.help": "Guardar imagen del plano de planta",
  "CubyFitToViewIsometricButtonOption.label": "Centrar el plano en vista isom\xE9trica",
  "CubyFitToViewIsometricButtonOption.help": "Centrar plano en espacios en vista isom\xE9trica",
  "CubyFitToViewZenithalButtonOption.label": "Centre el plano en vista cenital",
  "CubyFitToViewZenithalButtonOption.help": "Centrar el plano en los espacios en vista cenital",
  "RefetchFloorLayoutButton.refetch": "Recargar datos del plan",
  "ItemTypesMapFilterZone.tabs.options": "opciones",
  "FloorMap.tabs.layout": "Cambiar la visi\xF3n del plan. La vista actual es <b>%{layoutName}</b>",
  "FloorMap.tabs.floor": "Ver informaci\xF3n del piso",
  "FloorMap.tabs.building": "Ver informaci\xF3n del edificio",
  "FloorMap.tabs.roomTypes": "Colorea los espacios del plano seg\xFAn las <b>tipolog\xEDas de espacios.</b>",
  "FloorMap.tabs.roomTypeGroups": "Ver los indicadores de espacio en plano seg\xFAn los <b>grupos de tipolog\xEDas de espacio</b>",
  "FloorMap.tabs.analyticsDimensionTypes": "Colorea los espacios del plano seg\xFAn las <b>capas de an\xE1lisis.</b>",
  "FloorMap.tabs.itemTypes": "Mostrar en el mapa los <b> objetos </b> por familia y tipo de objetos",
  "FloorMap.tabs.workplaceTypes": "Mostrar en el mapa las <b> estaciones de trabajo </b> por tipo de estaci\xF3n de trabajo",
  "FloorMap.tabs.organizations": "Colorea los espacios del plano seg\xFAn las <b>organizaciones</b> .",
  "FloorMap.tabs.costCenters": "Espacios de color y estaciones de trabajo en relaci\xF3n con <b>los centros de costos.</b>",
  "FloorMap.tabs.users": "Estaciones de trabajo en color versus personas",
  "FloorMap.tabs.selection": "Ver los detalles de los elementos seleccionados en el plan.",
  "FloorMap.tabs.rooms": "Detalles de <b>espacios</b> seleccionados",
  "FloorMap.tabs.items": "Detalles de los <b> objetos </b> seleccionados",
  "FloorMap.tabs.workplaces": "Detalles de las <b> estaciones de trabajo </b> seleccionadas",
  "FloorMap.tabs.all": "Ver todas las formas seleccionadas en la lista",
  "FloorMap.tabs.peopleDimensionTypes": "Colorea los espacios en el plano seg\xFAn <b>las capas de asignaci\xF3n</b>",
  "FloorMap.tabs.workplaceUsage": "Colorea las estaciones de trabajo seg\xFAn su <b>estado</b>",
  "FloorMap.tabs.options": "Ver opciones de planes",
  "FloorMap.tabs.heatmap": "Colorear con mapas de calor",
  "FloorMap.tabs.pathFinding": "Encontrar tu camino en los espacios",
  "DateDimensionSelect.options.day": "D\xEDa",
  "DateDimensionSelect.options.week": "Semana",
  "DateDimensionSelect.options.month": "Mes",
  "DateDimensionSelect.options.year": "A\xF1o",
  "DateDimensionSelect.options.quarter": "Cuarto",
  "JupDateRangePicker.chooseRange": "Elige un per\xEDodo",
  "WorkpaceBookingPeopleCountByDate.title": "N\xFAmero de personas reservadas por fecha",
  "WorkpaceBookingPeopleCountByDate.labels.line": "numero de personas",
  "WorkpaceBookingCountByDate.title": "Reservas de estaciones de trabajo por fecha",
  "WorkpaceBookingCountByDate.labels.line": "N\xFAmero de reservas",
  "WorkpaceBookingAverageByWeekDay.title": "Reserva de puestos de trabajo por d\xEDa de la semana",
  "WorkpaceBookingAverageByWeekDay.labels.line": "Promedio por semana",
  "WorkpaceBookingAverageByWeekDay.labels.bar": "N\xFAmero de reservas",
  "PersonPanelWorkplaceAffectations.title": "Asignaciones de estaciones de trabajo",
  "PersonPanelRoomAffectations.title": "Asignaciones a espacios",
  "PersonPanelDimensionToPeople.title": "Asignaciones a %{dimensionTypeName}",
  "PersonPanelBuildingAffectations.title": "Asignaciones a edificios",
  "PersonPanelBuildingAffectations.addToPeopleCount.false": "Esta persona no es contable en el edificio.",
  "PersonAffectationsPanel.title": "asignaciones",
  "PersonAffectationsPanel.description": "Las tareas de la persona",
  "PersonSecurityPanel.title": "seguridad",
  "PersonSecurityPanel.description": "Informaci\xF3n de seguridad y evacuaci\xF3n",
  "PersonRelationsPanel.title": "Relaciones",
  "PersonRelationsPanel.description": "Las relaciones de esta persona",
  "PersonInventoryPanel.title": "inventario",
  "PersonInventoryPanel.description": "Informaci\xF3n de inventario",
  "PersonInventoryPanel.items.subheader": "Lista de objetos asociados",
  "PersonInfoPanel.title": "Informaci\xF3n personal",
  "PersonContractPanel.title": "Contrato",
  "PersonContractPanel.description": "Informaci\xF3n del contrato",
  "PersonContactPanel.title": "Contactar",
  "PersonContactPanel.description": "\xBFC\xF3mo me comunico con esta persona?",
  "PersonBadgePanel.title": "Diverso",
  "PersonBadgePanel.description": "Informaci\xF3n diversa sobre la persona.",
  "AvatarPersonDrawer.help": "Ver m\xE1s informaci\xF3n sobre %{name}",
  "TopLevelOrganizationFilter.Empty": "No hay ninguna organizaci\xF3n asociada a los espacios, puedes agregar m\xE1s modificando un espacio y asoci\xE1ndolo a una organizaci\xF3n, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "OrganizationTabsFilter.tabs.topLevel": "Direcciones",
  "OrganizationTabsFilter.tabs.hierarchy": "Jerarqu\xEDa",
  "OrganizationTabsFilter.tabs.level1": "Servicios",
  "OrganizationFloorMapFilter.TooltipTitle.notSelected": "Seleccione %{organization} para colorear los espacios en el plano.",
  "OrganizationFloorMapFilter.TooltipTitle.selected": "Si anula la selecci\xF3n de %{organization} se eliminar\xE1n los colores del plan.",
  "OrganizationFloorMapFilter.tooltip.true": "Seleccione todos los tipos de objetos a continuaci\xF3n para colorearlos en el mapa",
  "OrganizationFloorMapFilter.tooltip.false": "Anule la selecci\xF3n de todas las organizaciones a continuaci\xF3n",
  "Level1OrganizationFilter.Empty": "No hay ninguna organizaci\xF3n asociada a los espacios, puedes agregar m\xE1s modificando un espacio y asoci\xE1ndolo a una organizaci\xF3n, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "HierarchyOrganizationFilter.Empty": "No hay ninguna organizaci\xF3n asociada a los espacios, puedes agregar m\xE1s modificando un espacio y asoci\xE1ndolo a una organizaci\xF3n, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "CompanyDashboard.dashboards.workplace": "Panel de escritorio",
  "CompanyDashboard.dashboards.area": "Panel de superficies",
  "ChangeCompanyMenu.ChangeCompany": "Ver otra empresa en una p\xE1gina nueva",
  "WorkplaceTypeDataQualityNotUsed.columns.name": "Nombre del tipo de estaci\xF3n de trabajo",
  "WorkplaceTypeDataQualityNotUsed.columns.shape": "Formulario",
  "workplaceTypeLayoutFilter.Empty": "No hay estaciones de trabajo en este momento en los espacios, puedes agregar m\xE1s modificando un espacio y agregando estaciones de trabajo, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "WorkplaceTypeInfo.help": "El n\xFAmero de estaciones de trabajo es %{count}",
  "CopyWorkplaceTypeToCart.help": "Copiar tipos de estaciones de trabajo al carrito",
  "WorkCanvas.Options.ZoomOnWorkplaceType.label": "Ampl\xEDe el tipo de estaci\xF3n de trabajo",
  "WorkCanvas.Options.ZoomOnWorkplaceType.help": "Acercar el tipo de estaci\xF3n de trabajo le permite ubicarlo en el \xE1rea de trabajo",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.enable": "Enumere los tipos de objetos",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.disable": "Cerrar la lista de tipos de objetos",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.enable": "Consulte la lista de tipos de objetos para este tipo de estaci\xF3n de trabajo.",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.disable": "Cerrar la lista de tipos de objetos para este tipo de estaci\xF3n de trabajo",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.open": "Opciones de despliegue",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.close": "Opciones de plegado",
  "WorkplaceTypeItemTypesDrawer.title": "Lista de tipos de objetos",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.help": "Agregue un tipo de objeto para poder componer el tipo de estaci\xF3n de trabajo",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.label": "Agregar un tipo de objeto",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.help": "Cancelar la adici\xF3n de un tipo de objeto en esta estaci\xF3n de trabajo",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.label": "Cancelar la adici\xF3n de un tipo de objeto",
  "WorkCanvas.Options.DeleteStructureShapeOption.help": "Eliminar por completo la forma de la estructura de poder, por ejemplo, volver a dibujarla por completo",
  "WorkCanvas.Options.DeleteStructureShapeOption.label": "Eliminar forma",
  "WorkCanvas.Options.AddStructurePointOption.label.enable": "Agregar una cumbre",
  "WorkCanvas.Options.AddStructurePointOption.label.disable": "Deja de agregar un v\xE9rtice",
  "WorkCanvas.Options.AddStructurePointOption.help.enable": "Agregar un v\xE9rtice permite volver a trabajar con mayor precisi\xF3n un formulario",
  "WorkCanvas.Options.AddStructurePointOption.help.disable": "Deja de crear cumbres",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloorButton.label": "Reserve una estaci\xF3n de trabajo en %{floorName}",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloor": "Reserve una estaci\xF3n de trabajo en %{floorName} para el per\xEDodo %{slotString}",
  "BookPersonBuildingWorkplace.availableWorkplaces": "%{freeWorkplaces} plazas disponibles",
  "BookPersonBuildingWorkplace.help": "%{bookedWorkplaces} reserva(s), %{freeWorkplaces} estaciones de trabajo disponibles en %{totalFloorWorkplacesCount}",
  "booking.snackbar.delete.workplace": "La reserva en la estaci\xF3n de trabajo %{workplaceName} ha sido cancelada para el per\xEDodo %{slot}",
  "booking.snackbar.delete.room": "La reserva en el espacio %{roomName} ha sido cancelada para el per\xEDodo %{slot}",
  "BookingWorkplaceTitle.booked": "Esta estaci\xF3n de trabajo ya est\xE1 reservada",
  "BookingWorkplaceTitle.userBooked": "Has reservado esta estaci\xF3n de trabajo",
  "BookingWorkplaceTitle.free": "Reserva esta estaci\xF3n de trabajo",
  "PlanningPersonAffectations.alerts.noAffectation.title": "No se puede reservar una estaci\xF3n de trabajo",
  "PlanningPersonAffectations.alerts.noAffectation.message": "No est\xE1s asociado a ning\xFAn territorio, por favor contacta a tu responsable de asignaci\xF3n para poder reservar un espacio de trabajo.",
  "WorkingLocationToggle.locations.OFFICE": "Escritorio",
  "WorkingLocationToggle.locations.REMOTE": "Teletrabajo",
  "PersonBookingListItem.workplaceBookedOnFloor": "Vea la estaci\xF3n de trabajo %{workplaceName} en el plano de planta %{floorName}",
  "PersonBookingList.noBooking": "Ning\xFAn colega estar\xE1 presente en la oficina en el mismo horario por el momento.",
  "PersonBookingList.bookings.one": "Un colega estar\xE1 presente en el mismo espacio.",
  "PersonBookingList.bookings.more": "%{count} colegas estar\xE1n presentes en el mismo espacio",
  "ParkingBookIcon.parking.booked": "Tu parking est\xE1 reservado",
  "ParkingBookIcon.parking.release.help": "Liberar reserva de estacionamiento",
  "ParkingBookIcon.parking.viewOnMap": "Ver parking reservado en el mapa",
  "ParkingBookIcon.parking.book.label": "Reserva de aparcamiento",
  "ParkingBookIcon.parking.book.help": "Reserve un estacionamiento que se asignar\xE1 autom\xE1ticamente al espacio",
  "HalfDayWorkingLocationToggle.am.label": "Ma\xF1ana",
  "HalfDayWorkingLocationToggle.am.help": "El horario de ma\xF1ana es de 8:00 a 13:30 horas.",
  "HalfDayWorkingLocationToggle.pm.label": "Tarde",
  "HalfDayWorkingLocationToggle.pm.help": "El horario de tarde es de 14:00 a 19:00 horas.",
  "DirectBuildingPlanningLabel.youAreAssigned": "Est\xE1s asignado al edificio %{buildingName}",
  "DimensionBuildingPlanningLabel.youAreAssigned": "Est\xE1s asignado a %{dimensionTypeName} %{dimensionName}",
  "BookedBuildingWorkplaceList.noWorkplaceBooked": "Sin estaci\xF3n de trabajo reservada",
  "BookedBuildingWorkplaceList.workplaceIsBooked": "Tu puesto de trabajo est\xE1 reservado",
  "BookedBuildingWorkplaceList.viewBookedWorkplaceOnMap": "Ver la estaci\xF3n de trabajo %{workplaceName} que est\xE1 reservada en el plan",
  "BookedBuildingWorkplaceList.freeWorkplaceBooking": "Liberar esta reserva",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.noFloor": "El tama\xF1o no est\xE1 en ning\xFAn piso. Es imposible reservarlo en este momento seg\xFAn el plano.",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.moreThanOneFloor": "El tama\xF1o est\xE1 en varios pisos imposible de reservar en este momento desde el plan.",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.drawer.title": "Reserve una estaci\xF3n de trabajo espec\xEDfica para el per\xEDodo %{slotString}",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.help": "Reserve una estaci\xF3n de trabajo espec\xEDfica en el plan para este espacio",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.label": "Reserve una estaci\xF3n de trabajo en %{dimensionName}",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.peopleCount": "Hay %{count} persona(s) con el perfil de seguridad %{name} asignado a las estaciones de trabajo",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.workplaceCount": "Hay %{count} estaciones de trabajo con al menos una persona con perfil de seguridad %{name}",
  "PersonSecurityProfileWorkplaceFilter.Empty": "Tus personas no tienen perfil de seguridad o no est\xE1n asignadas a estaciones de trabajo, no es posible colorear las estaciones de trabajo de acuerdo a los perfiles de seguridad de las personas",
  "PersonSecurityProfileWorkplaceFilter.title": "Los perfiles de seguridad de las personas asignadas a los puestos de trabajo",
  "PersonSecurityProfileMerged.title": "Lista de perfiles de seguridad agrupados por tipo de perfil",
  "PersonSecurityProfileMerged.empty": "Ning\xFAn perfil est\xE1 asociado a espacios o puestos de trabajo",
  "PersonSecurityProfileInRooms.title": "Los perfiles de seguridad de las personas asignadas a los espacios",
  "PersonSecurityProfileInRoomListItem.peopleCount": "Hay %{count} persona(s) con el perfil de seguridad %{name} asignado a los espacios",
  "PersonSecurityProfileInRoomListItem.roomsCount": "Hay %{count} espacio(s) con al menos una persona con perfil de seguridad %{name}",
  "ToggleAllOpenInfoState.true": "Cerrar todos los detalles e indicadores",
  "ToggleAllOpenInfoState.false": "Abrir todos los detalles e indicadores",
  "MapFiltersNodesToggleAll.help.true": "Seleccionar todo",
  "MapFiltersNodesToggleAll.help.false": "Deseleccionar todo",
  "MapFiltersNode.info.open": "Ver detalle e indicadores para %{label}",
  "MapFiltersNode.info.close": "Cerrar informaci\xF3n adicional",
  "MapFiltersCategory.CategoryHasChildrenSelected": "Se seleccionan elementos",
  "MapFilterNodeToggleAll.action.true": "Seleccionar todo",
  "MapFilterNodeToggleAll.action.false": "Deseleccionar todo",
  "MapFilterNodeIsAllSelected.help": "Se cargar\xE1 toda la selecci\xF3n a continuaci\xF3n, incluso si se crean nuevos objetos",
  "JupRoleToObjectTypeMatrix.views.help.true": "Ocultar vista de interfaz",
  "JupRoleToObjectTypeMatrix.views.help.false": "Mostrar vista de interfaz",
  "JupRoleToObjectTypeMatrix.objectTypes.help.checkbox": "Actualizar propiedad ( %{name} )",
  "GlobalOptions.CartCopyItemTypeOption.help": "Copiar tipos de art\xEDculos al carrito",
  "GlobalOptions.CartCopyWorkplaceTypeOption.help": "Copiar tipos de estaciones de trabajo al carrito",
  "GlobalOptions.CartCopyBuildingOption.help": "Copiar edificios al carrito",
  "CheckAllDefaultViews.shortcuts.title": "Atajos de configuraci\xF3n",
  "CheckAllDefaultViews.shortcuts.views.title": "Accesos directos para vistas de interfaz predeterminadas",
  "CheckAllDefaultViews.shortcuts.views.buttonsHelp": "Consulte esta vista para todo tipo de entidades",
  "CheckAllDefaultViews.shortcuts.objectTypes.title": "Accesos directos para tipos de entidad",
  "CheckAllDefaultViews.shortcuts.objectTypes.buttonsHelp": "Verifique esta regla para todo tipo de objetos",
  "RemoveItemColorsOption.label": "No colorear objetos",
  "RemoveItemColorsOption.help": "Colorea los objetos de blanco para que puedas enfocarte en otros elementos en el mapa",
  "ItemTypeOptions.help": "El n\xFAmero de objetos es %{count}",
  "ItemTypeMapFilter.TooltipTitle.notSelected": "Seleccione %{itemType} para ver los objetos en el mapa",
  "ItemTypeMapFilter.TooltipTitle.selected": "Al anular la selecci\xF3n %{itemType} se eliminar\xE1 el color asociado del plan",
  "ItemTypeMapFilter.tooltip.true": "Seleccione todos los tipos de objetos a continuaci\xF3n para mostrarlos en el mapa",
  "ItemTypeMapFilter.tooltip.false": "Anule la selecci\xF3n de todos los tipos de objetos a continuaci\xF3n",
  "ItemTypeMapFilter.NoNode": "No hay objetos en este momento en los espacios, puedes agregar m\xE1s modificando un espacio y agregando objetos al mismo, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "ItemTypeMapFilter.NoCategory": "No hay objetos en este momento en los espacios, puedes agregar m\xE1s modificando un espacio y agregando objetos al mismo, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "ItemTypeDataQualityNotUsed.columns.name": "Nombre del tipo de objeto",
  "ItemTypeDataQualityNotUsed.columns.shape": "Formulario",
  "ItemTypeDataQualityNotUsed.columns.workplaceTypeCount": "N\xFAmero de tipo de estaci\xF3n de trabajo",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.help": "Elija un plano de referencia para crear la forma con el fin de poder dibujar su tipo de objeto ubic\xE1ndose en un plano y teniendo la escala correcta",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.label": "Elija un plano de referencia para crear la forma",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.help": "Elija un plano de referencia para componer el tipo de estaci\xF3n de trabajo con tipos de objetos existentes ubic\xE1ndose en un plano y tener la escala adecuada y posicionar correctamente los tipos de objetos",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.label": "Elija un plano de referencia para componer la forma del tipo de estaci\xF3n de trabajo",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.help": "Elija un plano de referencia para crear la forma para poder dibujar la estructura ubic\xE1ndose en un plano y teniendo la escala adecuada",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.label": "Elija un plano de referencia para crear la estructura",
  "ItemTypeAvatarSingleView.copy": "Copiar puntos al portapapeles",
  "ItemTypeAvatarSingleView.debug.label": "Habilitar el modo avanzado para 3d",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.help": "Elimine completamente la forma del tipo de objeto para que pueda, por ejemplo, volver a dibujarla por completo o transformarla en un icono",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.label": "Eliminar forma",
  "CopyItemTypesToCart.help": "Copiar tipos de art\xEDculos al carrito",
  "PhysicalItemNotInsideWorkplaceRoom.alignRooms": "Cambiar espacios de objetos al de la estaci\xF3n de trabajo.",
  "AddPersonToItem.text": "Asociar una persona con este objeto",
  "AddPersonToItem.help": "Asocia una persona a este objeto, puedes agregar varias personas para el mismo objeto",
  "DimensionTypeDescription.NoDescription": "No hay descripci\xF3n para este tipo de capa de an\xE1lisis, puede agregar m\xE1s modific\xE1ndola",
  "dimensionTypes.room_ground_type.one": "Naturaleza del suelo",
  "dimensionTypes.room_ground_type.description": "Permite conocer la composici\xF3n del suelo en el espacio.",
  "dimensionTypes.room_usage.one": "Naturaleza de los espacios",
  "dimensionTypes.room_usage.description": "Permite identificar espacios seg\xFAn sus usos",
  "dimensionTypes.frequency.one": "frecuencia",
  "dimensionTypes.frequency.description": "Permite conocer la frecuencia de paso en el espacio.",
  "dimensionTypes.evacuation_zone.one": "seguridad",
  "dimensionTypes.evacuation_zone.description": "Gestionar zonas de seguridad y evacuaci\xF3n.",
  "dimensionTypes.referent.one": "Referencial",
  "dimensionTypes.referent.description": "Le permite saber qui\xE9n est\xE1 asignado al mantenimiento de este espacio.",
  "DimensionTypesByTab.action.true": "Seleccionar todo",
  "DimensionTypesByTab.action.false": "Deseleccionar todo",
  "DimensionTypesByTab.ListItemHasChildrenSelected": "Se seleccionan las dimensiones",
  "DimensionListItem.notSelected": "Seleccione %{dimension} para ver los espacios en el plano con el color asociado",
  "DimensionListItem.selected": "Anule la selecci\xF3n de %{dimension}",
  "DimensionInfo.roomsArea.help": "El \xE1rea para %{dimensionType} %{dimension} es %{value} m\xB2",
  "DimensionInfo.roomsCount.help": "Hay %{value} espacio(s) para %{dimensionType} %{dimension}",
  "DimensionInfo.peopleCount.help": "Hay %{value} persona(s) afectada(s) para %{dimensionType} %{dimension}",
  "DimensionInfo.totalPeopleCount.help": "Hay %{value} persona(s) afectada(s) en total para %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesCount.help": "Hay %{value} estaciones de trabajo para %{dimensionType} %{dimension}",
  "DimensionInfo.peopleRatio.help": "Hay %{value} m\xB2 por persona afectada para %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesRatio.help": "Hay %{value} m\xB2 por estaci\xF3n de trabajo para %{dimensionType} %{dimension}",
  "DimensionInfo.occupancyRate.help": "La tasa de ocupaci\xF3n es %{value} % para %{dimensionType} %{dimension}",
  "DimensionInfo.expansionRatio.help": "La tasa de expansi\xF3n es %{value} para %{dimensionType} %{dimension}",
  "DimensionInfo.freeWorkplacesCount.help": "Hay %{value} estaciones de trabajo %{value} para %{dimensionType} %{dimension}",
  "DimensionInfo.flexWorkplacesCount.help": "Hay %{value} estaciones de trabajo flexibles para %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesCount.help": "Hay %{value} estaciones de trabajo compartidas para %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesRatio.help": "La tarifa de escritorio compartido es %{value} para %{dimensionType} %{dimension}",
  "DimensionInfo.flexRatio.help": "La tarifa de las estaciones de trabajo flexibles",
  "DimensionInfo.transitWorkplacesCount.help": "Hay %{value} estaci\xF3n (es) de trabajo provisional para %{dimensionType} %{dimension}",
  "DimensionInfo.dimensionPeopleCount.help": "Hay %{value} persona(s) afectada(s) en %{dimensionType} %{dimension}",
  "DimensionInfo.seatsCount.help": "Hay %{value} asientos para %{dimensionType} %{dimension}",
  "DimensionInfo.seatsPeopleRatio.help": "La tasa de asientos es %{value} asientos disponibles por persona para %{dimensionType} %{dimension}",
  "DimensionInfo.carbonFootprint.help": "La huella de carbono es %{value} de CO2 emitido para %{dimensionType} %{dimension}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.peopleCount": "Hay %{count} personas con el centro de costos %{costCenterName}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.workplaceCount": "Hay %{count} estaciones de trabajo con al menos una persona con centro de costos %{costCenterName}",
  "PersonCostCenterWorkplaceFilter.Empty": "No existen centros de costos asociados a las personas",
  "NoDataOnBuildingInfo.noData": "Seleccione todos los pisos en las opciones del plan para tener datos, no debe haber ning\xFAn dato para los pisos que ha seleccionado",
  "CostCenterWorkplaceMapFilter.nodeInfo.workplacesCount": "Hay %{count} estaciones de trabajo con el centro de costos %{name}",
  "CostCenterMapFilterTabs.tabs.rooms": "Espacios",
  "CostCenterMapFilterTabs.tabs.workplaces": "Estaciones de trabajo",
  "CostCenterMapFilterTabs.tabs.people": "Gente",
  "CostCenterMapFilter.Empty": "Actualmente no hay centros de costos asociados a los espacios, puedes agregar m\xE1s modificando un espacio y asoci\xE1ndole un centro de costos, luego puedes controlar su visualizaci\xF3n desde esta secci\xF3n",
  "CostCenterWorkplaceMapFilter.Empty": "Actualmente no hay un centro de costos asociado con las estaciones de trabajo, puede agregar uno modificando una estaci\xF3n de trabajo y asociando un centro de costos con ella, luego puede controlar su visualizaci\xF3n desde esta secci\xF3n",
  "BuildingReports.items.sheets.physicals": "Objetos fisicos",
  "BuildingReports.items.sheets.virtuals": "Objetos virtuales",
  "BuildingReports.items.sheets.merged": "Fusi\xF3n",
  "BuildingInventory.floor": "piso",
  "BuildingInventory.quantity": "cantidad",
  "BuildingInventory.price": "Precio",
  "BuildingInventory.manufacturer": "Fabricante",
  "BuildingInventory.quantityTotal": "total",
  "BuildingInventory.title": "Creaci\xF3n de inventario %{building.name}",
  "BuildingInventory.buttons.viewPDF.help": "Descarga el archivo en PDF para que puedas descargarlo o compartirlo",
  "BuildingInventory.buttons.viewPDF.label": "Descarga la versi\xF3n PDF",
  "BuildingInventory.itemTypesFamilySectionTitle": "Categor\xEDas de inventario",
  "BuildingInventory.fileNamePrefix": "inventario",
  "BuildingLabel.scenario": "Este edificio es un escenario del edificio %{name}",
  "CopyBuildingToCart.help": "Copiar estructura de edificio",
  "BuildingClonePropertiesSelector.properties.clone.workplaces": "Copiar estaciones de trabajo",
  "BuildingClonePropertiesSelector.properties.clone.items": "Copiar objetos",
  "BuildingDistributionCost.floors.excel.tabs.floors": "Distribuci\xF3n de llaves por piso",
  "BuildingDistributionCost.floors.excel.tabs.building": "Llaves de distribuci\xF3n para el edificio",
  "BuildingDistributionCost.floors.excel.tabs.buildingDetailed": "Detalles del edificio por centro de costos",
  "BuildingDistributionCost.floors.excel.download.label": "Descarga el archivo excel con los desgloses",
  "BuildingDistributionCost.floors.excel.download.help": "Descargue el archivo excel para poder compartir y exportar las claves de distribuci\xF3n y \xE1reas calificadas por centro de costo y por piso, la exportaci\xF3n incluye la distribuci\xF3n por piso o por edificio de los centros de costo",
  "BuildingDistributionCost.floors.excel.headers.floors.floorName": "Nombre del piso",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterName": "Centro de coste",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterArea": "Superficie de los espacios, incluida la distribuci\xF3n del suelo.",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterRoomsArea": "\xC1rea de espacios del centro de costo",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterDistributedFloorRatio": "Relaci\xF3n de uso en el suelo",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterFloorDistributedArea": "Superficie total de los espacios a distribuir en planta para este centro de coste",
  "BuildingDistributionCost.floors.excel.headers.floors.floorArea": "Superficie total del piso, incluidas las distribuciones del piso",
  "BuildingDistributionCost.floors.excel.headers.floors.totalFloorDistributedArea": "Superficie a distribuir en el suelo",
  "BuildingDistributionCost.floors.excel.headers.floors.totalBuildingDistributedArea": "Superficie a distribuir en el edificio",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterName": "Centro de coste",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterArea": "\xC1rea total del centro de costo",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterBuildingRatio": "Ratio de uso del edificio",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterDistributedBuildingArea": "\xC1rea total de espacios de construcci\xF3n distribuidos",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterRoomsArea": "\xC1rea de espacios del centro de costo",
  "BuildingDistributionCost.floors.excel.headers.building.buildingArea": "\xC1rea total de espacios de construcci\xF3n",
  "BuildingDistributionCost.floors.excel.headers.building.buildingDistributedArea": "Superficie a distribuir en el edificio",
  "BuildingDistributionCost.floors.excel.headers.building.totalBuildingArea": "\xC1rea total del edificio",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.buildingName": "Edificio",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterName": "Centro de coste",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterArea": "\xC1rea del centro de costos",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterBuildingRatio": "Clave de distribuci\xF3n en el edificio.",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.distributedCostCenterArea": "Distribuci\xF3n del centro de costos %{costCenterName}",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterTotalArea": "Superficie total a refacturar",
  "BuildingDistributionCost.excel.tabs.distributionCost": "Claves de distribuci\xF3n",
  "BuildingDistributionCost.excel.tabs.distributionCostDetails": "Detalles",
  "BuildingDistributionCost.excel.download.label": "Descarga el archivo excel sin desgloses",
  "BuildingDistributionCost.excel.download.help": "Descarga el archivo excel para poder compartir y exportar las claves de distribuci\xF3n y \xE1reas calificadas por centro de costo",
  "BuildingDistributionCost.Title": "Distribuci\xF3n de claves y \xE1reas calificadas por centro de coste sin aver\xEDas",
  "BuildingDistributionCost.table.type": "Tipo",
  "BuildingDistributionCost.table.distributionKey": "Clave de distribuci\xF3n",
  "BuildingDistributionCost.table.costCenterDistributionKey": "Clave de asignaci\xF3n para el centro de coste",
  "BuildingDistributionCost.table.workplacesCount": "Cantidad de estaciones de trabajo",
  "BuildingDistributionCost.table.workplaceTotalCount": "N\xFAmero total de estaciones de trabajo",
  "BuildingFloorSelection.title": "Los pisos para duplicar en tu escenario",
  "BuildingFloorSelection.all.select": "Seleccionar todos los pisos",
  "BuildingFloorSelection.all.unselect": "Deseleccionar todos los pisos",
  "BuildingCloneFloorSelection.title": "Los pisos para duplicar en tu escenario",
  "BuildingCloneFloorSelection.all.select": "Seleccionar todos los pisos",
  "BuildingCloneFloorSelection.all.unselect": "Deseleccionar todos los pisos",
  "BuildingClone.noClone": "A\xFAn no se ha creado ning\xFAn escenario, puedes crear tu primer escenario para este edificio",
  "BuildingClone.buttons.CreateClone.label": "Crea un escenario",
  "BuildingClone.buttons.CreateClone.help": "El escenario duplicar\xE1 el edificio con las propiedades marcadas.",
  "BuildingClone.accordion.title": "Crea un nuevo escenario",
  "BuildingClone.properties.clone.people": "Asignaciones duplicadas",
  "BuildingClone.properties.clone.workplaces": "Estaciones de trabajo duplicadas",
  "BuildingClone.properties.clone.items": "Objetos duplicados",
  "BuildingClone.properties.clone.dimensions": "Asociar capas de an\xE1lisis y asignaci\xF3n con espacios",
  "BuildingClone.properties.clone.organization": "Organizaciones asociadas con espacios",
  "BuildingDashboard.dashboards.workplace": "Panel de escritorio",
  "BuildingDashboard.dashboards.area": "Panel de superficies",
  "CampusBuildingsAccordion.buildingCount": "El n\xFAmero de edificios",
  "CalculatedPropertiesAccordions.mesures": "Medidas",
  "CalculatedPropertiesAccordions.kpi": "Indicadores",
  "DimensionMapFilter.TooltipTitle.notSelected": "Seleccione %{dimension} para ver los espacios en el plano con el color asociado",
  "DimensionMapFilter.TooltipTitle.selected": "Al anular la selecci\xF3n de %{dimension} se eliminar\xE1 el color asociado del plano",
  "DimensionMapFilter.tooltip.true": "Seleccione todos los filtros a continuaci\xF3n para colorearlos en el mapa",
  "DimensionMapFilter.tooltip.false": "Anule la selecci\xF3n de todos los filtros a continuaci\xF3n",
  "DimensionMapFilter.NoNode": "No hay capas de an\xE1lisis en este momento, puede agregar m\xE1s editando un espacio y agregando capas de an\xE1lisis.",
  "DimensionMapFilter.NoCategory": "No hay capas de an\xE1lisis disponibles, primero debe asociar algunas a los espacios",
  "SelectDimensionTypeNavigationLayoutIcon.select": "Seleccione este tipo de capa para la navegaci\xF3n",
  "SelectDimensionTypeNavigationLayoutIcon.unselect": "Eliminar navegaci\xF3n por capa de an\xE1lisis y volver a navegaci\xF3n por espacios",
  "SelectDimensionTypeNavigationLayoutIcon.help": "La navegaci\xF3n por capa de an\xE1lisis le permite hacer clic en un espacio, seleccionar la capa correspondiente y ver las personas asignadas a esta capa o las estaciones de trabajo y objetos asociados con esta capa a trav\xE9s de los espacios.",
  "DimensionTypeNavigationWarning.message": "Est\xE1s navegando por %{name} , los espacios se agrupar\xE1n durante la selecci\xF3n. Haga clic para cancelar y volver a la navegaci\xF3n espacial.",
  "RoomCardSelectDimensions.needSave": "Guarde o cancele sus cambios antes de poder modificar las capas de an\xE1lisis de este espacio",
  "AssignPersonToWorkplaceCheckListDialogTitle.title": "Ha asignado %{personName} a la estaci\xF3n de trabajo %{workplaceName}",
  "AssignPersonToRoomCheckListDialogTitle.title": "Asign\xF3 %{personName} al espacio %{roomName}",
  "WorkplaceFullName.noName": "Estaci\xF3n de trabajo sin nombre",
  "RoomFullName.noName": "espacio sin nombre",
  "AssignPersonCheckListWorkplaceTransit.title": "La estaci\xF3n de trabajo %{workplaceName} es una estaci\xF3n de trabajo temporal",
  "AssignPersonCheckListWorkplaceTransit.RemoveIsTransit": "Eliminar el tipo &quot;est\xE1 pasando&quot; de la estaci\xF3n de trabajo",
  "AssignPersonCheckListWorkplaceAffectations.title": "Esta persona ya est\xE1 asignada en otras estaciones de trabajo, \xBFdesea eliminar las siguientes asignaciones para %{personFullname} ?",
  "AssignPersonCheckListRoomAffectations.title": "Esta persona ya est\xE1 directamente asignada a otros espacios, \xBFdesea eliminar las siguientes asignaciones para %{personFullname} ?",
  "AssignPersonCheckListDialogApplyButton.help": "Eliminar las asignaciones seleccionadas que pueden coincidir con las asignaciones anteriores de la persona",
  "AssignPersonCheckListDialogApplyButton.label": "Eliminar tareas seleccionadas",
  "AssignPersonCheckListDialog.actions.close.label": "cerca",
  "AssignPersonCheckListDialog.actions.close.help": "Cierra y no elimines ninguna otra tarea",
  "AssignPersonCheckListBuildingAffectations.title": "Esta persona ya est\xE1 directamente asignada en otros edificios, \xBFdesea eliminar las siguientes asignaciones para %{personFullname} ?",
  "WorkplaceVirtualInventory.title": "Inventario de la estaci\xF3n de trabajo virtual",
  "WorkplacePhysicalInventory.title": "Inventario f\xEDsico de la estaci\xF3n de trabajo",
  "WorkplaceTypeSeatsCount.label": "Numero de asientos",
  "WorkplaceTypeSeatsCount.help": "El n\xFAmero de asientos contados para este tipo de estaci\xF3n de trabajo",
  "WorkplaceTypeCarbonFootprintCount.label": "huella de carbono",
  "WorkplaceTypeCarbonFootprintCount.help": "La huella de carbono es la cantidad de gases de efecto invernadero que emiten los objetos de mobiliario de este tipo de puestos de trabajo",
  "DeleteWorkplace.help": "Eliminar estaci\xF3n de trabajo: [ %{name} ], las asignaciones tambi\xE9n se eliminar\xE1n",
  "AddPersonToWorkplace.text": "Asignar una persona",
  "AddPersonToWorkplace.help": "Agregar asignaci\xF3n a esta estaci\xF3n de trabajo, puede agregar m\xFAltiples asignaciones para la misma estaci\xF3n de trabajo",
  "MouvementMatrixImport.errors.noSheet": "No se pudo encontrar la hoja de Excel con el nombre %{name} [ %{objectTypeName} ]",
  "RoomTypeGroupMapFilter.Empty": "No hay ning\xFAn grupo de tipo de espacio asociado con espacios a trav\xE9s de tipos de espacio, puede agregar m\xE1s editando un grupo de tipo de espacio y agreg\xE1ndole un tipo de espacio asociado, luego puede controlar su visualizaci\xF3n desde esta secci\xF3n",
  "RoomTypeGroupLabel.exclude.tooltip": "El grupo de tipolog\xEDa de espacio excluye los tipos de espacio asociados.",
  "RoomTypeGroupHelpTitle.exclude": "La agrupaci\xF3n de tipos de espacio %{name} es de tipo de exclusi\xF3n. Re\xFAne todos los espacios a excepci\xF3n de las siguientes tipolog\xEDas de espacios:",
  "RoomTypeGroupHelpTitle.include": "La agrupaci\xF3n de tipos de espacio %{name} re\xFAne las siguientes tipolog\xEDas de espacio:",
  "RoomTypeGroupToRoomTypeLabel.exclude.tooltip": "Se excluye la tipolog\xEDa del espacio.",
  "RoomMapFilter.Empty": "No hay ning\xFAn tipo de espacio asociado a los espacios, puede agregar m\xE1s modificando un espacio y agregando un tipo asociado, luego puede controlar su visualizaci\xF3n desde esta secci\xF3n",
  "LayoutFiltersTabZone.collapse.help": "El men\xFA est\xE1 cerrado, puede abrirlo haciendo clic en el primer icono para abrirlo y ver los detalles de los elementos del plan",
  "LayoutFiltersTabOpenToggleIcon.open.true": "Cierre el men\xFA del mapa para optimizar el espacio de visualizaci\xF3n del mapa.",
  "LayoutFiltersTabOpenToggleIcon.open.false": "Abra el men\xFA del plan para ver informaci\xF3n detallada relacionada con el plan.",
  "CompanyTypeLabel.notClassified": "Plataforma sin clasificar",
  "BuildingMenuItem.menu.scenario": "Escenarios ( %{count} )",
  "SearchMenuItem.icon.tooltip": "Buscar",
  "RemoveFromCartIconButton.help": "Quitar de la cesta",
  "CopyCartContentIntoTenant.buttons.single.paste.help": "Importar a esta empresa",
  "IndexContextMenuItem.navigation": "Navegaci\xF3n",
  "GlobalSearchIncludeScenarios.label": "Incluir escenarios en la b\xFAsqueda",
  "GlobalSearch.Input.placeholder": "Buscar",
  "GlobalSearch.Start": "Puede buscar, por ejemplo, personas, espacios, estaciones de trabajo, objetos u otras entidades, la b\xFAsqueda comenzar\xE1 desde el segundo car\xE1cter",
  "GlobalSearch.NoResult": "No se encontraron resultados para tu b\xFAsqueda",
  "GlobalSearch.close.help": "Borrar b\xFAsqueda",
  "models.PartnerExportMappingConfigurationToFloor.singular": "Etapa incluida en la configuraci\xF3n de la transformaci\xF3n de las exportaciones de socios",
  "models.PartnerExportMappingConfigurationToFloor.plural": "Etapas incluidas en la configuraci\xF3n de transformaci\xF3n de exportaciones de socios",
  "models.PartnerExportMappingConfigurationToFloor.determinant.defined": "la etapa incluida en la configuraci\xF3n de la transformaci\xF3n de las exportaciones de socios",
  "models.PartnerExportMappingConfigurationToFloor.determinant.undefined": "una etapa incluida en la configuraci\xF3n de la transformaci\xF3n de las exportaciones de los socios",
  "models.PartnerExportMappingConfigurationToFloor.determinants.defined": "las etapas incluidas en las configuraciones de transformaciones exportadoras de socios",
  "models.PartnerExportMappingConfigurationToFloor.determinants.undefined": "Etapas incluidas en las configuraciones de transformaciones exportadoras de socios.",
  "models.PartnerExportMappingToRoomType.singular": "Transformaci\xF3n de las exportaciones de socios para tipos de espacio.",
  "models.PartnerExportMappingToRoomType.plural": "Transformaciones de exportaciones de socios para tipos de espacio.",
  "models.PartnerExportMappingToRoomType.determinant.defined": "la transformaci\xF3n de las exportaciones de socios para los tipos de espacio",
  "models.PartnerExportMappingToRoomType.determinant.undefined": "una transformaci\xF3n de las exportaciones de socios para tipos de espacios",
  "models.PartnerExportMappingToRoomType.determinants.defined": "transformaciones de las exportaciones de socios para tipos de espacio",
  "models.PartnerExportMappingToRoomType.determinants.undefined": "transformaciones de las exportaciones de socios para tipos de espacio",
  "models.PartnerExportMappingConfiguration.singular": "Configurar la transformaci\xF3n de exportaciones de socios",
  "models.PartnerExportMappingConfiguration.plural": "Configuraciones de transformaciones de exportaci\xF3n de socios",
  "models.PartnerExportMappingConfiguration.determinant.defined": "configurando la transformaci\xF3n de las exportaciones de los socios",
  "models.PartnerExportMappingConfiguration.determinant.undefined": "una configuraci\xF3n de la transformaci\xF3n de las exportaciones de socios",
  "models.PartnerExportMappingConfiguration.determinants.defined": "Configuraciones de transformaciones de exportaci\xF3n de socios.",
  "models.PartnerExportMappingConfiguration.determinants.undefined": "Configuraciones de transformaciones de exportaci\xF3n de socios.",
  "models.PartnerExportMapping.singular": "Transformaci\xF3n de las exportaciones de socios",
  "models.PartnerExportMapping.plural": "Transformaciones de las exportaciones de socios",
  "models.PartnerExportMapping.determinant.defined": "la transformaci\xF3n de las exportaciones de socios",
  "models.PartnerExportMapping.determinant.undefined": "una transformaci\xF3n de las exportaciones de los socios",
  "models.PartnerExportMapping.determinants.defined": "transformaciones de las exportaciones de socios",
  "models.PartnerExportMapping.determinants.undefined": "transformaciones de las exportaciones de socios",
  "models.WorkplaceTypeItemType.singular": "tipo de objeto en tipo de estaci\xF3n de trabajo",
  "models.WorkplaceTypeItemType.plural": "tipos de objeto en tipo de estaci\xF3n de trabajo",
  "models.WorkplaceTypeItemType.determinant.defined": "el tipo de objeto en el tipo de estaci\xF3n de trabajo",
  "models.WorkplaceTypeItemType.determinant.undefined": "un tipo de objeto en un tipo de estaci\xF3n de trabajo",
  "models.WorkplaceTypeItemType.determinants.defined": "tipos de objetos en tipos de estaciones de trabajo",
  "models.WorkplaceTypeItemType.determinants.undefined": "tipos de objetos en tipos de estaciones de trabajo",
  "models.WorkplaceTypeItemType.properties.id.label": "Identificador de tipo de objeto en el tipo de estaci\xF3n de trabajo",
  "models.WorkplaceTypeItemType.properties.zIndex.label": "\xCDndice de altura",
  "models.WorkplaceTypeItemType.properties.zIndex.description": "El \xEDndice de altura le permite definir el orden de visualizaci\xF3n de los tipos de objetos, cuanto mayor sea el \xEDndice, m\xE1s estar\xE1 el objeto por encima de los dem\xE1s.",
  "models.WorkplaceTypeItemType.properties.physicalInventory.label": "Inventario f\xEDsico",
  "models.WorkplaceTypeItemType.properties.physicalInventory.description": "Si se marca esta opci\xF3n para cada estaci\xF3n de trabajo se crear\xE1 un objeto f\xEDsico en Surfy, este objeto puede tener una referencia \xFAnica, en todos los casos el inventario del edificio estar\xE1 actualizado",
  "models.WorkplaceTypeItemType.properties.seatsCount.label": "Numero de asientos",
  "models.WorkplaceTypeItemType.properties.seatsCount.description": "Le permite definir el n\xFAmero de asientos disponibles en el tipo de estaci\xF3n de trabajo para este tipo de objeto",
  "models.WorkplaceType.singular": "tipo de estaci\xF3n de trabajo",
  "models.WorkplaceType.plural": "tipos de estaciones de trabajo",
  "models.WorkplaceType.determinant.defined": "el tipo de estaci\xF3n de trabajo",
  "models.WorkplaceType.determinant.undefined": "un tipo de estaci\xF3n de trabajo",
  "models.WorkplaceType.determinants.defined": "tipos de estaciones de trabajo",
  "models.WorkplaceType.determinants.undefined": "tipos de estaciones de trabajo",
  "models.WorkplaceType.properties.id.label": "Identificador de tipolog\xEDa de estaci\xF3n de trabajo",
  "models.WorkplaceType.properties.id.description": "???",
  "models.WorkplaceType.properties.name.label": "Nombre del tipo de estaci\xF3n de trabajo",
  "models.WorkplaceType.properties.name.description": "???",
  "models.WorkplaceType.views.editor.help": "Edite formas y ubicaciones de tipos de objetos para el tipo de estaci\xF3n de trabajo %{name}",
  "models.WorkplaceType.views.editor.label": "Editar formas",
  "models.WorkplaceType.views.avatar.help": "Ver el formulario del tipo de estaci\xF3n de trabajo %{name}",
  "models.WorkplaceType.views.avatar.label": "Ver la forma",
  "models.WorkplaceType.views.dq-not-used.label": "No utilizado",
  "models.WorkplaceType.views.dq-not-used.help": "Enumere todos los tipos de estaciones de trabajo no utilizadas a trav\xE9s de estaciones de trabajo",
  "models.WorkplaceAffectation.singular": "Asignaci\xF3n de puestos de trabajo",
  "models.WorkplaceAffectation.plural": "Asignaciones de estaciones de trabajo",
  "models.WorkplaceAffectation.description": "Le permite asignar una estaci\xF3n de trabajo fija a una persona.",
  "models.WorkplaceAffectation.determinant.defined": "Asignaci\xF3n de trabajo",
  "models.WorkplaceAffectation.determinant.undefined": "Asignaci\xF3n de trabajo",
  "models.WorkplaceAffectation.determinants.defined": "asignaciones de trabajo",
  "models.WorkplaceAffectation.determinants.undefined": "asignaciones de trabajo",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.help": "Importar matrices de transferencia de estaciones de trabajo",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.label": "Importar matriz de transferencia",
  "models.Workplace.singular": "puesto de trabajo",
  "models.Workplace.plural": "estaciones de trabajo",
  "models.Workplace.determinant.defined": "la estacion de trabajo",
  "models.Workplace.determinant.undefined": "un puesto de trabajo",
  "models.Workplace.determinants.defined": "estaciones de trabajo",
  "models.Workplace.determinants.undefined": "estaciones de trabajo",
  "models.Workplace.views.assign-current-user.label": "Ocupar la estaci\xF3n de trabajo",
  "models.Workplace.views.assign-current-user.help": "Ocupar estaci\xF3n de trabajo %{name}",
  "models.Workplace.properties.id.label": "Identificador de estaci\xF3n de trabajo",
  "models.Workplace.properties.id.description": "???",
  "models.Workplace.properties.color.label": "color",
  "models.Workplace.properties.color.description": "El color que tomar\xE1 el tipo de estaci\xF3n de trabajo en el plano",
  "models.Workplace.properties.name.label": "Nombre de la estaci\xF3n de trabajo",
  "models.Workplace.properties.name.description": "El nombre de la estaci\xF3n de trabajo se utiliza para identificarla de forma m\xE1s sencilla.",
  "models.Workplace.properties.isFlex.label": "\xBFEs flexible?",
  "models.Workplace.properties.isFlex.description": "Si esta estaci\xF3n se usa en modo Flex",
  "models.Workplace.properties.isShared.label": "Est\xE1 compartido ?",
  "models.Workplace.properties.isShared.description": "Si este puesto de trabajo es compartido por varias personas, este campo autom\xE1tico se valida tan pronto como haya al menos 2 asignaciones en el puesto de trabajo.",
  "models.Workplace.properties.isTransit.label": "Est\xE1 pasando?",
  "models.Workplace.properties.isTransit.description": "Si esta posici\xF3n es transitoria, esta posici\xF3n ser\xE1 excluida de las estaciones de trabajo libres sin ser reservable en flex, una posici\xF3n transitoria permite tener una estaci\xF3n de trabajo disponible para todos aquellos que deseen utilizarla sin estar incluidos en un sistema de reserva.",
  "models.Workplace.properties.isBookable.label": "\xBFSe puede reservar?",
  "models.Workplace.properties.isBookable.description": "Si esta estaci\xF3n de trabajo se puede reservar en un sistema de reservas",
  "models.Workplace.properties.position.label": "posici\xF3n",
  "models.Workplace.properties.position.description": "La posici\xF3n de la estaci\xF3n de trabajo en el espacio.",
  "models.Workplace.properties.rotation.label": "rotaci\xF3n",
  "models.Workplace.properties.rotation.description": "El \xE1ngulo de rotaci\xF3n de la estaci\xF3n de trabajo en el espacio.",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.label": "Tasa de asignaci\xF3n promedio",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.description": "Tasa media de asignaci\xF3n del puesto de trabajo seg\xFAn la asignaci\xF3n de los d\xEDas de presencia de las personas",
  "models.Workplace.properties.workplaceAffectationsCount.label": "Numero de asignaciones",
  "models.Workplace.properties.workplaceAffectationsCount.description": "N\xFAmero de asignaciones en la estaci\xF3n de trabajo",
  "models.Workplace.properties.comment.label": "Comentario",
  "models.Workplace.properties.comment.description": "Informaci\xF3n adicional sobre la estaci\xF3n de trabajo.",
  "models.Workplace.properties.room.label": "Espacio para estaciones de trabajo",
  "models.UserRegistrationTenantRuleToJupRole.singular": "Asociaci\xF3n de regla de autenticaci\xF3n a rol",
  "models.UserRegistrationTenantRuleToJupRole.plural": "Asociaciones de regla a rol de autenticaci\xF3n",
  "models.UserRegistrationTenantRuleToJupRole.determinant.defined": "asociaci\xF3n de la regla de autenticaci\xF3n al rol",
  "models.UserRegistrationTenantRuleToJupRole.determinant.undefined": "una asociaci\xF3n de regla a rol de autenticaci\xF3n",
  "models.UserRegistrationTenantRuleToJupRole.determinants.defined": "regla de autenticaci\xF3n para asociaciones de roles",
  "models.UserRegistrationTenantRuleToJupRole.determinants.undefined": "asociaciones de reglas de autenticaci\xF3n de rol a rol",
  "models.UserRegistrationTenantRuleToContentRole.singular": "Regla de autenticaci\xF3n para la asociaci\xF3n de roles de contenido",
  "models.UserRegistrationTenantRuleToContentRole.plural": "Regla de autenticaci\xF3n para asociaciones de roles de contenido",
  "models.UserRegistrationTenantRuleToContentRole.determinant.defined": "Regla de autenticaci\xF3n para la asociaci\xF3n de roles de contenido",
  "models.UserRegistrationTenantRuleToContentRole.determinant.undefined": "una regla de autenticaci\xF3n para la asociaci\xF3n de roles de contenido",
  "models.UserRegistrationTenantRuleToContentRole.determinants.defined": "regla de autenticaci\xF3n para asociaciones de roles de contenido",
  "models.UserRegistrationTenantRuleToContentRole.determinants.undefined": "asociaciones de reglas de funci\xF3n a autenticaci\xF3n de contenido",
  "models.UserRegistrationTenantRule.singular": "Regla de autenticaci\xF3n",
  "models.UserRegistrationTenantRule.plural": "Reglas de autenticaci\xF3n",
  "models.UserRegistrationTenantRule.determinant.defined": "la regla de autenticaci\xF3n",
  "models.UserRegistrationTenantRule.determinant.undefined": "una regla de autenticaci\xF3n",
  "models.UserRegistrationTenantRule.determinants.defined": "reglas de autenticaci\xF3n",
  "models.UserRegistrationTenantRule.determinants.undefined": "reglas de autenticaci\xF3n",
  "models.UserRegistrationTenantRule.properties.domains.label": "\xC1reas",
  "models.UserRegistrationTenantRule.properties.domains.description": "Separe los dominios con espacios e incluya el signo de arroba",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.label": "Asociar roles autom\xE1ticamente",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.description": "Asociar autom\xE1ticamente roles y roles de contenido con usuarios que cumplan esta regla",
  "models.UserCompany.singular": "usuario de negocios",
  "models.UserCompany.plural": "usuarios de negocios",
  "models.UserCompany.description": "Los usuarios corporativos tienen acceso a la plataforma Surfy de su empresa",
  "models.UserCompany.determinant.defined": "el usuario de negocios",
  "models.UserCompany.determinant.undefined": "un usuario de negocios",
  "models.UserCompany.determinants.defined": "usuarios de negocios",
  "models.UserCompany.determinants.undefined": "usuarios empresariales",
  "models.UserCompany.properties.id.label": "ID de usuario de la empresa",
  "models.UserCompany.properties.buildingOwners.label": "Edificios propios",
  "models.UserCompany.properties.buildingOwners.description": "Edificios propiedad del usuario",
  "models.User.singular": "usuario",
  "models.User.plural": "usuarios",
  "models.User.determinant.defined": "usuario",
  "models.User.determinant.undefined": "un usuario",
  "models.User.determinants.defined": "los usuarios",
  "models.User.determinants.undefined": "usuarios",
  "models.User.properties.id.label": "ID de usuario",
  "models.User.properties.id.description": "???",
  "models.User.properties.firstname.label": "primer nombre",
  "models.User.properties.firstname.description": "El nombre del usuario",
  "models.User.properties.lastname.label": "Apellido",
  "models.User.properties.lastname.description": "El apellido del usuario",
  "models.User.properties.email.label": "e-mail",
  "models.User.properties.email.description": "El correo electr\xF3nico utilizado por el usuario para la correspondencia o para la autenticaci\xF3n.",
  "models.Structure.singular": "estructura",
  "models.Structure.plural": "estructuras",
  "models.Structure.determinant.defined": "la estructura",
  "models.Structure.determinant.undefined": "una estructura",
  "models.Structure.determinants.defined": "las estructuras",
  "models.Structure.determinants.undefined": "estructuras",
  "models.Structure.properties.nom.label": "Nombre de la estructura",
  "models.Structure.properties.nom.description": "Para encontrar y reutilizar la estructura f\xE1cilmente.",
  "models.Structure.properties.transform.label": "Transformaci\xF3n",
  "models.Structure.properties.transform.description": "Transformaci\xF3n de la estructura para calibrarla en un mapa",
  "models.Structure.views.editor.label": "Editar forma",
  "models.Structure.views.editor.help": "Modificar la forma de la estructura.",
  "models.Structure.views.gmap-calibrate.label": "Calibrar la estructura en un mapa",
  "models.Structure.views.gmap-calibrate.help": "Calibrar la estructura en un mapa para asociar coordenadas geogr\xE1ficas",
  "models.RoomTypeGroupToRoomType.singular": "asociaci\xF3n del grupo de tipolog\xEDa espacial con tipolog\xEDa espacial",
  "models.RoomTypeGroupToRoomType.plural": "asociaciones grupos de tipolog\xEDas espaciales a tipolog\xEDas espaciales",
  "models.RoomTypeGroupToRoomType.determinant.defined": "la asociaci\xF3n del grupo de tipolog\xEDa espacial con la tipolog\xEDa espacial",
  "models.RoomTypeGroupToRoomType.determinant.undefined": "una asociaci\xF3n grupal de tipolog\xEDa espacial a tipolog\xEDa espacial",
  "models.RoomTypeGroupToRoomType.determinants.defined": "asociaciones grupales de tipolog\xEDas espaciales a tipolog\xEDas espaciales",
  "models.RoomTypeGroupToRoomType.determinants.undefined": "asociaciones grupales de tipolog\xEDas espaciales a tipolog\xEDas espaciales",
  "models.RoomTypeGroupFloor.singular": "grupo de tipolog\xEDa de espacios",
  "models.RoomTypeGroupFloor.plural": "grupos de tipolog\xEDas de espacios",
  "models.RoomTypeGroupFloor.determinant.defined": "el grupo de tipolog\xEDa de espacio de piso",
  "models.RoomTypeGroupFloor.determinant.undefined": "un grupo de tipolog\xEDas de espacios",
  "models.RoomTypeGroupFloor.determinants.defined": "el grupo de tipolog\xEDa de espacio de piso",
  "models.RoomTypeGroupFloor.determinants.undefined": "grupos de tipolog\xEDas de espacios",
  "models.RoomTypeGroupBuilding.singular": "tipolog\xEDa espacial grupo de edificios",
  "models.RoomTypeGroupBuilding.plural": "grupos de tipolog\xEDas de espacios de construcci\xF3n",
  "models.RoomTypeGroupBuilding.determinant.defined": "el grupo de tipolog\xEDa de espacios de construcci\xF3n",
  "models.RoomTypeGroupBuilding.determinant.undefined": "un grupo de tipolog\xEDas de espacios de construcci\xF3n",
  "models.RoomTypeGroupBuilding.determinants.defined": "el grupo de tipolog\xEDa de espacios de construcci\xF3n",
  "models.RoomTypeGroupBuilding.determinants.undefined": "grupos de tipolog\xEDas de espacios de construcci\xF3n",
  "models.RoomTypeGroup.singular": "grupo de tipolog\xEDa espacial",
  "models.RoomTypeGroup.plural": "grupos de tipolog\xEDa espacial",
  "models.RoomTypeGroup.determinant.defined": "el grupo de tipolog\xEDa espacial",
  "models.RoomTypeGroup.determinant.undefined": "un grupo de tipolog\xEDa espacial",
  "models.RoomTypeGroup.determinants.defined": "grupos de tipolog\xEDa espacial",
  "models.RoomTypeGroup.determinants.undefined": "grupos de tipolog\xEDas espaciales",
  "models.RoomTypeGroup.properties.id.label": "Identificador de grupo de tipolog\xEDa espacial",
  "models.RoomTypeGroup.properties.name.label": "Nombre del grupo de tipolog\xEDa espacial",
  "models.RoomTypeGroup.properties.code.label": "c\xF3digo",
  "models.RoomTypeGroup.properties.color.label": "color",
  "models.RoomTypeGroup.properties.exclude.label": "Excluir",
  "models.RoomTypeGroup.properties.exclude.description": "Excluir tipolog\xEDas de espacio de este grupo",
  "models.RoomTypeFloor.singular": "tipolog\xEDa de espacio de piso",
  "models.RoomTypeFloor.plural": "tipolog\xEDas de espacio de piso",
  "models.RoomTypeFloor.determinant.defined": "la tipolog\xEDa del espacio del suelo",
  "models.RoomTypeFloor.determinant.undefined": "una tipolog\xEDa de espacio",
  "models.RoomTypeFloor.determinants.defined": "tipolog\xEDas de espacio de piso",
  "models.RoomTypeFloor.determinants.undefined": "tipolog\xEDas de espacio de piso",
  "models.RoomTypeBuilding.singular": "tipolog\xEDa de espacios de construcci\xF3n",
  "models.RoomTypeBuilding.plural": "tipolog\xEDas de espacios de construcci\xF3n",
  "models.RoomTypeBuilding.determinant.defined": "la tipolog\xEDa del espacio de construcci\xF3n",
  "models.RoomTypeBuilding.determinant.undefined": "una tipolog\xEDa del espacio de construcci\xF3n",
  "models.RoomTypeBuilding.determinants.defined": "tipolog\xEDas de espacios de construcci\xF3n",
  "models.RoomTypeBuilding.determinants.undefined": "tipolog\xEDas de espacios de construcci\xF3n",
  "models.RoomType.singular": "tipolog\xEDa espacial",
  "models.RoomType.plural": "tipolog\xEDas espaciales",
  "models.RoomType.determinant.defined": "tipolog\xEDa de espacio",
  "models.RoomType.determinant.undefined": "una tipolog\xEDa del espacio",
  "models.RoomType.determinants.defined": "tipolog\xEDas espaciales",
  "models.RoomType.determinants.undefined": "tipolog\xEDas de espacio",
  "models.RoomType.properties.id.label": "Identificador de tipolog\xEDa de espacio",
  "models.RoomType.properties.name.label": "Nombre del tipo de espacio",
  "models.RoomType.properties.color.label": "Color 2d",
  "models.RoomType.properties.color.description": "El color del tipo de espacio permite diferenciar cada tipo en el plano 2d",
  "models.RoomType.properties.color3d.label": "Color 3d",
  "models.RoomType.properties.color3d.description": "Permite administrar el color del tipo de espacio en 3d, esta opci\xF3n solo es aplicable a la visi\xF3n 3d del piso",
  "models.RoomType.properties.displayWallsOn3d.label": "Mostrar paredes",
  "models.RoomType.properties.displayWallsOn3d.description": "Le permite mostrar o no las paredes del espacio en el plano de planta 3d, las paredes no mostradas est\xE1n punteadas en 2d, esto le permite tener una vista m\xE1s agradable, especialmente para espacios abiertos",
  "models.RoomType.properties.icon.label": "Icono",
  "models.RoomType.properties.icon.description": "El icono por tipo de espacio permite visualizar para este tipo de espacio un icono en planos 2d y 3d en lugar de la informaci\xF3n cl\xE1sica sobre el plano, asociado al color de fondo esto permite hacer la lectura m\xE1s agradable de la plan",
  "models.RoomType.properties.cadence.label": "Cadencia",
  "models.RoomType.properties.cadence.description": "La tarifa es un valor num\xE9rico que se utiliza para indicar la dificultad de limpieza de la tipolog\xEDa del espacio. Es igual al n\xFAmero de m\xB2 que se pueden tratar en una hora en esta tipolog\xEDa (circulaci\xF3n, laboratorio, etc.)",
  "models.RoomType.properties.isBookable.label": "\xBFSe puede reservar?",
  "models.RoomType.properties.isBookable.description": "Marque esta casilla si se puede reservar este tipo de espacio",
  "models.RoomPointSegmentType.singular": "Tipo de segmento",
  "models.RoomPointSegmentType.plural": "Tipos de segmento",
  "models.RoomPointSegmentType.determinant.defined": "el tipo de segmento",
  "models.RoomPointSegmentType.determinant.undefined": "un tipo de segmento",
  "models.RoomPointSegmentType.determinants.defined": "tipos de segmento",
  "models.RoomPointSegmentType.determinants.undefined": "tipos de segmento",
  "models.RoomPointSegment.singular": "calificaci\xF3n del segmento",
  "models.RoomPointSegment.plural": "calificaciones del segmento",
  "models.RoomPointSegment.determinant.defined": "calificaci\xF3n del segmento",
  "models.RoomPointSegment.determinant.undefined": "una calificaci\xF3n de segmento",
  "models.RoomPointSegment.determinants.defined": "calificaciones del segmento",
  "models.RoomPointSegment.determinants.undefined": "calificaciones del segmento",
  "models.RoomPointSegment.properties.reversePoints.label": "Puntos inversos",
  "models.RoomPointSegment.properties.reversePoints.description": "Invertir los puntos del segmento para tener la visualizaci\xF3n, por ejemplo, de puertas en la direcci\xF3n correcta",
  "models.RoomPointSegment.properties.displayBothSides.label": "Mostrar en ambos lados",
  "models.RoomPointSegment.properties.displayBothSides.description": "Mostrar segmento en ambos lados del segmento",
  "models.RoomPointSegment.views.dq-not-uniq.label": "Segmentos de puntos no \xFAnicos",
  "models.RoomPointSegment.views.dq-not-uniq.help": "Le permite comprobar que no existe un segmento duplicado exacto en los mismos puntos.",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.label": "Los puntos del segmento est\xE1n en 2 pisos diferentes.",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.help": "Le permite comprobar que los puntos del segmento est\xE1n en el mismo piso.",
  "models.RoomPointRoom.singular": "Asociaci\xF3n entre un punto y un espacio.",
  "models.RoomPointRoom.plural": "Asociaciones entre un punto y un espacio",
  "models.RoomPointRoom.determinant.defined": "la asociaci\xF3n entre un punto y un espacio",
  "models.RoomPointRoom.determinant.undefined": "Un punto",
  "models.RoomPointRoom.description": "La asociaci\xF3n entre un punto y un espacio permite preservar el orden de los puntos en un espacio para constituir un poli\xF3n.",
  "models.RoomPointRoom.properties.id.label": "Identificador de la asociaci\xF3n entre un punto y un espacio.",
  "models.RoomPointRoom.properties.id.description": "???",
  "models.RoomPointRoom.properties.roomId.label": "ID de espacio",
  "models.RoomPointRoom.properties.roomId.description": "???",
  "models.RoomPointRoom.properties.externalId.label": "Identificador externo",
  "models.RoomPointRoom.properties.externalId.description": "???",
  "models.RoomPointRoom.properties.sortIndex.label": "\xCDndice de clasificaci\xF3n",
  "models.RoomPointRoom.properties.sortIndex.description": "???",
  "models.RoomPointRoom.properties.roomPointId.label": "Identificador de punto",
  "models.RoomPointRoom.properties.roomPointId.description": "???",
  "models.RoomPoint.singular": "punto de espacios",
  "models.RoomPoint.plural": "puntos de espacios",
  "models.RoomPoint.determinant.defined": "el punto de los espacios",
  "models.RoomPoint.determinant.undefined": "un punto de espacios",
  "models.RoomPoint.properties.id.label": "Identificador del punto de espacios",
  "models.RoomPoint.properties.x.label": "x",
  "models.RoomPoint.properties.x.description": "Coordinar en el eje X",
  "models.RoomPoint.properties.y.label": "hay",
  "models.RoomPoint.properties.y.description": "Coordenada del eje Y",
  "models.RoomPoint.properties.sort_index.label": "orden",
  "models.RoomPoint.properties.sort_index.description": "El \xEDndice utilizado para la clasificaci\xF3n",
  "models.RoomPoint.properties.room.description": "???",
  "models.RoomPoint.properties.externalId.label": "Identificador externo",
  "models.RoomPoint.properties.externalId.description": "???",
  "models.RoomPoint.views.dq-uniq-position.label": "Posici\xF3n de un solo punto",
  "models.RoomPoint.views.dq-uniq-position.help": "Le permite comprobar que no existe una posici\xF3n duplicada exacta en los puntos.",
  "models.RoomPoint.views.dq-not-used.label": "Puntos no utilizados",
  "models.RoomPoint.views.dq-not-used.help": "Le permite ver puntos que no se utilizan en espacios.",
  "models.RoomConnector.singular": "Conector espacial",
  "models.RoomConnector.plural": "Conectores espaciales",
  "models.RoomConnector.determinant.defined": "el conector espacial",
  "models.RoomConnector.determinant.undefined": "un conector espacial",
  "models.RoomConnector.determinants.defined": "conectores espaciales",
  "models.RoomConnector.determinants.undefined": "conectores espaciales",
  "models.RoomConnector.description": "Los conectores espaciales le permiten crear un v\xEDnculo entre varios espacios en diferentes pisos.",
  "models.RoomConnector.properties.id.label": "ID del conector espacial",
  "models.RoomConnector.properties.name.label": "Nombre del conector espacial",
  "models.RoomConnector.properties.waitTime.label": "tiempo promedio de espera",
  "models.RoomConnector.properties.waitTime.description": "El tiempo de espera promedio antes de que el conector espacial est\xE9 disponible",
  "models.RoomConnector.properties.timePerFloor.label": "Tiempo entre cada piso",
  "models.RoomConnector.properties.timePerFloor.description": "El tiempo necesario para poder pasar de cada piso al siguiente.",
  "models.RoomAffectation.singular": "Asignaci\xF3n de espacio",
  "models.RoomAffectation.plural": "Asignaciones de espacio",
  "models.RoomAffectation.description": "Le permite asignar una persona a un solo espacio.",
  "models.RoomAffectation.determinant.defined": "asignaci\xF3n de espacio",
  "models.RoomAffectation.determinant.undefined": "una asignaci\xF3n de espacio",
  "models.RoomAffectation.determinants.defined": "asignaciones de espacio",
  "models.RoomAffectation.determinants.undefined": "asignaciones de espacio",
  "models.RoomAffectation.views.room-mouvement-matrix-import.help": "Importar matrices de transferencia de espacios",
  "models.RoomAffectation.views.room-mouvement-matrix-import.label": "Importar matriz de transferencia",
  "models.Room.singular": "espacio",
  "models.Room.plural": "espacios",
  "models.Room.determinant.defined": "espacio",
  "models.Room.determinant.undefined": "un espacio",
  "models.Room.determinants.defined": "los espacios",
  "models.Room.determinants.undefined": "espacios",
  "models.Room.description": "Los espacios son lugares de trabajo o zonas para dividir un piso en subespacios.",
  "models.Room.views.map.help": "Ver plan de espacio %{name}",
  "models.Room.views.map.label": "plan",
  "models.Room.views.dq-uniq-name.help": "Sugiere nombres para espacios que no tienen nombre o el nombre no es \xFAnico en el mismo piso",
  "models.Room.views.dq-uniq-name.label": "Nombres propuestos para espacios",
  "models.Room.views.dq-no-point.help": "Espacios que tienen 0, 1 o 2 puntos y por lo tanto deber\xEDan tener \xE1rea cero",
  "models.Room.views.dq-no-point.label": "Espacios sin puntos suficientes",
  "models.Room.views.dq-capacity-equals-seats-count.help": "Espacios que tengan una capacidad excluyendo asientos igual al n\xFAmero de asientos y que tengan una capacidad total duplicada",
  "models.Room.views.dq-capacity-equals-seats-count.label": "Espacios con una capacidad sin incluir asientos igual al n\xFAmero de asientos",
  "models.Room.views.dq-capacity-gt-0.help": "Permite ver si hay inconsistencias en las capacidades de los espacios o detectar, por ejemplo, muebles que a\xFAn no tienen asientos",
  "models.Room.views.dq-capacity-gt-0.label": "Espacios que tengan una capacidad excluyendo asientos distintos de 0",
  "models.Room.views.meeting-rooms.help": "Ver y navegar por salas de reuniones",
  "models.Room.views.meeting-rooms.label": "Salas de reuniones",
  "models.Room.properties.prettyName.label": "Nombre para mostrar",
  "models.Room.properties.prettyName.description": "Le permite tener un nombre para mostrar adem\xE1s del nombre t\xE9cnico del espacio, por ejemplo para salas de reuniones.",
  "models.Room.properties.id.label": "ID de espacio",
  "models.Room.properties.livePeopleCount.label": "N\xFAmero de personas en el espacio en tiempo real.",
  "models.Room.properties.livePeopleCount.description": "Este valor es actualizado por los sensores de conteo de personas presentes en el espacio y proporciona el n\xFAmero de personas presentes en tiempo real en el espacio.",
  "models.Room.properties.picture.label": "Foto desde el espacio",
  "models.Room.properties.picture.description": "La foto del espacio hace que sea f\xE1cil de visualizar.",
  "models.Room.properties.capacity.label": "Capacidad sin asientos",
  "models.Room.properties.capacity.description": "La capacidad declarada se puede utilizar para definir la cantidad de asientos disponibles en un espacio o para conocer la cantidad m\xE1xima de personas que se pueden colocar en un espacio, esta cifra se suma a la cantidad de asientos para dar la capacidad total.",
  "models.Room.properties.workplacesCount.label": "Cantidad de estaciones de trabajo",
  "models.Room.properties.workplacesCount.description": "El n\xFAmero de estaciones de trabajo en el espacio se calcula autom\xE1ticamente.",
  "models.Room.properties.workplacesRatio.label": "Ratio por puesto de trabajo",
  "models.Room.properties.workplacesRatio.description": "El ratio por estaci\xF3n de trabajo es la cantidad de metros cuadrados de espacio dividido por la cantidad de estaciones de trabajo, este valor se calcula autom\xE1ticamente",
  "models.Room.properties.peopleCount.label": "Numero de asignaciones",
  "models.Room.properties.peopleCount.description": "El n\xFAmero de personas asignadas al espacio, ya sea directamente o a trav\xE9s de una estaci\xF3n de trabajo.",
  "models.Room.properties.peopleRatio.label": "Ratio de ocupaci\xF3n",
  "models.Room.properties.peopleRatio.description": "El ratio de ocupaci\xF3n es el n\xFAmero de metros cuadrados del espacio dividido por el n\xFAmero de personas asignadas a los espacios, ya sea directamente o a trav\xE9s de una estaci\xF3n de trabajo, este valor se calcula",
  "models.Room.properties.freeWorkplacesCount.label": "Numero de vacantes",
  "models.Room.properties.freeWorkplacesCount.description": "N\xFAmero de posiciones libres en el espacio",
  "models.Room.properties.flexWorkplacesCount.label": "N\xFAmero de posiciones de flexi\xF3n",
  "models.Room.properties.flexWorkplacesCount.description": "N\xFAmero de posiciones flexibles en el espacio.",
  "models.Room.properties.sharedWorkplacesCount.label": "N\xFAmero de estaciones de trabajo compartidas",
  "models.Room.properties.sharedWorkplacesCount.description": "N\xFAmero de estaciones de trabajo compartidas por al menos 2 personas",
  "models.Room.properties.transitWorkplacesCount.label": "N\xFAmero de estaciones de trabajo de tr\xE1nsito",
  "models.Room.properties.transitWorkplacesCount.description": "N\xFAmero de puestos de trabajo temporales, estos puestos no se cuentan en puestos libres y no son flexibles",
  "models.Room.properties.sharedWorkplacesRatio.label": "Tasa de puestos de trabajo compartidos",
  "models.Room.properties.sharedWorkplacesRatio.description": "Tasa de estaciones de trabajo compartidas por al menos 2 personas en comparaci\xF3n con todas las estaciones de trabajo en el espacio",
  "models.Room.properties.flexRatio.label": "Tasa de estaciones de trabajo flexibles",
  "models.Room.properties.flexRatio.description": "La tasa de estaciones de trabajo flexibles se calcula dividiendo el n\xFAmero de estaciones de trabajo flexibles por el n\xFAmero total de estaciones de trabajo",
  "models.Room.properties.name.label": "Nombre del espacio",
  "models.Room.properties.name.description": "El nombre del espacio se utiliza para definirlo y encontrarlo f\xE1cilmente.",
  "models.Room.properties.area.label": "superficie",
  "models.Room.properties.area.description": "El espacio calificado para este espacio",
  "models.Room.properties.perimeter.label": "per\xEDmetro",
  "models.Room.properties.perimeter.description": "El per\xEDmetro del espacio representa su contorno.",
  "models.Room.properties.costCenter.description": "Permite saber a qu\xE9 centro de coste asociar el espacio a la hora de gestionar la refacturaci\xF3n al centro de coste por espacio.",
  "models.Room.properties.distributionCostType.description": "Le permite determinar el m\xE9todo de c\xE1lculo de la clave de distribuci\xF3n de costos.",
  "models.Room.properties.info.label": "Informaci\xF3n adicional",
  "models.Room.properties.info.description": "Le permite mantener informaci\xF3n adicional de tipo texto en el espacio",
  "models.Room.properties.bookingEmail.label": "Correo electr\xF3nico utilizado para reservar este espacio",
  "models.Room.properties.bookingEmail.description": "Este correo electr\xF3nico se utiliza para reservar esta sala a trav\xE9s del sistema de mensajer\xEDa.",
  "models.Room.properties.keyCylinderCode.label": "N\xFAmero de cilindro",
  "models.Room.properties.keyCylinderCode.description": "El n\xFAmero de cilindro permite definir el n\xFAmero de cilindro de la cerradura de la puerta del espacio o un elemento relacionado con el acceso f\xEDsico al espacio.",
  "models.Room.reports.mouvementMatrix.fileName": "Matriz de transferencia",
  "models.Room.reports.mouvementMatrix.help": "Crea una matriz de transferencia en Excel que te permitir\xE1 realizar f\xE1cilmente los viajes de tus empleados",
  "models.PersonWorkingLocation.singular": "Lugar de trabajo de las personas",
  "models.PersonWorkingLocation.plural": "Lugares de trabajo de las personas",
  "models.PersonWorkingLocation.determinant.defined": "lugar de trabajo de las personas",
  "models.PersonWorkingLocation.determinant.undefined": "un lugar donde la gente trabaja",
  "models.PersonWorkingLocation.determinants.defined": "lugares de trabajo de las personas",
  "models.PersonWorkingLocation.determinants.undefined": "lugares de trabajo de las personas",
  "models.PersonWorkingLocation.description": "Un lugar de trabajo de personas define el lugar de trabajo de las personas",
  "models.PersonWorkingLocation.views.my-planning.help": "Gestionar mi agenda para las pr\xF3ximas semanas",
  "models.PersonWorkingLocation.views.my-planning.label": "Administrar mi agenda",
  "models.PersonToWorkplaceBooking.singular": "Reserva en los puestos de trabajo de las personas",
  "models.PersonToWorkplaceBooking.plural": "Reservas en los puestos de trabajo de las personas",
  "models.PersonToWorkplaceBooking.description": "Las reservas de puestos de trabajo de las personas quedan registradas y disponibles con las fechas de inicio y finalizaci\xF3n de la reserva.",
  "models.PersonToWorkplaceBooking.determinant.defined": "reserva en el puesto de trabajo de las personas",
  "models.PersonToWorkplaceBooking.determinant.undefined": "una reserva en el puesto de trabajo de la gente",
  "models.PersonToWorkplaceBooking.determinants.defined": "reservas en los puestos de trabajo de las personas",
  "models.PersonToWorkplaceBooking.determinants.undefined": "reservas en los puestos de trabajo de las personas",
  "models.PersonToWorkplaceBooking.properties.startDatetime.label": "Inicio de la reserva",
  "models.PersonToWorkplaceBooking.properties.startDatetime.description": "La fecha y hora de inicio de la reserva.",
  "models.PersonToWorkplaceBooking.properties.endDatetime.label": "Fin de la reserva",
  "models.PersonToWorkplaceBooking.properties.endDatetime.description": "La fecha y hora de finalizaci\xF3n de la reserva.",
  "models.PersonToWorkplaceBooking.views.dashboard-index.label": "Salpicadero",
  "models.PersonToWorkplaceBooking.views.dashboard-index.help": "Panel de reservas en los puestos de trabajo de las personas",
  "models.PersonToRoomBooking.singular": "Reserva para la zona de personas",
  "models.PersonToRoomBooking.plural": "Reservas para la zona de personas",
  "models.PersonToRoomBooking.description": "Las reservas de espacios de personas quedan registradas y disponibles con las fechas de inicio y finalizaci\xF3n de la reserva.",
  "models.PersonToRoomBooking.determinant.defined": "reserva en la zona del pueblo",
  "models.PersonToRoomBooking.determinant.undefined": "una reserva para el \xE1rea de personas",
  "models.PersonToRoomBooking.determinants.defined": "reservas para el \xE1rea de personas",
  "models.PersonToRoomBooking.determinants.undefined": "reservas para el \xE1rea de personas",
  "models.PersonToRoomBooking.properties.startDatetime.label": "Inicio de la reserva",
  "models.PersonToRoomBooking.properties.startDatetime.description": "La fecha y hora de inicio de la reserva.",
  "models.PersonToRoomBooking.properties.endDatetime.label": "Fin de la reserva",
  "models.PersonToRoomBooking.properties.endDatetime.description": "La fecha y hora de finalizaci\xF3n de la reserva.",
  "models.PersonToPersonType.singular": "Tipo de relaci\xF3n entre personas",
  "models.PersonToPersonType.plural": "Tipos de relaci\xF3n entre personas",
  "models.PersonToPersonType.determinant.defined": "el tipo de relaci\xF3n entre personas",
  "models.PersonToPersonType.determinant.undefined": "un tipo de relaci\xF3n entre personas",
  "models.PersonToPersonType.determinants.defined": "tipos de relaciones entre personas",
  "models.PersonToPersonType.determinants.undefined": "tipos de relaciones entre personas",
  "models.PersonToPersonType.properties.labelForward.label": "Relaci\xF3n natural (adelante)",
  "models.PersonToPersonType.properties.labelForward.description": "La definici\xF3n de relaci\xF3n en el sentido natural, por ejemplo entre un padre y su hijo, la definici\xF3n natural es 'es el padre de'",
  "models.PersonToPersonType.properties.labelBackward.label": "Relaci\xF3n inversa",
  "models.PersonToPersonType.properties.labelBackward.description": "La definici\xF3n de relaci\xF3n en el sentido inverso al natural, por ejemplo entre un padre y su hijo, la definici\xF3n inversa del sentido natural es &quot;es hijo de&quot;",
  "models.PersonToPerson.singular": "Relaci\xF3n de persona a persona",
  "models.PersonToPerson.plural": "Relaciones de persona a persona",
  "models.PersonToPerson.determinant.defined": "relaci\xF3n de persona a persona",
  "models.PersonToPerson.determinant.undefined": "una relaci\xF3n de persona a persona",
  "models.PersonToPerson.determinants.defined": "relaciones de persona a persona",
  "models.PersonToPerson.determinants.undefined": "relaciones de persona a persona",
  "models.PersonToPerson.properties.personSource.label": "Persona fuente",
  "models.PersonToPerson.properties.personTarget.label": "Persona de destino",
  "models.PersonToDimensionBooking.singular": "Reserva a la capa de asignaci\xF3n de personas",
  "models.PersonToDimensionBooking.plural": "Reservas en la capa de asignaci\xF3n de personas",
  "models.PersonToDimensionBooking.description": "Las reservas para capas de asignaci\xF3n de personas se guardan y est\xE1n disponibles con las fechas de inicio y finalizaci\xF3n de la reserva.",
  "models.PersonToDimensionBooking.determinant.defined": "reserva en la capa de asignaci\xF3n de personas",
  "models.PersonToDimensionBooking.determinant.undefined": "una reserva en la capa de asignaci\xF3n de personas",
  "models.PersonToDimensionBooking.determinants.defined": "reservas en la capa de asignaci\xF3n de personas",
  "models.PersonToDimensionBooking.determinants.undefined": "reservas a la capa de asignaci\xF3n de personas",
  "models.PersonToDimensionBooking.properties.startDatetime.label": "Inicio de la reserva",
  "models.PersonToDimensionBooking.properties.startDatetime.description": "La fecha y hora de inicio de la reserva.",
  "models.PersonToDimensionBooking.properties.endDatetime.label": "Fin de la reserva",
  "models.PersonToDimensionBooking.properties.endDatetime.description": "La fecha y hora de finalizaci\xF3n de la reserva.",
  "models.PersonState.singular": "estado de las personas",
  "models.PersonState.plural": "estado de las personas",
  "models.PersonState.description": "Permite definir todo tipo de contrato entre las personas y la empresa.",
  "models.PersonState.determinant.defined": "el estado de la gente",
  "models.PersonState.determinant.undefined": "un estado de personas",
  "models.PersonState.determinants.defined": "el estado de las personas",
  "models.PersonState.determinants.undefined": "de los estatutos de las personas",
  "models.PersonState.properties.id.label": "Identificador de estado de persona",
  "models.PersonState.properties.name.label": "Nombre del estado de la persona",
  "models.PersonToBuilding.singular": "Afecto al edificio",
  "models.PersonToBuilding.plural": "tareas de construcci\xF3n",
  "models.PersonToBuilding.description": "Permite asignar una persona a un edificio, sin informaci\xF3n adicional. La asignaci\xF3n puede o no contabilizarse.",
  "models.PersonToBuilding.determinant.defined": "afecto por el edificio",
  "models.PersonToBuilding.determinant.undefined": "un cari\xF1o por el edificio",
  "models.PersonToBuilding.determinants.defined": "construyendo afectos",
  "models.PersonToBuilding.determinants.undefined": "dolencias del edificio",
  "models.PersonToBuilding.properties.addToPeopleCount.label": "Asignaci\xF3n de conteo",
  "models.PersonToBuilding.properties.addToPeopleCount.description": "Agregue esta asignaci\xF3n al n\xFAmero total de personas asignadas al edificio.",
  "models.PersonSecurityProfile.singular": "perfil de seguridad personal",
  "models.PersonSecurityProfile.plural": "perfiles de seguridad personal",
  "models.PersonSecurityProfile.description": "Permite definir los diferentes perfiles de seguridad que se pueden asociar a las personas",
  "models.PersonSecurityProfile.determinant.defined": "perfil de seguridad personal",
  "models.PersonSecurityProfile.determinant.undefined": "un perfil de seguridad personal",
  "models.PersonSecurityProfile.determinants.defined": "perfiles de seguridad personal",
  "models.PersonSecurityProfile.determinants.undefined": "perfiles de seguridad personal",
  "models.PersonSecurityProfile.properties.id.label": "Identificador de perfil de seguridad personal",
  "models.PersonSecurityProfile.properties.name.label": "Nombre del perfil de seguridad",
  "models.PersonSecurityProfile.properties.name.description": "Permite definir los diferentes perfiles de seguridad que se pueden asociar a las personas",
  "models.PersonSecurityProfile.properties.color.label": "Color del perfil de seguridad",
  "models.PersonSecurityProfile.properties.color.description": "Le permite colorear la estaci\xF3n de trabajo de asignaci\xF3n y el \xEDcono de seguridad de la persona seg\xFAn su perfil de seguridad.",
  "models.PersonSecurityProfile.properties.icon.label": "Icono de perfil de seguridad",
  "models.PersonSecurityProfile.properties.icon.description": "Le permite asignar un icono a un perfil de seguridad para visualizar claramente los perfiles de seguridad en el plan o en las listas.",
  "models.PersonCompanyToRoomType.singular": "Tipo de espacio proveedor",
  "models.PersonCompanyToRoomType.plural": "Tipos de espacios proveedores",
  "models.PersonCompanyToRoomType.description": "Los tipos de espacios de los proveedores de servicios permiten definir una relaci\xF3n entre un tipo de espacio y el proveedor de servicios y definir una misi\xF3n.",
  "models.PersonCompanyToRoomType.determinant.defined": "el tipo de espacio del proveedor del servicio",
  "models.PersonCompanyToRoomType.determinant.undefined": "un tipo de espacio del proveedor de servicios",
  "models.PersonCompanyToRoomType.determinants.defined": "los tipos de espacios de los proveedores de servicios",
  "models.PersonCompanyToRoomType.determinants.undefined": "tipos de espacios de proveedores de servicios",
  "models.PersonGender.singular": "g\xE9nero de la persona",
  "models.PersonGender.plural": "Tipos de personas",
  "models.PersonGender.description": "Permite contar cada tipo, por ejemplo para gesti\xF3n sanitaria.",
  "models.PersonGender.determinant.defined": "el g\xE9nero de la persona",
  "models.PersonGender.determinant.undefined": "un tipo de persona",
  "models.PersonGender.determinants.defined": "tipos de personas",
  "models.PersonGender.determinants.undefined": "Tipos de personas",
  "models.PersonGender.properties.name.label": "apellido",
  "models.PersonGender.properties.name.description": "El nombre de g\xE9nero de la persona.",
  "models.PersonCompanyToItemType.singular": "Tipo de objeto de proveedor",
  "models.PersonCompanyToItemType.plural": "Tipos de objetos de proveedor",
  "models.PersonCompanyToItemType.description": "Los tipos de objetos de proveedor de servicios permiten definir una relaci\xF3n entre el tipo de objeto y el proveedor de servicios y definir la misi\xF3n.",
  "models.PersonCompanyToItemType.determinant.defined": "el tipo de objeto del proveedor de servicios",
  "models.PersonCompanyToItemType.determinant.undefined": "un tipo de objeto proveedor",
  "models.PersonCompanyToItemType.determinants.defined": "los tipos de objetos de los proveedores de servicios",
  "models.PersonCompanyToItemType.determinants.undefined": "tipos de objetos de los proveedores de servicios",
  "models.PersonCompanyToItem.singular": "Intervenci\xF3n sobre un objeto",
  "models.PersonCompanyToItem.plural": "Intervenciones sobre objetos",
  "models.PersonCompanyToItem.description": "Las intervenciones de los proveedores de servicios sobre los objetos permiten definir, por ejemplo, la fecha de una visita a un extintor.",
  "models.PersonCompanyToItem.determinant.defined": "intervenci\xF3n sobre un objeto",
  "models.PersonCompanyToItem.determinant.undefined": "una intervenci\xF3n sobre un objeto",
  "models.PersonCompanyToItem.determinants.defined": "intervenciones sobre objetos",
  "models.PersonCompanyToItem.determinants.undefined": "intervenciones sobre objetos",
  "models.PersonCompanyToItem.properties.datetime.label": "Fecha y hora de la intervenci\xF3n.",
  "models.PersonCompanyToItem.properties.datetime.description": "Cuando tuvo lugar la intervenci\xF3n.",
  "models.PersonCompanyToItem.properties.comment.label": "Comentario",
  "models.PersonCompanyToItem.properties.comment.description": "Un comentario sobre la intervenci\xF3n.",
  "models.PersonCompanyMission.singular": "misi\xF3n del proveedor de servicios",
  "models.PersonCompanyMission.plural": "misiones de proveedores de servicios",
  "models.PersonCompanyMission.description": "Las misiones de los prestadores de servicios permiten conocer el \xE1rea de intervenci\xF3n de los prestadores de servicios.",
  "models.PersonCompanyMission.determinant.defined": "la misi\xF3n del proveedor de servicios",
  "models.PersonCompanyMission.determinant.undefined": "una misi\xF3n del proveedor de servicios",
  "models.PersonCompanyMission.determinants.defined": "las misiones de los proveedores de servicios",
  "models.PersonCompanyMission.determinants.undefined": "misiones de los proveedores de servicios",
  "models.PersonCompanyMission.properties.name.label": "apellido",
  "models.PersonCompanyMission.properties.name.description": "El nombre de la misi\xF3n del proveedor de servicios.",
  "models.PersonCompany.singular": "empresa proveedora de servicios",
  "models.PersonCompany.plural": "empresas de servicios",
  "models.PersonCompany.description": "La empresa proveedora de servicios le permite administrar el personal del proveedor de servicios por empresa.",
  "models.PersonCompany.determinant.defined": "la empresa proveedora de servicios",
  "models.PersonCompany.determinant.undefined": "una empresa de servicios",
  "models.PersonCompany.determinants.defined": "empresas de servicios",
  "models.PersonCompany.determinants.undefined": "empresas de servicios",
  "models.PersonCompany.properties.name.label": "apellido",
  "models.PersonCompany.properties.name.description": "El nombre del proveedor de servicios, por ejemplo, el nombre de la empresa de un proveedor de servicios.",
  "models.PersonCompany.properties.comment.label": "Informaciones complementarias",
  "models.PersonCompany.properties.comment.description": "Informaci\xF3n adicional sobre el proveedor del servicio, como su misi\xF3n, sus valores, la cobertura funcional de su servicio, etc.",
  "models.PersonCompany.properties.contact.label": "Contactar",
  "models.PersonCompany.properties.contact.description": "Informaci\xF3n de contacto del proveedor del servicio.",
  "models.PersonCompany.properties.documents.label": "Documentos relacionados",
  "models.PersonCompany.properties.documents.description": "El enlace a los documentos asociados con este proveedor de servicios.",
  "models.Person.singular": "persona",
  "models.Person.plural": "gente",
  "models.Person.description": "Estas son las personas introducidas en la base de datos de Surfy",
  "models.Person.determinant.defined": "la persona",
  "models.Person.determinant.undefined": "una persona",
  "models.Person.determinants.defined": "las personas",
  "models.Person.determinants.undefined": "personas",
  "models.Person.properties.id.label": "ID de Surfy",
  "models.Person.properties.fullname.label": "nombre completo",
  "models.Person.properties.fullname.description": "El nombre completo de la persona para que sea m\xE1s f\xE1cil de encontrar.",
  "models.Person.properties.personState.label": "Estado",
  "models.Person.properties.personState.description": "Permite indicar el tipo de contrato que tiene la persona con la empresa",
  "models.Person.properties.personSecurityProfile.label": "Perfil de seguridad",
  "models.Person.properties.personSecurityProfile.description": "Permite indicar el perfil de seguridad de la persona para la gesti\xF3n de seguridad.",
  "models.Person.properties.firstname.label": "primer nombre",
  "models.Person.properties.firstname.description": "El primer nombre de la persona.",
  "models.Person.properties.lastname.label": "Apellido",
  "models.Person.properties.lastname.description": "Apellido de la persona",
  "models.Person.properties.email.label": "e-mail",
  "models.Person.properties.email.description": "El correo electr\xF3nico de la persona",
  "models.Person.properties.picture.label": "Foto de perfil",
  "models.Person.properties.picture.description": "La foto de la persona para tenerla en el trombinoscopio o en investigaci\xF3n",
  "models.Person.properties.monitorReference.label": "Referencia de pantalla",
  "models.Person.properties.monitorReference.description": "La referencia de la pantalla del ordenador asociada a esta persona.",
  "models.Person.properties.computerReference.label": "Referencia de la computadora",
  "models.Person.properties.computerReference.description": "La referencia del ordenador asociado a esta persona.",
  "models.Person.properties.cellphone.label": "Tel\xE9fono m\xF3vil",
  "models.Person.properties.cellphone.description": "El tel\xE9fono m\xF3vil de la persona.",
  "models.Person.properties.telephone.label": "Tel\xE9fono fijo",
  "models.Person.properties.telephone.description": "El tel\xE9fono fijo de la persona",
  "models.Person.properties.title.label": "t\xEDtulo",
  "models.Person.properties.title.description": "El titulo de la persona",
  "models.Person.properties.badgeNumber.label": "N\xFAmero de insignia",
  "models.Person.properties.badgeNumber.description": "El n\xFAmero de identificaci\xF3n de la persona",
  "models.Person.properties.boxNumber.label": "N\xFAmero de casillero",
  "models.Person.properties.boxNumber.description": "El n\xFAmero de casillero de la persona",
  "models.Person.properties.badgeRestaurant.label": "Insignia RIE",
  "models.Person.properties.badgeRestaurant.description": "La referencia del RIE o distintivo de restaurante de empresa",
  "models.Person.properties.registrationNumber.label": "registro",
  "models.Person.properties.registrationNumber.description": "El n\xFAmero de registro de la persona.",
  "models.Person.properties.startDate.label": "Fecha de entrada",
  "models.Person.properties.startDate.description": "La fecha en que la persona se incorpor\xF3 a la empresa.",
  "models.Person.properties.endDate.label": "Fecha de lanzamiento",
  "models.Person.properties.endDate.description": "La fecha de salida de la persona de la empresa.",
  "models.Person.properties.code.label": "N\xFAmero de registro",
  "models.Person.properties.code.description": "El n\xFAmero de recursos humanos de la persona.",
  "models.Person.properties.personToPersonTargets.label": "Relaciones con esta persona",
  "models.Person.properties.personToPersonTargets.description": "Permite conocer la relaci\xF3n ascendente entre dos personas, por ejemplo la relaci\xF3n jer\xE1rquica",
  "models.Person.properties.personToPersonSources.label": "Relaciones de esta persona",
  "models.Person.properties.personToPersonSources.description": "Permite conocer la relaci\xF3n descendente entre dos personas, por ejemplo la relaci\xF3n jer\xE1rquica",
  "models.Person.properties.organization.label": "La organizaci\xF3n de la persona.",
  "models.Person.properties.organization.description": "El servicio de conexi\xF3n de la persona.",
  "models.Person.properties.info.label": "Comentario",
  "models.Person.properties.info.description": "Comente sobre la persona que permite mantener informaci\xF3n adicional o miscel\xE1nea",
  "models.Person.properties.notAffectable.label": "No asignable",
  "models.Person.properties.notAffectable.description": "La persona no puede ser asignada a una estaci\xF3n de trabajo, espacio, edificio o capa de asignaci\xF3n.",
  "models.Person.views.home.help": "Ver el archivo de la persona <b>%{name}</b> con su informaci\xF3n y asignaciones",
  "models.Person.views.home.label": "archivo de persona",
  "models.Person.views.relationship-list.help": "Enumere las relaciones entre las personas",
  "models.Person.views.relationship-list.label": "Lista de relaciones",
  "models.Person.views.dq-only-associated-to-building.help": "Enumerar las personas asignables que est\xE1n asignadas a un edificio y contadas sin ser asignadas (estaci\xF3n de trabajo, capa de asignaci\xF3n, espacio)",
  "models.Person.views.dq-only-associated-to-building.label": "Personas asignadas a un edificio sin otra asignaci\xF3n",
  "models.Person.views.dq-near-end-date.help": "Enumere las personas que tienen una fecha de finalizaci\xF3n del contrato posterior a hoy y que est\xE1n asignadas a una estaci\xF3n de trabajo",
  "models.Person.views.dq-near-end-date.label": "Personas que abandonan la empresa.",
  "models.Person.views.dq-no-affectations.label": "Personas sin asignaciones",
  "models.Person.views.dq-no-affectations.help": "Enumere las personas asignables que no tienen asignaciones (edificio, estaci\xF3n de trabajo, capa de asignaci\xF3n, espacio)",
  "models.Person.views.dq-person-duplicate.label": "personas duplicadas",
  "models.Person.views.dq-person-duplicate.help": "Listar personas duplicadas",
  "models.PartnerApiCredential.singular": "Clave de API de socio",
  "models.PartnerApiCredential.plural": "Claves de API de socios",
  "models.PartnerApiCredential.determinant.defined": "la clave de API del socio",
  "models.PartnerApiCredential.determinant.undefined": "una clave de API de socio",
  "models.PartnerApiCredential.determinants.defined": "claves de API de socio",
  "models.PartnerApiCredential.determinants.undefined": "claves de API de socio",
  "models.PartnerApiCredential.properties.enable.label": "Activado",
  "models.PartnerApiCredential.properties.enable.description": "Debes activar la clave para usarla",
  "models.OrganizationFloor.singular": "Organizaci\xF3n de pisos",
  "models.OrganizationFloor.plural": "Organizaci\xF3n del piso",
  "models.OrganizationFloor.determinant.defined": "la organizaci\xF3n de los pisos",
  "models.OrganizationFloor.determinant.undefined": "una organizaci\xF3n de pisos",
  "models.OrganizationFloor.determinants.defined": "organizaciones de piso",
  "models.OrganizationFloor.determinants.undefined": "organizaciones de piso",
  "models.OrganizationBuilding.singular": "Organizaci\xF3n de edificios",
  "models.OrganizationBuilding.plural": "Construyendo organizaciones",
  "models.OrganizationBuilding.determinant.defined": "organizaci\xF3n de edificios",
  "models.OrganizationBuilding.determinant.undefined": "una organizaci\xF3n de edificios",
  "models.OrganizationBuilding.determinants.defined": "construyendo organizaciones",
  "models.OrganizationBuilding.determinants.undefined": "construyendo organizaciones",
  "models.Organization.singular": "organizaci\xF3n",
  "models.Organization.plural": "organizaciones",
  "models.Organization.determinant.defined": "la organizacion",
  "models.Organization.determinant.undefined": "una organizaci\xF3n",
  "models.Organization.determinants.defined": "organizaciones",
  "models.Organization.determinants.undefined": "organizaciones",
  "models.Organization.description": "Las organizaciones tienen dos niveles jer\xE1rquicos: direcciones y departamentos, y permiten definir la estructura organizativa de la empresa.",
  "models.Organization.properties.id.label": "ID de organizaci\xF3n",
  "models.Organization.properties.name.label": "apellido",
  "models.Organization.properties.name.description": "Nombre que definir\xE1 la organizaci\xF3n",
  "models.Organization.properties.code.label": "c\xF3digo",
  "models.Organization.properties.code.description": "Este c\xF3digo se puede utilizar para contener la codificaci\xF3n de la organizaci\xF3n o la clave de identificaci\xF3n mediante software de terceros.",
  "models.Organization.properties.organizationId.label": "ID de gesti\xF3n",
  "models.Organization.properties.organizationId.description": "Es gracias a este identificador que es posible crear la jerarqu\xEDa organizativa",
  "models.Organization.properties.organization.label": "Direcci\xF3n",
  "models.Organization.properties.organizations.label": "Servicios",
  "models.Organization.views.hierarchy.label": "Jerarqu\xEDa",
  "models.Organization.views.hierarchy.help": "Ver la jerarqu\xEDa de la organizaci\xF3n",
  "models.Organization.views.dq-organization-to-room.label": "Errores en la organizaci\xF3n de los espacios",
  "models.Organization.views.dq-organization-to-room.help": "Detectar asociaciones espaciales con organizaciones que no son v\xE1lidas",
  "models.Organization.views.dq-organization-hierarchy.label": "Errores de jerarqu\xEDa organizacional",
  "models.Organization.views.dq-organization-hierarchy.help": "Detectar organizaciones que no est\xE1n en la jerarqu\xEDa correcta",
  "models.OpenerPostMessageHost.singular": "Host de mensajes para ventana emergente",
  "models.OpenerPostMessageHost.plural": "Hosts de mensajes para ventanas emergentes",
  "models.OpenerPostMessageHost.determinant.defined": "anfitri\xF3n de mensajes emergentes",
  "models.OpenerPostMessageHost.determinant.undefined": "un host de mensajes emergentes",
  "models.OpenerPostMessageHost.determinants.defined": "hosts de mensajes emergentes",
  "models.OpenerPostMessageHost.determinants.undefined": "hosts de mensajes emergentes",
  "models.OpenerPostMessageHost.description": "Un host de mensajes emergentes es un elemento que se comunica con una ventana emergente abierta sobre las acciones del plan.",
  "models.OccupancyStatus.singular": "estado de ocupaci\xF3n",
  "models.OccupancyStatus.plural": "estados de ocupaci\xF3n",
  "models.OccupancyStatus.determinant.defined": "el estado de ocupaci\xF3n",
  "models.OccupancyStatus.determinant.undefined": "un estado de ocupaci\xF3n",
  "models.OccupancyStatus.determinants.defined": "estados de ocupaci\xF3n",
  "models.OccupancyStatus.determinants.undefined": "estados de ocupaci\xF3n",
  "models.OccupancyStatus.description": "El estado de ocupaci\xF3n permite identificar en tiempo real el estado de un espacio o puesto de trabajo, por ejemplo si est\xE1 libre, ocupado o okupado, el estado de ocupaci\xF3n se actualiza d\xEDa por los objetos conectados presentes en el espacio.",
  "models.OccupancyStatus.properties.id.label": "Identificador del estado de ocupaci\xF3n",
  "models.OccupancyStatus.properties.name.label": "Nombre del estado de ocupaci\xF3n",
  "models.OccupancyStatus.properties.color.label": "color",
  "models.OccupancyStatus.properties.color.description": "Color le permite colorear espacios o estaciones de trabajo en planos seg\xFAn su estado de ocupaci\xF3n",
  "models.OccupancyStatus.properties.code.label": "C\xF3digo de estado de ocupaci\xF3n",
  "models.OccupancyStatus.properties.code.description": "El c\xF3digo permite identificar y realizar operaciones t\xE9cnicas sobre el estado de ocupaci\xF3n.",
  "models.Object3dModel.singular": "modelo 3d",
  "models.Object3dModel.plural": "modelos 3d",
  "models.Object3dModel.determinant.defined": "el modelo 3d",
  "models.Object3dModel.determinant.undefined": "un modelo 3d",
  "models.Object3dModel.determinants.defined": "modelos 3d",
  "models.Object3dModel.determinants.undefined": "modelos 3d",
  "models.Object3dModel.description": "El Modelo 3D permite una representaci\xF3n 3D realista de los objetos colocados en el plano; En ausencia de un modelo 3D, los objetos se representan en forma completa en la vista 3D.",
  "models.Object3dModel.properties.origin.label": "Orientaci\xF3n",
  "models.Object3dModel.properties.origin.description": "Use X si el objeto mira hacia la derecha o Y si el objeto mira hacia abajo",
  "models.MapScale.singular": "escala plana",
  "models.MapScale.plural": "escamas planas",
  "models.MapScale.determinant.defined": "escala",
  "models.MapScale.determinant.undefined": "una escalera",
  "models.MapScale.determinants.defined": "las escamas",
  "models.MapScale.determinants.undefined": "escamas",
  "models.MapScale.properties.id.label": "Identificador de escala",
  "models.MapScale.properties.p1.description": "Punto de partida",
  "models.MapScale.properties.p2.description": "Punto de llegada",
  "models.MapScale.properties.name.label": "Nombre de la escala",
  "models.MapScale.properties.name.description": "Para recordar el nombre y reutilizarlo en otros suelos",
  "models.MapScale.properties.length.label": "distancia",
  "models.MapScale.properties.length.description": "La distancia que se muestra en el plano entre los 2 puntos en metros.",
  "models.MapScale.properties.roomTextSize.label": "Tama\xF1o del texto espacial",
  "models.MapScale.properties.roomTextSize.description": "El tama\xF1o del texto de los espacios en el plano para optimizar la visualizaci\xF3n.",
  "models.MapScale.properties.workplaceTextSize.label": "Tama\xF1o de texto en objetos",
  "models.MapScale.properties.workplaceTextSize.description": "Tama\xF1o del texto en estaciones de trabajo y objetos en el mapa para optimizar la visualizaci\xF3n",
  "models.MapScale.properties.segmentDistanceTextSize.label": "Tama\xF1o del texto del segmento",
  "models.MapScale.properties.segmentDistanceTextSize.description": "El tama\xF1o del texto en las distancias entre los puntos en el mapa para optimizar la visualizaci\xF3n",
  "models.MapScale.properties.itemTypeIconSize.label": "Tama\xF1o de los iconos de tipo de objeto",
  "models.MapScale.properties.itemTypeIconSize.description": "El tama\xF1o de los iconos de tipo de objeto en el mapa, el tama\xF1o estar\xE1 limitado por el tama\xF1o del espacio.",
  "models.MapScale.properties.roomIconSize.label": "Tama\xF1o de los iconos de tipo espacio",
  "models.MapScale.properties.roomIconSize.description": "El tama\xF1o de los iconos en el mapa en espacios en relaci\xF3n con los tipos de espacio.",
  "models.MapScale.properties.strokeWidth.label": "Grosor de la l\xEDnea",
  "models.MapScale.properties.strokeWidth.description": "Es posible reducir el grosor de las l\xEDneas para aumentar la legibilidad del plan",
  "models.MapScale.views.dq-not-used.label": "escalas sin usar",
  "models.MapScale.views.dq-not-used.help": "Ver escalas que no se usan en pisos y se pueden quitar",
  "models.MapScale.views.dq-uniq-name.label": "Nombres propuestos para escalas.",
  "models.MapScale.views.dq-uniq-name.help": "Proporciona nombres \xFAnicos para b\xE1sculas, incluidos los pisos y edificios donde se utilizan.",
  "models.Manufacturer.singular": "Fabricante de tipo de objeto",
  "models.Manufacturer.plural": "Fabricantes de tipos de objetos",
  "models.Manufacturer.determinant.defined": "el fabricante del tipo de objeto",
  "models.Manufacturer.determinant.undefined": "un fabricante del tipo de objeto",
  "models.Manufacturer.determinants.defined": "fabricantes de tipos de objetos",
  "models.Manufacturer.determinants.undefined": "fabricantes t\xEDpicos de objetos",
  "models.Manufacturer.properties.name.label": "Nombre del proveedor del tipo de objeto",
  "models.Manufacturer.properties.name.description": "Identifica el nombre o la marca del fabricante.",
  "models.Manufacturer.properties.website.label": "Sitio de Internet",
  "models.Manufacturer.properties.website.description": "Direcci\xF3n del sitio web del fabricante",
  "models.Legend.singular": "Leyenda",
  "models.Legend.plural": "Leyenda",
  "models.Legend.determinant.defined": "la leyenda",
  "models.Legend.determinant.undefined": "una leyenda",
  "models.Legend.determinants.defined": "las leyendas",
  "models.Legend.determinants.undefined": "leyendas",
  "models.Legend.description": "La leyenda le permite configurar las propiedades visibles cuando el plano se guarda como imagen.",
  "models.JupUserCompanyToJupRole.singular": "Rol del usuario de la empresa",
  "models.JupUserCompanyToJupRole.plural": "Roles de usuario de la empresa",
  "models.JupUserCompanyToJupRole.determinant.defined": "el rol del usuario empresarial",
  "models.JupUserCompanyToJupRole.determinant.undefined": "un rol del usuario de la empresa",
  "models.JupUserCompanyToJupRole.determinants.defined": "roles de usuario de la empresa",
  "models.JupUserCompanyToJupRole.determinants.undefined": "roles de usuario de la empresa",
  "models.JupUiView.singular": "Vista de interfaz",
  "models.JupUiView.plural": "Vistas de la interfaz",
  "models.JupUiView.determinant.defined": "la vista de la interfaz",
  "models.JupUiView.determinant.undefined": "una vista de interfaz",
  "models.JupUiView.determinants.defined": "vistas de la interfaz",
  "models.JupUiView.determinants.undefined": "vistas de la interfaz",
  "models.JupUiTenantOperation.singular": "Operaci\xF3n de interfaz para una empresa.",
  "models.JupUiTenantOperation.plural": "Operaciones de interfaz para una empresa",
  "models.JupUiTenantOperation.determinant.defined": "la operaci\xF3n de interfaz para una empresa",
  "models.JupUiTenantOperation.determinant.undefined": "una operaci\xF3n de interfaz para una empresa",
  "models.JupUiTenantOperation.determinants.defined": "operaciones de interfaz para una empresa",
  "models.JupUiTenantOperation.determinants.undefined": "operaciones de interfaz para una empresa",
  "models.JupUiOption.singular": "Opci\xF3n de interfaz",
  "models.JupUiOption.plural": "Opciones de interfaz",
  "models.JupUiOption.determinant.defined": "opci\xF3n de interfaz",
  "models.JupUiOption.determinant.undefined": "una opci\xF3n de interfaz",
  "models.JupUiOption.determinants.defined": "opciones de interfaz",
  "models.JupUiOption.determinants.undefined": "opciones de interfaz",
  "models.JupUiOperation.singular": "Operaci\xF3n de interfaz",
  "models.JupUiOperation.plural": "Operaciones de interfaz",
  "models.JupUiOperation.determinant.defined": "operaci\xF3n de interfaz",
  "models.JupUiOperation.determinant.undefined": "una operaci\xF3n de interfaz",
  "models.JupUiOperation.determinants.defined": "operaciones de interfaz",
  "models.JupUiOperation.determinants.undefined": "operaciones de interfaz",
  "models.JupUiLayout.singular": "visi\xF3n del plan",
  "models.JupUiLayout.plural": "Visiones del plan",
  "models.JupUiLayout.determinant.defined": "la visi\xF3n del plan",
  "models.JupUiLayout.determinant.undefined": "una visi\xF3n del plan",
  "models.JupUiLayout.determinants.defined": "las visiones del plan",
  "models.JupUiLayout.determinants.undefined": "visiones del plan",
  "models.JupRoleToJupUiView.singular": "Asociaci\xF3n de roles con vistas de interfaz",
  "models.JupRoleToJupUiView.plural": "Asociaciones de roles con vistas de interfaz",
  "models.JupRoleToJupUiView.determinant.defined": "asociar el rol con vistas de interfaz",
  "models.JupRoleToJupUiView.determinant.undefined": "una asociaci\xF3n del rol a las vistas de la interfaz",
  "models.JupRoleToJupUiView.determinants.defined": "asociaciones de roles con vistas de interfaz",
  "models.JupRoleToJupUiView.determinants.undefined": "asociaciones de roles con vistas de interfaz",
  "models.JupRoleToJupUiView.properties.canSee.label": "Puede ver la vista",
  "models.JupRoleToJupUiView.properties.canSee.description": "Permitir que el rol vea la vista",
  "models.JupRoleToJupUiOption.singular": "Rol de la asociaci\xF3n a las visiones del plan",
  "models.JupRoleToJupUiOption.plural": "Asociaciones de roles para planificar visiones",
  "models.JupRoleToJupUiOption.determinant.defined": "la asociaci\xF3n del rol con las visiones del plan",
  "models.JupRoleToJupUiOption.determinant.undefined": "una asociaci\xF3n del rol con las visiones del plan",
  "models.JupRoleToJupUiOption.determinants.defined": "asociaciones del rol a las visiones del plan",
  "models.JupRoleToJupUiOption.determinants.undefined": "asociaciones del rol a las visiones del plan",
  "models.JupRoleToJupUiOption.properties.canSee.label": "Puede ver la opci\xF3n",
  "models.JupRoleToJupUiOption.properties.canSee.description": "Permitir que el rol vea la opci\xF3n",
  "models.JupRoleToJupUiOperation.singular": "Asociaci\xF3n de roles con operaciones de interfaz",
  "models.JupRoleToJupUiOperation.plural": "Asociaci\xF3n de roles con operaciones de interfaz",
  "models.JupRoleToJupUiOperation.determinant.defined": "asociaci\xF3n del rol con operaciones de interfaz",
  "models.JupRoleToJupUiOperation.determinant.undefined": "una asociaci\xF3n del rol a las operaciones de interfaz",
  "models.JupRoleToJupUiOperation.determinants.defined": "asociaciones de roles con operaciones de interfaz",
  "models.JupRoleToJupUiOperation.determinants.undefined": "asociaciones de roles con operaciones de interfaz",
  "models.JupRoleToJupObjectType.singular": "Asociaci\xF3n de rol a tipo de objeto",
  "models.JupRoleToJupObjectType.plural": "Rol en las asociaciones de tipos de objetos",
  "models.JupRoleToJupObjectType.determinant.defined": "la asociaci\xF3n del rol con el tipo de objeto",
  "models.JupRoleToJupObjectType.determinant.undefined": "una asociaci\xF3n del rol al tipo de objeto",
  "models.JupRoleToJupObjectType.determinants.defined": "las asociaciones del rol al tipo de objeto",
  "models.JupRoleToJupObjectType.determinants.undefined": "asociaciones del rol al tipo de objeto",
  "models.JupRoleToJupObjectType.properties.arCreate.label": "Creaci\xF3n (C)",
  "models.JupRoleToJupObjectType.properties.arCreate.description": "Permitir la creaci\xF3n de entidades",
  "models.JupRoleToJupObjectType.properties.arRead.label": "Lectura (R)",
  "models.JupRoleToJupObjectType.properties.arRead.description": "Permite la lectura de entidades.",
  "models.JupRoleToJupObjectType.properties.arUpdate.label": "Actualizar (U)",
  "models.JupRoleToJupObjectType.properties.arUpdate.description": "Permite la actualizaci\xF3n de entidades",
  "models.JupRoleToJupObjectType.properties.arDelete.label": "Supresi\xF3n (D)",
  "models.JupRoleToJupObjectType.properties.arDelete.description": "Permite la eliminaci\xF3n de entidades",
  "models.JupRole.singular": "Papel",
  "models.JupRole.plural": "Roles",
  "models.JupRole.determinant.defined": "el papel",
  "models.JupRole.determinant.undefined": "un papel",
  "models.JupRole.determinants.defined": "los roles",
  "models.JupRole.determinants.undefined": "roles",
  "models.JupRole.views.matrix.help": "La matriz de seguridad del rol %{name}",
  "models.JupRole.views.matrix.label": "Matriz",
  "models.JupRole.views.help.help": "Resumen de permisos de roles",
  "models.JupRole.views.help.label": "Ayuda",
  "models.JupObjectType.singular": "Tipo de entidad",
  "models.JupObjectType.plural": "Tipos de entidad",
  "models.JupObjectType.determinant.defined": "el tipo de entidad",
  "models.JupObjectType.determinant.undefined": "un tipo de entidad",
  "models.JupObjectType.determinants.defined": "tipos de entidad",
  "models.JupObjectType.determinants.undefined": "tipos de entidad",
  "models.ItemTypePoint.singular": "Tipos de puntos de objetos",
  "models.ItemTypePoint.plural": "Puntos de tipos de objetos",
  "models.ItemTypePoint.determinant.defined": "punto de tipos de objetos",
  "models.ItemTypePoint.determinant.undefined": "un punto de tipos de objetos",
  "models.ItemTypePoint.determinants.defined": "puntos de tipos de objetos",
  "models.ItemTypePoint.determinants.undefined": "puntos de tipos de objetos",
  "models.ItemTypePoint.properties.id.label": "login",
  "models.ItemTypePoint.properties.id.description": "???",
  "models.ItemTypePoint.properties.x.label": "x",
  "models.ItemTypePoint.properties.x.description": "???",
  "models.ItemTypePoint.properties.y.label": "hay",
  "models.ItemTypePoint.properties.y.description": "???",
  "models.ItemTypePoint.properties.externalId.label": "Identificador externo",
  "models.ItemTypePoint.properties.externalId.description": "???",
  "models.ItemTypePoint.properties.itemTypeId.label": "Identificador de tipo de objeto",
  "models.ItemTypePoint.properties.itemTypeId.description": "???",
  "models.ItemTypePoint.properties.sortIndex.label": "\xCDndice de clasificaci\xF3n",
  "models.ItemTypePoint.properties.sortIndex.description": "???",
  "models.ItemTypePoint.properties.itemType.label": "Tipo de objeto",
  "models.ItemTypePoint.properties.itemType.description": "???",
  "models.ItemTypeFamily.singular": "familia de tipos de objetos",
  "models.ItemTypeFamily.plural": "familias de tipos de objeto",
  "models.ItemTypeFamily.determinant.defined": "la familia de tipos de objetos",
  "models.ItemTypeFamily.determinant.undefined": "una familia de tipos de objetos",
  "models.ItemTypeFamily.determinants.defined": "familias de tipos de objetos",
  "models.ItemTypeFamily.determinants.undefined": "familias de tipos de objetos",
  "models.ItemTypeFamily.description": "Le permite visualizar objetos por Familia en los planos y en el inventario en pdf.",
  "models.ItemTypeFamily.properties.id.label": "Identificador de la familia de tipos del objeto.",
  "models.ItemTypeFamily.properties.name.label": "Nombre de la familia de tipos del objeto.",
  "models.ItemTypeFamily.properties.name.description": "El nombre de la familia permite identificarla, este nombre se utiliza para agrupar los tipos de objeto",
  "models.ItemType.singular": "tipo de objeto",
  "models.ItemType.plural": "tipos de objetos",
  "models.ItemType.determinant.defined": "el tipo de objeto",
  "models.ItemType.determinant.undefined": "un tipo de objeto",
  "models.ItemType.determinants.defined": "tipos de objeto",
  "models.ItemType.determinants.undefined": "tipos de objeto",
  "models.ItemType.properties.id.label": "Identificador del tipo del objeto",
  "models.ItemType.properties.id.description": "Identificador del tipo del objeto",
  "models.ItemType.properties.description.label": "Descripci\xF3n",
  "models.ItemType.properties.description.description": "Permite tener informaci\xF3n adicional sobre el tipo de objeto",
  "models.ItemType.properties.name.label": "Nombre del tipo de objeto",
  "models.ItemType.properties.name.description": "Permite identificar r\xE1pidamente el tipo de objeto con un nombre completo, l\xF3gico y descriptivo; Puedes indicar las dimensiones, por ejemplo: Mesa de reuniones 340x120; Consejo: comience siempre con la dimensi\xF3n m\xE1s grande",
  "models.ItemType.properties.zIndex.label": "\xCDndice de altura",
  "models.ItemType.properties.zIndex.description": "Cuanto mayor sea el \xEDndice de altura, m\xE1s se posicionar\xE1 el objeto por encima de los dem\xE1s; Puede ser negativo; por ejemplo para un asiento: -1; Consejo: para iconos, establezca el \xEDndice en 9",
  "models.ItemType.properties.picture.label": "foto",
  "models.ItemType.properties.picture.description": "Permite cargar la foto del tipo de objeto, que ser\xE1 visible en el inventario en PDF y en la hoja del objeto seleccionado en el plano.",
  "models.ItemType.properties.iconShape.label": "Forma de icono",
  "models.ItemType.properties.iconShape.description": "La forma del icono puede influir en su visualizaci\xF3n en el plano",
  "models.ItemType.properties.displayItemReferenceInMap.label": "Mostrar informaci\xF3n del plan",
  "models.ItemType.properties.displayItemReferenceInMap.description": "Le permite mostrar el campo \u201CReferencia\u201D de cada objeto en el plano.",
  "models.ItemType.properties.code.label": "c\xF3digo",
  "models.ItemType.properties.code.description": "Le permite acceder r\xE1pidamente al tipo de objeto escribiendo el c\xF3digo en la b\xFAsqueda durante la creaci\xF3n del objeto.",
  "models.ItemType.properties.icon.label": "Icono",
  "models.ItemType.properties.icon.description": "Le brinda acceso a tres tipos de \xEDconos: 1) \xEDconos \u201CFontawsome\u201D, visibles marcando \u201Cmostrar todo\u201D o buscando por palabra clave en ingl\xE9s en el cuadro de b\xFAsqueda; 2) \xCDconos \u201CSURFY\u201D destinados a ilustraciones agregadas a planos en ubicaciones estrat\xE9gicas (Ba\xF1os, Escaleras, Ascensores, Puntos de Copia, etc.) pero que tambi\xE9n pueden usarse como \xEDconos cl\xE1sicos; 3) Los Iconos \u201CSURFY 2\u201D que enumeran los iconos reglamentarios de la norma de Seguridad ISO 7010; Su forma puede ser redonda, cuadrada o triangular.",
  "models.ItemType.properties.color.label": "color",
  "models.ItemType.properties.color.description": "Se puede elegir entre una preselecci\xF3n o una selecci\xF3n avanzada mediante c\xF3digo Hexa o RGB para respetar su carta gr\xE1fica.",
  "models.ItemType.properties.height.label": "Altura",
  "models.ItemType.properties.height.description": "Permite dar la altura en cent\xEDmetros del tipo de objeto en visi\xF3n 3d",
  "models.ItemType.properties.price.label": "Precio",
  "models.ItemType.properties.price.description": "El precio de compra del tipo de art\xEDculo.",
  "models.ItemType.properties.seatsCount.label": "Numero de asientos",
  "models.ItemType.properties.seatsCount.description": "El n\xFAmero de plazas para este tipo de objetos (sill\xF3n, butaca, sof\xE1, etc.) se acumula en Surfy por espacio, planta y edificio",
  "models.ItemType.properties.manufacturer.description": "Le permite identificar el fabricante del tipo de objeto.",
  "models.ItemType.properties.carbonFootprint.label": "huella de carbono",
  "models.ItemType.properties.carbonFootprint.description": "La huella de carbono es el peso en Kilogramos de CO2 que emite cada objeto de este tipo; lo da el fabricante",
  "models.ItemType.properties.iconBackgroundColor.label": "Color de fondo del icono",
  "models.ItemType.properties.iconBackgroundColor.description": "El color de fondo le permite configurar correctamente los iconos multicolores, particularmente los triangulares.",
  "models.ItemType.properties.iconBorderColor.label": "Color del borde del icono",
  "models.ItemType.properties.iconBorderColor.description": "El color del borde le permite configurar correctamente los iconos multicolores, especialmente los triangulares.",
  "models.ItemType.properties.isAffectable.label": "\xBFEs asociable con una persona?",
  "models.ItemType.properties.isAffectable.description": "Permite saber si el tipo de objeto se puede asociar a una persona",
  "models.ItemType.properties.excludeFromPathfinding.label": "Habilitar navegaci\xF3n",
  "models.ItemType.properties.excludeFromPathfinding.description": "Le permite habilitar la navegaci\xF3n para este tipo de objeto.",
  "models.ItemType.views.shape-editor.help": "Edite la forma del tipo de objeto %{name}",
  "models.ItemType.views.shape-editor.label": "Editar forma",
  "models.ItemType.views.avatar.help": "Ver la forma de %{name}",
  "models.ItemType.views.avatar.label": "Formulario",
  "models.ItemType.views.dq-not-used.label": "No utilizado",
  "models.ItemType.views.dq-not-used.help": "Enumere todos los tipos de objetos no utilizados mediante objetos o mediante tipos de estaciones de trabajo no utilizados",
  "models.ItemToPerson.singular": "Asociaci\xF3n de objeto a persona",
  "models.ItemToPerson.plural": "Asociaciones de objeto a persona",
  "models.ItemToPerson.description": "Permite asociar un objeto a una persona (asiento ergon\xF3mico, taquilla)",
  "models.ItemToPerson.determinant.defined": "asociaci\xF3n de objeto a persona",
  "models.ItemToPerson.determinant.undefined": "una asociaci\xF3n de objeto a persona",
  "models.ItemToPerson.determinants.defined": "asociaciones de objeto a persona",
  "models.ItemToPerson.determinants.undefined": "asociaciones de objeto a persona",
  "models.ItemFact.singular": "Movimiento de objetos",
  "models.ItemFact.plural": "Movimientos de objetos",
  "models.ItemFact.determinant.defined": "el movimiento de un objeto",
  "models.ItemFact.determinant.undefined": "un movimiento de objeto",
  "models.ItemFact.determinants.defined": "movimientos de objetos",
  "models.ItemFact.determinants.undefined": "movimientos de objetos",
  "models.Item.singular": "objeto",
  "models.Item.plural": "objetos",
  "models.Item.determinant.defined": "sujeto",
  "models.Item.determinant.undefined": "un objeto",
  "models.Item.determinants.defined": "los objetos",
  "models.Item.determinants.undefined": "los objetos",
  "models.Item.views.dq-item-not-in-workplace-room.label": "Espacios de objetos diferentes de espacios de estaciones de trabajo",
  "models.Item.views.dq-item-not-in-workplace-room.help": "Lista de objetos f\xEDsicos en estaciones de trabajo que se encuentran en espacios diferentes a los espacios de la estaci\xF3n de trabajo",
  "models.Item.properties.id.label": "Identificador del objeto",
  "models.Item.properties.price.label": "Precio",
  "models.Item.properties.price.description": "El precio de compra del art\xEDculo si es diferente del precio del tipo de art\xEDculo.",
  "models.Item.properties.reference.label": "Referencia de objeto",
  "models.Item.properties.reference.description": "La referencia de objeto se utiliza para encontrarlo y diferenciar este objeto de otros.",
  "models.Item.properties.code.label": "C\xF3digo inmovilizador",
  "models.Item.properties.code.description": "El n\xFAmero de activo se utiliza para mantener el n\xFAmero de contabilidad.",
  "models.Item.properties.purchaseDate.label": "Fecha de compra",
  "models.Item.properties.purchaseDate.description": "La fecha de compra del objeto.",
  "models.Item.properties.room.label": "Espacio de objetos",
  "models.Item.properties.itemAffectationsCount.label": "N\xFAmero de asociaciones a personas.",
  "models.Item.properties.itemAffectationsCount.description": "El n\xFAmero de asociaciones de este objeto con personas.",
  "models.Floor.singular": "piso",
  "models.Floor.plural": "pisos",
  "models.Floor.determinant.defined": "arriba",
  "models.Floor.determinant.undefined": "un piso",
  "models.Floor.determinants.defined": "Las etapas",
  "models.Floor.determinants.undefined": "pisos",
  "models.Floor.description": "Los pisos representan una superficie de trabajo o un nivel de un edificio.",
  "models.Floor.views.map.help": "Plano de planta %{name} en 2d",
  "models.Floor.views.map.label": "Plan 2d",
  "models.Floor.views.3d.help": "Plano de planta %{name} en 3d",
  "models.Floor.views.3d.label": "Plano 3d",
  "models.Floor.views.cuby.help": "Plano de planta %{name} en 3d",
  "models.Floor.views.cuby.label": "3d",
  "models.Floor.views.simple-list.help": "Lista de pisos con pocos detalles",
  "models.Floor.views.simple-list.label": "Lista simple",
  "models.Floor.views.geojson.help": "Ver informaci\xF3n en GeoJson",
  "models.Floor.views.geojson.label": "Copiar coordenadas GeoJson",
  "models.Floor.views.standalone-2d-map.help": "El plano de planta %{name} en 2d sin men\xFA",
  "models.Floor.views.standalone-2d-map.label": "solo plano 2d",
  "models.Floor.properties.id.label": "Identificador del piso",
  "models.Floor.properties.name.label": "Nombre del piso",
  "models.Floor.properties.name.description": "El nombre del piso se usa para poder encontrarlo f\xE1cilmente.",
  "models.Floor.properties.level.label": "nivel",
  "models.Floor.properties.level.description": "El nivel del piso permite definir su posici\xF3n con respecto a los otros pisos, por ejemplo, use 0 para la planta baja o -1 para los aparcamientos",
  "models.Floor.properties.backgroundLayout.label": "Plan de fondo",
  "models.Floor.properties.backgroundLayout.description": "El fondo le permite tener un primer nivel de capa para volver a dibujar los planos, debe ser a escala",
  "models.Floor.properties.backgroundLayoutOpacity.label": "Opacidad de fondo",
  "models.Floor.properties.backgroundLayoutOpacity.description": "La opacidad le permite ver m\xE1s o menos el fondo.",
  "models.Floor.properties.regulatoryCapacity.label": "Capacidad reguladora",
  "models.Floor.properties.regulatoryCapacity.description": "La capacidad reguladora de la plataforma permite gestionar la evacuaci\xF3n de p\xFAblico y empleados",
  "models.Floor.properties.pathfindingGraph.label": "Gr\xE1fico de navegaci\xF3n de piso",
  "models.Floor.properties.pathfindingGraph.description": "El gr\xE1fico de navegaci\xF3n le permite calcular los caminos m\xE1s cortos entre puntos del suelo.",
  "models.Floor.properties.workplacesCount.label": "Cantidad de estaciones de trabajo",
  "models.Floor.properties.workplacesCount.description": "El n\xFAmero de estaciones de trabajo en el piso se calcula autom\xE1ticamente.",
  "models.Floor.properties.workplacesRatio.label": "Proporci\xF3n de la estaci\xF3n de trabajo",
  "models.Floor.properties.workplacesRatio.description": "La relaci\xF3n de estaci\xF3n de trabajo es el n\xFAmero de metros cuadrados en el piso dividido por el n\xFAmero de estaciones de trabajo, este valor se calcula autom\xE1ticamente",
  "models.Floor.properties.peopleCount.label": "Numero de asignaciones",
  "models.Floor.properties.peopleCount.description": "El n\xFAmero de personas asignadas al piso, ya sea directamente asignadas a los espacios o a trav\xE9s de una estaci\xF3n de trabajo.",
  "models.Floor.properties.totalPeopleCount.label": "N\xFAmero de asignaciones totales",
  "models.Floor.properties.totalPeopleCount.description": "El n\xFAmero de personas asignadas al piso, ya sea directamente asignadas a los espacios o a trav\xE9s de una estaci\xF3n de trabajo.",
  "models.Floor.properties.peopleRatio.label": "Ratio de ocupaci\xF3n",
  "models.Floor.properties.peopleRatio.description": "El ratio de ocupaci\xF3n es el n\xFAmero de metros cuadrados de planta dividido por el n\xFAmero de personas asignadas ya sea directamente a los espacios o a trav\xE9s de una estaci\xF3n de trabajo, este valor se calcula",
  "models.Floor.properties.freeWorkplacesCount.label": "Numero de vacantes",
  "models.Floor.properties.freeWorkplacesCount.description": "N\xFAmero de extensiones libres en el piso",
  "models.Floor.properties.flexWorkplacesCount.label": "N\xFAmero de posiciones de flexi\xF3n",
  "models.Floor.properties.flexWorkplacesCount.description": "N\xFAmero de posiciones de flexi\xF3n en el suelo",
  "models.Floor.properties.roomsArea.label": "Superficie calificada",
  "models.Floor.properties.roomsArea.description": "La superficie calificada es la suma de las superficies de los espacios",
  "models.Floor.properties.roomsCount.label": "N\xFAmero de espacios",
  "models.Floor.properties.roomsCount.description": "El n\xFAmero de espacios presentes en este piso",
  "models.Floor.properties.sharedWorkplacesCount.label": "N\xFAmero de estaciones de trabajo compartidas",
  "models.Floor.properties.sharedWorkplacesCount.description": "N\xFAmero de puestos de trabajo compartidos en el suelo por al menos 2 personas",
  "models.Floor.properties.sharedWorkplacesRatio.label": "Tasa de puestos de trabajo compartidos",
  "models.Floor.properties.sharedWorkplacesRatio.description": "Tasa de estaciones de trabajo compartidas por al menos 2 personas en comparaci\xF3n con todas las estaciones de trabajo en el piso",
  "models.Floor.properties.flexRatio.label": "Tasa de estaciones de trabajo flexibles",
  "models.Floor.properties.flexRatio.description": "La tasa de estaciones de trabajo flexibles se calcula dividiendo el n\xFAmero de estaciones de trabajo flexibles por el n\xFAmero total de estaciones de trabajo",
  "models.Floor.properties.transitWorkplacesCount.label": "N\xFAmero de estaciones de trabajo de tr\xE1nsito",
  "models.Floor.properties.transitWorkplacesCount.description": "N\xFAmero de puestos de trabajo temporales, estos puestos no se cuentan en puestos libres y no son flexibles",
  "models.Floor.properties.height.label": "Altura del techo",
  "models.Floor.properties.height.description": "La altura bajo el techo del piso.",
  "models.Floor.properties.mapScale.label": "escala del plan",
  "models.Floor.properties.mapScale.description": "La escala nos permite calcular proporcionalmente las \xE1reas y tama\xF1os reales de los objetos.",
  "models.FactType.singular": "Tipo de hecho",
  "models.FactType.plural": "Tipos de hechos",
  "models.FactType.determinant.defined": "el tipo de hecho",
  "models.FactType.determinant.undefined": "un tipo de hecho",
  "models.FactType.determinants.defined": "tipos de hecho",
  "models.FactType.determinants.undefined": "tipos de hecho",
  "models.Fact.singular": "Hecho",
  "models.Fact.plural": "Hechos",
  "models.Fact.determinant.defined": "el hecho",
  "models.Fact.determinant.undefined": "un hecho",
  "models.Fact.determinants.defined": "los hechos",
  "models.Fact.determinants.undefined": "hechos",
  "models.DistributionCostType.singular": "tipo de distribuci\xF3n de costos",
  "models.DistributionCostType.plural": "tipos de distribuci\xF3n de costos",
  "models.DistributionCostType.determinant.defined": "el tipo de distribuci\xF3n de costos",
  "models.DistributionCostType.determinant.undefined": "un tipo de distribuci\xF3n de costos",
  "models.DistributionCostType.determinants.defined": "tipos de distribuci\xF3n de costos",
  "models.DistributionCostType.determinants.undefined": "tipos de distribuci\xF3n de costos",
  "models.DistributionCostType.properties.name.label": "Nombre del tipo de distribuci\xF3n de costos.",
  "models.DistributionCostType.properties.code.labe": "c\xF3digo",
  "models.DistributionCostType.properties.code.description": "El c\xF3digo se usa para poder calcular autom\xE1ticamente los costos asociados",
  "models.DimensionTypeToBuilding.singular": "Tipo de capa de asignaci\xF3n de edificio",
  "models.DimensionTypeToBuilding.plural": "Tipos de capas de asignaci\xF3n de edificios",
  "models.DimensionTypeToBuilding.determinant.defined": "el tipo de capa de asignaci\xF3n de edificio",
  "models.DimensionTypeToBuilding.determinant.undefined": "un tipo de capa de asignaci\xF3n de edificios",
  "models.DimensionTypeToBuilding.determinants.defined": "los tipos de capas de asignaci\xF3n de edificios",
  "models.DimensionTypeToBuilding.determinants.undefined": "tipos de capas de asignaci\xF3n de edificios",
  "models.DimensionTypeToBuilding.description": "Los tipos de capas de asignaci\xF3n de edificios le permiten definir los diferentes tipos de capas de asignaci\xF3n de edificios. Al asociar un tipo de capa de asignaci\xF3n a un edificio, esto le permite transformar una capa de an\xE1lisis en una capa de asignaci\xF3n.",
  "models.DimensionType.singular": "Tipo de capa",
  "models.DimensionType.plural": "Tipos de capa",
  "models.DimensionType.determinant.defined": "el tipo de capa",
  "models.DimensionType.determinant.undefined": "un tipo de capa",
  "models.DimensionType.determinants.defined": "tipos de capas",
  "models.DimensionType.determinants.undefined": "tipos de capas por piso",
  "models.DimensionType.properties.id.label": "Identificador del tipo de dimensi\xF3n.",
  "models.DimensionType.properties.order.label": "Orden de visualizaci\xF3n",
  "models.DimensionType.properties.order.description": "Le permite ordenar tipos de capas para mostrarlas",
  "models.DimensionType.properties.name.label": "Nombre del tipo de dimensi\xF3n.",
  "models.DimensionType.properties.code.label": "C\xF3digo de tipo de dimensi\xF3n",
  "models.DimensionType.properties.code.description": "El c\xF3digo identifica el tipo de dimensi\xF3n, se usa cuando se aplican c\xE1lculos espec\xEDficos al tipo de dimensi\xF3n",
  "models.DimensionToPerson.singular": "Asignaci\xF3n a capa de asignaci\xF3n",
  "models.DimensionToPerson.plural": "Asignaciones a capas de asignaci\xF3n",
  "models.DimensionToPerson.description": "Le permite asignar una persona a un distrito, territorio o aldea.",
  "models.DimensionToPerson.determinant.defined": "la asignaci\xF3n a la capa de asignaci\xF3n",
  "models.DimensionToPerson.determinant.undefined": "una asignaci\xF3n a la capa de asignaci\xF3n",
  "models.DimensionToPerson.determinants.defined": "asignaciones a capas de asignaci\xF3n",
  "models.DimensionToPerson.determinants.undefined": "asignaciones a capas de asignaci\xF3n",
  "models.DimensionRoom.singular": "Capa de an\xE1lisis espacial",
  "models.DimensionRoom.plural": "Capas de an\xE1lisis espacial.",
  "models.DimensionRoom.determinant.defined": "la capa de an\xE1lisis espacial",
  "models.DimensionRoom.determinant.undefined": "una capa de an\xE1lisis espacial",
  "models.DimensionRoom.determinants.defined": "capas de an\xE1lisis espacial",
  "models.DimensionRoom.determinants.undefined": "capas de an\xE1lisis espacial",
  "models.DimensionRoom.properties.id.label": "Identificador de la capa de an\xE1lisis espacial.",
  "models.DimensionFloor.singular": "Capa de an\xE1lisis por piso",
  "models.DimensionFloor.plural": "An\xE1lisis de capas por piso",
  "models.DimensionFloor.determinant.defined": "la capa de an\xE1lisis por piso",
  "models.DimensionFloor.determinant.undefined": "una capa de an\xE1lisis por piso",
  "models.DimensionFloor.determinants.defined": "capas de an\xE1lisis por piso",
  "models.DimensionFloor.determinants.undefined": "capas de an\xE1lisis por piso",
  "models.DimensionFloor.properties.id.label": "Identificador de capa de an\xE1lisis por piso",
  "models.DimensionFloor.properties.peopleCount.label": "Numero de asignaciones",
  "models.DimensionFloor.properties.peopleCount.description": "El n\xFAmero de personas asignadas, ya sea directamente asignadas a los espacios o a trav\xE9s de una estaci\xF3n de trabajo para este piso.",
  "models.DimensionFloor.properties.totalPeopleCount.label": "N\xFAmero total de asignaciones indirectas en la sala",
  "models.DimensionFloor.properties.totalPeopleCount.description": "El n\xFAmero total de personas asignadas indirectamente al piso, ya sea directamente asignadas a espacios o a trav\xE9s de una estaci\xF3n de trabajo, pero no a trav\xE9s de las capas de asignaci\xF3n que est\xE1n solo en el nivel del edificio.",
  "models.DimensionBuilding.singular": "Capa de an\xE1lisis construyendo",
  "models.DimensionBuilding.plural": "An\xE1lisis de capas construyendo",
  "models.DimensionBuilding.determinant.defined": "la capa de an\xE1lisis mediante la construcci\xF3n",
  "models.DimensionBuilding.determinant.undefined": "una capa de an\xE1lisis por edificio",
  "models.DimensionBuilding.determinants.defined": "capas de an\xE1lisis mediante la construcci\xF3n",
  "models.DimensionBuilding.determinants.undefined": "capas de an\xE1lisis mediante la construcci\xF3n",
  "models.DimensionBuilding.properties.id.label": "Identificador de capa de an\xE1lisis construyendo",
  "models.DimensionBuilding.properties.dimensionPeopleCount.label": "N\xFAmero de asignaciones directamente a esta capa de asignaci\xF3n",
  "models.DimensionBuilding.properties.dimensionPeopleCount.description": "El n\xFAmero de personas asignadas a esta capa de asignaci\xF3n para todo el edificio.",
  "models.DimensionBuilding.properties.totalPeopleCount.label": "N\xFAmero total de asignaciones",
  "models.DimensionBuilding.properties.totalPeopleCount.description": "El n\xFAmero total de personas asignadas, ya sea directamente asignadas a espacios, a trav\xE9s de una estaci\xF3n de trabajo o mediante una capa de asignaci\xF3n.",
  "models.Dimension.singular": "Capa de an\xE1lisis",
  "models.Dimension.plural": "Capas de an\xE1lisis",
  "models.Dimension.determinant.defined": "la capa de an\xE1lisis",
  "models.Dimension.determinant.undefined": "una capa de an\xE1lisis",
  "models.Dimension.determinants.defined": "capas de an\xE1lisis",
  "models.Dimension.determinants.undefined": "capas de an\xE1lisis",
  "models.Dimension.properties.id.label": "Identificador de capa de an\xE1lisis",
  "models.Dimension.properties.id.description": "Identificador interno de surf",
  "models.Dimension.properties.name.label": "Nombre de la capa de an\xE1lisis.",
  "models.Dimension.properties.name.description": "\xDAtil para diferenciar la capa entre otras.",
  "models.Dimension.properties.color.label": "color",
  "models.Dimension.properties.color.description": "El color de la capa de an\xE1lisis permite diferenciar espacios en el plano.",
  "models.Dimension.properties.value.label": "Valor num\xE9rico",
  "models.Dimension.properties.value.description": "El valor se puede usar para asociar la capa con un valor num\xE9rico para poder realizar estad\xEDsticas anal\xEDticas",
  "models.Dimension.properties.peopleCount.label": "N\xFAmero de asignaciones directas",
  "models.Dimension.properties.peopleCount.description": "El n\xFAmero de personas que est\xE1n asignadas directamente a esta capa de asignaci\xF3n en el edificio",
  "models.Dimension.properties.manualPeopleCount.label": "N\xFAmero de asignaciones manuales directas",
  "models.Dimension.properties.manualPeopleCount.description": "La cantidad de personas que est\xE1n asignadas directamente a esta capa de asignaci\xF3n sin considerar asignaciones con personas reales",
  "models.Dimension.properties.totalPeopleCount.label": "N\xFAmero total de asignaciones directas",
  "models.Dimension.properties.totalPeopleCount.description": "El n\xFAmero total de personas asignadas directamente a esta capa de asignaci\xF3n en el edificio, la suma de las personas reales asignadas y el n\xFAmero de personas asignadas manualmente.",
  "models.Dimension.properties.carbonFootprintPerMeter.label": "Huella de carbono por metro cuadrado",
  "models.Dimension.properties.carbonFootprintPerMeter.description": "La huella de carbono por metro cuadrado calcula la huella de carbono en kilogramos de CO2 de una capa de an\xE1lisis por metro cuadrado",
  "models.CostCenterFloor.singular": "centro de costos de piso",
  "models.CostCenterFloor.plural": "centros de costos piso",
  "models.CostCenterFloor.determinant.defined": "el centro de costos de los pisos",
  "models.CostCenterFloor.determinant.undefined": "un centro de costo m\xEDnimo",
  "models.CostCenterFloor.determinants.defined": "centros de costos de piso",
  "models.CostCenterFloor.determinants.undefined": "centros de costos de piso",
  "models.CostCenterBuilding.singular": "centro de costos de construcci\xF3n",
  "models.CostCenterBuilding.plural": "centros de costos de construcci\xF3n",
  "models.CostCenterBuilding.determinant.defined": "el centro de costos de los edificios",
  "models.CostCenterBuilding.determinant.undefined": "un centro de costos de construcci\xF3n",
  "models.CostCenterBuilding.determinants.defined": "centros de costos de construcci\xF3n",
  "models.CostCenterBuilding.determinants.undefined": "centros de costos de construcci\xF3n",
  "models.CostCenter.singular": "centro de coste",
  "models.CostCenter.plural": "Centros de costo",
  "models.CostCenter.description": "El centro de costos permite distribuir espacios din\xE1micamente para refacturar",
  "models.CostCenter.determinant.defined": "el centro de costo",
  "models.CostCenter.determinant.undefined": "un centro de costos",
  "models.CostCenter.determinants.defined": "Centros de costo",
  "models.CostCenter.determinants.undefined": "Centros de costo",
  "models.CostCenter.properties.id.label": "Identificador del centro de costos",
  "models.CostCenter.properties.name.label": "Nombre del centro de costos",
  "models.CostCenter.properties.color.label": "color",
  "models.CostCenter.properties.distributeByFloor.label": "Distribuir por piso",
  "models.CostCenter.properties.distributeByFloor.description": "Prorratear el espacio utilizado por este centro de costos en el piso a otros centros de costos en el mismo piso",
  "models.CostCenter.properties.distributeByBuilding.label": "Distribuir por edificio",
  "models.CostCenter.properties.distributeByBuilding.description": "Prorratea el espacio utilizado por este centro de costos en el edificio a los otros centros de costos en el edificio.",
  "models.ContentRoleToUserCompany.singular": "Rol de contenido de usuario de la empresa",
  "models.ContentRoleToUserCompany.plural": "Funciones de contenido de usuario de la empresa",
  "models.ContentRoleToUserCompany.determinant.defined": "la funci\xF3n de contenido del usuario empresarial",
  "models.ContentRoleToUserCompany.determinant.undefined": "un rol de contenido de usuario empresarial",
  "models.ContentRoleToUserCompany.determinants.defined": "roles de contenido de usuario de la empresa",
  "models.ContentRoleToUserCompany.determinants.undefined": "roles de contenido de usuario de la empresa",
  "models.ContentRoleToJupUiTenantOperation.singular": "Asociaci\xF3n de funciones de contenido a operaciones de interfaz para una empresa",
  "models.ContentRoleToJupUiTenantOperation.plural": "Asociaci\xF3n de funciones de contenido a operaciones de interfaz para una empresa",
  "models.ContentRoleToJupUiTenantOperation.determinant.defined": "asociar el rol de contenido con operaciones de interfaz para una empresa",
  "models.ContentRoleToJupUiTenantOperation.determinant.undefined": "una asociaci\xF3n del rol de contenido a las operaciones de interfaz para una empresa",
  "models.ContentRoleToJupUiTenantOperation.determinants.defined": "asociaciones de roles de contenido para operaciones de interfaz para una empresa",
  "models.ContentRoleToJupUiTenantOperation.determinants.undefined": "asociaciones de roles de contenido para operaciones de interfaz para una empresa",
  "models.ContentRoleToFloor.singular": "Funci\xF3n de asociaci\xF3n del contenido a los pisos",
  "models.ContentRoleToFloor.plural": "Asociaciones de roles de contenido a pisos",
  "models.ContentRoleToFloor.determinant.defined": "la asociaci\xF3n del papel del contenido a los pisos",
  "models.ContentRoleToFloor.determinant.undefined": "una asociaci\xF3n del papel del contenido a los pisos",
  "models.ContentRoleToFloor.determinants.defined": "las asociaciones del papel del contenido a los pisos",
  "models.ContentRoleToFloor.determinants.undefined": "asociaciones del papel del contenido a los pisos",
  "models.ContentRoleToBuilding.singular": "Asociaci\xF3n de roles de contenido con edificios",
  "models.ContentRoleToBuilding.plural": "Asociaciones de roles de contenido a edificios",
  "models.ContentRoleToBuilding.determinant.defined": "la asociaci\xF3n del papel del contenido a los edificios",
  "models.ContentRoleToBuilding.determinant.undefined": "una asociaci\xF3n del papel del contenido a los edificios",
  "models.ContentRoleToBuilding.determinants.defined": "asociaciones del papel del contenido a los edificios",
  "models.ContentRoleToBuilding.determinants.undefined": "asociaciones del papel del contenido a los edificios",
  "models.ContentRole.singular": "Rol de contenido",
  "models.ContentRole.plural": "Roles de contenido",
  "models.ContentRole.determinant.defined": "el papel del contenido",
  "models.ContentRole.determinant.undefined": "un rol de contenido",
  "models.ContentRole.determinants.defined": "roles de contenido",
  "models.ContentRole.determinants.undefined": "roles de contenido",
  "models.CompanyType.singular": "Tipo de empresa",
  "models.CompanyType.plural": "tipo de negocios",
  "models.CompanyType.determinant.defined": "el tipo de negocio",
  "models.CompanyType.determinant.undefined": "un tipo de negocio",
  "models.CompanyType.determinants.defined": "tipos de negocios",
  "models.CompanyType.determinants.undefined": "tipos de negocios",
  "models.CompanyType.properties.name.label": "Nombre del tipo de negocio",
  "models.Company.singular": "negocios",
  "models.Company.plural": "negocios",
  "models.Company.determinant.defined": "ahora",
  "models.Company.determinant.undefined": "una empresa",
  "models.Company.determinants.defined": "las empresas",
  "models.Company.determinants.undefined": "empresas",
  "models.Company.properties.id.label": "Identificaci\xF3n de la compa\xF1\xEDa",
  "models.Company.properties.logoPath.label": "logo",
  "models.Company.properties.logoPath.description": "La ruta del logotipo de su empresa",
  "models.Company.properties.iconPath.label": "icono",
  "models.Company.properties.iconPath.description": "El logo de la empresa en cuadrado",
  "models.Company.properties.name.label": "nombre de la empresa",
  "models.Company.properties.workingDaysCount.label": "N\xFAmero de d\xEDas laborables por semana",
  "models.Company.properties.workingDaysCount.description": "El n\xFAmero de d\xEDas laborables a la semana puede ser de 5 para los d\xEDas laborables, 6 incluido el s\xE1bado y 7 incluido el domingo",
  "models.Company.views.usage.label": "Uso de plataformas",
  "models.Company.views.usage.help": "Comprender el uso de las plataformas disponibles",
  "models.Company.views.cards.help": "Vista de negocios de azulejos.",
  "models.Company.views.cards.label": "Azulejos",
  "models.Company.views.dq-fix-inventory.label": "Consistencia del inventario",
  "models.Company.views.dq-fix-inventory.help": "Encuentre y repare inconsistencias de inventario f\xEDsico y virtual para estaciones de trabajo",
  "models.Company.views.dq-shapes-position.label": "Colocaci\xF3n de formas",
  "models.Company.views.dq-shapes-position.help": "Encuentre y cambie la posici\xF3n de las formas que est\xE1n en el plano en un espacio diferente al de la base de datos",
  "models.Company.views.people-info.label": "Estad\xEDsticas sobre la creaci\xF3n de tareas por parte de las personas",
  "models.Company.views.people-info.help": "Ver estad\xEDsticas de tareas",
  "models.Company.reports.export-all.fileName": "respaldo",
  "models.Company.reports.export-all.help": "Haga una copia de seguridad de todos los datos de Surfy",
  "models.Company.reports.export-all-duplicate.fileName": "duplicaci\xF3n",
  "models.Company.reports.export-all-duplicate.help": "Backup de datos de la empresa para hacer una copia de la plataforma",
  "models.Campus.singular": "campus",
  "models.Campus.plural": "campus",
  "models.Campus.description": "Campus se utiliza para agrupar edificios que se encuentran en la misma ubicaci\xF3n.",
  "models.Campus.determinant.defined": "el campus",
  "models.Campus.determinant.undefined": "un campus",
  "models.Campus.determinants.defined": "campus",
  "models.Campus.determinants.undefined": "campus",
  "models.Campus.views.cards.help": "Vista grupal de edificios.",
  "models.Campus.views.cards.label": "Info",
  "models.Campus.properties.id.label": "Identificaci\xF3n del campus",
  "models.Campus.properties.name.label": "Nombre del campus",
  "models.Campus.properties.name.description": "Nombre del campus",
  "models.Campus.properties.color.label": "color",
  "models.Campus.properties.color.description": "color del campus",
  "models.Campus.properties.externalId.label": "Identificador externo",
  "models.BuildingType.singular": "tipo de edificio",
  "models.BuildingType.plural": "tipos de edificios",
  "models.BuildingType.determinant.defined": "el tipo de edificio",
  "models.BuildingType.determinant.undefined": "un tipo de edificio",
  "models.BuildingType.determinants.defined": "tipos de edificios",
  "models.BuildingType.determinants.undefined": "tipos de edificios",
  "models.BuildingType.properties.id.label": "Identificador del tipo de edificio.",
  "models.BuildingType.properties.name.label": "Nombre del tipo de edificio.",
  "models.BuildingType.properties.name.description": "Nombre del tipo de edificio.",
  "models.BuildingType.properties.code.label": "c\xF3digo",
  "models.BuildingType.properties.code.description": "???",
  "models.BuildingType.properties.externalId.label": "Identificador externo",
  "models.BuildingType.properties.externalId.description": "???",
  "models.Building.singular": "Edificio",
  "models.Building.plural": "edificios",
  "models.Building.determinant.defined": "el edificio",
  "models.Building.determinant.undefined": "un edificio",
  "models.Building.determinants.defined": "los edificios",
  "models.Building.determinants.undefined": "edificios",
  "models.Building.description": "El edificio se utiliza para agrupar las plantas.",
  "models.Building.reports.workplaces.fileName": "Estaciones de trabajo",
  "models.Building.reports.workplaces.help": "Informe de la estaci\xF3n de trabajo del edificio",
  "models.Building.reports.allWorkplaces.fileName": "Estaciones de trabajo con asignaciones",
  "models.Building.reports.allWorkplaces.help": "Informe de todas las estaciones de trabajo del edificio, incluidas las asignaciones.",
  "models.Building.reports.workplaceAffectations.fileName": "Asignaciones de estaciones de trabajo",
  "models.Building.reports.workplaceAffectations.help": "Informe de asignaci\xF3n de estaciones de trabajo del edificio",
  "models.Building.reports.buildingPeople.fileName": "Gente",
  "models.Building.reports.buildingPeople.help": "Informe de afectados en el edificio",
  "models.Building.reports.organizations.fileName": "Organizaciones",
  "models.Building.reports.organizations.help": "Informe de organizaciones de construcci\xF3n",
  "models.Building.reports.buildingItems.fileName": "inventario",
  "models.Building.reports.buildingItems.help": "Informe de inventario de edificios",
  "models.Building.reports.area.fileName": "Espacios",
  "models.Building.reports.area.help": "Informe de espacios de construcci\xF3n",
  "models.Building.reports.buildingCleaning.fileName": "Beneficios",
  "models.Building.reports.buildingCleaning.help": "Informe de servicios de limpieza de edificios",
  "models.Building.reports.buildingDimensions.fileName": "Capas de an\xE1lisis",
  "models.Building.reports.buildingDimensions.help": "Informe de capas de an\xE1lisis del espacio del edificio",
  "models.Building.views.cards.help": "Vista de edificios de azulejos",
  "models.Building.views.cards.label": "Info",
  "models.Building.views.pictures.help": "Ver edificios con fotos",
  "models.Building.views.pictures.label": "Im\xE1genes",
  "models.Building.views.gmap.help": "Ver los edificios en un mapa",
  "models.Building.views.gmap.label": "Mapa",
  "models.Building.views.cost-distribution-by-cost-center.help": "<b>Claves de distribuci\xF3n</b> y superficie calificada por centro de coste del edificio %{name}",
  "models.Building.views.cost-distribution-by-cost-center.label": "Claves de distribuci\xF3n",
  "models.Building.views.3d-cards.help": "Ver edificios 3d",
  "models.Building.views.3d-cards.label": "3d",
  "models.Building.views.assets.help": "Activos inmobiliarios",
  "models.Building.views.assets.label": "inamovible",
  "models.Building.views.cuby.help": "El plano interactivo <b>en 3D</b> del edificio %{name}",
  "models.Building.views.cuby.label": "Plano 3d",
  "models.Building.views.3d.help": "El plano 3d del edificio %{name} (cuby)",
  "models.Building.views.3d.label": "Plano 3d",
  "models.Building.views.clone.help": "Construyendo <b>escenarios</b> y proyectos %{name}",
  "models.Building.views.clone.label": "Escenarios",
  "models.Building.views.building-ifc.help": "Exportar este edificio a IFC para BIM",
  "models.Building.views.building-ifc.label": "CFI",
  "models.Building.views.zbre-sync.help": "Sincroniza el edificio con la plataforma Zbre",
  "models.Building.views.zbre-sync.label": "Sincronizaci\xF3n zbre",
  "models.Building.views.inventory.help": "<b>Inventario</b> de construcci\xF3n %{name}",
  "models.Building.views.inventory.label": "inventario",
  "models.Building.views.list-simple.help": "Lista de edificios con pocos detalles",
  "models.Building.views.list-simple.label": "Lista simple",
  "models.Building.views.building-3d-gmap.label": "edificio 3d en el plan",
  "models.Building.views.building-3d-gmap.help": "Ver el edificio en 3d en un plano",
  "models.Building.properties.id.label": "Identificador de edificio",
  "models.Building.properties.name.label": "Nombre del edificio",
  "models.Building.properties.name.description": "Nombre del edificio o escenario",
  "models.Building.properties.picture.label": "Foto del edificio",
  "models.Building.properties.picture.description": "Puedes utilizar una foto de tu edificio para encontrarlo r\xE1pidamente desde la p\xE1gina de inicio (ver edificios con fotos) o para ilustrar las opiniones de los colaboradores.",
  "models.Building.properties.documents.label": "Documentos relacionados",
  "models.Building.properties.documents.description": "Mantenga un enlace a la ubicaci\xF3n de los documentos asociados con este edificio en su GED",
  "models.Building.properties.securityDeposit.label": "Dep\xF3sito de seguridad",
  "models.Building.properties.securityDeposit.description": "Monto del dep\xF3sito depositado al firmar el contrato de arrendamiento",
  "models.Building.properties.buildings.label": "Escenarios de edificios",
  "models.Building.properties.buildings.description": "Escenarios generados desde este edificio.",
  "models.Building.properties.constructionYear.label": "A\xF1o de construcci\xF3n del edificio",
  "models.Building.properties.constructionYear.description": "A\xF1o de construcci\xF3n del edificio que permite medir su obsolescencia",
  "models.Building.properties.parkingSpaceCount.label": "N\xFAmero de plazas de aparcamiento",
  "models.Building.properties.parkingSpaceCount.description": "N\xFAmero de plazas de aparcamiento disponibles",
  "models.Building.properties.yearlyParkingRent.label": "Alquiler anual de aparcamientos",
  "models.Building.properties.yearlyParkingRent.description": "Proporci\xF3n del alquiler asignada al estacionamiento",
  "models.Building.properties.yearlyTaxFees.label": "Importe de las cuotas anuales",
  "models.Building.properties.yearlyTaxFees.description": "Monto total de impuestos",
  "models.Building.properties.yearlyExploitationFees.label": "Gastos operativos anuales",
  "models.Building.properties.yearlyExploitationFees.description": "Monto anual de gastos operativos (ejemplo: agua, electricidad)",
  "models.Building.properties.rentReferenceIndex.label": "Referencia de alquiler",
  "models.Building.properties.rentReferenceIndex.description": "El \xEDndice de referencia de alquiler (RRI) se utiliza como base para revisar los alquileres de viviendas vac\xEDas o amuebladas.",
  "models.Building.properties.color.label": "color",
  "models.Building.properties.color.description": "El color del edificio se utiliza para definir el color de fondo en las presentaciones de los pisos o del edificio y poder distinguir este edificio de los dem\xE1s.",
  "models.Building.properties.roomsCount.label": "N\xFAmero de espacios",
  "models.Building.properties.roomsCount.description": "El n\xFAmero de espacios creados en este edificio.",
  "models.Building.properties.roomsArea.label": "Superficie calificada",
  "models.Building.properties.roomsArea.description": "La superficie calificada representa todas las zonas modeladas en Surfy",
  "models.Building.properties.workplacesCount.label": "Cantidad de estaciones de trabajo",
  "models.Building.properties.workplacesCount.description": "El n\xFAmero de estaciones de trabajo en el edificio se calcula autom\xE1ticamente.",
  "models.Building.properties.workplacesRatio.label": "Proporci\xF3n de la estaci\xF3n de trabajo",
  "models.Building.properties.workplacesRatio.description": "El ratio por puesto de trabajo es el n\xFAmero de metros cuadrados del edificio dividido por el n\xFAmero de puestos de trabajo, este valor se calcula autom\xE1ticamente",
  "models.Building.properties.peopleCount.label": "Numero de asignaciones",
  "models.Building.properties.peopleCount.description": "El n\xFAmero de personas asignadas al edificio, barrios, espacios o estaciones de trabajo.",
  "models.Building.properties.peopleRatio.label": "Ratio de ocupaci\xF3n",
  "models.Building.properties.peopleRatio.description": "El ratio de ocupaci\xF3n es el n\xFAmero de metros cuadrados del edificio dividido por el n\xFAmero de personas asignadas ya sea directamente a los barrios, espacios o puestos de trabajo, este valor se calcula",
  "models.Building.properties.freeWorkplacesCount.label": "Numero de vacantes",
  "models.Building.properties.freeWorkplacesCount.description": "N\xFAmero de posiciones libres en el edificio",
  "models.Building.properties.flexWorkplacesCount.label": "N\xFAmero de posiciones de flexi\xF3n",
  "models.Building.properties.flexWorkplacesCount.description": "N\xFAmero de puestos de trabajo flexibles en el edificio",
  "models.Building.properties.address.label": "direcci\xF3n",
  "models.Building.properties.address.description": "La direcci\xF3n del edificio para localizarlo en el mapa",
  "models.Building.properties.yearlyCondominiumFees.label": "Cargos anuales",
  "models.Building.properties.yearlyCondominiumFees.description": "Importe de los cargos anuales de gesti\xF3n o copropiedad, por ejemplo",
  "models.Building.properties.yearlyRent.label": "Renta anual",
  "models.Building.properties.yearlyRent.description": "Monto de alquiler anual para este edificio",
  "models.Building.properties.leaseStartDate.label": "Fecha de inicio del arrendamiento",
  "models.Building.properties.leaseStartDate.description": "Fecha de inicio del arrendamiento",
  "models.Building.properties.leaseEndDate.label": "Fecha de finalizaci\xF3n del arrendamiento",
  "models.Building.properties.leaseEndDate.description": "Fecha de finalizaci\xF3n del arrendamiento",
  "models.Building.properties.purchaseDate.label": "Fecha de compra del edificio",
  "models.Building.properties.purchaseDate.description": "Fecha de compra del edificio",
  "models.Building.properties.buildingId.label": "Identificador de edificio de referencia",
  "models.Building.properties.buildingId.description": "El identificador del edificio de referencia se utiliza en el contexto de la creaci\xF3n de escenarios, el identificador permite la asociaci\xF3n con este edificio",
  "models.Building.properties.building.label": "Edificio original",
  "models.Building.properties.building.description": "El edificio original o de referencia se utiliza en la creaci\xF3n de escenarios, permite identificar el edificio original a partir del cual se cre\xF3 el edificio.",
  "models.Building.properties.jupUiLayout.label": "Visi\xF3n del plan por defecto",
  "models.Building.properties.jupUiLayout.description": "Cuando se abre por primera vez un plano de este edificio, se seleccionar\xE1 la visi\xF3n predeterminada; despu\xE9s de la primera apertura, se aplicar\xE1 la visi\xF3n actual",
  "models.Building.properties.sharedWorkplacesCount.label": "N\xFAmero de estaciones de trabajo compartidas",
  "models.Building.properties.sharedWorkplacesCount.description": "N\xFAmero de puestos de trabajo compartidos en el edificio por al menos 2 personas",
  "models.Building.properties.sharedWorkplacesRatio.label": "Tasa de puestos de trabajo compartidos",
  "models.Building.properties.sharedWorkplacesRatio.description": "Tasa de estaciones de trabajo compartidas por al menos 2 personas en comparaci\xF3n con todas las estaciones de trabajo del edificio",
  "models.Building.properties.flexRatio.label": "Tasa de estaciones de trabajo flexibles",
  "models.Building.properties.flexRatio.description": "La tasa de estaciones de trabajo flexibles se calcula dividiendo el n\xFAmero de estaciones de trabajo flexibles por el n\xFAmero total de estaciones de trabajo",
  "models.Building.properties.transitWorkplacesCount.label": "N\xFAmero de estaciones de trabajo de tr\xE1nsito",
  "models.Building.properties.transitWorkplacesCount.description": "N\xFAmero de puestos de trabajo temporales, estos puestos no se cuentan en puestos libres y no son flexibles",
  "models.Building.properties.regulatoryCapacity.label": "Capacidad reguladora",
  "models.Building.properties.regulatoryCapacity.description": "La capacidad reguladora de la plataforma permite gestionar la evacuaci\xF3n de p\xFAblico y empleados",
  "models.Building.properties.dimensionPeopleCount.label": "N\xFAmero de asignaciones de capas",
  "models.Building.properties.dimensionPeopleCount.description": "El n\xFAmero de personas que est\xE1n asignadas a las capas de asignaci\xF3n asociadas con este edificio",
  "models.Building.properties.userCompanyOwner.label": "Usuario propietario del edificio",
  "models.Building.properties.userCompanyOwner.description": "El usuario propietario del edificio siempre ve el edificio incluso en presencia de un rol de contenido, en caso de creaci\xF3n de un escenario, el usuario que cre\xF3 el escenario se convierte en el propietario, el propietario puede cambiarse m\xE1s adelante",
  "models.AuthentificationConnection.singular": "Inicio de sesi\xF3n de autenticaci\xF3n",
  "models.AuthentificationConnection.plural": "Conexiones de autenticaci\xF3n",
  "models.AuthentificationConnection.determinant.defined": "la conexi\xF3n de autenticaci\xF3n",
  "models.AuthentificationConnection.determinant.undefined": "una conexi\xF3n de autenticaci\xF3n",
  "models.AuthentificationConnection.determinants.defined": "conexiones de autenticaci\xF3n",
  "models.AuthentificationConnection.determinants.undefined": "conexiones de autenticaci\xF3n",
  "models.ApiUserToJupRole.singular": "Asociaci\xF3n de usuario de API con rol",
  "models.ApiUserToJupRole.plural": "Asociaciones de usuarios de API a roles",
  "models.ApiUserToJupRole.determinant.defined": "Asociaci\xF3n de usuario de API con rol",
  "models.ApiUserToJupRole.determinant.undefined": "una asociaci\xF3n de usuario de API al rol",
  "models.ApiUserToJupRole.determinants.defined": "Asociaciones de usuarios de API a roles",
  "models.ApiUserToJupRole.determinants.undefined": "Asociaciones de usuarios de API a roles",
  "models.ApiUserToContentRole.singular": "Asociaci\xF3n del usuario de API con el rol de contenido",
  "models.ApiUserToContentRole.plural": "Asociaciones de usuarios de API a rol de contenido",
  "models.ApiUserToContentRole.determinant.defined": "Asociaci\xF3n de usuario de API con rol de contenido",
  "models.ApiUserToContentRole.determinant.undefined": "una asociaci\xF3n de usuario de API con el rol de contenido",
  "models.ApiUserToContentRole.determinants.defined": "Asociaciones de usuarios de API a la funci\xF3n de contenido",
  "models.ApiUserToContentRole.determinants.undefined": "Asociaciones de usuarios de API a la funci\xF3n de contenido",
  "models.ApiUser.singular": "Usuario de API",
  "models.ApiUser.plural": "Usuarios de API",
  "models.ApiUser.determinant.defined": "Usuario de API",
  "models.ApiUser.determinant.undefined": "un usuario de API",
  "models.ApiUser.determinants.defined": "Usuarios de API",
  "models.ApiUser.determinants.undefined": "Usuarios de API",
  "models.ApiUser.properties.clientSecret.label": "C\xF3digo secreto",
  "models.ApiUser.properties.clientSecret.description": "la contrase\xF1a secreta para su cuenta de API se puede generar y nunca debe divulgarse",
  "ToggleZbreSyncCheckbox.label": "Sincroniza con ocupaciones en tiempo real en Z#ber",
  "ToggleZbreSyncCheckbox.help": "La sincronizaci\xF3n permite colorear espacios y puestos de trabajo seg\xFAn los sensores colocados en Z#ber",
  "FloorSpaceSlider.title": "Espacio entre cada piso en cent\xEDmetros",
  "FloorSelector.title": "Seleccionar pisos",
  "FloorSelector.focus": "Seleccione solo este piso",
  "FloorSelector.selectAll.false": "Seleccionar todos los pisos",
  "FloorSelector.selectAll.true": "Deseleccionar todos los pisos",
  "ToggleEnableMissingFloors.label": "Mostrar pisos fantasma",
  "ToggleEnableMissingFloors.help": "Mostrar pisos fantasma para los pisos faltantes entre el nivel 0 y el piso m\xE1s alto seg\xFAn los niveles de piso reales",
  "RoomGraphHandler.buttons.generateGraph.label": "Generar el gr\xE1fico de orientaci\xF3n.",
  "RoomGraphHandler.buttons.generateGraph.description": "Al generar el gr\xE1fico de orientaci\xF3n se calculan los nodos a trav\xE9s de los cuales el buscador de ruta puede encontrar los espacios y muebles. Si se puede seleccionar el espacio original, el gr\xE1fico ya se ha generado.",
  "RoomGraphHandler.buttons.selectOriginRoom.label": "Seleccionar espacio original",
  "RoomGraphHandler.buttons.selectOriginRoom.description": "Seleccione un espacio y luego podr\xE1 usar esta opci\xF3n para definirlo como el espacio inicial.",
  "RoomGraphHandler.icons.displayNodes.description": "Mostrar caminos en las habitaciones",
  "RoomGraphHandler.icons.displayBoundingBoxes.description": "Mostrar espacios de exclusi\xF3n de muebles",
  "RoomGraphHandler.icons.enablePathfinding.description": "Activar el dibujo de ruta desde el espacio de origen con la forma debajo del mouse",
  "RoomGraphHandler.rooms.origin": "espacio original",
  "ThemeModeSwitchMenuItem.dark.label": "Cambiar al modo de luz",
  "ThemeModeSwitchMenuItem.dark.help": "El uso del modo brillante le permite trabajar con un fondo blanco.",
  "ThemeModeSwitchMenuItem.light.label": "Cambiar al modo oscuro",
  "ThemeModeSwitchMenuItem.light.help": "El modo oscuro le permite trabajar con colores oscuros en el fondo para reducir la fatiga visual.",
  "copilot.actions.add.door": "Surfy Copilot acaba de agregar una puerta",
  "generateDocumentation.properties.technicalName": "Nombre t\xE9cnico",
  "generateDocumentation.properties.belongsTo": "Entidades asociadas (\xFAnicas)",
  "generateDocumentation.properties.hasMany": "Entidades asociadas (lista)",
  "generateDocumentation.properties.base": "Propiedades b\xE1sicas",
  "generateDocumentation.properties.mandatory": "Propiedades obligatorias",
  "help.key1": "Hola %{name}",
  "help.key2": "adi\xF3s %{name}"
};

// public/assets/i18n/it.json
var it_default = {
  "ImportUpdateOption.label": "Aggiornare",
  "ImportUpdateOption.help": "Aggiorna gli oggetti selezionati",
  "ImportUpdateEntitiesTable.description": "Elenco di oggetti che richiedono un aggiornamento",
  "PropertyTypeErrors.title": "I seguenti valori non esistono per la propriet\xE0 <b>%{propertyTypeLabel}</b> in <b>%{objectTypeLabel}</b>",
  "ImportDeleteOption.label": "Cancellare",
  "ImportDeleteOption.help": "Elimina gli oggetti selezionati in Surfy",
  "ImportDeleteEntitiesTable.description": "Elenco di oggetti che richiedono l'eliminazione in Surfy",
  "ImportCreateOption.label": "Creare",
  "ImportCreateOption.help": "Esegui la creazione di oggetti selezionati in Surfy",
  "ImportCreateEntitiesTable.description": "Elenco di elementi che richiedono la creazione",
  "ImportCreateEntitiesTable.open.label": "Visualizza le entit\xE0 da creare",
  "ImportCreateEntitiesTable.open.help": "Vedi i dettagli delle entit\xE0 da creare perch\xE9 ci sono pi\xF9 di 500 linee, per motivi di prestazioni le linee sono nascoste per impostazione predefinita",
  "ImportCreateAllOption.label": "Crea tutto",
  "ImportCreateAllOption.help": "Eseguire la creazione di tutti gli oggetti senza selezionarli singolarmente",
  "entitiesImportType.date.wrongImportFormat": "Il formato della data %{value} non \xE8 corretto, il formato previsto \xE8 %{excelImportDateFormat}",
  "InfoTabContent.description": "Errori o informazioni notevoli durante l'importazione",
  "InfoTabContent.noChange": "Nessun cambiamento \xE8 stato osservato in confronto",
  "InfoTabContent.copyIds": "Copia gli ID entit\xE0 negli appunti",
  "InfoTabContent.equals.multiple": "%{count} oggetti esistenti e non modificati",
  "InfoTabContent.equals.one": "Un singolo oggetto che esiste gi\xE0 e non \xE8 stato modificato",
  "InfoTabContent.open.label": "Vedi i dettagli di importazione",
  "InfoTabContent.open.help": "Vedere i dettagli di importazione per confronti identici",
  "ImportObjectType.tabs.create.label": "Creazione",
  "ImportObjectType.tabs.update.label": "Aggiornare",
  "ImportObjectType.tabs.errors.label": "Informazioni",
  "ImportObjectType.tabs.delete.label": "Cancellazione",
  "ImportObjectType.usedKeys": "La chiave di riconciliazione utilizzata \xE8:",
  "ImportObjectType.errors.noChange": "Nessun cambiamento \xE8 stato osservato nel confronto",
  "CompareEntities.buttons.reset.label": "Ricomincia",
  "CompareEntities.buttons.reset.help": "Riavvia l'importazione",
  "ObjectTypeImportKeys.title": "Le chiavi disponibili per riconciliare %{determinants.undefined} nell'ordine che preferisci, se desideri modificare una delle propriet\xE0 della chiave devi utilizzare l'identificatore come chiave",
  "ObjectTypeImportScalarProperties.help": "Copia negli appunti",
  "ImportHelpDrawerIconButton.icon.help": "Consulta la guida sull'importazione dei dati per %{determinants.defined}",
  "ImportHelpDrawerIconButton.drawer.title": "Aiuto con l'importazione %{determinants.undefined}",
  "ImportHelpDrawerIconButton.drawer.tabLabel": "Importa aiuto",
  "DownloadObjectTypeImportTemplateFileButton.label": "Scarica il modello di importazione",
  "DownloadObjectTypeImportTemplateFileButton.help": "Scarica un modello di importazione in formato excl con i nomi delle colonne che puoi scegliere",
  "ImportHelpDrawer.tab": "Aiuta a importare %{objectTypeLabel}",
  "BelongsToListItem.clipboard": "Copia il titolo della colonna negli appunti",
  "BelongsToListItem.noKeys": "Nessuna chiave univoca disponibile",
  "BelongsToImportHelp.title": "Tipi di oggetto associati a %{objectTypeLabel} ordinati in base alle chiavi di importazione disponibili",
  "FileDropZone.dropZone": "Sposta e trascina il file di importazione in quest'area o fai clic nell'area per selezionare il file",
  "EntitiesImporter.tabs.file": "File",
  "EntitiesImporter.tabs.copypaste": "Copia e incolla",
  "TextAreaImporter.errors.title": "Errori riscontrati durante l'importazione",
  "TextAreaImporter.textarea.placeholder": "Copia e incolla le tue colonne da excel con il titolo per trovare le propriet\xE0 da aggiornare",
  "TextAreaImporter.help": "Utilizza la scheda tra ogni colonna includendo il nome di ciascuna colonna nella prima riga o incollalo direttamente da Excel",
  "ImportOptionsBar.buttons.compare.label": "Confrontare",
  "ImportOptionsBar.buttons.compare.help": "Avviare il confronto con i dati in navigazione per determinare le modifiche da importare",
  "ImportErrors.errors.title": "Errori riscontrati durante l'importazione",
  "DashboardView.tabs.reports": "Rapporti Excel",
  "IconShape.values.circle": "Cerchio",
  "IconShape.values.rectangle": "Rettangolo",
  "IconShape.values.triangle": "Triangolo",
  "EntityDialogSearchList.NoResult": "Nessun risultato trovato, cancella i filtri o modifica la ricerca",
  "FieldTypeEntity.edit": "Modifica %{determinant.defined}",
  "FieldTypeEntity.remove": "Rimuovi %{determinant.defined}",
  "FieldTypeEntity.add": "Aggiungi %{determinant.undefined}",
  "LegendSelector.title": "Seleziona legenda",
  "LegendSelector.labels.default": "Legenda predefinita",
  "HasManyStandaloneNoData.noData": "Non esiste alcun %{targetObjectTypeLabel} associato per %{determinant.defined}",
  "FieldTypeAddress.edit": "Cambia indirizzo",
  "FieldTypeAddress.remove": "Elimina indirizzo",
  "AutocompleteAddress.autocomplete.placeholder": "Trova il tuo indirizzo qui",
  "AddressDialog.search": "Trova l'indirizzo",
  "AddressDialog.validate": "convalidare",
  "FieldTypePassword.icons.copy": "Copia il contenuto della password negli appunti",
  "FieldTypePassword.icons.generate": "Genera una password univoca",
  "FieldTypeModel3d.Remove": "Rimuovi il modello 3D",
  "FieldTypeModel3d.Upload": "Cambia modello 3D",
  "FieldTypeImage.Remove": "Rimuovi immagine",
  "FieldTypeImage.Upload": "Cambia immagine",
  "FieldTypeIcon.Edit": "Cambia icona",
  "FieldTypeIcon.Remove": "rimuovi icona",
  "FieldTypeColor.Remove": "rimuovere il colore",
  "FieldTypeColor.NoColorHelp": "Seleziona un colore",
  "FieldTypeColor.NotHexMatchError": "Il campo non rispetta il formato esadecimale di un colore",
  "CopyImagePathToClipboard.CopyUrl": "Copia URL",
  "ColorBox.NoColorHelp": "Seleziona un colore tramite la tavolozza",
  "ChangeColor.classic": "Seleziona un colore con la piastra avanzata",
  "weight.kilogram": "Chilogrammo",
  "weight.gram": "Grammo",
  "distance.meter": "Metri",
  "distance.centimeter": "centimetri",
  "FieldTypeIndexBoolean.help": "Modificare direttamente il valore",
  "FieldTypeIndexBoolean.values.true": "S\xCC",
  "FieldTypeIndexBoolean.values.false": "NO",
  "calculatedProperties.properties.workplacesCount.label": "Numero di postazioni di lavoro",
  "calculatedProperties.properties.workplacesCount.description": "Il numero totale di postazioni di lavoro negli spazi",
  "calculatedProperties.properties.workplacesRatio.label": "Rapporto di postazioni di lavoro",
  "calculatedProperties.properties.workplacesRatio.description": "Il rapporto workstation \xE8 il numero di metri quadrati diviso per il numero di workstation",
  "calculatedProperties.properties.peopleCount.label": "Numero di incarichi",
  "calculatedProperties.properties.peopleCount.description": "Il numero di persone interessate, direttamente assegnate agli spazi o attraverso una postazione di lavoro",
  "calculatedProperties.properties.totalPeopleCount.label": "Numero totale di incarichi",
  "calculatedProperties.properties.totalPeopleCount.description": "Il numero totale di persone assegnate, assegnate direttamente agli spazi o tramite una postazione di lavoro",
  "calculatedProperties.properties.peopleRatio.label": "Rapporto di occupazione",
  "calculatedProperties.properties.peopleRatio.description": "L'indice di occupazione \xE8 il numero di metri quadrati diviso per il numero di persone assegnate direttamente agli spazi o tramite una postazione di lavoro",
  "calculatedProperties.properties.freeWorkplacesCount.label": "Numero di posti vacanti",
  "calculatedProperties.properties.freeWorkplacesCount.description": "Numero totale di posti vacanti",
  "calculatedProperties.properties.flexWorkplacesCount.label": "Numero di posizioni flessibili",
  "calculatedProperties.properties.flexWorkplacesCount.description": "Numero totale di posizioni flessibili",
  "calculatedProperties.properties.occupancyRate.label": "Tasso di occupazione",
  "calculatedProperties.properties.occupancyRate.description": "Permette di conoscere il tasso di occupazione delle postazioni di lavoro, \xE8 il numero di persone interessate diviso il numero di postazioni di lavoro",
  "calculatedProperties.properties.expansionRatio.label": "Tasso di crescita eccessiva",
  "calculatedProperties.properties.expansionRatio.description": "Consente di conoscere il tasso di utilizzo delle postazioni, \xE8 l'inverso del numero di persone interessate diviso per il numero delle postazioni",
  "calculatedProperties.properties.roomsArea.label": "Zona qualificata",
  "calculatedProperties.properties.roomsArea.description": "La superficie qualificata \xE8 la somma delle superfici dei vani",
  "calculatedProperties.properties.roomsCount.label": "Numero di spazi",
  "calculatedProperties.properties.roomsCount.description": "Il numero totale di spazi",
  "calculatedProperties.properties.sharedWorkplacesCount.label": "Numero di postazioni condivise",
  "calculatedProperties.properties.sharedWorkplacesCount.description": "Numero totale di postazioni condivise da almeno 2 persone",
  "calculatedProperties.properties.sharedWorkplacesRatio.label": "Tasso di postazioni di lavoro condivise",
  "calculatedProperties.properties.sharedWorkplacesRatio.description": "Percentuale di postazioni condivise da almeno 2 persone rispetto a tutte le postazioni",
  "calculatedProperties.properties.flexRatio.label": "Tasso di postazioni di lavoro flessibili",
  "calculatedProperties.properties.flexRatio.description": "La tariffa per workstation flessibili viene calcolata dividendo il numero di workstation flessibili per il numero totale di workstation",
  "calculatedProperties.properties.transitWorkplacesCount.label": "Numero di postazioni di transito",
  "calculatedProperties.properties.transitWorkplacesCount.description": "Numero di postazioni temporanee, queste posizioni non sono conteggiate nelle posizioni libere e non sono in flex",
  "calculatedProperties.properties.seatsCount.label": "Numero di posti",
  "calculatedProperties.properties.seatsCount.description": "Il numero totale di posti",
  "calculatedProperties.properties.seatsPeopleRatio.label": "Tariffa posti a sedere in base all'assegnazione",
  "calculatedProperties.properties.seatsPeopleRatio.description": "Il numero di posti per persona interessata",
  "calculatedProperties.properties.carbonFootprint.label": "Impronta ecologica",
  "calculatedProperties.properties.carbonFootprint.description": "L'impronta di carbonio \xE8 il numero di CO2 emesse",
  "calculatedProperties.properties.totalCapacityCount.label": "Capacit\xE0 totale",
  "calculatedProperties.properties.totalCapacityCount.description": "La capacit\xE0 totale dei posti \xE8 la somma del numero di posti e della capacit\xE0 dei non posti a livello dello spazio.",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.label": "Tasso di posti per postazione di lavoro",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.description": "La tariffa dei posti per postazione \xE8 la capienza totale degli spazi divisa per il numero delle postazioni, questo ci permette di capire la tariffa dei posti in base al numero delle postazioni",
  "DeleteMultipleDialog.title": "Rimuovi %{determinants.undefined}",
  "DeleteMultipleDialog.content": "Stai per eliminare <b>%{determinants.undefined}</b> , questa azione non \xE8 reversibile e potrebbe avere un impatto, sei sicuro di voler eseguire questa azione?",
  "DeleteMultipleDialog.cancel.label": "per cancellare",
  "DeleteMultipleDialog.cancel.help": "Annulla eliminazione",
  "DeleteMultipleDialog.delete.label": "Cancellare",
  "DeleteMultipleDialog.delete.help": "Elimina definitivamente %{determinants.defined}",
  "DownloadTableToExcelIconButton.help": "Esporta %{determinants.defined} selezionato",
  "DeleteMultipleEntities.help": "Elimina %{determinants.defined} selezionati",
  "EntityCreateModeSelect.open-on-create.text": "Aperto dopo la creazione",
  "EntityCreateModeSelect.open-on-create.help": "Una volta creato il tuo oggetto, verrai reindirizzato alla pagina di visualizzazione dell'oggetto per vederne le propriet\xE0 e le associazioni",
  "EntityCreateModeSelect.keep-creating.text": "continua a creare",
  "EntityCreateModeSelect.keep-creating.help": "Questa opzione consente di continuare a creare pi\xF9 oggetti di seguito mantenendo le propriet\xE0 della vecchia creazione",
  "EntityCreateModeSelect.edit-on-create.text": "Modifica dopo la creazione",
  "EntityCreateModeSelect.edit-on-create.help": "Una volta creato l'oggetto, verrai reindirizzato alla pagina di modifica dell'oggetto per completarne le propriet\xE0 e le associazioni",
  "TableView.options": "Opzioni",
  "ErrorImpossibleToFindTheEntity.text": "Impossibile trovare %{determinant.defined} ricercato",
  "ErrorImpossibleToFindTheEntities.text": "Impossibile trovare %{determinants.defined} cercato",
  "EntityPropertyTypesMandatoryNotRespected.title": "Le seguenti propriet\xE0 sono obbligatorie",
  "entity.properties.mandatory": "La propriet\xE0 %{name} \xE8 obbligatoria.",
  "entity.properties.calculated": "La propriet\xE0 %{name} viene calcolata automaticamente.",
  "entity.properties.readonly-lock": "La propriet\xE0 %{name} \xE8 di sola lettura e non pu\xF2 essere modificata da questa pagina.",
  "EntityHasManyProperties.associations.others": "Associazioni per %{determinant.defined}",
  "EntityHasManyProperties.associations.reporting": "Associazioni di reporting per %{determinant.defined}",
  "EntityHasManyProperties.associations.security": "Associazioni di sicurezza per %{determinant.defined}",
  "EntitiesView.NoItem": "Non esiste alcun %{objectType} , puoi creare il tuo primo %{objectType} utilizzando il pulsante qui sotto",
  "DeleteDialog.title": "Rimuovi %{determinant.undefined}",
  "DeleteDialog.content": "Stai per eliminare <b>%{determinant.undefined}</b> , questa azione non \xE8 reversibile e potrebbe avere un impatto, sei sicuro di voler eseguire questa azione?",
  "DeleteDialog.cancel.label": "per cancellare",
  "DeleteDialog.cancel.help": "Annulla eliminazione",
  "DeleteDialog.delete.label": "Cancellare",
  "DeleteDialog.delete.help": "Elimina definitivamente %{determinant.defined}",
  "ExportQueryNodeToFileButton.help.list": "Scarica in excel %{determinants.defined}",
  "entity.excel.headers.count": "%{label} :Numero",
  "entity.properties.externalId.label": "Chiave esterna",
  "entity.properties.externalId.description": "Questo campo pu\xF2 essere utilizzato per contenere la chiave di corrispondenza in un altro software",
  "entity.properties.createdAt.label": "Data di creazione",
  "entity.properties.createdAt.description": "Data di creazione in Surfy, ti permette di conoscere la storia della creazione in Surfy",
  "entity.properties.userCompanyCreatedBy.label": "Creato dall'utente",
  "entity.properties.userCompanyCreatedBy.description": "Creato da questo utente in Surfy, ti permette di conoscere la cronologia della creazione in Surfy",
  "entity.properties.userCompanyCreatedById.label": "ID dell'utente che ha creato",
  "entity.properties.userCompanyCreatedById.description": "Crea dall'identificatore di questo utente in Surfy, ti permette di conoscere la cronologia della creazione in Surfy",
  "entity.properties.userCompanyUpdatedById.label": "ID dell'utente che ha modificato",
  "entity.properties.userCompanyUpdatedById.description": "Aggiornato dall'identificatore di questo utente in Surfy, permette di conoscere la cronologia della creazione in Surfy",
  "entity.properties.userCompanyUpdatedBy.label": "Aggiornato dall'utente",
  "entity.properties.userCompanyUpdatedBy.description": "Aggiornato da questo utente in Surfy, permette di conoscere la cronologia delle modifiche in Surfy",
  "entity.properties.updatedAt.label": "Data aggiornata",
  "entity.properties.updatedAt.description": "Data di aggiornamento in Surfy, permette di conoscere la cronologia delle modifiche",
  "entity.delete.button.label": "Cancellare",
  "entity.delete.button.help": "Elimina %{determinant.defined} %{name}",
  "entity.cancel": "per cancellare",
  "entity.see.label": "Vedere",
  "entity.see.help": "Vedi %{determinant.defined} %{name}",
  "entity.views.dataquality.help": "Rapporti e azioni per la qualit\xE0 dei dati per %{determinants.defined}",
  "entity.views.dataquality.label": "Qualit\xE0 dei dati",
  "entity.views.list.help": "Elenco %{determinants.defined}",
  "entity.views.list.label": "Elenco",
  "entity.views.import.help": "Importa %{determinants.undefined}",
  "entity.views.import.label": "Importare",
  "entity.views.details.help": "Vedi %{determinant.defined} %{name}",
  "entity.views.details.label": "Vedere",
  "entity.views.create.help": "Crea %{determinant.undefined}",
  "entity.views.create.label": "Creare",
  "entity.views.edit.help": "Modifica %{determinant.defined} %{name}",
  "entity.views.edit.label": "Modificare",
  "entity.views.dashboard.help": "Dashboard per %{determinant.defined} %{name}",
  "entity.views.dashboard.label": "Pannello di controllo",
  "entity.create.validate.help": "Convalida la creazione per %{determinant.defined}",
  "entity.create.validate.label": "Convalida la creazione",
  "entity.create.button.help": "Inizia la creazione per %{determinant.defined}",
  "entity.create.button.label": "Crea %{determinant.defined}",
  "entity.create.association.help": "Inizia la creazione per %{determinant.undefined}",
  "entity.create.association.label": "Crea %{determinant.undefined}",
  "entity.update.button.label": "Salvaguardare",
  "entity.update.button.help": "Risparmia %{determinant.defined} %{name}",
  "entity.createAndAssociate.button.label": "Crea e associa",
  "entity.createAndAssociate.button.help": "Crea e associa %{determinant.undefined}",
  "entity.associate.button.label": "Socio",
  "entity.associate.button.help": "Associato %{determinant.undefined}",
  "entity.back": "Ritorno",
  "WorkCanvas.Options.ZoomCanvasOption.label.enable": "Abilita lente d'ingrandimento intorno al mouse",
  "WorkCanvas.Options.ZoomCanvasOption.label.disable": "Disabilita la lente d'ingrandimento intorno al mouse",
  "WorkCanvas.Options.ZoomCanvasOption.help.enable": "L'attivazione della lente d'ingrandimento permette di avere una visione d'insieme di un'area o di un pavimento e di vedere il comportamento del mouse in modo preciso",
  "WorkCanvas.Options.ZoomCanvasOption.help.disable": "Ferma la lente d'ingrandimento del mouse",
  "WorkCanvas.Options.AddSegmentPointOption.label.enable": "Aggiungere un vertice su un segmento",
  "WorkCanvas.Options.AddSegmentPointOption.label.disable": "Smetti di aggiungere un vertice su un segmento",
  "WorkCanvas.Options.AddSegmentPointOption.help.enable": "L'aggiunta di un vertice su un segmento consente di posizionare un punto ovunque senza tener conto degli altri punti",
  "WorkCanvas.Options.AddSegmentPointOption.help.disable": "Smetti di creare vertici sui segmenti",
  "WorkCanvas.Options.AddSegmentPointOption.description": "Seleziona uno spazio per poter creare un vertice su uno dei segmenti",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.enable": "Abilita l'orientamento della creazione del vertice inverso",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.disable": "Disabilita l'inversione dell'orientamento della creazione dei vertici",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.enable": "L'attivazione dell'inversione dell'orientamento di creazione dei vertici permette di cambiare la direzione di creazione dei vertici",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.disable": "Disabilita l'inversione per trovare la direzione iniziale di creazione dei vertici",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.enable": "Abilita l'inversione ad angolo retto per la creazione del vertice",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.disable": "Disabilita l'inversione ad angolo retto per la creazione del vertice",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.enable": "Abilita capovolgi consente di utilizzare l'angolo retto durante la creazione di vertici sull'altro segmento",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.disable": "La disattivazione dell'inversione consente di utilizzare l'angolo retto sul segmento iniziale",
  "LoadingSvgCircle.pleaseWait": "Attendi durante la sincronizzazione",
  "WorkCanvas.Options.AddRoomPointOption.label.enable": "Aggiungi vertice",
  "WorkCanvas.Options.AddRoomPointOption.label.disable": "Smetti di aggiungere un vertice",
  "WorkCanvas.Options.AddRoomPointOption.help.enable": "L'aggiunta di un vertice consente di rielaborare una forma con maggiore precisione",
  "WorkCanvas.Options.AddRoomPointOption.help.disable": "Smetti di creare vertici",
  "WorkCanvas.Options.SplitPolygoneOption.label": "Spazio separato",
  "WorkCanvas.Options.SplitPolygoneOption.help": "Crea 2 spazi da un altro spazio scegliendo 2 vertici",
  "WorkCanvas.Options.SplitRoomPointOption.help": "Il vertice diviso consente di riutilizzare pi\xF9 vertici per ogni segmento e quindi di creare spazi separati",
  "WorkCanvas.Options.SplitRoomPointOption.label": "Vertice separato",
  "WorkCanvas.Options.MergeRoomPointsOption.help": "Unisci vertici consente di riutilizzare lo stesso vertice per spazi diversi",
  "WorkCanvas.Options.MergeRoomPointsOption.label": "Unisci i vertici",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.help": "Rimuovere i vertici dallo spazio",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.label": "Elimina i vertici selezionati",
  "WorkCanvas.Options.ZoomOnEdgePoints.help": "Ingrandisci uno o pi\xF9 punti per poter lavorare in silenzio",
  "WorkCanvas.Options.ZoomOnEdgePoints.label": "Zoom su punti",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.enable": "Sposta il tipo di oggetto",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.disable": "Fermati",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.enable": "Sposta il tipo di oggetto sul piano",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.disable": "Interrompi lo spostamento del tipo di oggetto",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.help": "Rimuovere il tipo di oggetto dal tipo di workstation",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.label": "Rimuovi il tipo di oggetto",
  "WorkCanvas.Options.DeleteItemTypePointsOption.help": "Elimina i vertici del tipo di oggetto",
  "WorkCanvas.Options.DeleteItemTypePointsOption.label": "Elimina i vertici selezionati",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.enable": "Aggiungi una forma",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.disable": "Smetti di aggiungere la forma",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.enable": "Aggiungi una forma per un tipo di oggetto sulla pianta",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.disable": "Smetti di creare la forma",
  "WorkCanvas.Options.AddItemTypeShapeSaveOption.help": "Salva il tipo di oggetto in fase di creazione",
  "WorkCanvas.Options.AddItemTypePointOption.label.enable": "Aggiungi vertice",
  "WorkCanvas.Options.AddItemTypePointOption.label.disable": "Smetti di aggiungere un vertice",
  "WorkCanvas.Options.AddItemTypePointOption.help.enable": "L'aggiunta di un vertice consente di rielaborare una forma con maggiore precisione",
  "WorkCanvas.Options.AddItemTypePointOption.help.disable": "Smetti di creare vertici",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.enable": "Sposta gli spazi",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.disable": "Smetti di viaggiare",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.enable": "Abilita lo spostamento degli spazi sulla planimetria",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.disable": "Smetti di spostare gli spazi",
  "WorkCanvas.Options.ToggleMoveRoomOption.description": "Una volta attivato, seleziona uno spazio e puoi spostarlo",
  "WorkCanvas.Options.DuplicateShapesOption.label": "Forme duplicate",
  "WorkCanvas.Options.DuplicateShapesOption.help": "Forme duplicate senza propriet\xE0 per creare rapidamente oggetti o workstation sulla planimetria",
  "CancelDuplicateShapsToRoomMouse.help": "Annulla forme duplicate",
  "ToggleWorkplaceFreeConditionTypeIconButton.or": "Visualizza le postazioni libere per tutti i giorni richiesti",
  "ToggleWorkplaceFreeConditionTypeIconButton.and": "Vedi le postazioni libere per almeno uno dei giorni richiesti",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.false": "Post senza colore %{day}",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.true": "Smettila di colorare i post gratuiti %{day}",
  "FreeWorkplacesDayList.title": "Vedi posti liberi %{days}",
  "FreeWorkplacesDayList.conditions.and": "E",
  "FreeWorkplacesDayList.conditions.or": "O",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.enable": "Colora i posti di blocco",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.disable": "Smetti di colorare i posti di incrocio",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.enable": "Vedi sulla planimetria le postazioni di lavoro di passaggio",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.disable": "Non vedere pi\xF9 le workstation di passaggio in modo diverso sul piano",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.enable": "Colore post condivisi",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.disable": "Smetti di colorare i post condivisi",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.enable": "Visualizza sulla planimetria le postazioni di lavoro condivise da almeno 2 persone",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.disable": "Non vedere pi\xF9 le workstation condivise in modo diverso sul piano",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.enable": "Oggetti colorati senza associazione",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.disable": "Smetti di colorare gli oggetti senza associazione",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.enable": "Visualizza gli oggetti gratuiti sulla mappa",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.disable": "Gli oggetti gratuiti non vengono pi\xF9 visualizzati in modo diverso sulla mappa",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.enable": "Colora le posizioni prenotabili",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.disable": "Smetti di colorare le posizioni prenotabili",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.enable": "Visualizza sulla planimetria colori le postazioni prenotabili",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.disable": "Non vediamo pi\xF9 le postazioni di lavoro prenotabili in modo diverso in termini di",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.enable": "Posizioni libere da colorare",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.disable": "Smetti di colorare post gratuiti",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.enable": "Visualizza le posizioni libere sulla mappa",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.disable": "Non vedere pi\xF9 le posizioni libere in modo diverso sul piano",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.enable": "Colora i pali in flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.disable": "Smetti di colorare i post in flex",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.enable": "Guarda le posizioni flessibili sulla mappa",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.disable": "Non vedere pi\xF9 le posizioni flessibili in modo diverso sul piano",
  "WorkCanvas.Options.CalibrateLayoutOption.help.enable": "Calibrare la pianta permette di ingrandire o ridurre le dimensioni di tutti gli spazi o di spostarli tutti sulla pianta",
  "WorkCanvas.Options.CalibrateLayoutOption.help.disable": "Smetti di calibrare il piano",
  "WorkCanvas.Options.CalibrateLayoutOption.label.enable": "Calibrare il piano",
  "WorkCanvas.Options.CalibrateLayoutOption.label.disable": "Smetti di calibrare il piano",
  "CalibrateLayoutDrawer.title": "Calibrare il piano",
  "CalibrateLayoutDrawer.options.mapScale.label": "Allinea la scala del piano",
  "CalibrateLayoutDrawer.options.mapScale.help": "Applica il fattore di scala agli elementi della scala (lunghezza e dimensione dei testi)",
  "CalibrateLayoutDrawer.options.inputs.scale.label": "Fattore di scala",
  "CalibrateLayoutDrawer.options.inputs.step.label": "Valore di traduzione",
  "CalibrateLayoutDrawer.options.inputs.translate.x.label": "Asse X",
  "CalibrateLayoutDrawer.options.inputs.translate.y.label": "Asse Y",
  "CalibrateLayoutDrawer.options.reduce.label": "Ridurre",
  "CalibrateLayoutDrawer.options.save.label": "registrare",
  "CalibrateLayoutDrawer.options.save.help": "Salva la calibrazione per pianificare",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.enable": "Attiva la visualizzazione delle icone sulla planimetria in 2d",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.disable": "Disabilita la visualizzazione delle icone sulla mappa",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.enable": "Le icone associate alle tipologie di vani facilitano la visualizzazione delle tipologie di vani in pianta",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.disable": "Visualizza le informazioni sullo spazio",
  "WorkCanvasToggleOptionHelp.shortcut": "Scorciatoia da tastiera: <b>%{shortcut}</b>",
  "WorkCanvasShortcutTooltipHelp.help": "Scorciatoia da tastiera: <b>%{shortcut}</b>",
  "WorkCanvas.Options.ZoomOutOption.label": "Rimpicciolisci la mappa",
  "WorkCanvas.Options.ZoomOutOption.help": "Rimpicciolire la pianta centrando la posizione del mouse",
  "WorkCanvas.Options.ZoomOutOption.description": "\xC8 possibile utilizzare la rotellina del mouse e il touchpad per ridurre lo zoom",
  "WorkCanvas.Options.ZoomOnMousePosition.help": "Zoom sulla posizione del mouse per poter lavorare con maggiore precisione su un'area",
  "WorkCanvas.Options.ZoomOnMousePosition.label": "Zoom alla posizione del mouse",
  "WorkCanvasLoadingIcon.title": "Caricamento del piano",
  "WorkCanvas.Options.ZoomOnItemsOption.help": "Ingrandisci uno o pi\xF9 oggetti per poter lavorare con maggiore precisione",
  "WorkCanvas.Options.ZoomOnItemsOption.label": "Zoom sulla selezione",
  "WorkCanvas.Options.ZoomOnDimensionsOption.label": "Ingrandisci i livelli di assegnazione",
  "WorkCanvas.Options.ZoomOnDimensionsOption.help": "Ingrandisci direttamente i livelli di assegnazione in cui puoi prenotare il piano",
  "WorkCanvas.Options.ZoomInOption.label": "Ingrandisci la mappa",
  "WorkCanvas.Options.ZoomInOption.help": "Ingrandisci il piano centrando verso l'alto a sinistra dello schermo",
  "WorkCanvas.Options.ZoomInOption.description": "\xC8 possibile utilizzare la rotellina del mouse e il touchpad per eseguire lo zoom",
  "WorkCanvas.Options.ToggleSelectModeOption.help.enable": "Ottieni le opzioni del piano per poter ingrandire o vedere i dettagli delle forme e attivare le scorciatoie da tastiera, puoi anche fare clic nel piano per attivare la manipolazione",
  "WorkCanvas.Options.ToggleSelectModeOption.help.disable": "???",
  "WorkCanvas.Options.ToggleSelectModeOption.label.enable": "Inizia a manipolare lo spazio di lavoro",
  "WorkCanvas.Options.ToggleSelectModeOption.label.disable": "Interrompi la manipolazione dell'area di lavoro",
  "WorkCanvas.Options.ToggleSelectModeOption.description": "Puoi selezionare pi\xF9 forme tenendo premuto <b>MAIUSC</b> e facendo clic sulle forme",
  "WorkCanvas.Options.ToggleEditModeOption.label.enable": "Attiva la modalit\xE0 di modifica del piano",
  "WorkCanvas.Options.ToggleEditModeOption.label.disable": "Disabilita la modalit\xE0 di modifica del piano",
  "WorkCanvas.Options.ToggleEditModeOption.help.enable": "Attivare la modalit\xE0 di modifica del piano permette di creare e spostare forme o creare spazi",
  "WorkCanvas.Options.ToggleEditModeOption.help.disable": "Disattiva la modalit\xE0 di modifica del piano per tornare alla modalit\xE0 di lettura del piano",
  "WorkCanvas.Options.ToggleEditModeOption.description": "Quando si ruotano oggetti e postazioni, di default viene applicato un angolo di 45\xB0, per disattivarlo utilizzare il tasto <b>MAIUSC</b> della tastiera",
  "WorkCanvas.Options.FitToViewOption.label": "Centrare la mappa per vedere tutto",
  "WorkCanvas.Options.FitToViewOption.help": "Consente di avere una panoramica del piano",
  "HeatMapSelection.title": "Colora gli spazi con una mappa termica per capire le densit\xE0, le mappe termiche per il momento non sono esportabili in immagine",
  "HeatMapSelection.heatmaps.seatsCount.label": "Densit\xE0 di posti a sedere",
  "HeatMapSelection.heatmaps.seatsCount.description": "Colora gli spazi in base al numero di posti",
  "HeatMapSelection.heatmaps.workplacesCount.label": "Densit\xE0 della postazione di lavoro",
  "HeatMapSelection.heatmaps.workplacesCount.description": "Colora gli spazi in base al numero di postazioni di lavoro",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.label": "Densit\xE0 degli incarichi alle postazioni di lavoro",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.description": "Colora gli spazi in base al numero di incarichi di postazione di lavoro",
  "HeatMapSelection.heatmaps.carbonFootprintCount.label": "Densit\xE0 dell'impronta di carbonio dei mobili",
  "HeatMapSelection.heatmaps.carbonFootprintCount.description": "Colora gli spazi in base all'impronta di carbonio dei mobili",
  "FurnituresSelectionDragZone.help": "Sposta gruppo",
  "FurnituresSelection.move": "Sposta l'intero gruppo",
  "WorkCanvas.Options.TextAnchorOption.label.enable": "Imposta la posizione del testo visualizzato",
  "WorkCanvas.Options.TextAnchorOption.label.disable": "Interrompi la gestione del testo visualizzato",
  "WorkCanvas.Options.TextAnchorOption.help.enable": "Sposta il testo visualizzato",
  "WorkCanvas.Options.TextAnchorOption.help.disable": "Interrompi lo spostamento del testo visualizzato",
  "TextAnchorDrawer.title": "Modifica la posizione del testo visualizzato per %{determinant.defined} %{name}",
  "WorkCanvas.Options.TextAnchorDrawer.label.enable": "Sposta il testo visualizzato",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.label": "Personalizza la posizione del testo",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.help": "Consente di attivare la personalizzazione della posizione del testo del piano",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.label": "Abilita la visualizzazione dell'ancora",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.help": "Permette di attivare la visualizzazione del segmento e del punto di ancoraggio per questo spazio",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.label": "Reimposta la posizione del testo",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.help": "Questa opzione riporta la posizione del testo per questo spazio nella sua posizione originale",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.label": "Ripristina la posizione dell'ancora",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.help": "Questa opzione riporta la posizione di ancoraggio di questo spazio nella sua posizione originale",
  "ShapeTextAnchorDrawer.empty": "Seleziona una forma compatibile per spostare il testo visualizzato",
  "IconsPicker.DisplayAll.text": "Mostra tutto",
  "IconsPicker.DisplayAll.help": "Tieni presente che il caricamento potrebbe richiedere del tempo.",
  "IconsPicker.close": "Chiudi la selezione dell'icona",
  "IconPickerSearch.SearchPlaceholder": "Cerca un'icona con almeno 3 lettere",
  "EntitiesAutocomplete.searchEmpty.help.false": "Seleziona %{determinants.defined} senza %{objectTypeName}",
  "EntitiesAutocomplete.searchEmpty.help.true": "Ritorna alla modalit\xE0 di ricerca standard",
  "SearchFieldString.searchEmpty.help.false": "Cerca elementi vuoti o senza valore",
  "SearchFieldString.searchEmpty.help.true": "Riattiva la ricerca standard",
  "SearchFilters.buttons.clear.label": "Cancella tutti i filtri",
  "SearchFilters.buttons.clear.help": "Cancella tutti i filtri e ripristinali al loro stato iniziale per assicurarti di poter vedere tutte le entit\xE0 disponibili",
  "RightSearchFilterDrawer.filter": "Filtra %{determinants.defined}",
  "RightSearchFilterDrawer.tabLabel": "Filtro",
  "RightSearchFilterDrawer.buttons.clear.label": "Cancella tutti i filtri",
  "RightSearchFilterDrawer.buttons.clear.help": "Cancella tutti i filtri e ripristinali al loro stato iniziale per assicurarti di poter vedere tutte le entit\xE0 disponibili",
  "PropertSelectorDrawer.help": "Seleziona le propriet\xE0 che desideri visualizzare nella tabella",
  "PropertSelectorDrawer.options.reset.label": "Ripristina selezione",
  "PropertSelectorDrawer.options.reset.help": "Ripristina la selezione delle propriet\xE0 al loro stato iniziale",
  "PropertSelectorDrawer.tabLabel": "Propriet\xE0",
  "TableSelectionAllCheckbox.checked.true": "Deseleziona tutto",
  "TableSelectionAllCheckbox.checked.false": "Seleziona tutto",
  "TableSelectionAllCheckbox.help": "Seleziona o deseleziona tutte le righe (comprese quelle non visibili nell'elenco impaginato)",
  "TableOptionsRow.checked.true": "Deseleziona tutto",
  "TableOptionsRow.checked.false": "Seleziona tutto",
  "TableOptionsRow.help": "Seleziona o deseleziona tutte le righe",
  "ErrorTextZone.reload": "Ripeti l'operazione",
  "ReportErrorSteps.report.title": "Hai appena riscontrato un errore",
  "ReportErrorSteps.report.description": "Questo errore \xE8 stato segnalato ai nostri team e cercheremo di correggerlo il pi\xF9 rapidamente possibile.",
  "ReportErrorSteps.report.steps.title": "Puoi provare in ordine",
  "ReportErrorSteps.report.steps.reload": "Ricarica la pagina e verifica se l'errore \xE8 stato risolto",
  "ReportErrorSteps.report.steps.logout": "Disconnettiti e torna a questa pagina dopo esserti ricollegato",
  "ReportErrorSteps.report.steps.contact": "Contattaci in modo che possiamo offrirti un'alternativa il pi\xF9 rapidamente possibile",
  "ReportErrorByMailButton.label": "Contattaci",
  "RefreshPageButton.label": "Ricarica la pagina",
  "Errors.networkError": "Sono stati rilevati problemi di connessione o di rete, attendi e riprova tra qualche secondo",
  "ShowEntityDrawer.title.show": "Vedi %{determinant.defined}",
  "ShowEntityDrawer.title.listItem": "Vedi le informazioni per %{determinant.defined} nella barra laterale",
  "EditEntityDrawer.title.edit": "Modifica %{determinant.defined}",
  "RightDrawerContent.close": "Chiudere il pannello di destra cliccando sulla croce.",
  "DropDownOptions.moreOptions": "Visualizza altre opzioni per %{determinant.defined} %{name}",
  "BuildingFloorsList.title": "Naviga tra i piani",
  "RefetchEntityButton.refetch": "Ricarica dati",
  "RefetchEntitiesButton.refetch": "Ricarica i dati dell'oggetto visibile",
  "RefetchObjectTypeIcon.help": "Ricarica i dati per %{determinant.defined}",
  "ImpactButtonReload.help.single": "Aggiorna i dati calcolati per %{determinant.defined}",
  "ImpactButtonReload.help.list": "Aggiorna i dati calcolati per %{determinants.defined}",
  "EditInlineToggleIconButton.edit.label": "Modificare",
  "EditInlineToggleIconButton.edit.help": "Modifica direttamente in questa pagina le propriet\xE0 di %{determinant.defined}",
  "EditInlineToggleIconButton.cancel.help": "Interrompi la modifica senza salvare",
  "ConfirmationButtons.confirm": "Conferma il completamento dell'azione",
  "ConfirmationButtons.cancel": "per cancellare",
  "ConfirmationButtons.loading": "L'azione \xE8 in esecuzione, attendere",
  "EmailNotVerified.errorMessage": "Per favore convalida la tua email ( %{email} ), una volta convalidata, puoi disconnetterti e riconnetterti per accedere a Surfy",
  "NoRoleAssociated.noRole": "Nessun ruolo sembra essere associato al tuo utente per l'azienda %{tenant} , contatta il tuo amministratore",
  "NoCompanies.title.whatIsSurfy": "Cos'\xE8 Surfy?",
  "NoCompanies.NoCompanyAssigned": "Non sei associato ad alcuna piattaforma, al momento non puoi utilizzare surfy",
  "NoCompanies.whatIsSurfy": "Surfy propone la digitalizzazione delle planimetrie degli edifici per facilitare la gestione dell'ambiente di lavoro.<br/> Puoi utilizzare l'app Surfy per<ul><li> organizzare gli spazi</li><li> assegnare i dipendenti</li><li> spazi di rifatturazione</li><li> analizzare gli spazi</li><li> gestire la conformit\xE0 e le normative</li><li> connettere gli spazi</li><li> gestire gli orari delle presenze</li><li> riservare spazi di lavoro</li></ul>",
  "NoCompanies.whatIsSurfyForTeams": "Surfy propone la digitalizzazione delle planimetrie degli edifici per facilitare la gestione dell'ambiente di lavoro. Puoi utilizzare l'app Surfy per<ul><li> gestisci il tuo programma di presenza</li><li> dichiarare la propria presenza in ufficio</li><li> prenotare uno spazio di lavoro</li><li> indicare che stai telelavorando</li><li> vedere quali colleghi hanno prenotato una postazione di lavoro sul piano</li></ul>",
  "NoCompanies.ContactUs.text": "Accedi alla tua piattaforma aziendale",
  "NoCompanies.ContactUs.subject": "Accesso a Surfy",
  "NoCompanies.ContactUs.body": "Ciao, potresti farmi accedere all'applicazione Surfy? Grazie.",
  "NoCompanies.accessSurfy.title": "Perch\xE9 non riesco ad accedere a Surfy?",
  "NoCompanies.accessSurfy.alreadyUsing": "Se la tua azienda utilizza gi\xE0 Surfy, contatta il tuo responsabile dell'ambiente di lavoro per richiedere l'accesso oppure contattaci tramite il seguente link",
  "NoCompanies.accessSurfy.joinTenant": "Unisciti alla piattaforma della tua azienda",
  "NoCompanies.notUsing.title": "La tua azienda non utilizza ancora Surfy?",
  "NoCompanies.knowMore": "Scopri di pi\xF9 su Surfy",
  "AuthenticationButton.connections.google-oauth2.label": "Google",
  "AuthenticationButton.connections.google-oauth2.help": "Accedi con il tuo account Google",
  "AuthenticationButton.connections.AzureADv2.label": "Ufficio 365",
  "AuthenticationButton.connections.AzureADv2.help": "Accedi con il tuo account aziendale Microsoft tramite Office 365",
  "AuthenticationButton.connections.auth0.label": "Conto da surf",
  "AuthenticationButton.connections.auth0.help": "Accedi con il tuo account Surfy",
  "Auth0AuthenticationButton.connections.auth0.label": "Conto Surfy (id aperto)",
  "Auth0AuthenticationButton.connections.auth0.help": "Accedi con il tuo account Surfy",
  "EnterpriseConnectionButton.label": "Azienda",
  "EnterpriseConnectionButton.help": "Accedi con il tuo account aziendale tramite un'autenticazione dedicata come OKTA o DigitalP@ss",
  "EnterpriseConnectionForm.title": "Inserisci la tua email in modo che possiamo riconoscere la tua attivit\xE0",
  "EnterpriseConnectionForm.forms.email.placeholder": "E-mail",
  "EnterpriseConnectionForm.error": "Impossibile identificare la tua azienda con la tua email",
  "EnterpriseConnectionForm.buttons.validate.label": "convalidare",
  "EnterpriseConnectionForm.buttons.validate.help": "Convalidare l'e-mail ti consente di conoscere la tua azienda e di indirizzarti alla giusta piattaforma di autenticazione",
  "EnterpriseConnectionForm.buttons.back.label": "Ritorno",
  "EnterpriseConnectionForm.buttons.back.help": "Torna alla pagina di autenticazione con tutte le opzioni",
  "LoginView.loadingPage": "Caricamento della pagina di autenticazione",
  "LoginView.connections.google-oauth2.label": "Google",
  "LoginView.connections.google-oauth2.help": "Accedi con il tuo account Google",
  "LoginView.connections.AzureADv2.label": "Ufficio 365",
  "LoginView.connections.AzureADv2.help": "Accedi con il tuo account aziendale Microsoft tramite Office 365",
  "LoginView.connections.Username-Password-Authentication.label": "Conto da surf",
  "LoginView.connections.Username-Password-Authentication.help": "Accedi con il tuo account Surfy",
  "LoginView.texts.title": "Login",
  "LoginView.texts.description": "Accesso a Surfy",
  "LoginView.helpers.register": "Registra la tua attivit\xE0 con Surfy",
  "LoginView.helpers.moreInfo": "Scopri di pi\xF9 su Surfy",
  "LoginView.helpers.privacy": "politica sulla riservatezza",
  "CustomUserRegisterForm.tabs.login": "Per accedere",
  "CustomUserRegisterForm.tabs.signup": "Registrati",
  "CustomUserRegisterForm.form.email": "E-mail",
  "CustomUserRegisterForm.form.password": "Parola d'ordine",
  "CustomUserRegisterForm.form.firstName": "Nome",
  "CustomUserRegisterForm.form.lastName": "Cognome",
  "CustomUserRegisterForm.form.confirmPassword": "conferma password",
  "CustomUserRegisterForm.buttons.login.label": "convalidare",
  "CustomUserRegisterForm.buttons.login.help": "Accedi se hai gi\xE0 un account",
  "CustomUserRegisterForm.buttons.signup.label": "convalidare",
  "CustomUserRegisterForm.buttons.signup.help": "Iscriviti a Surfy se non hai un account",
  "ReportChart.NoValue": "Senza valore",
  "ChangeLanguage.title": "Cambia la lingua",
  "ChangeLanguage.help": "Cambia la lingua dell'app",
  "DataQualityTable.numberOfLines": "Numero di righe",
  "AllTenantsDataQualityTable.enableAllTenants.label": "Includi tutte le piattaforme",
  "SingleNodeQuery.refetch": "Ricarica dati",
  "ListRefetchButton.refetch": "Ricarica i dati dell'oggetto visibile",
  "ImpactObjectTypeIconButton.refetch": "Ricarica tutti i dati indipendentemente dai filtri",
  "CollapseSwitchButton.help.true": "Nascondi il dettaglio",
  "CollapseSwitchButton.help.false": "Guarda il dettaglio",
  "menu.logout": "disconnessione",
  "menu.tenantOperations": "Sincronizzazione",
  "menu.menuLeft.shoppingCart": "Cestino",
  "menu.menuLeft.personCompanies": "Fornitori",
  "menu.menuLeft.workplace": "Posti di lavoro personali",
  "menu.menuLeft.security": "Sicurezza",
  "menu.menuLeft.globalSecurity": "Sicurezza globale",
  "menu.menuLeft.all": "Amministrazione",
  "menu.menuLeft.operations": "Operazioni",
  "menu.menuLeft.types": "Tipi",
  "menu.menuLeft.roomTypes": "Tipologie di spazio",
  "menu.menuLeft.inventory": "Inventari",
  "menu.menuLeft.people": "Persone",
  "menu.menuLeft.spaces": "Spazi",
  "menu.menuLeft.organizations": "Organizzazioni",
  "menu.menuLeft.dimensions": "Livelli di analisi",
  "menu.menuLeft.api": "API",
  "menu.menuLeft.authentification": "Autenticazione",
  "menu.menuLeft.globalAdmin": "Amministrazione globale",
  "menu.menuLeft.human": "Collaboratori",
  "menu.menuLeft.things": "Mobilia",
  "menu.menuLeft.admin": "Amministrazione",
  "menu.menuLeft.surfy": "Surfista",
  "menu.menuLeft.partnerExportMapping": "Partner",
  "menu.menuLeft.personType": "Tipi",
  "menu.menuLeft.personRelations": "Relazioni",
  "menu.menuLeft.affectations": "Compiti",
  "menu.menuLeft.buildings": "Edifici",
  "menu.menuLeft.thingsType": "Tipi",
  "menu.menuLeft.spacePoints": "Punti",
  "menu.menuLeft.adminReporting": "Segnalazione",
  "menu.menuLeft.adminCostCenterReporting": "Centro di costo",
  "menu.menuLeft.adminDimensionReporting": "Dimensioni",
  "menu.menuLeft.adminRoomTypeReporting": "Tipo di spazi",
  "menu.menuLeft.adminOrganizationReporting": "Organizzazioni",
  "menu.menuLeft.adminRoomTypeGroupReporting": "Gruppi di tipologia spaziale",
  "menu.menuLeft.buildingFacts": "Dati dell'edificio con data e ora",
  "menu.menuLeft.itemsFact": "Dati dell'oggetto con data e ora",
  "menu.menuLeft.segments": "Segmenti",
  "menu.menuLeft.connectors": "Connettori",
  "menu.menuLeft.planning": "Orari",
  "menu.menuLeft.bookings": "Prenotazioni",
  "menu.menuLeft.help": "Aiuto",
  "menu.menuLeft.company": "Piattaforme",
  "ReduceMenuSwitch.open.true": "Espandi il menu",
  "ReduceMenuSwitch.open.false": "Comprimi il menu per sfruttare lo spazio di lavoro",
  "LogoutMenuLink.logout": "disconnessione",
  "HelpPortalListItemLink.label": "Portale di aiuto",
  "HelpPortalListItemLink.help": "Scopri il portale di assistenza di Surfy con tutti i nostri tutorial e guide per l'utente",
  "ChangeLogListItemLink.label": "Notizia",
  "ChangeLogListItemLink.help": "Scopri cosa c'\xE8 di nuovo e cosa \xE8 cambiato in Surfy",
  "DisplayRoomTexts.dragOption": "Tenere premuto e modificare l'ordine di visualizzazione degli immobili sulla pianta spostando il campo in alto o in basso",
  "DisplayRoomTexts.roomPeopleDimensions.label": "Quartiere",
  "DisplayRoomTexts.roomPeopleDimensions.help": "Mostra o meno il quartiere sulla mappa",
  "DisplayRoomTexts.roomSeatsCount.label": "Numero di posti",
  "DisplayRoomTexts.roomSeatsCount.help": "Visualizza o meno il numero di posti sulla mappa",
  "DisplayRoomTexts.roomCapacity.label": "Capacit\xE0 spaziale",
  "DisplayRoomTexts.roomCapacity.help": "Mostra o meno la capacit\xE0 di spazio sulla planimetria",
  "DisplayRoomTexts.roomCostCenter.label": "Centro di costo",
  "DisplayRoomTexts.roomCostCenter.help": "Mostrare o meno il centro di costo dello spazio sulla planimetria",
  "DisplayRoomTexts.roomMergedName.label": "Nome unito",
  "DisplayRoomTexts.roomMergedName.help": "Visualizzare o meno il nome unito dello spazio sulla planimetria, questo nome combina il nome visualizzato e il nome dello spazio",
  "DisplayRoomTexts.roomName.label": "Nome dello spazio",
  "DisplayRoomTexts.roomName.help": "Mostrare o meno il nome dello spazio sulla planimetria",
  "DisplayRoomTexts.roomPrettyName.label": "Nome da visualizzare",
  "DisplayRoomTexts.roomPrettyName.help": "Mostra o meno il nome visualizzato dello spazio sulla planimetria",
  "DisplayRoomTexts.roomArea.label": "La zona",
  "DisplayRoomTexts.roomArea.help": "Mostrare o meno la superficie del vano sulla planimetria",
  "DisplayRoomTexts.roomType.label": "Tipologia dello spazio",
  "DisplayRoomTexts.roomType.help": "Visualizzare o meno la tipologia dello spazio",
  "DisplayRoomTexts.roomPerimeter.label": "Perimetro",
  "DisplayRoomTexts.roomPerimeter.help": "Mostrare o meno il perimetro dello spazio sulla pianta",
  "DisplayRoomTexts.roomOrganizationLevel1.label": "Servizio",
  "DisplayRoomTexts.roomOrganizationLevel1.help": "Visualizzare o meno il nome del servizio spaziale sul piano",
  "DisplayRoomTexts.roomOrganizationTopLevel.label": "Direzione",
  "DisplayRoomTexts.roomOrganizationTopLevel.help": "Mostrare o meno il nome della direzione dello spazio sulla pianta",
  "DisplayRoomTexts.roomPeople.label": "Persone assegnate agli spazi",
  "DisplayRoomTexts.roomPeople.help": "Visualizzare o meno i nomi delle persone assegnate a questo spazio sulla planimetria",
  "DisplayRoomTexts.roomWorkplaceAffectations.label": "Persone assegnate alle postazioni di lavoro",
  "DisplayRoomTexts.roomWorkplaceAffectations.help": "Visualizzare o meno i nomi delle persone assegnate alle postazioni di lavoro in questo spazio della planimetria",
  "DisplayRoomTexts.roomPeopleCount.label": "Numero di incarichi",
  "DisplayRoomTexts.roomPeopleCount.help": "Visualizza o meno il numero di persone assegnate a questo spazio nel piano",
  "DisplayRoomTexts.roomPeopleRatio.label": "Rapporto di occupazione",
  "DisplayRoomTexts.roomPeopleRatio.help": "Mostra o meno il rapporto di occupazione dello spazio sulla planimetria",
  "DisplayRoomTexts.roomWorkplacesCount.label": "Numero di postazioni di lavoro",
  "DisplayRoomTexts.roomWorkplacesCount.help": "Mostra o meno il numero di postazioni di lavoro presenti nello spazio della planimetria",
  "DisplayRoomTexts.roomWorkplacesRatio.label": "Rapporto di postazioni di lavoro",
  "DisplayRoomTexts.roomWorkplacesRatio.help": "Mostra o meno il rapporto tra le postazioni di lavoro dello spazio sulla pianta",
  "DisplayRoomTexts.roomOccupancyRate.label": "Tasso di occupazione",
  "DisplayRoomTexts.roomOccupancyRate.help": "Visualizzare o meno il tasso di occupazione degli spazi sul piano",
  "DisplayRoomTexts.roomExpansionRatio.label": "Tasso di crescita eccessiva",
  "DisplayRoomTexts.roomExpansionRatio.help": "Mostra o meno il tasso di espansione dello spazio sul piano",
  "DisplayRoomTexts.roomFreeWorkplacesCount.label": "Numero di posti vacanti",
  "DisplayRoomTexts.roomFreeWorkplacesCount.help": "Visualizza o meno il numero di posizioni libere sul piano",
  "DisplayRoomTexts.roomFlexWorkplacesCount.label": "Numero di posizioni flessibili",
  "DisplayRoomTexts.roomFlexWorkplacesCount.help": "Visualizzare o meno il numero di posizioni flessibili sul piano",
  "DisplayRoomOptions.roomSeatsCount.one": "%{value} posto",
  "DisplayRoomOptions.roomSeatsCount.more": "%{value} posti",
  "DisplayRoomOptions.roomCapacity.one": "Capacit\xE0: %{value} spazio",
  "DisplayRoomOptions.roomCapacity.more": "Capacit\xE0: %{value} posti",
  "DisplayRoomOptions.roomFreeWorkplacesCount.one": "%{value} posizione libera",
  "DisplayRoomOptions.roomFreeWorkplacesCount.more": "%{value} posti vacanti",
  "DisplayRoomOptions.roomFlexWorkplacesCount.one": "%{value} elemento flessibile",
  "DisplayRoomOptions.roomFlexWorkplacesCount.more": "%{value} posizioni flessibili",
  "DisplayRoomOptions.roomWorkplacesCount.one": "%{value} workstation",
  "DisplayRoomOptions.roomWorkplacesCount.more": "%{value} workstation",
  "DisplayRoomOptions.roomPeopleCount.one": "%{value} persona interessata",
  "DisplayRoomOptions.roomPeopleCount.more": "%{value} persone interessate",
  "DisplayRoomOptions.roomOccupancyRate": "Occupazione: %{value}",
  "DisplayRoomOptions.roomExpansionRatio": "Espansione: %{value}",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.enable": "Gestisci i testi di visualizzazione dello spazio",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.disable": "Chiudi la gestione del testo del display",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.enable": "Consente di configurare i testi che verranno visualizzati sulla planimetria per ogni spazio",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.disable": "Torna alla normale modalit\xE0 di modifica del piano.",
  "DisplayRoomTextsDrawer.tabs.map": "Piano",
  "DisplayRoomTextsDrawer.tabs.tooltip": "Descrizione comando",
  "DisplayRoomTextsDrawer.tabs.base.tabs.rooms": "Spazi",
  "DisplayRoomTextsDrawer.tabs.base.tabs.people": "Persone",
  "DisplayRoomTextsDrawer.tabs.base.people.description": "Per definire le propriet\xE0 delle persone da visualizzare sulla planimetria, scegliere nella scheda spazio le persone assegnate agli spazi o alle postazioni di lavoro quindi scegliere le propriet\xE0 in questa scheda",
  "DisplayWorkplaceTexts.workplaceName.label": "Nome della stazione di lavoro",
  "DisplayWorkplaceTexts.workplaceName.help": "Visualizza o meno il nome della workstation sul piano",
  "DisplayWorkplaceTexts.workplaceCostCenter.label": "Centro di costo",
  "DisplayWorkplaceTexts.workplaceCostCenter.help": "Visualizza o meno il centro di costo della workstation sul piano",
  "DisplayWorkplaceTexts.people.label": "Mostra le persone",
  "DisplayWorkplaceTexts.people.help": "Visualizza o meno le persone assegnate alla workstation sul piano",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.label": "Direzione",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.help": "Visualizzare o meno le indicazioni delle postazioni sulla planimetria",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.label": "Servizio",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.help": "Visualizzare o meno i servizi delle postazioni in planimetria",
  "DisplayPersonTexts.personPicture.label": "Foto di persone",
  "DisplayPersonTexts.personPicture.help": "Visualizzare o meno in planimetria la foto delle persone assegnate alle postazioni di lavoro",
  "DisplayPersonTexts.personName.label": "Nome delle persone",
  "DisplayPersonTexts.personName.help": "Visualizzare o meno il nome delle persone assegnate alle postazioni presenti nel piano",
  "DisplayPersonTexts.personSecurityProfile.label": "Profilo di sicurezza",
  "DisplayPersonTexts.personSecurityProfile.help": "Visualizzare o meno il profilo di sicurezza delle persone assegnate alle postazioni del piano",
  "DisplayPersonTexts.personOrganizationLevel0.label": "Direzione",
  "DisplayPersonTexts.personOrganizationLevel0.help": "Visualizzare o meno in pianta la direzione delle persone addette alle postazioni di lavoro",
  "DisplayPersonTexts.personOrganizationLevel1.label": "Servizio",
  "DisplayPersonTexts.personOrganizationLevel1.help": "Visualizzare o meno il servizio delle persone assegnate alle postazioni in planimetria",
  "DisplayPersonTexts.personOrganizationHierarchy.label": "Gerarchia dell'organizzazione",
  "DisplayPersonTexts.personOrganizationHierarchy.help": "Visualizzare o meno sulla planimetria il reparto e la direzione delle persone addette alle postazioni di lavoro",
  "DisplayPersonTexts.personCostCenter.label": "Centro di costo",
  "DisplayPersonTexts.personCostCenter.help": "Visualizzare o meno il centro di costo delle persone assegnate alle postazioni del piano",
  "DisplayPersonTexts.personCode.label": "Numero di registrazione",
  "DisplayPersonTexts.personCode.help": "Se visualizzare o meno il numero delle persone assegnate alle postazioni del piano",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.enable": "Gestire i testi di visualizzazione della workstation",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.disable": "Chiudi la gestione del testo del display",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.enable": "Consente di configurare i testi che verranno visualizzati in planimetria per ogni postazione",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.disable": "Torna alla normale modalit\xE0 di modifica del piano.",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.enable": "Attiva la trasparenza dei colori di sfondo degli spazi",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.disable": "Disattiva la trasparenza del colore",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.enable": "L'abilitazione della trasparenza del colore consente di vedere lo sfondo attraverso gli spazi",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.disable": "La disattivazione della trasparenza del colore reimposta i colori degli spazi",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.description": "La trasparenza dei colori degli spazi permette di vedere la pianta di base",
  "WorkCanvas.Options.MapScaleOption.label.enable": "Gestisci la scala",
  "WorkCanvas.Options.MapScaleOption.label.disable": "Chiudere la gestione scala",
  "WorkCanvas.Options.MapScaleOption.help.enable": "Obbligatorio configurare la scala sulla propria planimetria per avere gli spazi e gli oggetti nella scala corretta",
  "WorkCanvas.Options.MapScaleOption.help.disable": "Torna alla normale modalit\xE0 di modifica del piano.",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.label": "Elimina scala",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.help": "Eliminare la scala equivale a rimuovere la scala dalla pianta ed eliminarla dalla base, non sar\xE0 pi\xF9 accessibile da altre piante. Non \xE8 possibile eliminare una scala che si trova su pi\xF9 piani.",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.label": "Separa scala",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.help": "Lo scollegamento della bilancia da questo piano la rimuove dal piano, ma la mantiene nel database per un uso futuro",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.label": "Zoom in scala",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.help": "Lo zoom rende facile trovare la scala sulla planimetria.",
  "WorkCanvas.Options.DrawMapScaleOption.help": "Devi configurare la bilancia sul tuo piano, fare clic all'inizio e alla fine della bilancia sul piano per calibrarla",
  "ToggleCopilotEnable.label.false": "Attiva Surfy Copilot",
  "ToggleCopilotEnable.label.true": "Disabilita Surfy Copilot",
  "ToggleCopilotEnable.help.false": "Attiva Surfy Copilot per abilitare il riconoscimento automatico della porta",
  "ToggleCopilotEnable.help.true": "Disabilita Surfy Copilot e torna alla modellazione manuale",
  "WorkCanvas.Options.CopilotOption.label.enable": "Copilota Surfy",
  "WorkCanvas.Options.CopilotOption.label.disable": "Chiudi le opzioni di Surfy Copilot ",
  "WorkCanvas.Options.CopilotOption.help.enable": "Attiva e regola le opzioni di Surfy Copilot",
  "WorkCanvas.Options.CopilotOption.help.disable": "Ritorna alla modalit\xE0 normale del piano.",
  "WorkCanvas.Options.AddRoomShapeOption.label.enable": "Aggiungi uno spazio",
  "WorkCanvas.Options.AddRoomShapeOption.label.disable": "Annulla l'aggiunta di uno spazio",
  "WorkCanvas.Options.AddRoomShapeOption.help.enable": "Aggiungi spazio sulla planimetria",
  "WorkCanvas.Options.AddRoomShapeOption.help.disable": "Annulla la creazione dello spazio",
  "WorkCanvas.Options.AddRoomShapeOption.description": "Gli angoli di creazione sono bloccati a 45\xB0, per sbloccarli tieni premuto il tasto <b>SHIFT</b> della tastiera e continua la creazione, per creare il tuo vertice posiziona il mouse nel cerchio all'intersezione del triangolo, Per iniziare uno spazio riutilizzando un vertice esistente , tieni premuto il tasto <b>ALT</b> della tastiera e clicca sul vertice.",
  "WorkCanvas.Options.AddRoomShapeSaveOption.label": "Salva lo spazio attualmente in fase di modellazione",
  "WorkCanvas.Options.AddRoomShapeSaveOption.help": "Salva spazio chiuder\xE0 automaticamente lo spazio e lo salver\xE0 consentendoti di aggiungervi oggetti o postazioni di lavoro",
  "WorkCanvas.Options.ViewLegendOption.label.enable": "Legenda in anteprima",
  "WorkCanvas.Options.ViewLegendOption.label.disable": "Chiudi la didascalia dell'immagine salvata del piano",
  "WorkCanvas.Options.ViewLegendOption.help.enable": "Scopri a cosa serve la sezione della legenda della mappa",
  "WorkCanvas.Options.ViewLegendOption.help.disable": "Ritorna alla modalit\xE0 normale del piano.",
  "DownloadImageQualitySlider.label": "Qualit\xE0 dell'immagine esportata",
  "DownloadImagePdfButton.label": "Scarica la planimetria senza legenda (PDF)",
  "DownloadImagePdfButton.help": "Scarica il piano in PDF senza legenda, questa funzionalit\xE0 \xE8 in beta",
  "WorkCanvas.Options.DownloadImageOption.label.enable": "Salva come immagine",
  "WorkCanvas.Options.DownloadImageOption.label.disable": "Chiudi le opzioni di salvataggio dell'immagine del piano",
  "WorkCanvas.Options.DownloadImageOption.help.enable": "Salva il piano come immagine tramite questa opzione",
  "WorkCanvas.Options.DownloadImageOption.help.disable": "Ritorna alla modalit\xE0 normale del piano.",
  "DownloadImageDrawer.ViewImage.text": "Scarica la planimetria con legenda (PNG)",
  "DownloadImageDrawer.ViewImage.help": "Scarica l'intero piano in buona qualit\xE0 con la legenda, l'esportazione potrebbe richiedere pi\xF9 tempo.",
  "DownloadImageDrawer.ViewImageNoLegend.text": "Scarica la planimetria senza legenda (PNG)",
  "DownloadImageDrawer.ViewImageNoLegend.help": "Scarica l'intero piano in buona qualit\xE0 senza la legenda, l'esportazione potrebbe richiedere pi\xF9 tempo.",
  "DownloadImageDrawer.ScreenshotNoLegend.text": "Screenshot senza didascalia",
  "DownloadImageDrawer.ScreenshotNoLegend.help": "Scarica l'immagine di ci\xF2 che vedi a schermo senza didascalia, l'output sar\xE0 veloce ma la qualit\xE0 dell'export non sar\xE0 ottimale",
  "DownloadBuildingImagesAccordion.accordion.title": "Esporta le immagini dell'intero edificio",
  "DownloadBuildingImagesAccordion.buttons.download.help": "Scarica tutte le planimetrie di tutti i piani dell'edificio in formato png in un zip, i tempi di attesa per questa estrazione possono essere lunghi",
  "DownloadBuildingImagesAccordion.buttons.download.label": "Scarica ZIP",
  "DisplayTexts.dragOption": "\xC8 possibile ordinare e scegliere la visualizzazione delle propriet\xE0 sulla planimetria spostando in alto o in basso le piccole barre del campo",
  "DisplayRoomTextsPeople.roomPeopleFullName.label": "Nome completo della persona",
  "DisplayRoomTextsPeople.roomPeopleFullName.help": "Se mostrare o meno il nome completo della persona sulla mappa",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.label": "Profilo di sicurezza",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.help": "Visualizzare o meno il profilo di sicurezza delle persone assegnate agli spazi in planimetria",
  "NumberOfPeoplePerRowField.label": "Numero di persone per linea per assegnazioni di spazio",
  "WorkCanvas.Options.BackgroundLayoutOption.label.enable": "Gestisci la mappa di base",
  "WorkCanvas.Options.BackgroundLayoutOption.label.disable": "Chiudi la gestione dell'immagine di sfondo",
  "WorkCanvas.Options.BackgroundLayoutOption.help.enable": "Consente di gestire lo sfondo",
  "WorkCanvas.Options.BackgroundLayoutOption.help.disable": "Torna alla normale modalit\xE0 di modifica del piano.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.label": "Elimina scala",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.help": "Eliminare la scala equivale a rimuovere la scala dalla pianta ed eliminarla dalla base, non sar\xE0 pi\xF9 accessibile da altre piante. Non \xE8 possibile eliminare una scala che si trova su pi\xF9 piani.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.label": "Separa scala",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.help": "Lo scollegamento della bilancia da questo piano la rimuove dal piano, ma la mantiene nel database per un uso futuro",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.label": "Zoom in scala",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.help": "Lo zoom rende facile trovare la scala sulla planimetria.",
  "WorkplaceCanvasItem.workplace.free": "La stazione di lavoro non \xE8 occupata",
  "WorkplaceCanvasItem.workplace.isFlex": "La postazione \xE8 in flex",
  "WorkplaceCanvasItem.workplace.isTransit": "La postazione \xE8 transitoria",
  "WorkplaceCanvasItem.workplace.isBookable": "La postazione di lavoro \xE8 prenotabile",
  "WrongRoomsTable.table.headers.objectType": "Natura",
  "WrongRoomsTable.table.headers.type": "Tipo",
  "WrongRoomsTable.table.headers.identity": "Identit\xE0",
  "WrongRoomsTable.table.headers.currentRoom": "spazio attuale",
  "WrongRoomsTable.table.headers.newRoom": "nuovo spazio",
  "WrongRoomsTable.SelectAll.checked.true": "Deseleziona tutto",
  "WrongRoomsTable.SelectAll.checked.false": "Seleziona tutto",
  "WrongRoomsTable.SelectAll.help": "Seleziona o deseleziona tutte le righe",
  "WrongRoomsListner.dialog.title": "Convalida la scelta degli spazi",
  "WrongRoomsListner.dialog.description": "Ci sono forme che non sono nel loro spazio di partenza",
  "WrongRoomsListner.close.label": "Chiudere",
  "WrongRoomsListner.close.help": "chiudi questa finestra",
  "MoveShapestoNewRoomAsyncButton.label": "Applicare il cambio di spazio",
  "MoveShapestoNewRoomAsyncButton.help": "Cambia gli spazi delle forme selezionate per metterle negli spazi in cui si trovano sulla pianta",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.enable": "Sposta il tipo di oggetto",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.disable": "Interrompi lo spostamento del tipo di oggetto",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.enable": "Sposta un tipo di oggetto sul piano",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.disable": "Interrompi lo spostamento del tipo di oggetto",
  "ResetRotationAngle.resetRotationAngle": "Reimposta a 0\xB0 l'angolo di rotazione che attualmente \xE8 %{initialRotation}",
  "TenantOperations.sephora-sync-sap-success-factors.label": "Sincronizzazione MSC",
  "TenantOperations.st-grenoble-import-hr-file.label": "Importazione del file HR",
  "TenantOperations.egis-import-hr-file.label": "Importazione file HR",
  "TenantOperations.essilor-import-hr-file.label": "Importazione file HR",
  "TenantOperations.agpm-import-hr-file.label": "Importazione del file HR (STILOG)",
  "ConnectedPartnerContext.title": "Sei connesso a <b>%{label}</b> ( %{host} )",
  "Operations.talentsoft-import.label": "Importa Talentsoft",
  "Operations.zbre-sync.label": "Sincronizzazione Z#ber",
  "Operations.exportZbre.label": "Esporta Z#ber",
  "GenericNoChangeTable.open.label": "Visualizza i dati",
  "GenericNoChangeTable.open.help": "Vedi il dettaglio dei dati identici",
  "Operations.sharingcloud-sync.label": "Sincronizzazione del cloud di condivisione",
  "Operations.moffi-sync.label": "Sincronizzazione Moffi",
  "Operations.lucca-sync.label": "Sincronizzazione Lucca",
  "CompareObjectTypeUpdateIcon.help": "Questa sincronizzazione aggiorner\xE0 le entit\xE0",
  "CompareObjectTypeDeleteIcon.help": "Questa sincronizzazione eseguir\xE0 un'eliminazione delle entit\xE0 che non provengono dall'origine",
  "CompareObjectTypeCreateIcon.help": "Questa sincronizzazione creer\xE0 entit\xE0 che non esistono nella destinazione",
  "RoomTooltip.roomWorkplaceAffectations": "Compiti della postazione di lavoro",
  "RoomSegmentRoomsList.title": "Gli spazi allegati a questo segmento",
  "MeetingRoomCard.seats.1": "%{count} posto",
  "MeetingRoomCard.seats.n": "%{count} posti",
  "MeetingRoomCard.locateSpace": "Individua lo spazio sulla planimetria",
  "MeetingRoomCard.viewPicture": "Vedi la foto dello spazio",
  "days.monday": "Lunedi",
  "days.tuesday": "Marted\xEC",
  "days.wednesday": "Mercoled\xEC",
  "days.thursday": "GIOVED\xCC",
  "days.friday": "Venerd\xEC",
  "days.saturday": "SABATO",
  "days.sunday": "Domenica",
  "WorkplaceAffectationDailyTitle.all": "Questa persona \xE8 colpita ogni giorno",
  "WorkplaceAffectationDailyTitle.person.affected": "A questa persona \xE8 assegnato %{daysText}",
  "WorkplaceAffectationDailyTitle.person.notAffected": "Questa persona non \xE8 influenzata",
  "WorkplaceAffectationDailyTitle.calculatedRate": "Il tasso medio di assegnazione \xE8 %{calculatedRate}",
  "WorkplaceNestedList.title": "Persone assegnate alle postazioni di lavoro",
  "WorkplaceList.workplace.free": "Questa postazione \xE8 gratuita",
  "WorkplaceList.workplace.flex": "Questa workstation \xE8 in flex",
  "WorkplaceList.workplace.transit": "Questa workstation \xE8 condivisa",
  "WorkplaceList.zoomOnWorkplace": "Zoom sulla workstation sulla planimetria",
  "WorkplaceAffectionPersonListItem.remove.help": "Rimuovere l'assegnazione della persona alla workstation",
  "WorkplaceAffectations.edit.help": "Assegna una persona a questa workstation",
  "WorkplaceAffectationDays.all": "Questa persona \xE8 colpita ogni giorno",
  "WorkplaceAffectationDays.and": "%{days} e %{lastDay}",
  "WorkplaceAffectationDays.one": "il %{day}",
  "WorkplaceAffectationDays.person.affected": "A questa persona \xE8 assegnato %{daysText}",
  "WorkplaceAffectationDays.person.notAffected": "Questa persona non \xE8 influenzata",
  "RoomWorkplaceList.EmptyList": "Non sono presenti postazioni di lavoro in questo spazio",
  "RoomCard.buttons.edit.false": "Modifica le propriet\xE0 dello spazio",
  "RoomCard.buttons.edit.true": "Interrompi la modifica",
  "RoomCard.tabs.people": "Compiti",
  "RoomCard.tabs.inventory": "Inventario",
  "RoomCard.tabs.room": "Spazio",
  "RoomAffectationsOnlyList.title": "Persone assegnate agli spazi",
  "RoomAffectationsList.title": "Persone assegnate agli spazi",
  "RoomAffectationsList.EmptyList": "Non c'\xE8 nessuno assegnato a questo spazio",
  "ItemsInventory.EmptyList": "Non ci sono oggetti in questo spazio",
  "MovePersonFromWorkplaceToRoomListButtonItem.label": "Sposta questa persona dalla sua postazione di lavoro allo spazio della postazione di lavoro",
  "MovePersonFromWorkplaceToRoomListButtonItem.help": "Questa opzione richiede l'aggiornamento della pagina per vedere il risultato, \xE8 possibile concatenare pi\xF9 movimenti senza aggiornare",
  "CollapseWorkplaceAffectationList.title": "Assegna questa persona solo per i giorni seguenti",
  "CollapseWorkplaceAffectationList.updateAffectationDay.true": "Colpisci questa persona %{day}",
  "CollapseWorkplaceAffectationList.updateAffectationDay.false": "Rimuovi l'incarico di questa persona %{day}",
  "CancelAddWorkplaceToRoom.help": "Annulla aggiunta workstation",
  "CancelAddItemToRoom.help": "Annulla l'aggiunta di oggetti",
  "AddPersonToRoom.help": "Assegna una persona allo spazio %{name}",
  "SecurityComplianceModeSwitch.label": "Filtra le persone con profili di sicurezza",
  "SecurityComplianceModeSwitch.description": "Visualizza sulla mappa solo le persone con profili di sicurezza",
  "layoutViewSets.roomType.label": "Tipi di spazi",
  "layoutViewSets.roomType.description": "Vedere la planimetria in base alla tipologia degli spazi",
  "layoutViewSets.costCenter.label": "Rimborso",
  "layoutViewSets.costCenter.description": "Analizzare le chiavi per la distribuzione finanziaria degli spazi",
  "layoutViewSets.workplaces.label": "occupazioni",
  "layoutViewSets.workplaces.description": "Concentrati sull'occupazione delle postazioni di lavoro",
  "layoutViewSets.organizationLevel0.label": "Indicazioni",
  "layoutViewSets.organizationLevel0.description": "Occupazione per direzione",
  "layoutViewSets.flex.label": "Flettere",
  "layoutViewSets.flex.description": "L'occupazione flessibile degli spazi",
  "layoutViewSets.walls.label": "Partizioni",
  "layoutViewSets.walls.description": "Concentrati su spazi e partizioni",
  "layoutViewSets.securityCompliance.label": "Conformit\xE0 alla sicurezza",
  "layoutViewSets.securityCompliance.description": "Analizza la conformit\xE0 del tuo piano di prevenzione della sicurezza e i profili di sicurezza delle persone interessate",
  "layoutViewSets.peopleDimensionTypes.label": "Quartieri",
  "layoutViewSets.peopleDimensionTypes.description": "Analizza i livelli di assegnazione e naviga per quartiere o zona",
  "LayoutViewSwitch.title": "Cambia la visione del piano",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.viewSet": "Visione",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.help": "Puoi modificare la visione tramite i menu del piano",
  "SurfyLegendBottomLogo.text": "Piano generato da Surfy",
  "SurfyLegendBottomLogo.caption": "https://www.surfy.pro",
  "MapLegendWorkplace.title": "Posto di lavoro",
  "MapLegendWorkplace.workplaces.free": "Le postazioni sono gratuite",
  "MapLegendWorkplace.workplaces.flex": "Le postazioni sono in flex",
  "MapLegendRoom.title": "Spazi",
  "MapLegendPersonSecurityProfile.title": "Profili di sicurezza",
  "MapLegendFloor.title.building": "Edificio",
  "MapLegendFloor.title.floor": "Piano",
  "MapLegend.workplaces": "Posti di lavoro personali",
  "MapLegend.rooms": "Spazi",
  "PersonSecurityProfileTabContent.tabs.merged": "Per profili di sicurezza",
  "PersonSecurityProfileTabContent.tabs.split": "Per incarichi",
  "DimensionInfo.infos.building": "Informazioni sull'edificio calcolate",
  "DimensionInfo.infos.impactBuildings": "Ricarica i dati dell'edificio calcolati",
  "DimensionToPeopleList.title": "Persone assegnate a %{name}",
  "DimensionToPeopleList.noDimensionPerson": "Non c'\xE8 nessuno assegnato direttamente a questo livello di analisi",
  "DimensionPeople.title": "Persone assegnate agli spazi",
  "AddPersonToDimension.help": "Assegna persona a %{name}",
  "CubyWallModeSelect.label": "Visualizzazione delle partizioni",
  "CubyWallModeSelect.options.no": "Nessuno",
  "CubyWallModeSelect.options.half": "Mezze partizioni",
  "CubyWallModeSelect.options.reality": "La realt\xE0",
  "CubyWallModeSelect.options.cuby": "Cubo",
  "CubySaveAsImageButton.label": "Salva immagine",
  "CubySaveAsImageButton.help": "Salva l'immagine della planimetria",
  "CubyFitToViewIsometricButtonOption.label": "Centrare il piano nella vista isometrica",
  "CubyFitToViewIsometricButtonOption.help": "Pianta centrale su vani in vista isometrica",
  "CubyFitToViewZenithalButtonOption.label": "Centrare il piano nella vista zenitale",
  "CubyFitToViewZenithalButtonOption.help": "Centrare la pianta sugli spazi in vista zenitale",
  "RefetchFloorLayoutButton.refetch": "Ricarica i dati del piano",
  "ItemTypesMapFilterZone.tabs.options": "Opzioni",
  "FloorMap.tabs.layout": "Cambiare la visione del piano. La vista corrente \xE8 <b>%{layoutName}</b>",
  "FloorMap.tabs.floor": "Vedi le informazioni sul piano",
  "FloorMap.tabs.building": "Vedi le informazioni sull'edificio",
  "FloorMap.tabs.roomTypes": "Colora gli spazi sulla planimetria in base alle <b>tipologie di spazio</b>",
  "FloorMap.tabs.roomTypeGroups": "Consulta gli indicatori di spazio sulla planimetria secondo i <b>gruppi di tipologie di spazio</b>",
  "FloorMap.tabs.analyticsDimensionTypes": "Colora gli spazi sulla pianta in base ai <b>livelli di analisi</b>",
  "FloorMap.tabs.itemTypes": "Visualizza <b>gli oggetti</b> sulla pianta per famiglia e tipo di oggetti",
  "FloorMap.tabs.workplaceTypes": "Visualizza le <b>postazioni</b> per tipo di postazione sul piano",
  "FloorMap.tabs.organizations": "Colora gli spazi sulla planimetria secondo le <b>organizzazioni</b>",
  "FloorMap.tabs.costCenters": "Spazi colore e postazioni di lavoro in relazione ai <b>centri di costo</b>",
  "FloorMap.tabs.users": "Postazioni a colori contro persone",
  "FloorMap.tabs.selection": "Vedi i dettagli degli elementi selezionati sulla pianta",
  "FloorMap.tabs.rooms": "Dettagli degli <b>spazi</b> selezionati",
  "FloorMap.tabs.items": "Dettagli degli <b>oggetti</b> selezionati",
  "FloorMap.tabs.workplaces": "Dettagli delle <b>workstation</b> selezionate",
  "FloorMap.tabs.all": "Visualizza tutte le forme selezionate nell'elenco",
  "FloorMap.tabs.peopleDimensionTypes": "Colora gli spazi sul piano in base <b>ai livelli di assegnazione</b>",
  "FloorMap.tabs.workplaceUsage": "Colora le postazioni di lavoro in base al loro <b>stato</b>",
  "FloorMap.tabs.options": "Vedi le opzioni del piano",
  "FloorMap.tabs.heatmap": "Colorare con mappe di calore",
  "FloorMap.tabs.pathFinding": "Orientarsi negli spazi",
  "DateDimensionSelect.options.day": "Giorno",
  "DateDimensionSelect.options.week": "Settimana",
  "DateDimensionSelect.options.month": "Mese",
  "DateDimensionSelect.options.year": "Anno",
  "DateDimensionSelect.options.quarter": "Trimestre",
  "JupDateRangePicker.chooseRange": "Scegli un periodo",
  "WorkpaceBookingPeopleCountByDate.title": "Numero di persone prenotate per data",
  "WorkpaceBookingPeopleCountByDate.labels.line": "Numero di persone",
  "WorkpaceBookingCountByDate.title": "Prenotazioni postazioni per data",
  "WorkpaceBookingCountByDate.labels.line": "Numero di prenotazioni",
  "WorkpaceBookingAverageByWeekDay.title": "Prenotazione delle postazioni di lavoro per giorno della settimana",
  "WorkpaceBookingAverageByWeekDay.labels.line": "Media settimanale",
  "WorkpaceBookingAverageByWeekDay.labels.bar": "Numero di prenotazioni",
  "PersonPanelWorkplaceAffectations.title": "Compiti della postazione di lavoro",
  "PersonPanelRoomAffectations.title": "Assegnazioni agli spazi",
  "PersonPanelDimensionToPeople.title": "Assegnazioni a %{dimensionTypeName}",
  "PersonPanelBuildingAffectations.title": "Assegnazioni agli edifici",
  "PersonPanelBuildingAffectations.addToPeopleCount.false": "Questa persona non sta contabilizzando nell'edificio",
  "PersonAffectationsPanel.title": "Compiti",
  "PersonAffectationsPanel.description": "I compiti della persona",
  "PersonSecurityPanel.title": "Sicurezza",
  "PersonSecurityPanel.description": "Informazioni sulla sicurezza e sull'evacuazione",
  "PersonRelationsPanel.title": "Relazioni",
  "PersonRelationsPanel.description": "Le relazioni di questa persona",
  "PersonInventoryPanel.title": "Inventario",
  "PersonInventoryPanel.description": "Informazioni sull'inventario",
  "PersonInventoryPanel.items.subheader": "Elenco degli oggetti associati",
  "PersonInfoPanel.title": "Informazioni personali",
  "PersonContractPanel.title": "Contrarre",
  "PersonContractPanel.description": "Informazioni sul contratto",
  "PersonContactPanel.title": "Contatto",
  "PersonContactPanel.description": "Come posso contattare questa persona?",
  "PersonBadgePanel.title": "Vari",
  "PersonBadgePanel.description": "Informazioni varie sulla persona",
  "AvatarPersonDrawer.help": "Visualizza ulteriori informazioni su %{name}",
  "TopLevelOrganizationFilter.Empty": "Non esiste alcuna organizzazione associata agli spazi, puoi aggiungerne altre modificando uno spazio e associandolo a un'organizzazione, quindi puoi controllarne la visualizzazione da questa sezione",
  "OrganizationTabsFilter.tabs.topLevel": "Indicazioni",
  "OrganizationTabsFilter.tabs.hierarchy": "Gerarchia",
  "OrganizationTabsFilter.tabs.level1": "Servizi",
  "OrganizationFloorMapFilter.TooltipTitle.notSelected": "Seleziona %{organization} per colorare gli spazi sulla planimetria",
  "OrganizationFloorMapFilter.TooltipTitle.selected": "Deselezionando %{organization} verranno rimossi i colori dalla mappa",
  "OrganizationFloorMapFilter.tooltip.true": "Seleziona tutti i tipi di oggetti qui sotto per colorarli sulla mappa",
  "OrganizationFloorMapFilter.tooltip.false": "Deseleziona tutte le organizzazioni di seguito",
  "Level1OrganizationFilter.Empty": "Non esiste alcuna organizzazione associata agli spazi, puoi aggiungerne altre modificando uno spazio e associandolo a un'organizzazione, quindi puoi controllarne la visualizzazione da questa sezione",
  "HierarchyOrganizationFilter.Empty": "Non esiste alcuna organizzazione associata agli spazi, puoi aggiungerne altre modificando uno spazio e associandolo a un'organizzazione, quindi puoi controllarne la visualizzazione da questa sezione",
  "CompanyDashboard.dashboards.workplace": "Cruscotto del desktop",
  "CompanyDashboard.dashboards.area": "Dashboard delle superfici",
  "ChangeCompanyMenu.ChangeCompany": "Vedere un'altra attivit\xE0 in una nuova pagina",
  "WorkplaceTypeDataQualityNotUsed.columns.name": "Nome del tipo di workstation",
  "WorkplaceTypeDataQualityNotUsed.columns.shape": "Modulo",
  "workplaceTypeLayoutFilter.Empty": "Al momento non sono presenti postazioni di lavoro negli spazi, puoi aggiungerne altre modificando uno spazio e aggiungendovi postazioni di lavoro, quindi puoi controllarne la visualizzazione da questa sezione",
  "WorkplaceTypeInfo.help": "Il numero di workstation \xE8 %{count}",
  "CopyWorkplaceTypeToCart.help": "Copia i tipi di workstation nel carrello",
  "WorkCanvas.Options.ZoomOnWorkplaceType.label": "Ingrandisci il tipo di workstation",
  "WorkCanvas.Options.ZoomOnWorkplaceType.help": "Zoomando sul tipo di workstation \xE8 possibile individuarla nell'area di lavoro",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.enable": "Elenca i tipi di oggetti",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.disable": "Chiudere l'elenco dei tipi di oggetto",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.enable": "Vedere l'elenco dei tipi di oggetto per questo tipo di workstation",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.disable": "Chiudere l'elenco dei tipi di oggetto per questo tipo di workstation",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.open": "Apri le opzioni",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.close": "Opzioni di piegatura",
  "WorkplaceTypeItemTypesDrawer.title": "Elenco dei tipi di oggetto",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.help": "Aggiungere un tipo di oggetto per poter comporre il tipo di workstation",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.label": "Aggiungi un tipo di oggetto",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.help": "Annulla aggiunta di un tipo di oggetto a questo centro di lavoro",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.label": "Annulla l'aggiunta di un tipo di oggetto",
  "WorkCanvas.Options.DeleteStructureShapeOption.help": "Rimuovere completamente la forma della struttura del potere, ad esempio ridisegnarla interamente",
  "WorkCanvas.Options.DeleteStructureShapeOption.label": "elimina forma",
  "WorkCanvas.Options.AddStructurePointOption.label.enable": "Aggiungi vertice",
  "WorkCanvas.Options.AddStructurePointOption.label.disable": "Smetti di aggiungere un vertice",
  "WorkCanvas.Options.AddStructurePointOption.help.enable": "L'aggiunta di un vertice consente di rielaborare una forma con maggiore precisione",
  "WorkCanvas.Options.AddStructurePointOption.help.disable": "Smetti di creare vertici",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloorButton.label": "Prenota una postazione di lavoro a %{floorName}",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloor": "Prenota una postazione di lavoro al %{floorName} per il periodo %{slotString}",
  "BookPersonBuildingWorkplace.availableWorkplaces": "%{freeWorkplaces} posti disponibili",
  "BookPersonBuildingWorkplace.help": "%{bookedWorkplaces} prenotazione/i, %{freeWorkplaces} postazioni di lavoro disponibili su %{totalFloorWorkplacesCount}",
  "booking.snackbar.delete.workplace": "La prenotazione sulla postazione di lavoro %{workplaceName} \xE8 stata cancellata per il periodo %{slot}",
  "booking.snackbar.delete.room": "La prenotazione nello spazio %{roomName} \xE8 stata cancellata per il periodo %{slot}",
  "BookingWorkplaceTitle.booked": "Questa postazione di lavoro \xE8 gi\xE0 prenotata",
  "BookingWorkplaceTitle.userBooked": "Hai prenotato questa postazione di lavoro",
  "BookingWorkplaceTitle.free": "Prenota questa postazione di lavoro",
  "PlanningPersonAffectations.alerts.noAffectation.title": "Impossibile prenotare una postazione di lavoro",
  "PlanningPersonAffectations.alerts.noAffectation.message": "Non sei associato ad alcun territorio, contatta il tuo responsabile di assegnazione per poter prenotare uno spazio di lavoro",
  "WorkingLocationToggle.locations.OFFICE": "Scrivania",
  "WorkingLocationToggle.locations.REMOTE": "Telelavoro",
  "PersonBookingListItem.workplaceBookedOnFloor": "Vedi la workstation %{workplaceName} sulla planimetria %{floorName}",
  "PersonBookingList.noBooking": "Nessun collega sar\xE0 per il momento presente in ufficio nello stesso orario",
  "PersonBookingList.bookings.one": "Nello stesso slot sar\xE0 presente un collega",
  "PersonBookingList.bookings.more": "%{count} colleghi saranno presenti nello stesso slot",
  "ParkingBookIcon.parking.booked": "Il tuo parcheggio \xE8 riservato",
  "ParkingBookIcon.parking.release.help": "Rilascio prenotazione parcheggio",
  "ParkingBookIcon.parking.viewOnMap": "Vedi i parcheggi riservati sulla mappa",
  "ParkingBookIcon.parking.book.label": "Prenotare il parcheggio",
  "ParkingBookIcon.parking.book.help": "Prenota un parcheggio che verr\xE0 automaticamente assegnato allo slot",
  "HalfDayWorkingLocationToggle.am.label": "Mattina",
  "HalfDayWorkingLocationToggle.am.help": "L'orario mattutino \xE8 dalle 8:00 alle 13:30.",
  "HalfDayWorkingLocationToggle.pm.label": "Pomeriggio",
  "HalfDayWorkingLocationToggle.pm.help": "L'orario pomeridiano \xE8 dalle 14:00 alle 19:00.",
  "DirectBuildingPlanningLabel.youAreAssigned": "Ti \xE8 stato assegnato l'edificio %{buildingName}",
  "DimensionBuildingPlanningLabel.youAreAssigned": "Ti \xE8 stato assegnato %{dimensionTypeName} %{dimensionName}",
  "BookedBuildingWorkplaceList.noWorkplaceBooked": "Nessuna postazione riservata",
  "BookedBuildingWorkplaceList.workplaceIsBooked": "La tua postazione di lavoro \xE8 riservata",
  "BookedBuildingWorkplaceList.viewBookedWorkplaceOnMap": "Visualizza la workstation %{workplaceName} riservata nel piano",
  "BookedBuildingWorkplaceList.freeWorkplaceBooking": "Rilascia questa prenotazione",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.noFloor": "La metratura non \xE8 su nessun piano impossibile da prenotare al momento dalla planimetria",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.moreThanOneFloor": "La metratura \xE8 su pi\xF9 piani impossibile prenotarla al momento essendo in planimetria",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.drawer.title": "Prenota una postazione di lavoro specifica per il periodo %{slotString}",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.help": "Prenota una postazione di lavoro specifica nel piano per questo slot",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.label": "Prenota una postazione di lavoro in %{dimensionName}",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.peopleCount": "Ci sono %{count} persone con profilo di sicurezza %{name} assegnate alle workstation",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.workplaceCount": "Ci sono %{count} postazioni di lavoro con almeno una persona con profilo di sicurezza %{name}",
  "PersonSecurityProfileWorkplaceFilter.Empty": "Le tue persone non hanno un profilo di sicurezza o non sono assegnate alle postazioni, non \xE8 possibile colorare le postazioni in base ai profili di sicurezza delle persone",
  "PersonSecurityProfileWorkplaceFilter.title": "I profili di sicurezza delle persone assegnate alle postazioni di lavoro",
  "PersonSecurityProfileMerged.title": "Elenco dei profili di sicurezza raggruppati per tipo di profilo",
  "PersonSecurityProfileMerged.empty": "Nessun profilo \xE8 associato a spazi o postazioni di lavoro",
  "PersonSecurityProfileInRooms.title": "I profili di sicurezza delle persone assegnate agli spazi",
  "PersonSecurityProfileInRoomListItem.peopleCount": "Ci sono %{count} persone con profilo di sicurezza %{name} assegnate agli spazi",
  "PersonSecurityProfileInRoomListItem.roomsCount": "Ci sono %{count} spazi con almeno una persona con profilo di sicurezza %{name}",
  "ToggleAllOpenInfoState.true": "Chiudi tutti i dettagli e gli indicatori",
  "ToggleAllOpenInfoState.false": "Apri tutti i dettagli e gli indicatori",
  "MapFiltersNodesToggleAll.help.true": "Seleziona tutto",
  "MapFiltersNodesToggleAll.help.false": "Deseleziona tutto",
  "MapFiltersNode.info.open": "Visualizza i dettagli e gli indicatori per %{label}",
  "MapFiltersNode.info.close": "Chiudi informazioni aggiuntive",
  "MapFiltersCategory.CategoryHasChildrenSelected": "Gli elementi sono selezionati",
  "MapFilterNodeToggleAll.action.true": "Seleziona tutto",
  "MapFilterNodeToggleAll.action.false": "Deseleziona tutto",
  "MapFilterNodeIsAllSelected.help": "Verr\xE0 caricata tutta la selezione sottostante, anche se vengono creati nuovi oggetti",
  "JupRoleToObjectTypeMatrix.views.help.true": "Nascondi la visualizzazione dell'interfaccia",
  "JupRoleToObjectTypeMatrix.views.help.false": "Mostra vista interfaccia",
  "JupRoleToObjectTypeMatrix.objectTypes.help.checkbox": "Aggiorna propriet\xE0 ( %{name} )",
  "GlobalOptions.CartCopyItemTypeOption.help": "Copia i tipi di articoli nel carrello",
  "GlobalOptions.CartCopyWorkplaceTypeOption.help": "Copia i tipi di workstation nel carrello",
  "GlobalOptions.CartCopyBuildingOption.help": "Copia gli edifici nel carrello",
  "CheckAllDefaultViews.shortcuts.title": "Collegamenti di installazione",
  "CheckAllDefaultViews.shortcuts.views.title": "Scorciatoie per le visualizzazioni dell'interfaccia predefinite",
  "CheckAllDefaultViews.shortcuts.views.buttonsHelp": "Controlla questa vista per tutti i tipi di entit\xE0",
  "CheckAllDefaultViews.shortcuts.objectTypes.title": "Scorciatoie per i tipi di entit\xE0",
  "CheckAllDefaultViews.shortcuts.objectTypes.buttonsHelp": "Verifica questa regola per tutti i tipi di oggetti",
  "RemoveItemColorsOption.label": "Non colorare gli oggetti",
  "RemoveItemColorsOption.help": "Colora gli oggetti di bianco in modo da poterti concentrare su altri elementi sulla mappa",
  "ItemTypeOptions.help": "Il numero di oggetti \xE8 %{count}",
  "ItemTypeMapFilter.TooltipTitle.notSelected": "Seleziona %{itemType} per vedere gli elementi sulla mappa",
  "ItemTypeMapFilter.TooltipTitle.selected": "Deselezionando %{itemType} verr\xE0 rimosso il colore associato dal piano",
  "ItemTypeMapFilter.tooltip.true": "Seleziona tutti i tipi di oggetti di seguito per visualizzarli sulla mappa",
  "ItemTypeMapFilter.tooltip.false": "Deseleziona tutti i tipi di oggetto di seguito",
  "ItemTypeMapFilter.NoNode": "Al momento non ci sono oggetti negli spazi, puoi aggiungerne altri modificando uno spazio e aggiungendovi oggetti, quindi puoi controllarne la visualizzazione da questa sezione",
  "ItemTypeMapFilter.NoCategory": "Al momento non ci sono oggetti negli spazi, puoi aggiungerne altri modificando uno spazio e aggiungendovi oggetti, quindi puoi controllarne la visualizzazione da questa sezione",
  "ItemTypeDataQualityNotUsed.columns.name": "Nome del tipo di oggetto",
  "ItemTypeDataQualityNotUsed.columns.shape": "Modulo",
  "ItemTypeDataQualityNotUsed.columns.workplaceTypeCount": "Numero del tipo di postazione di lavoro",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.help": "Scegli un piano di riferimento per creare la forma in modo da poter disegnare il tuo tipo di oggetto posizionandoti su un piano e avendo la giusta scala",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.label": "Scegli un piano di riferimento per creare la forma",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.help": "Scegli un piano di riferimento per comporre la tipologia di postazione con tipologie di oggetti esistenti posizionandoti su un piano e avendo la giusta scala e posizionando correttamente le tipologie di oggetti",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.label": "Scegliere un piano di riferimento per comporre la forma del tipo di workstation",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.help": "Scegli un piano di riferimento per creare la forma in modo da poter disegnare la struttura posizionandoti su una pianta e avendo la giusta scala",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.label": "Scegli un piano di riferimento per creare la struttura",
  "ItemTypeAvatarSingleView.copy": "Copia i punti negli appunti",
  "ItemTypeAvatarSingleView.debug.label": "Abilita la modalit\xE0 avanzata per il 3D",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.help": "Rimuovere completamente la forma del tipo di oggetto per poterlo, ad esempio, ridisegnarlo interamente o trasformarlo in un'icona",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.label": "elimina forma",
  "CopyItemTypesToCart.help": "Copia i tipi di articoli nel carrello",
  "PhysicalItemNotInsideWorkplaceRoom.alignRooms": "Cambiare gli spazi degli oggetti in quelli della workstation",
  "AddPersonToItem.text": "Associa una persona a questo oggetto",
  "AddPersonToItem.help": "Associa una persona a questo oggetto, puoi aggiungere pi\xF9 persone per lo stesso oggetto",
  "DimensionTypeDescription.NoDescription": "Non esiste una descrizione per questo tipo di livello di analisi, puoi aggiungerne altri modificandolo",
  "dimensionTypes.room_ground_type.one": "Tipo di terreno",
  "dimensionTypes.room_ground_type.description": "Permette di conoscere la composizione del terreno nello spazio",
  "dimensionTypes.room_usage.one": "Tipo di spazi",
  "dimensionTypes.room_usage.description": "Permette di identificare gli spazi in base ai loro usi",
  "dimensionTypes.frequency.one": "Frequenza",
  "dimensionTypes.frequency.description": "Permette di conoscere la frequenza del passaggio nello spazio",
  "dimensionTypes.evacuation_zone.one": "Sicurezza",
  "dimensionTypes.evacuation_zone.description": "Consente di gestire le zone di sicurezza e di evacuazione",
  "dimensionTypes.referent.one": "Referente",
  "dimensionTypes.referent.description": "Ti permette di sapere chi \xE8 assegnato alla manutenzione di questo spazio",
  "DimensionTypesByTab.action.true": "Seleziona tutto",
  "DimensionTypesByTab.action.false": "Deseleziona tutto",
  "DimensionTypesByTab.ListItemHasChildrenSelected": "Le dimensioni sono selezionate",
  "DimensionListItem.notSelected": "Seleziona %{dimension} per vedere gli spazi sulla planimetria con il colore associato",
  "DimensionListItem.selected": "Deseleziona %{dimension}",
  "DimensionInfo.roomsArea.help": "L'area per %{dimensionType} %{dimension} \xE8 %{value} m\xB2",
  "DimensionInfo.roomsCount.help": "Sono presenti %{value} spazio/i per %{dimensionType} %{dimension}",
  "DimensionInfo.peopleCount.help": "Ci sono %{value} persone assegnate per %{dimensionType} %{dimension}",
  "DimensionInfo.totalPeopleCount.help": "Ci sono %{value} persone interessate in totale per %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesCount.help": "Sono presenti %{value} workstation per %{dimensionType} %{dimension}",
  "DimensionInfo.peopleRatio.help": "C'\xE8 %{value} m\xB2 per persona interessata per %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesRatio.help": "C'\xE8 %{value} m\xB2 per workstation per %{dimensionType} %{dimension}",
  "DimensionInfo.occupancyRate.help": "Il tasso di occupazione \xE8 %{value} % per %{dimensionType} %{dimension}",
  "DimensionInfo.expansionRatio.help": "Il tasso di espansione \xE8 %{value} per %{dimensionType} %{dimension}",
  "DimensionInfo.freeWorkplacesCount.help": "Sono disponibili %{value} workstation gratuite per %{dimensionType} %{dimension}",
  "DimensionInfo.flexWorkplacesCount.help": "Sono presenti %{value} workstation in flex per %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesCount.help": "Sono presenti %{value} workstation condivise per %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesRatio.help": "La tariffa per desktop condivisi \xE8 %{value} per %{dimensionType} %{dimension}",
  "DimensionInfo.flexRatio.help": "Il tasso di postazioni di lavoro flessibili",
  "DimensionInfo.transitWorkplacesCount.help": "Sono presenti %{value} -in per %{dimensionType} %{dimension}",
  "DimensionInfo.dimensionPeopleCount.help": "Sono presenti %{value} persone interessate in %{dimensionType} %{dimension}",
  "DimensionInfo.seatsCount.help": "Ci sono %{value} postazioni per %{dimensionType} %{dimension}",
  "DimensionInfo.seatsPeopleRatio.help": "La tariffa dei posti \xE8 %{value} posti disponibili a persona per %{dimensionType} %{dimension}",
  "DimensionInfo.carbonFootprint.help": "L'impronta di carbonio \xE8 %{value} di CO2 emessa per %{dimensionType} %{dimension}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.peopleCount": "Ci sono %{count} persone con centro di costo %{costCenterName}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.workplaceCount": "Ci sono %{count} postazioni di lavoro con almeno una persona con centro di costo %{costCenterName}",
  "PersonCostCenterWorkplaceFilter.Empty": "Non ci sono centri di costo associati alle persone",
  "NoDataOnBuildingInfo.noData": "Seleziona tutti i piani nelle opzioni del piano per avere i dati, non ci devono essere dati per i piani che hai selezionato",
  "CostCenterWorkplaceMapFilter.nodeInfo.workplacesCount": "Ci sono %{count} postazioni di lavoro con centro di costo %{name}",
  "CostCenterMapFilterTabs.tabs.rooms": "Spazi",
  "CostCenterMapFilterTabs.tabs.workplaces": "Posti di lavoro personali",
  "CostCenterMapFilterTabs.tabs.people": "Persone",
  "CostCenterMapFilter.Empty": "Non ci sono centri di costo attualmente associati agli spazi, puoi aggiungerne altri modificando uno spazio e associandovi un centro di costo, poi puoi controllarne la visualizzazione da questa sezione",
  "CostCenterWorkplaceMapFilter.Empty": "Al momento non ci sono centri di costo associati alle workstation, puoi aggiungerne altri modificando una workstation e associando ad essa un centro di costo, quindi puoi controllarne la visualizzazione da questa sezione",
  "BuildingReports.items.sheets.physicals": "Oggetti fisici",
  "BuildingReports.items.sheets.virtuals": "Oggetti virtuali",
  "BuildingReports.items.sheets.merged": "Fusione",
  "BuildingInventory.floor": "Piano",
  "BuildingInventory.quantity": "Quantit\xE0",
  "BuildingInventory.price": "Prezzo",
  "BuildingInventory.manufacturer": "Creatore",
  "BuildingInventory.quantityTotal": "Totale",
  "BuildingInventory.title": "L'inventario dell'edificio %{building.name}",
  "BuildingInventory.buttons.viewPDF.help": "Scarica il file PDF in modo da poterlo scaricare o condividere",
  "BuildingInventory.buttons.viewPDF.label": "Scarica la versione PDF",
  "BuildingInventory.itemTypesFamilySectionTitle": "Categorie di inventario",
  "BuildingInventory.fileNamePrefix": "inventario",
  "BuildingLabel.scenario": "Questo edificio \xE8 uno scenario dell'edificio %{name}",
  "CopyBuildingToCart.help": "Copia la struttura dell'edificio",
  "BuildingClonePropertiesSelector.properties.clone.workplaces": "Copiare le postazioni di lavoro",
  "BuildingClonePropertiesSelector.properties.clone.items": "Copia oggetti",
  "BuildingDistributionCost.floors.excel.tabs.floors": "Chiavi di distribuzione per piano",
  "BuildingDistributionCost.floors.excel.tabs.building": "Chiavi di distribuzione per l'edificio",
  "BuildingDistributionCost.floors.excel.tabs.buildingDetailed": "Dettagli dell'edificio per centro di costo",
  "BuildingDistributionCost.floors.excel.download.label": "Scarica il file excel con le disaggregazioni",
  "BuildingDistributionCost.floors.excel.download.help": "Scarica il file excel per poter condividere ed esportare le chiavi di distribuzione e le aree qualificate per centro di costo e per piano, l'export prevede la distribuzione per piano o per edificio dei centri di costo",
  "BuildingDistributionCost.floors.excel.headers.floors.floorName": "Nome del piano",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterName": "Centro di costo",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterArea": "Area degli spazi comprese le distribuzioni del pavimento",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterRoomsArea": "Area degli spazi del centro di costo",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterDistributedFloorRatio": "Rapporto di utilizzo nel pavimento",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterFloorDistributedArea": "Superficie totale degli spazi da distribuire al piano per questo centro di costo",
  "BuildingDistributionCost.floors.excel.headers.floors.floorArea": "Superficie totale comprese le distribuzioni del pavimento",
  "BuildingDistributionCost.floors.excel.headers.floors.totalFloorDistributedArea": "Superficie da distribuire nel pavimento",
  "BuildingDistributionCost.floors.excel.headers.floors.totalBuildingDistributedArea": "Superficie calpestabile da distribuire nell'edificio",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterName": "Centro di costo",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterArea": "Area totale del centro di costo",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterBuildingRatio": "Rapporto di utilizzo dell'edificio",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterDistributedBuildingArea": "Superficie totale degli spazi distribuiti dell'edificio",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterRoomsArea": "Area degli spazi del centro di costo",
  "BuildingDistributionCost.floors.excel.headers.building.buildingArea": "Superficie totale degli spazi dell'edificio",
  "BuildingDistributionCost.floors.excel.headers.building.buildingDistributedArea": "Superficie da distribuire nell'edificio",
  "BuildingDistributionCost.floors.excel.headers.building.totalBuildingArea": "Superficie totale edificabile",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.buildingName": "Edificio",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterName": "Centro di costo",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterArea": "Zona del centro di costo",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterBuildingRatio": "Chiave di distribuzione nell'edificio",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.distributedCostCenterArea": "Distribuzione del centro di costo %{costCenterName}",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterTotalArea": "Superficie totale da rifatturare",
  "BuildingDistributionCost.excel.tabs.distributionCost": "Chiavi di distribuzione",
  "BuildingDistributionCost.excel.tabs.distributionCostDetails": "Particolari",
  "BuildingDistributionCost.excel.download.label": "Scarica il file excel senza suddivisioni",
  "BuildingDistributionCost.excel.download.help": "Scarica il file excel per poter condividere ed esportare le chiavi di distribuzione e le aree qualificate per centro di costo",
  "BuildingDistributionCost.Title": "Chiavi di distribuzione e aree qualificate per centro di costo senza suddivisioni",
  "BuildingDistributionCost.table.type": "Tipo",
  "BuildingDistributionCost.table.distributionKey": "Chiave di distribuzione",
  "BuildingDistributionCost.table.costCenterDistributionKey": "Chiave di allocazione per centro di costo",
  "BuildingDistributionCost.table.workplacesCount": "Numero di postazioni di lavoro",
  "BuildingDistributionCost.table.workplaceTotalCount": "Numero totale di postazioni di lavoro",
  "BuildingFloorSelection.title": "Pavimenti da duplicare nel tuo scenario",
  "BuildingFloorSelection.all.select": "Seleziona tutti i piani",
  "BuildingFloorSelection.all.unselect": "Deseleziona tutti i piani",
  "BuildingCloneFloorSelection.title": "Pavimenti da duplicare nel tuo scenario",
  "BuildingCloneFloorSelection.all.select": "Seleziona tutti i piani",
  "BuildingCloneFloorSelection.all.unselect": "Deseleziona tutti i piani",
  "BuildingClone.noClone": "Nessuno scenario \xE8 stato ancora creato, puoi creare il tuo primo scenario per questo edificio",
  "BuildingClone.buttons.CreateClone.label": "Crea uno scenario",
  "BuildingClone.buttons.CreateClone.help": "Lo scenario duplicher\xE0 l'edificio con le propriet\xE0 controllate",
  "BuildingClone.accordion.title": "Crea un nuovo scenario",
  "BuildingClone.properties.clone.people": "Compiti duplicati",
  "BuildingClone.properties.clone.workplaces": "Postazioni di lavoro duplicate",
  "BuildingClone.properties.clone.items": "Oggetti duplicati",
  "BuildingClone.properties.clone.dimensions": "Associare i livelli di analisi e assegnazione agli spazi",
  "BuildingClone.properties.clone.organization": "Associare le organizzazioni con gli spazi",
  "BuildingDashboard.dashboards.workplace": "Cruscotto del desktop",
  "BuildingDashboard.dashboards.area": "Dashboard delle superfici",
  "CampusBuildingsAccordion.buildingCount": "Il numero di edifici",
  "CalculatedPropertiesAccordions.mesures": "Misure",
  "CalculatedPropertiesAccordions.kpi": "Indicatori",
  "DimensionMapFilter.TooltipTitle.notSelected": "Seleziona %{dimension} per vedere gli spazi sulla planimetria con il colore associato",
  "DimensionMapFilter.TooltipTitle.selected": "Deselezionando %{dimension} verr\xE0 rimosso il colore associato dal piano",
  "DimensionMapFilter.tooltip.true": "Seleziona tutti i filtri sottostanti per colorarli sulla mappa",
  "DimensionMapFilter.tooltip.false": "Deseleziona tutti i filtri di seguito",
  "DimensionMapFilter.NoNode": "Al momento non ci sono layer di analisi, puoi aggiungerne altri modificando uno spazio e aggiungendovi layer di analisi",
  "DimensionMapFilter.NoCategory": "Non ci sono layer di analisi disponibili, devi prima associarne alcuni ai vani",
  "SelectDimensionTypeNavigationLayoutIcon.select": "Seleziona questo tipo di livello per la navigazione",
  "SelectDimensionTypeNavigationLayoutIcon.unselect": "Rimuovi la navigazione per livello di analisi e torna alla navigazione per spazi",
  "SelectDimensionTypeNavigationLayoutIcon.help": "La navigazione per layer di analisi permette di cliccare su uno spazio, selezionare il layer corrispondente e vedere attraverso gli spazi le persone assegnate a questo layer oppure le postazioni e gli oggetti associati a questo layer",
  "DimensionTypeNavigationWarning.message": "Stai navigando per %{name} , gli spazi verranno raggruppati durante la selezione. Fare clic per annullare e tornare alla navigazione nello spazio",
  "RoomCardSelectDimensions.needSave": "Salva o annulla le modifiche prima di poter modificare i livelli di analisi di questo spazio",
  "AssignPersonToWorkplaceCheckListDialogTitle.title": "Hai assegnato %{personName} alla workstation %{workplaceName}",
  "AssignPersonToRoomCheckListDialogTitle.title": "Hai assegnato %{personName} allo spazio %{roomName}",
  "WorkplaceFullName.noName": "Postazione di lavoro senza nome",
  "RoomFullName.noName": "spazio senza nome",
  "AssignPersonCheckListWorkplaceTransit.title": "La workstation %{workplaceName} \xE8 una workstation temporanea",
  "AssignPersonCheckListWorkplaceTransit.RemoveIsTransit": "Rimuovere il tipo &quot;sta passando&quot; dalla workstation",
  "AssignPersonCheckListWorkplaceAffectations.title": "Questa persona \xE8 gi\xE0 assegnata su altre postazioni di lavoro, vuoi rimuovere le seguenti assegnazioni per %{personFullname}",
  "AssignPersonCheckListRoomAffectations.title": "Questa persona \xE8 gi\xE0 assegnata direttamente ad altri spazi, vuoi rimuovere le seguenti assegnazioni per %{personFullname}",
  "AssignPersonCheckListDialogApplyButton.help": "Elimina gli incarichi selezionati che potrebbero corrispondere ai vecchi incarichi della persona",
  "AssignPersonCheckListDialogApplyButton.label": "Elimina i compiti selezionati",
  "AssignPersonCheckListDialog.actions.close.label": "Chiudere",
  "AssignPersonCheckListDialog.actions.close.help": "Chiudi e non eliminare altre assegnazioni",
  "AssignPersonCheckListBuildingAffectations.title": "Questa persona \xE8 gi\xE0 assegnata direttamente su altri edifici, vuoi rimuovere le seguenti assegnazioni per %{personFullname}",
  "WorkplaceVirtualInventory.title": "Inventario della workstation virtuale",
  "WorkplacePhysicalInventory.title": "Inventario fisico della workstation",
  "WorkplaceTypeSeatsCount.label": "Numero di posti",
  "WorkplaceTypeSeatsCount.help": "Il numero di postazioni conteggiate per questo tipo di postazione di lavoro",
  "WorkplaceTypeCarbonFootprintCount.label": "Impronta ecologica",
  "WorkplaceTypeCarbonFootprintCount.help": "L'impronta di carbonio \xE8 la quantit\xE0 di gas serra emessi dagli oggetti d'arredo di questo tipo di postazione di lavoro",
  "DeleteWorkplace.help": "Elimina workstation: [ %{name} ], anche le assegnazioni verranno eliminate",
  "AddPersonToWorkplace.text": "Assegna una persona",
  "AddPersonToWorkplace.help": "Aggiungi un compito a questa workstation, puoi aggiungere pi\xF9 compiti per la stessa workstation",
  "MouvementMatrixImport.errors.noSheet": "Impossibile trovare il foglio Excel con nome %{name} [ %{objectTypeName} ]",
  "RoomTypeGroupMapFilter.Empty": "Non esiste alcun gruppo di tipi di spazio associato agli spazi tramite i tipi di spazio, puoi aggiungerne altri modificando un gruppo di tipi di spazio e aggiungendovi associando un tipo di spazio, quindi puoi controllarne la visualizzazione da questa sezione",
  "RoomTypeGroupLabel.exclude.tooltip": "Il gruppo di tipologie di spazio esclude i tipi di spazio associati",
  "RoomTypeGroupHelpTitle.exclude": "Il tipo di spazio raggruppato %{name} \xE8 di tipo esclusione. Riunisce tutti gli spazi ad eccezione delle seguenti tipologie di spazi:",
  "RoomTypeGroupHelpTitle.include": "Il raggruppamento di tipi di spazio %{name} riunisce le seguenti tipologie di spazio:",
  "RoomTypeGroupToRoomTypeLabel.exclude.tooltip": "La tipologia dello spazio \xE8 esclusa",
  "RoomMapFilter.Empty": "Non esiste un tipo di spazio associato agli spazi, puoi aggiungerne altri modificando uno spazio e aggiungendovi un tipo associato, quindi puoi controllarne la visualizzazione da questa sezione",
  "LayoutFiltersTabZone.collapse.help": "Il menu \xE8 chiuso, puoi aprirlo cliccando sulla prima icona per aprirlo e vedere i dettagli degli elementi del piano",
  "LayoutFiltersTabOpenToggleIcon.open.true": "Chiudi il menu della mappa per ottimizzare lo spazio di visualizzazione della mappa",
  "LayoutFiltersTabOpenToggleIcon.open.false": "Apri il menu del piano per visualizzare informazioni dettagliate relative al piano",
  "CompanyTypeLabel.notClassified": "Piattaforma non classificata",
  "BuildingMenuItem.menu.scenario": "Scenari ( %{count} )",
  "SearchMenuItem.icon.tooltip": "ricercare",
  "RemoveFromCartIconButton.help": "Rimuovere dal cestino",
  "CopyCartContentIntoTenant.buttons.single.paste.help": "Importa in questa azienda",
  "IndexContextMenuItem.navigation": "Navigazione",
  "GlobalSearchIncludeScenarios.label": "Includi scenari nella ricerca",
  "GlobalSearch.Input.placeholder": "ricercare",
  "GlobalSearch.Start": "Puoi cercare ad esempio persone, spazi, postazioni di lavoro, oggetti o altre entit\xE0, la ricerca partir\xE0 dal 2\xB0 carattere",
  "GlobalSearch.NoResult": "Nessun risultato \xE8 stato trovato per la tua ricerca",
  "GlobalSearch.close.help": "Cancella ricerca",
  "models.PartnerExportMappingConfigurationToFloor.singular": "Fase inclusa nella configurazione della trasformazione delle esportazioni dei partner",
  "models.PartnerExportMappingConfigurationToFloor.plural": "Fasi incluse nella configurazione della trasformazione dell'esportazione dei partner",
  "models.PartnerExportMappingConfigurationToFloor.determinant.defined": "la fase inclusa nella configurazione della trasformazione delle esportazioni dei partner",
  "models.PartnerExportMappingConfigurationToFloor.determinant.undefined": "una tappa inserita nella configurazione della trasformazione dell'export partner",
  "models.PartnerExportMappingConfigurationToFloor.determinants.defined": "le fasi incluse nelle configurazioni delle trasformazioni di esportazione dei partner",
  "models.PartnerExportMappingConfigurationToFloor.determinants.undefined": "fasi incluse nelle configurazioni delle trasformazioni di esportazione dei partner",
  "models.PartnerExportMappingToRoomType.singular": "Trasformazione delle esportazioni dei partner per tipi di spazio",
  "models.PartnerExportMappingToRoomType.plural": "Trasformazioni delle esportazioni dei partner per i tipi di spazio",
  "models.PartnerExportMappingToRoomType.determinant.defined": "la trasformazione delle esportazioni dei partner per tipologie di spazi",
  "models.PartnerExportMappingToRoomType.determinant.undefined": "una trasformazione delle esportazioni dei partner per tipologie di spazi",
  "models.PartnerExportMappingToRoomType.determinants.defined": "trasformazioni delle esportazioni dei partner per tipologie di spazio",
  "models.PartnerExportMappingToRoomType.determinants.undefined": "trasformazioni delle esportazioni dei partner per tipologie di spazio",
  "models.PartnerExportMappingConfiguration.singular": "Configurazione della trasformazione dell'esportazione dei partner",
  "models.PartnerExportMappingConfiguration.plural": "Configurazioni delle trasformazioni di esportazione dei partner",
  "models.PartnerExportMappingConfiguration.determinant.defined": "configurare la trasformazione delle esportazioni dei partner",
  "models.PartnerExportMappingConfiguration.determinant.undefined": "una configurazione della trasformazione delle esportazioni dei partner",
  "models.PartnerExportMappingConfiguration.determinants.defined": "configurazioni delle trasformazioni di esportazione dei partner",
  "models.PartnerExportMappingConfiguration.determinants.undefined": "configurazioni delle trasformazioni di esportazione dei partner",
  "models.PartnerExportMapping.singular": "Trasformazione delle esportazioni dei partner",
  "models.PartnerExportMapping.plural": "Trasformazioni delle esportazioni dei partner",
  "models.PartnerExportMapping.determinant.defined": "la trasformazione delle esportazioni dei partner",
  "models.PartnerExportMapping.determinant.undefined": "una trasformazione delle esportazioni dei partner",
  "models.PartnerExportMapping.determinants.defined": "trasformazioni delle esportazioni dei partner",
  "models.PartnerExportMapping.determinants.undefined": "trasformazioni delle esportazioni dei partner",
  "models.WorkplaceTypeItemType.singular": "tipo di oggetto nel tipo di workstation",
  "models.WorkplaceTypeItemType.plural": "tipi di oggetto nel tipo di workstation",
  "models.WorkplaceTypeItemType.determinant.defined": "il tipo di oggetto nel tipo di workstation",
  "models.WorkplaceTypeItemType.determinant.undefined": "un tipo di oggetto in un tipo di workstation",
  "models.WorkplaceTypeItemType.determinants.defined": "tipi di oggetti nei tipi di workstation",
  "models.WorkplaceTypeItemType.determinants.undefined": "tipi di oggetto nei tipi di workstation",
  "models.WorkplaceTypeItemType.properties.id.label": "Identificatore del tipo di oggetto nel tipo di workstation",
  "models.WorkplaceTypeItemType.properties.zIndex.label": "Indice di altezza",
  "models.WorkplaceTypeItemType.properties.zIndex.description": "L'indice di altezza permette di definire l'ordine di visualizzazione delle tipologie di oggetto, pi\xF9 grande \xE8 l'indice pi\xF9 l'oggetto sar\xE0 sopra gli altri",
  "models.WorkplaceTypeItemType.properties.physicalInventory.label": "Inventario fisico",
  "models.WorkplaceTypeItemType.properties.physicalInventory.description": "Se questa opzione \xE8 selezionata per ogni postazione di lavoro verr\xE0 creato un oggetto fisico in Surfy, questo oggetto potr\xE0 avere un riferimento univoco, in tutti i casi l'inventario dell'edificio sar\xE0 aggiornato",
  "models.WorkplaceTypeItemType.properties.seatsCount.label": "Numero di posti",
  "models.WorkplaceTypeItemType.properties.seatsCount.description": "Permette di definire il numero di posti disponibili nella tipologia postazione per questo tipo di oggetto",
  "models.WorkplaceType.singular": "tipo di postazione di lavoro",
  "models.WorkplaceType.plural": "tipi di postazione di lavoro",
  "models.WorkplaceType.determinant.defined": "il tipo di postazione di lavoro",
  "models.WorkplaceType.determinant.undefined": "un tipo di postazione di lavoro",
  "models.WorkplaceType.determinants.defined": "tipi di postazione di lavoro",
  "models.WorkplaceType.determinants.undefined": "tipi di postazione di lavoro",
  "models.WorkplaceType.properties.id.label": "Identificatore del tipo di workstation",
  "models.WorkplaceType.properties.id.description": "???",
  "models.WorkplaceType.properties.name.label": "Nome del tipo di workstation",
  "models.WorkplaceType.properties.name.description": "???",
  "models.WorkplaceType.views.editor.help": "Modifica forme e posizioni dei tipi di oggetto per il tipo di workstation %{name}",
  "models.WorkplaceType.views.editor.label": "Modifica forme",
  "models.WorkplaceType.views.avatar.help": "Visualizza il modulo del tipo di workstation %{name}",
  "models.WorkplaceType.views.avatar.label": "Vedi il modulo",
  "models.WorkplaceType.views.dq-not-used.label": "Non usato",
  "models.WorkplaceType.views.dq-not-used.help": "Elenca tutti i tipi di workstation inutilizzati tramite workstation",
  "models.WorkplaceAffectation.singular": "Assegnazione postazione di lavoro",
  "models.WorkplaceAffectation.plural": "Compiti della postazione di lavoro",
  "models.WorkplaceAffectation.description": "Permette di assegnare una postazione fissa ad una persona",
  "models.WorkplaceAffectation.determinant.defined": "incarico di lavoro",
  "models.WorkplaceAffectation.determinant.undefined": "incarico di lavoro",
  "models.WorkplaceAffectation.determinants.defined": "incarichi di lavoro",
  "models.WorkplaceAffectation.determinants.undefined": "incarichi di lavoro",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.help": "Importa matrici di trasferimento workstation",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.label": "Importa matrice di trasferimento",
  "models.Workplace.singular": "posto di lavoro",
  "models.Workplace.plural": "posti di lavoro personali",
  "models.Workplace.determinant.defined": "desktop",
  "models.Workplace.determinant.undefined": "una postazione di lavoro",
  "models.Workplace.determinants.defined": "postazioni di lavoro",
  "models.Workplace.determinants.undefined": "postazioni di lavoro",
  "models.Workplace.views.assign-current-user.label": "Occupare la postazione di lavoro",
  "models.Workplace.views.assign-current-user.help": "Occupa la postazione di lavoro %{name}",
  "models.Workplace.properties.id.label": "ID stazione di lavoro",
  "models.Workplace.properties.id.description": "???",
  "models.Workplace.properties.color.label": "Colore",
  "models.Workplace.properties.color.description": "Il colore che il tipo di workstation assumer\xE0 sul piano",
  "models.Workplace.properties.name.label": "Nome della stazione di lavoro",
  "models.Workplace.properties.name.description": "Il nome della workstation viene utilizzato per identificarla in modo pi\xF9 semplice",
  "models.Workplace.properties.isFlex.label": "\xE8 flessibile?",
  "models.Workplace.properties.isFlex.description": "Se questa estensione viene utilizzata in modalit\xE0 Flex",
  "models.Workplace.properties.isShared.label": "\xE8 condiviso?",
  "models.Workplace.properties.isShared.description": "Se questa postazione \xE8 condivisa da pi\xF9 persone, questo campo automatico viene convalidato non appena ci sono almeno 2 assegnazioni sulla postazione",
  "models.Workplace.properties.isTransit.label": "sta passando?",
  "models.Workplace.properties.isTransit.description": "Se questa posizione \xE8 transitoria, questa posizione sar\xE0 esclusa dalle postazioni libere senza essere prenotabile in flex, una posizione transitoria permette di avere una postazione a disposizione per tutti coloro che desiderano utilizzarla senza essere inseriti in un sistema di prenotazione",
  "models.Workplace.properties.isBookable.label": "\xE8 prenotabile?",
  "models.Workplace.properties.isBookable.description": "Se questa postazione di lavoro \xE8 prenotabile in un sistema di prenotazione",
  "models.Workplace.properties.position.label": "Posizione",
  "models.Workplace.properties.position.description": "La posizione della postazione di lavoro nello spazio",
  "models.Workplace.properties.rotation.label": "Rotazione",
  "models.Workplace.properties.rotation.description": "L'angolo di rotazione della postazione di lavoro nello spazio",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.label": "Tasso medio di assegnazione",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.description": "Tasso medio di assegnazione della postazione in funzione dell'assegnazione dei giorni di presenza delle persone",
  "models.Workplace.properties.workplaceAffectationsCount.label": "Numero di incarichi",
  "models.Workplace.properties.workplaceAffectationsCount.description": "Numero di assegnazioni sulla workstation",
  "models.Workplace.properties.comment.label": "Commento",
  "models.Workplace.properties.comment.description": "Ulteriori informazioni sulla stazione di lavoro",
  "models.Workplace.properties.room.label": "Spazio della postazione di lavoro",
  "models.UserRegistrationTenantRuleToJupRole.singular": "Associazione della regola di autenticazione al ruolo",
  "models.UserRegistrationTenantRuleToJupRole.plural": "Associazioni di autenticazione da regola a ruolo",
  "models.UserRegistrationTenantRuleToJupRole.determinant.defined": "associazione della regola di autenticazione al ruolo",
  "models.UserRegistrationTenantRuleToJupRole.determinant.undefined": "un'associazione da regola a ruolo di autenticazione",
  "models.UserRegistrationTenantRuleToJupRole.determinants.defined": "associazioni da regola a ruolo di autenticazione",
  "models.UserRegistrationTenantRuleToJupRole.determinants.undefined": "associazioni da regola a ruolo di autenticazione",
  "models.UserRegistrationTenantRuleToContentRole.singular": "Regola di autenticazione all'associazione del ruolo del contenuto",
  "models.UserRegistrationTenantRuleToContentRole.plural": "Regola di autenticazione per le associazioni di ruoli del contenuto",
  "models.UserRegistrationTenantRuleToContentRole.determinant.defined": "Regola di autenticazione all'associazione del ruolo del contenuto",
  "models.UserRegistrationTenantRuleToContentRole.determinant.undefined": "una regola di autenticazione per l'associazione del ruolo del contenuto",
  "models.UserRegistrationTenantRuleToContentRole.determinants.defined": "regola di autenticazione alle associazioni di ruoli del contenuto",
  "models.UserRegistrationTenantRuleToContentRole.determinants.undefined": "associazioni di regole da ruolo ad autenticazione del contenuto",
  "models.UserRegistrationTenantRule.singular": "Regola di autenticazione",
  "models.UserRegistrationTenantRule.plural": "Regole di autenticazione",
  "models.UserRegistrationTenantRule.determinant.defined": "la regola di autenticazione",
  "models.UserRegistrationTenantRule.determinant.undefined": "una regola di autenticazione",
  "models.UserRegistrationTenantRule.determinants.defined": "regole di autenticazione",
  "models.UserRegistrationTenantRule.determinants.undefined": "regole di autenticazione",
  "models.UserRegistrationTenantRule.properties.domains.label": "le zone",
  "models.UserRegistrationTenantRule.properties.domains.description": "Separare i domini con spazi e includere il segno di chiocciola",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.label": "Associa automaticamente i ruoli",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.description": "Associa automaticamente ruoli e ruoli contenuto agli utenti che soddisfano questa regola",
  "models.UserCompany.singular": "utente aziendale",
  "models.UserCompany.plural": "utenti aziendali",
  "models.UserCompany.description": "Gli utenti aziendali hanno accesso alla piattaforma Surfy della propria azienda",
  "models.UserCompany.determinant.defined": "utente aziendale",
  "models.UserCompany.determinant.undefined": "un utente aziendale",
  "models.UserCompany.determinants.defined": "utenti aziendali",
  "models.UserCompany.determinants.undefined": "utenti aziendali",
  "models.UserCompany.properties.id.label": "ID utente dell'azienda",
  "models.UserCompany.properties.buildingOwners.label": "Edifici di propriet\xE0",
  "models.UserCompany.properties.buildingOwners.description": "Edifici di propriet\xE0 dell'utente",
  "models.User.singular": "utente",
  "models.User.plural": "utenti",
  "models.User.determinant.defined": "l'utente",
  "models.User.determinant.undefined": "un utente",
  "models.User.determinants.defined": "gli utenti",
  "models.User.determinants.undefined": "utenti",
  "models.User.properties.id.label": "ID utente",
  "models.User.properties.id.description": "???",
  "models.User.properties.firstname.label": "Nome",
  "models.User.properties.firstname.description": "Il nome dell'utente",
  "models.User.properties.lastname.label": "Cognome",
  "models.User.properties.lastname.description": "Il cognome dell'utente",
  "models.User.properties.email.label": "E-mail",
  "models.User.properties.email.description": "L'e-mail utilizzata dall'utente per la corrispondenza o per l'autenticazione",
  "models.Structure.singular": "struttura",
  "models.Structure.plural": "strutture",
  "models.Structure.determinant.defined": "la struttura",
  "models.Structure.determinant.undefined": "una struttura",
  "models.Structure.determinants.defined": "le strutture",
  "models.Structure.determinants.undefined": "strutture",
  "models.Structure.properties.nom.label": "Nome della struttura",
  "models.Structure.properties.nom.description": "Per trovare e riutilizzare facilmente la struttura",
  "models.Structure.properties.transform.label": "Trasformazione",
  "models.Structure.properties.transform.description": "Trasformazione della struttura per calibrarla su mappa",
  "models.Structure.views.editor.label": "Modifica forma",
  "models.Structure.views.editor.help": "Modifica la forma della struttura",
  "models.Structure.views.gmap-calibrate.label": "Calibrare la struttura su una mappa",
  "models.Structure.views.gmap-calibrate.help": "Calibrare la struttura su una mappa per associare le coordinate geografiche",
  "models.RoomTypeGroupToRoomType.singular": "associazione del gruppo di tipologie di spazio con la tipologia di spazio",
  "models.RoomTypeGroupToRoomType.plural": "associazioni di gruppi di tipologie spaziali a tipologie spaziali",
  "models.RoomTypeGroupToRoomType.determinant.defined": "l'associazione del gruppo di tipologie di spazio con la tipologia di spazio",
  "models.RoomTypeGroupToRoomType.determinant.undefined": "un'associazione di gruppo di tipologia di spazio con tipologia di spazio",
  "models.RoomTypeGroupToRoomType.determinants.defined": "associazioni di gruppo di tipologie di spazio a tipologie di spazio",
  "models.RoomTypeGroupToRoomType.determinants.undefined": "associazioni di gruppo di tipologie di spazio a tipologie di spazio",
  "models.RoomTypeGroupFloor.singular": "gruppo di tipologie di superficie",
  "models.RoomTypeGroupFloor.plural": "gruppi di tipologie di superficie",
  "models.RoomTypeGroupFloor.determinant.defined": "il gruppo di tipologie di superficie",
  "models.RoomTypeGroupFloor.determinant.undefined": "un gruppo di tipologie di superficie",
  "models.RoomTypeGroupFloor.determinants.defined": "il gruppo di tipologie di superficie",
  "models.RoomTypeGroupFloor.determinants.undefined": "gruppi di tipologie di superficie",
  "models.RoomTypeGroupBuilding.singular": "gruppo di edifici per tipologia spaziale",
  "models.RoomTypeGroupBuilding.plural": "gruppi di tipologie di spazi edilizi",
  "models.RoomTypeGroupBuilding.determinant.defined": "il gruppo di tipologia degli spazi edificabili",
  "models.RoomTypeGroupBuilding.determinant.undefined": "un gruppo di tipologie di spazi edilizi",
  "models.RoomTypeGroupBuilding.determinants.defined": "il gruppo di tipologia degli spazi edificabili",
  "models.RoomTypeGroupBuilding.determinants.undefined": "gruppi di tipologie di spazi edilizi",
  "models.RoomTypeGroup.singular": "gruppo di tipologie di spazio",
  "models.RoomTypeGroup.plural": "gruppi di tipologie spaziali",
  "models.RoomTypeGroup.determinant.defined": "il gruppo di tipologia spaziale",
  "models.RoomTypeGroup.determinant.undefined": "un gruppo di tipologia spaziale",
  "models.RoomTypeGroup.determinants.defined": "gruppi di tipologie spaziali",
  "models.RoomTypeGroup.determinants.undefined": "gruppi di tipologie spaziali",
  "models.RoomTypeGroup.properties.id.label": "Identificatore del gruppo della tipologia di spazio",
  "models.RoomTypeGroup.properties.name.label": "Nome del gruppo di tipologie di spazio",
  "models.RoomTypeGroup.properties.code.label": "codificato",
  "models.RoomTypeGroup.properties.color.label": "Colore",
  "models.RoomTypeGroup.properties.exclude.label": "Escludere",
  "models.RoomTypeGroup.properties.exclude.description": "Escludi tipologie di spazio da questo gruppo",
  "models.RoomTypeFloor.singular": "tipologia dello spazio calpestabile",
  "models.RoomTypeFloor.plural": "tipologie di superficie",
  "models.RoomTypeFloor.determinant.defined": "la tipologia della superficie",
  "models.RoomTypeFloor.determinant.undefined": "una tipologia di superficie",
  "models.RoomTypeFloor.determinants.defined": "tipologie di superficie",
  "models.RoomTypeFloor.determinants.undefined": "tipologie di superficie",
  "models.RoomTypeBuilding.singular": "tipologia dello spazio edilizio",
  "models.RoomTypeBuilding.plural": "tipologie degli spazi edilizi",
  "models.RoomTypeBuilding.determinant.defined": "la tipologia dello spazio edificabile",
  "models.RoomTypeBuilding.determinant.undefined": "una tipologia di spazio edificabile",
  "models.RoomTypeBuilding.determinants.defined": "tipologie degli spazi edilizi",
  "models.RoomTypeBuilding.determinants.undefined": "tipologie degli spazi edilizi",
  "models.RoomType.singular": "tipologia dello spazio",
  "models.RoomType.plural": "tipologie spaziali",
  "models.RoomType.determinant.defined": "tipologia spaziale",
  "models.RoomType.determinant.undefined": "una tipologia di spazio",
  "models.RoomType.determinants.defined": "tipologie spaziali",
  "models.RoomType.determinants.undefined": "tipologie spaziali",
  "models.RoomType.properties.id.label": "Identificatore della tipologia di spazio",
  "models.RoomType.properties.name.label": "Nome del tipo di spazio",
  "models.RoomType.properties.color.label": "Colore in 2d",
  "models.RoomType.properties.color.description": "Il colore del tipo di spazio consente di differenziare ogni tipo sul piano 2d",
  "models.RoomType.properties.color3d.label": "colore 3D",
  "models.RoomType.properties.color3d.description": "Permette di gestire il colore del tipo di spazio in 3d, questa opzione \xE8 applicabile solo alla visione 3d del pavimento",
  "models.RoomType.properties.displayWallsOn3d.label": "Mostra muri",
  "models.RoomType.properties.displayWallsOn3d.description": "Permette di visualizzare o meno le pareti dello spazio nella planimetria 3d, le pareti non visualizzate sono punteggiate in 2d, questo permette di avere una visione pi\xF9 gradevole, soprattutto per gli spazi aperti",
  "models.RoomType.properties.icon.label": "Icona",
  "models.RoomType.properties.icon.description": "L'icona per il tipo di spazio permette di visualizzare per questo tipo di spazio un'icona nelle piante 2d e 3d al posto delle classiche informazioni sulla pianta, associata al colore di sfondo questo permette di rendere maggiormente la lettura della pianta piacevole",
  "models.RoomType.properties.cadence.label": "Cadenza",
  "models.RoomType.properties.cadence.description": "La tariffa \xE8 un valore numerico utilizzato per indicare la difficolt\xE0 di pulizia della tipologia di spazio. \xC8 pari al numero di m\xB2 trattabili in un'ora in questa tipologia (circolazione, laboratorio, ecc.)",
  "models.RoomType.properties.isBookable.label": "\xE8 prenotabile?",
  "models.RoomType.properties.isBookable.description": "Seleziona questa casella se questo tipo di spazio pu\xF2 essere prenotato",
  "models.RoomPointSegmentType.singular": "Tipo di segmento",
  "models.RoomPointSegmentType.plural": "Tipi di segmento",
  "models.RoomPointSegmentType.determinant.defined": "il tipo di segmento",
  "models.RoomPointSegmentType.determinant.undefined": "un tipo di segmento",
  "models.RoomPointSegmentType.determinants.defined": "tipi di segmenti",
  "models.RoomPointSegmentType.determinants.undefined": "tipi di segmenti",
  "models.RoomPointSegment.singular": "qualificazione del segmento",
  "models.RoomPointSegment.plural": "qualifiche di segmento",
  "models.RoomPointSegment.determinant.defined": "qualificazione del segmento",
  "models.RoomPointSegment.determinant.undefined": "una qualificazione del segmento",
  "models.RoomPointSegment.determinants.defined": "qualifiche di segmento",
  "models.RoomPointSegment.determinants.undefined": "qualifiche di segmento",
  "models.RoomPointSegment.properties.reversePoints.label": "Punti inversi",
  "models.RoomPointSegment.properties.reversePoints.description": "Invertire i punti del segmento per avere la visualizzazione, ad esempio, delle porte nella giusta direzione",
  "models.RoomPointSegment.properties.displayBothSides.label": "Mostra su entrambi i lati",
  "models.RoomPointSegment.properties.displayBothSides.description": "Mostra il segmento su entrambi i lati del segmento",
  "models.RoomPointSegment.views.dq-not-uniq.label": "Segmenti di punti non univoci",
  "models.RoomPointSegment.views.dq-not-uniq.help": "Permette di verificare che non vi sia un segmento duplicato esatto sugli stessi punti",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.label": "I punti del segmento si trovano su 2 piani diversi",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.help": "Permette di verificare che i punti del segmento siano sullo stesso piano",
  "models.RoomPointRoom.singular": "Associazione tra un punto e uno spazio",
  "models.RoomPointRoom.plural": "Associazioni tra un punto e uno spazio",
  "models.RoomPointRoom.determinant.defined": "l'associazione tra un punto e uno spazio",
  "models.RoomPointRoom.determinant.undefined": "un punto",
  "models.RoomPointRoom.description": "L'associazione tra un punto e uno spazio permette di preservare l'ordine dei punti in uno spazio per costituire un polione",
  "models.RoomPointRoom.properties.id.label": "Identificatore dell'associazione tra un punto e uno spazio",
  "models.RoomPointRoom.properties.id.description": "???",
  "models.RoomPointRoom.properties.roomId.label": "Identificatore di spazio",
  "models.RoomPointRoom.properties.roomId.description": "???",
  "models.RoomPointRoom.properties.externalId.label": "Identificatore esterno",
  "models.RoomPointRoom.properties.externalId.description": "???",
  "models.RoomPointRoom.properties.sortIndex.label": "Ordina indice",
  "models.RoomPointRoom.properties.sortIndex.description": "???",
  "models.RoomPointRoom.properties.roomPointId.label": "ID punto",
  "models.RoomPointRoom.properties.roomPointId.description": "???",
  "models.RoomPoint.singular": "punto di spazi",
  "models.RoomPoint.plural": "punti spaziali",
  "models.RoomPoint.determinant.defined": "punto di spazi",
  "models.RoomPoint.determinant.undefined": "un punto di spazi",
  "models.RoomPoint.properties.id.label": "ID punto spazi",
  "models.RoomPoint.properties.x.label": "X",
  "models.RoomPoint.properties.x.description": "Coordinata sull'asse X",
  "models.RoomPoint.properties.y.label": "l\xE0",
  "models.RoomPoint.properties.y.description": "Coordinata sull'asse Y",
  "models.RoomPoint.properties.sort_index.label": "Ordine",
  "models.RoomPoint.properties.sort_index.description": "L'indice utilizzato per l'ordinamento",
  "models.RoomPoint.properties.room.description": "???",
  "models.RoomPoint.properties.externalId.label": "Identificatore esterno",
  "models.RoomPoint.properties.externalId.description": "???",
  "models.RoomPoint.views.dq-uniq-position.label": "Posizione del punto singolo",
  "models.RoomPoint.views.dq-uniq-position.help": "Permette di verificare che non vi sia una esatta posizione duplicata sui punti",
  "models.RoomPoint.views.dq-not-used.label": "Punti inutilizzati",
  "models.RoomPoint.views.dq-not-used.help": "Consente di visualizzare i punti non utilizzati negli spazi",
  "models.RoomConnector.singular": "Connettore spaziale",
  "models.RoomConnector.plural": "Connettori spaziali",
  "models.RoomConnector.determinant.defined": "il connettore spaziale",
  "models.RoomConnector.determinant.undefined": "un connettore spaziale",
  "models.RoomConnector.determinants.defined": "connettori spaziali",
  "models.RoomConnector.determinants.undefined": "connettori spaziali",
  "models.RoomConnector.description": "I connettori degli spazi consentono di creare un collegamento tra pi\xF9 spazi su piani diversi",
  "models.RoomConnector.properties.id.label": "ID del connettore dello spazio",
  "models.RoomConnector.properties.name.label": "Nome del connettore dello spazio",
  "models.RoomConnector.properties.waitTime.label": "Tempo medio di attesa",
  "models.RoomConnector.properties.waitTime.description": "Il tempo di attesa medio prima che il connettore dello spazio diventi disponibile",
  "models.RoomConnector.properties.timePerFloor.label": "Tempo tra ogni piano",
  "models.RoomConnector.properties.timePerFloor.description": "Il tempo necessario per potersi spostare da ogni piano al successivo",
  "models.RoomAffectation.singular": "Allocazione dello spazio",
  "models.RoomAffectation.plural": "Assegnazioni degli spazi",
  "models.RoomAffectation.description": "Permette di assegnare una persona ad un singolo spazio",
  "models.RoomAffectation.determinant.defined": "allocazione dello spazio",
  "models.RoomAffectation.determinant.undefined": "una allocazione dello spazio",
  "models.RoomAffectation.determinants.defined": "assegnazioni di spazi",
  "models.RoomAffectation.determinants.undefined": "assegnazioni di spazi",
  "models.RoomAffectation.views.room-mouvement-matrix-import.help": "Importa matrici di trasferimento di spazi",
  "models.RoomAffectation.views.room-mouvement-matrix-import.label": "Importa matrice di trasferimento",
  "models.Room.singular": "spazio",
  "models.Room.plural": "spazi",
  "models.Room.determinant.defined": "spazio",
  "models.Room.determinant.undefined": "un'area",
  "models.Room.determinants.defined": "gli spazi",
  "models.Room.determinants.undefined": "spazi",
  "models.Room.description": "Gli spazi sono luoghi di lavoro o zone per dividere un piano in sottospazi",
  "models.Room.views.map.help": "Visualizza planimetria %{name}",
  "models.Room.views.map.label": "Piano",
  "models.Room.views.dq-uniq-name.help": "Suggerisce nomi per spazi che non hanno un nome o il nome non \xE8 univoco sullo stesso piano",
  "models.Room.views.dq-uniq-name.label": "Nomi proposti per gli spazi",
  "models.Room.views.dq-no-point.help": "Spazi che hanno 0, 1 o 2 punti e quindi dovrebbero avere area zero",
  "models.Room.views.dq-no-point.label": "Spazi senza punti sufficienti",
  "models.Room.views.dq-capacity-equals-seats-count.help": "Spazi che hanno una capienza esclusi i posti pari al numero dei posti e che hanno una capienza totale raddoppiata",
  "models.Room.views.dq-capacity-equals-seats-count.label": "Spazi con una capienza posti esclusi pari al numero dei posti a sedere",
  "models.Room.views.dq-capacity-gt-0.help": "Permette di vedere se ci sono incongruenze nelle capienze degli spazi o rilevare, ad esempio, mobili che non dispongono ancora di posti a sedere",
  "models.Room.views.dq-capacity-gt-0.label": "Spazi che hanno una capienza posti esclusi diversa da 0",
  "models.Room.views.meeting-rooms.help": "Visualizza ed esplora le sale riunioni",
  "models.Room.views.meeting-rooms.label": "Sale riunioni",
  "models.Room.properties.prettyName.label": "Nome da visualizzare",
  "models.Room.properties.prettyName.description": "Consente di avere un nome visualizzato oltre al nome tecnico dello spazio, ad esempio per le sale riunioni",
  "models.Room.properties.id.label": "Identificatore di spazio",
  "models.Room.properties.livePeopleCount.label": "Numero di persone nello spazio in tempo reale",
  "models.Room.properties.livePeopleCount.description": "Questo valore viene aggiornato dai sensori contapersone presenti nello spazio e fornisce il numero di persone presenti in tempo reale nello spazio",
  "models.Room.properties.picture.label": "Foto dallo spazio",
  "models.Room.properties.picture.description": "La foto dello spazio lo rende facile da visualizzare",
  "models.Room.properties.capacity.label": "Capacit\xE0 esclusi i posti",
  "models.Room.properties.capacity.description": "La capacit\xE0 dichiarata pu\xF2 essere utilizzata per definire il numero di posti disponibili in uno spazio o per conoscere il numero massimo di persone che possono essere messe in uno spazio, questa cifra viene aggiunta al numero di posti per dare la capacit\xE0 totale",
  "models.Room.properties.workplacesCount.label": "Numero di postazioni di lavoro",
  "models.Room.properties.workplacesCount.description": "Il numero di postazioni di lavoro nello spazio viene calcolato automaticamente",
  "models.Room.properties.workplacesRatio.label": "Rapporto per postazione di lavoro",
  "models.Room.properties.workplacesRatio.description": "Il rapporto per postazione di lavoro \xE8 il numero di metri quadrati di spazio diviso per il numero di postazioni di lavoro, questo valore viene calcolato automaticamente",
  "models.Room.properties.peopleCount.label": "Numero di incarichi",
  "models.Room.properties.peopleCount.description": "Il numero di persone assegnate allo spazio, direttamente o tramite una postazione di lavoro",
  "models.Room.properties.peopleRatio.label": "Rapporto di occupazione",
  "models.Room.properties.peopleRatio.description": "Il tasso di occupazione \xE8 il numero di metri quadrati dello spazio diviso per il numero di persone assegnate agli spazi, direttamente o tramite postazione di lavoro, questo valore viene calcolato",
  "models.Room.properties.freeWorkplacesCount.label": "Numero di posti vacanti",
  "models.Room.properties.freeWorkplacesCount.description": "Numero di posizioni libere nello spazio",
  "models.Room.properties.flexWorkplacesCount.label": "Numero di posizioni flessibili",
  "models.Room.properties.flexWorkplacesCount.description": "Numero di posizioni flessibili nello spazio",
  "models.Room.properties.sharedWorkplacesCount.label": "Numero di postazioni condivise",
  "models.Room.properties.sharedWorkplacesCount.description": "Numero di postazioni condivise da almeno 2 persone",
  "models.Room.properties.transitWorkplacesCount.label": "Numero di postazioni di transito",
  "models.Room.properties.transitWorkplacesCount.description": "Numero di postazioni temporanee, queste posizioni non sono conteggiate nelle posizioni libere e non sono in flex",
  "models.Room.properties.sharedWorkplacesRatio.label": "Tasso di postazioni di lavoro condivise",
  "models.Room.properties.sharedWorkplacesRatio.description": "Percentuale di postazioni condivise da almeno 2 persone rispetto a tutte le postazioni presenti nello spazio",
  "models.Room.properties.flexRatio.label": "Tasso di postazioni di lavoro flessibili",
  "models.Room.properties.flexRatio.description": "La tariffa per workstation flessibili viene calcolata dividendo il numero di workstation flessibili per il numero totale di workstation",
  "models.Room.properties.name.label": "Nome dello spazio",
  "models.Room.properties.name.description": "Il nome dello spazio viene utilizzato per definirlo e trovarlo facilmente.",
  "models.Room.properties.area.label": "La zona",
  "models.Room.properties.area.description": "La superficie qualificata per questo spazio",
  "models.Room.properties.perimeter.label": "Perimetro",
  "models.Room.properties.perimeter.description": "Il perimetro dello spazio ne rappresenta il contorno",
  "models.Room.properties.costCenter.description": "Permette di sapere a quale centro di costo associare lo spazio quando si tratta di gestire la rifatturazione al centro di costo per spazio",
  "models.Room.properties.distributionCostType.description": "Consente di determinare il metodo di calcolo della chiave di distribuzione dei costi",
  "models.Room.properties.info.label": "Informazioni aggiuntive",
  "models.Room.properties.info.description": "Ti consente di mantenere ulteriori informazioni simili a un testo sullo spazio",
  "models.Room.properties.bookingEmail.label": "Email utilizzata per la prenotazione di questo spazio",
  "models.Room.properties.bookingEmail.description": "Questa e-mail ti consente di prenotare questa stanza tramite il sistema di messaggistica",
  "models.Room.properties.keyCylinderCode.label": "Numero del cilindro",
  "models.Room.properties.keyCylinderCode.description": "Il numero del cilindro consente di definire il numero del cilindro della serratura della porta dello spazio o un elemento relativo all'accesso fisico allo spazio",
  "models.Room.reports.mouvementMatrix.fileName": "Matrice di trasferimento",
  "models.Room.reports.mouvementMatrix.help": "Crea una matrice di trasferimento in excel che ti permetta di effettuare facilmente gli spostamenti dei tuoi dipendenti",
  "models.PersonWorkingLocation.singular": "Luogo di lavoro delle persone",
  "models.PersonWorkingLocation.plural": "I luoghi di lavoro delle persone",
  "models.PersonWorkingLocation.determinant.defined": "luogo di lavoro delle persone",
  "models.PersonWorkingLocation.determinant.undefined": "un luogo dove le persone lavorano",
  "models.PersonWorkingLocation.determinants.defined": "luoghi di lavoro delle persone",
  "models.PersonWorkingLocation.determinants.undefined": "luoghi di lavoro delle persone",
  "models.PersonWorkingLocation.description": "Un luogo di lavoro delle persone definisce il luogo di lavoro delle persone",
  "models.PersonWorkingLocation.views.my-planning.help": "Gestisci il mio programma per le prossime settimane",
  "models.PersonWorkingLocation.views.my-planning.label": "Gestisci il mio programma",
  "models.PersonToWorkplaceBooking.singular": "Prenotazione alle postazioni di lavoro delle persone",
  "models.PersonToWorkplaceBooking.plural": "Prenotazioni alle postazioni di lavoro delle persone",
  "models.PersonToWorkplaceBooking.description": "Le prenotazioni delle postazioni di lavoro delle persone vengono registrate e disponibili con le date di inizio e fine della prenotazione",
  "models.PersonToWorkplaceBooking.determinant.defined": "prenotazione presso la postazione di lavoro delle persone",
  "models.PersonToWorkplaceBooking.determinant.undefined": "una prenotazione presso la postazione di lavoro delle persone",
  "models.PersonToWorkplaceBooking.determinants.defined": "prenotazioni presso le postazioni di lavoro delle persone",
  "models.PersonToWorkplaceBooking.determinants.undefined": "prenotazioni presso le postazioni di lavoro delle persone",
  "models.PersonToWorkplaceBooking.properties.startDatetime.label": "Inizio prenotazione",
  "models.PersonToWorkplaceBooking.properties.startDatetime.description": "La data e l'ora di inizio della prenotazione",
  "models.PersonToWorkplaceBooking.properties.endDatetime.label": "Fine della prenotazione",
  "models.PersonToWorkplaceBooking.properties.endDatetime.description": "La data e l'ora in cui termina la prenotazione",
  "models.PersonToWorkplaceBooking.views.dashboard-index.label": "Pannello di controllo",
  "models.PersonToWorkplaceBooking.views.dashboard-index.help": "Dashboard delle prenotazioni presso le postazioni di lavoro delle persone",
  "models.PersonToRoomBooking.singular": "Prenotazione per l'area persone",
  "models.PersonToRoomBooking.plural": "Prenotazioni per l'area persone",
  "models.PersonToRoomBooking.description": "Le prenotazioni per gli spazi delle persone sono registrate e disponibili con le date di inizio e fine della prenotazione",
  "models.PersonToRoomBooking.determinant.defined": "prenotazione nell'area popolare",
  "models.PersonToRoomBooking.determinant.undefined": "una prenotazione per l'area persone",
  "models.PersonToRoomBooking.determinants.defined": "prenotazioni per l'area persone",
  "models.PersonToRoomBooking.determinants.undefined": "prenotazioni per l'area persone",
  "models.PersonToRoomBooking.properties.startDatetime.label": "Inizio prenotazione",
  "models.PersonToRoomBooking.properties.startDatetime.description": "La data e l'ora di inizio della prenotazione",
  "models.PersonToRoomBooking.properties.endDatetime.label": "Fine della prenotazione",
  "models.PersonToRoomBooking.properties.endDatetime.description": "La data e l'ora in cui termina la prenotazione",
  "models.PersonToPersonType.singular": "Tipo di relazione tra le persone",
  "models.PersonToPersonType.plural": "Tipi di relazione tra le persone",
  "models.PersonToPersonType.determinant.defined": "il tipo di relazione tra le persone",
  "models.PersonToPersonType.determinant.undefined": "un tipo di relazione tra le persone",
  "models.PersonToPersonType.determinants.defined": "tipi di relazioni tra le persone",
  "models.PersonToPersonType.determinants.undefined": "tipi di relazioni tra le persone",
  "models.PersonToPersonType.properties.labelForward.label": "Relazione naturale [avanti]",
  "models.PersonToPersonType.properties.labelForward.description": "La definizione di relazione in senso naturale, ad esempio tra un padre e suo figlio, la definizione naturale \xE8 '\xE8 il padre di'",
  "models.PersonToPersonType.properties.labelBackward.label": "Relazione inversa",
  "models.PersonToPersonType.properties.labelBackward.description": "La definizione di relazione in senso naturale inverso, ad esempio tra un padre e suo figlio, la definizione inversa del senso naturale \xE8 '\xE8 figlio di'",
  "models.PersonToPerson.singular": "rapporto da persona a persona",
  "models.PersonToPerson.plural": "Relazioni da persona a persona",
  "models.PersonToPerson.determinant.defined": "rapporto da persona a persona",
  "models.PersonToPerson.determinant.undefined": "un rapporto da persona a persona",
  "models.PersonToPerson.determinants.defined": "relazioni da persona a persona",
  "models.PersonToPerson.determinants.undefined": "relazioni da persona a persona",
  "models.PersonToPerson.properties.personSource.label": "Persona di origine",
  "models.PersonToPerson.properties.personTarget.label": "persona di destinazione",
  "models.PersonToDimensionBooking.singular": "Prenotazione al livello di assegnazione delle persone",
  "models.PersonToDimensionBooking.plural": "Prenotazioni sul livello di assegnazione delle persone",
  "models.PersonToDimensionBooking.description": "Le prenotazioni per i livelli di assegnazione delle persone vengono salvate e disponibili con le date di inizio e fine della prenotazione",
  "models.PersonToDimensionBooking.determinant.defined": "prenotazione al livello di assegnazione delle persone",
  "models.PersonToDimensionBooking.determinant.undefined": "una prenotazione sul livello di assegnazione delle persone",
  "models.PersonToDimensionBooking.determinants.defined": "prenotazioni sul livello di assegnazione delle persone",
  "models.PersonToDimensionBooking.determinants.undefined": "prenotazioni al livello di assegnazione delle persone",
  "models.PersonToDimensionBooking.properties.startDatetime.label": "Inizio prenotazione",
  "models.PersonToDimensionBooking.properties.startDatetime.description": "La data e l'ora di inizio della prenotazione",
  "models.PersonToDimensionBooking.properties.endDatetime.label": "Fine della prenotazione",
  "models.PersonToDimensionBooking.properties.endDatetime.description": "La data e l'ora in cui termina la prenotazione",
  "models.PersonState.singular": "stato delle persone",
  "models.PersonState.plural": "stato delle persone",
  "models.PersonState.description": "Permette di definire tutte le tipologie di contratto tra le persone e l'azienda",
  "models.PersonState.determinant.defined": "lo stato delle persone",
  "models.PersonState.determinant.undefined": "uno stato di persone",
  "models.PersonState.determinants.defined": "statuti del popolo",
  "models.PersonState.determinants.undefined": "statuti del popolo",
  "models.PersonState.properties.id.label": "Identificatore dello stato della persona",
  "models.PersonState.properties.name.label": "Nome dello stato della persona",
  "models.PersonToBuilding.singular": "Affetto per l'edificio",
  "models.PersonToBuilding.plural": "incarichi edilizi",
  "models.PersonToBuilding.description": "Consente di assegnare una persona a un edificio, senza informazioni aggiuntive. L'assegnazione pu\xF2 essere conteggiata o meno.",
  "models.PersonToBuilding.determinant.defined": "affetto per l'edificio",
  "models.PersonToBuilding.determinant.undefined": "un affetto per l'edificio",
  "models.PersonToBuilding.determinants.defined": "costruendo affetti",
  "models.PersonToBuilding.determinants.undefined": "disturbi edilizi",
  "models.PersonToBuilding.properties.addToPeopleCount.label": "Conta assegnazione",
  "models.PersonToBuilding.properties.addToPeopleCount.description": "Aggiungi questa assegnazione al numero totale di persone assegnate all'edificio",
  "models.PersonSecurityProfile.singular": "profilo di sicurezza delle persone",
  "models.PersonSecurityProfile.plural": "profili di sicurezza delle persone",
  "models.PersonSecurityProfile.description": "Permette di definire i diversi profili di sicurezza che possono essere associati alle persone",
  "models.PersonSecurityProfile.determinant.defined": "profilo di sicurezza delle persone",
  "models.PersonSecurityProfile.determinant.undefined": "un profilo di sicurezza delle persone",
  "models.PersonSecurityProfile.determinants.defined": "profili di sicurezza delle persone",
  "models.PersonSecurityProfile.determinants.undefined": "profili di sicurezza delle persone",
  "models.PersonSecurityProfile.properties.id.label": "Identificatore del profilo di sicurezza personale",
  "models.PersonSecurityProfile.properties.name.label": "Nome del profilo di sicurezza",
  "models.PersonSecurityProfile.properties.name.description": "Permette di definire i diversi profili di sicurezza che possono essere associati alle persone",
  "models.PersonSecurityProfile.properties.color.label": "Colore del profilo di sicurezza",
  "models.PersonSecurityProfile.properties.color.description": "Consente di colorare la postazione di lavoro dell'assegnazione e l'icona di sicurezza della persona in base al suo profilo di sicurezza",
  "models.PersonSecurityProfile.properties.icon.label": "Icona del profilo di sicurezza",
  "models.PersonSecurityProfile.properties.icon.description": "Permette di assegnare un'icona ad un profilo di sicurezza per poter visualizzare in modo chiaro i profili di sicurezza sulla planimetria o nelle liste",
  "models.PersonCompanyToRoomType.singular": "Tipo di spazio del provider",
  "models.PersonCompanyToRoomType.plural": "Tipi di spazi del provider",
  "models.PersonCompanyToRoomType.description": "Le tipologie di spazi dei prestatori di servizi permettono di definire una relazione tra una tipologia di spazio e il prestatore di servizi e di definire una missione.",
  "models.PersonCompanyToRoomType.determinant.defined": "il tipo di spazio del fornitore di servizi",
  "models.PersonCompanyToRoomType.determinant.undefined": "un tipo di spazio del fornitore di servizi",
  "models.PersonCompanyToRoomType.determinants.defined": "le tipologie degli spazi dei fornitori di servizi",
  "models.PersonCompanyToRoomType.determinants.undefined": "tipi di spazi dei fornitori di servizi",
  "models.PersonGender.singular": "genere della persona",
  "models.PersonGender.plural": "Tipi di persone",
  "models.PersonGender.description": "Permette di contare ogni tipologia, ad esempio per la gestione sanitaria",
  "models.PersonGender.determinant.defined": "il genere della persona",
  "models.PersonGender.determinant.undefined": "un tipo di persona",
  "models.PersonGender.determinants.defined": "tipi di persone",
  "models.PersonGender.determinants.undefined": "tipi di persone",
  "models.PersonGender.properties.name.label": "Nome",
  "models.PersonGender.properties.name.description": "Il nome di sesso della persona",
  "models.PersonCompanyToItemType.singular": "Tipo di oggetto fornitore",
  "models.PersonCompanyToItemType.plural": "Tipi di oggetti del provider",
  "models.PersonCompanyToItemType.description": "I tipi di oggetto del fornitore di servizi consentono di definire una relazione tra il tipo di oggetto e il fornitore di servizi e di definire la missione.",
  "models.PersonCompanyToItemType.determinant.defined": "il tipo di oggetto del fornitore di servizi",
  "models.PersonCompanyToItemType.determinant.undefined": "un tipo di oggetto provider",
  "models.PersonCompanyToItemType.determinants.defined": "i tipi di oggetti dei fornitori di servizi",
  "models.PersonCompanyToItemType.determinants.undefined": "tipi di oggetti dei fornitori di servizi",
  "models.PersonCompanyToItem.singular": "Intervento su un oggetto",
  "models.PersonCompanyToItem.plural": "Interventi sugli oggetti",
  "models.PersonCompanyToItem.description": "Gli interventi dei fornitori di servizi sugli oggetti consentono di definire, ad esempio, la data di una visita ad un estintore",
  "models.PersonCompanyToItem.determinant.defined": "intervento su un oggetto",
  "models.PersonCompanyToItem.determinant.undefined": "un intervento su un oggetto",
  "models.PersonCompanyToItem.determinants.defined": "interventi sugli oggetti",
  "models.PersonCompanyToItem.determinants.undefined": "interventi sugli oggetti",
  "models.PersonCompanyToItem.properties.datetime.label": "Data e ora dell'intervento",
  "models.PersonCompanyToItem.properties.datetime.description": "Quando \xE8 avvenuto l'intervento",
  "models.PersonCompanyToItem.properties.comment.label": "Commento",
  "models.PersonCompanyToItem.properties.comment.description": "Un commento all'intervento",
  "models.PersonCompanyMission.singular": "missione del fornitore di servizi",
  "models.PersonCompanyMission.plural": "missioni del fornitore di servizi",
  "models.PersonCompanyMission.description": "Le missioni dei fornitori di servizi consentono di conoscere l'area di intervento dei fornitori di servizi",
  "models.PersonCompanyMission.determinant.defined": "la missione del fornitore di servizi",
  "models.PersonCompanyMission.determinant.undefined": "una missione del fornitore di servizi",
  "models.PersonCompanyMission.determinants.defined": "le missioni dei fornitori di servizi",
  "models.PersonCompanyMission.determinants.undefined": "missioni dei fornitori di servizi",
  "models.PersonCompanyMission.properties.name.label": "Nome",
  "models.PersonCompanyMission.properties.name.description": "Il nome della missione del fornitore di servizi",
  "models.PersonCompany.singular": "azienda fornitrice di servizi",
  "models.PersonCompany.plural": "societ\xE0 di servizi",
  "models.PersonCompany.description": "L'azienda fornitrice di servizi consente di gestire il personale del fornitore di servizi per azienda.",
  "models.PersonCompany.determinant.defined": "la societ\xE0 fornitrice di servizi",
  "models.PersonCompany.determinant.undefined": "una societ\xE0 di servizi",
  "models.PersonCompany.determinants.defined": "societ\xE0 di servizi",
  "models.PersonCompany.determinants.undefined": "societ\xE0 di servizi",
  "models.PersonCompany.properties.name.label": "Nome",
  "models.PersonCompany.properties.name.description": "Il nome del fornitore di servizi, ad esempio il nome dell'azienda di un fornitore di servizi",
  "models.PersonCompany.properties.comment.label": "Ulteriori informazioni",
  "models.PersonCompany.properties.comment.description": "Informazioni aggiuntive sul fornitore di servizi, come la sua missione, i suoi valori, la copertura funzionale del suo servizio, ecc.",
  "models.PersonCompany.properties.contact.label": "Contatto",
  "models.PersonCompany.properties.contact.description": "Informazioni di contatto del fornitore di servizi",
  "models.PersonCompany.properties.documents.label": "Documenti correlati",
  "models.PersonCompany.properties.documents.description": "Il collegamento ai documenti associati a questo fornitore di servizi",
  "models.Person.singular": "persona",
  "models.Person.plural": "persone",
  "models.Person.description": "Queste sono le persone inserite nel database di Surfy",
  "models.Person.determinant.defined": "la persona",
  "models.Person.determinant.undefined": "una persona",
  "models.Person.determinants.defined": "la gente",
  "models.Person.determinants.undefined": "persone",
  "models.Person.properties.id.label": "Carta d'identit\xE0",
  "models.Person.properties.fullname.label": "Nome e cognome",
  "models.Person.properties.fullname.description": "Il nome completo della persona che lo rende pi\xF9 facile da trovare",
  "models.Person.properties.personState.label": "Stato",
  "models.Person.properties.personState.description": "Permette di indicare la tipologia di contratto che la persona ha con l'azienda",
  "models.Person.properties.personSecurityProfile.label": "Profilo di sicurezza",
  "models.Person.properties.personSecurityProfile.description": "Permette di indicare il profilo di sicurezza della persona per la gestione della sicurezza",
  "models.Person.properties.firstname.label": "Nome",
  "models.Person.properties.firstname.description": "Il nome della persona",
  "models.Person.properties.lastname.label": "Cognome",
  "models.Person.properties.lastname.description": "Il cognome della persona",
  "models.Person.properties.email.label": "E-mail",
  "models.Person.properties.email.description": "L'e-mail della persona",
  "models.Person.properties.picture.label": "Immagine del profilo",
  "models.Person.properties.picture.description": "La foto della persona per averla nel trombinoscopio o nella ricerca",
  "models.Person.properties.monitorReference.label": "Riferimento dello schermo",
  "models.Person.properties.monitorReference.description": "Il riferimento dello schermo del computer associato a questa persona",
  "models.Person.properties.computerReference.label": "Riferimento informatico",
  "models.Person.properties.computerReference.description": "Il riferimento del computer associato a questa persona",
  "models.Person.properties.cellphone.label": "Cellulare",
  "models.Person.properties.cellphone.description": "Il cellulare della persona",
  "models.Person.properties.telephone.label": "Telefono",
  "models.Person.properties.telephone.description": "Il telefono fisso della persona",
  "models.Person.properties.title.label": "Titolo",
  "models.Person.properties.title.description": "Il titolo della persona",
  "models.Person.properties.badgeNumber.label": "Numero di matricola",
  "models.Person.properties.badgeNumber.description": "Il numero di badge della persona",
  "models.Person.properties.boxNumber.label": "Numero dell'armadietto",
  "models.Person.properties.boxNumber.description": "Il numero dell'armadietto della persona",
  "models.Person.properties.badgeRestaurant.label": "Distintivo RIE",
  "models.Person.properties.badgeRestaurant.description": "Il riferimento per il badge RIE o ristorante aziendale",
  "models.Person.properties.registrationNumber.label": "Registrazione",
  "models.Person.properties.registrationNumber.description": "Il numero di registrazione della persona",
  "models.Person.properties.startDate.label": "Data di ingresso",
  "models.Person.properties.startDate.description": "La data in cui la persona \xE8 entrata a far parte dell'azienda",
  "models.Person.properties.endDate.label": "Data di rilascio",
  "models.Person.properties.endDate.description": "La data di uscita della persona dall'azienda",
  "models.Person.properties.code.label": "Numero di registrazione",
  "models.Person.properties.code.description": "Il numero HR della persona",
  "models.Person.properties.personToPersonTargets.label": "Relazione con questa persona",
  "models.Person.properties.personToPersonTargets.description": "Permette di conoscere il rapporto ascendente tra due persone, ad esempio il rapporto gerarchico",
  "models.Person.properties.personToPersonSources.label": "Relazioni di questa persona",
  "models.Person.properties.personToPersonSources.description": "Permette di conoscere il rapporto discendente tra due persone, ad esempio il rapporto gerarchico",
  "models.Person.properties.organization.label": "L'organizzazione della persona",
  "models.Person.properties.organization.description": "Il servizio di connessione della persona",
  "models.Person.properties.info.label": "Commento",
  "models.Person.properties.info.description": "Commenta la persona che consente di conservare informazioni aggiuntive o varie",
  "models.Person.properties.notAffectable.label": "Non assegnabile",
  "models.Person.properties.notAffectable.description": "La persona non pu\xF2 essere assegnata a una postazione di lavoro, uno spazio, un edificio o un livello di assegnazione",
  "models.Person.views.home.help": "Visualizza il file della persona <b>%{name}</b> con le sue informazioni e i suoi incarichi",
  "models.Person.views.home.label": "dossier personale",
  "models.Person.views.relationship-list.help": "Elenca le relazioni tra le persone",
  "models.Person.views.relationship-list.label": "Elenco delle relazioni",
  "models.Person.views.dq-only-associated-to-building.help": "Elenca le persone assegnabili che sono assegnate a un edificio e conteggiate senza essere assegnate (postazione di lavoro, livello di assegnazione, spazio)",
  "models.Person.views.dq-only-associated-to-building.label": "Persone addette ad un edificio senza altro incarico",
  "models.Person.views.dq-near-end-date.help": "Elenca le persone che hanno una data di fine contratto successiva alla data odierna e che sono assegnate a una workstation",
  "models.Person.views.dq-near-end-date.label": "Persone che lasciano l'azienda",
  "models.Person.views.dq-no-affectations.label": "Persone senza incarichi",
  "models.Person.views.dq-no-affectations.help": "Elenca le persone assegnabili che non hanno incarichi (edificio, postazione di lavoro, livello di assegnazione, spazio)",
  "models.Person.views.dq-person-duplicate.label": "Persone duplicate",
  "models.Person.views.dq-person-duplicate.help": "Elenca le persone duplicate",
  "models.PartnerApiCredential.singular": "Chiave API partner",
  "models.PartnerApiCredential.plural": "Chiavi API partner",
  "models.PartnerApiCredential.determinant.defined": "la chiave API del partner",
  "models.PartnerApiCredential.determinant.undefined": "una chiave API partner",
  "models.PartnerApiCredential.determinants.defined": "chiavi API partner",
  "models.PartnerApiCredential.determinants.undefined": "chiavi API partner",
  "models.PartnerApiCredential.properties.enable.label": "Abilitato",
  "models.PartnerApiCredential.properties.enable.description": "\xC8 necessario attivare la chiave per utilizzarla",
  "models.OrganizationFloor.singular": "Organizzazione dei piani",
  "models.OrganizationFloor.plural": "Organizzazioni di piani",
  "models.OrganizationFloor.determinant.defined": "l'organizzazione dei piani",
  "models.OrganizationFloor.determinant.undefined": "un'organizzazione dei piani",
  "models.OrganizationFloor.determinants.defined": "organizzazioni di piano",
  "models.OrganizationFloor.determinants.undefined": "organizzazioni di piano",
  "models.OrganizationBuilding.singular": "Organizzazione degli edifici",
  "models.OrganizationBuilding.plural": "Organizzazioni di edifici",
  "models.OrganizationBuilding.determinant.defined": "organizzazione degli edifici",
  "models.OrganizationBuilding.determinant.undefined": "organizzazione degli edifici",
  "models.OrganizationBuilding.determinants.defined": "organizzazioni edilizie",
  "models.OrganizationBuilding.determinants.undefined": "organizzazioni edilizie",
  "models.Organization.singular": "organizzazione",
  "models.Organization.plural": "organizzazioni",
  "models.Organization.determinant.defined": "l'organizzazione",
  "models.Organization.determinant.undefined": "un'organizzazione",
  "models.Organization.determinants.defined": "organizzazioni",
  "models.Organization.determinants.undefined": "organizzazioni",
  "models.Organization.description": "Le organizzazioni hanno due livelli gerarchici: direzioni e dipartimenti e consentono di definire la struttura organizzativa dell'azienda",
  "models.Organization.properties.id.label": "ID organizzazione",
  "models.Organization.properties.name.label": "Nome",
  "models.Organization.properties.name.description": "Nome che definir\xE0 l'organizzazione",
  "models.Organization.properties.code.label": "codificato",
  "models.Organization.properties.code.description": "Questo codice pu\xF2 essere utilizzato per contenere la codifica dell'organizzazione oppure la chiave per l'identificazione tramite software di terze parti",
  "models.Organization.properties.organizationId.label": "Identificativo di gestione",
  "models.Organization.properties.organizationId.description": "\xC8 grazie a questo identificatore che \xE8 possibile creare la gerarchia organizzativa",
  "models.Organization.properties.organization.label": "Direzione",
  "models.Organization.properties.organizations.label": "Servizi",
  "models.Organization.views.hierarchy.label": "Gerarchia",
  "models.Organization.views.hierarchy.help": "Visualizza la gerarchia organizzativa",
  "models.Organization.views.dq-organization-to-room.label": "Errori nell'organizzazione degli spazi",
  "models.Organization.views.dq-organization-to-room.help": "Rileva associazioni spaziali con organizzazioni non valide",
  "models.Organization.views.dq-organization-hierarchy.label": "Errori di gerarchia organizzativa",
  "models.Organization.views.dq-organization-hierarchy.help": "Rileva le organizzazioni che non si trovano nella gerarchia corretta",
  "models.OpenerPostMessageHost.singular": "Host di messaggi per popup",
  "models.OpenerPostMessageHost.plural": "Host di messaggi per popup",
  "models.OpenerPostMessageHost.determinant.defined": "host di messaggi popup",
  "models.OpenerPostMessageHost.determinant.undefined": "un host di messaggi popup",
  "models.OpenerPostMessageHost.determinants.defined": "host di messaggi popup",
  "models.OpenerPostMessageHost.determinants.undefined": "host di messaggi pop-up",
  "models.OpenerPostMessageHost.description": "Un host di messaggi popup \xE8 un elemento che comunica con un popup aperto sulle azioni del piano",
  "models.OccupancyStatus.singular": "stato di occupazione",
  "models.OccupancyStatus.plural": "stati di occupazione",
  "models.OccupancyStatus.determinant.defined": "lo stato di occupazione",
  "models.OccupancyStatus.determinant.undefined": "uno stato di occupazione",
  "models.OccupancyStatus.determinants.defined": "stati di occupazione",
  "models.OccupancyStatus.determinants.undefined": "stati di occupazione",
  "models.OccupancyStatus.description": "Lo stato di occupazione permette di identificare lo stato in tempo reale di uno spazio o postazione di lavoro, ad esempio se \xE8 libero, occupato o occupato, lo stato di occupazione viene aggiornato giorno per giorno dagli oggetti connessi presenti nello spazio",
  "models.OccupancyStatus.properties.id.label": "Identificatore dello stato di occupazione",
  "models.OccupancyStatus.properties.name.label": "Nome dello stato di occupazione",
  "models.OccupancyStatus.properties.color.label": "Colore",
  "models.OccupancyStatus.properties.color.description": "Colore consente di colorare gli spazi o le postazioni di lavoro sui piani in base al loro stato di occupazione",
  "models.OccupancyStatus.properties.code.label": "Codice dello stato di occupazione",
  "models.OccupancyStatus.properties.code.description": "Il codice permette di identificare ed effettuare operazioni tecniche sullo stato di occupazione",
  "models.Object3dModel.singular": "modello 3d",
  "models.Object3dModel.plural": "modelli 3d",
  "models.Object3dModel.determinant.defined": "il modello 3d",
  "models.Object3dModel.determinant.undefined": "un modello 3d",
  "models.Object3dModel.determinants.defined": "modelli 3d",
  "models.Object3dModel.determinants.undefined": "modelli 3d",
  "models.Object3dModel.description": "Il Modello 3D consente una rappresentazione 3D realistica degli oggetti posti sulla pianta; In assenza di un modello 3D, gli oggetti sono rappresentati in forma completa nella vista 3D",
  "models.Object3dModel.properties.origin.label": "Orientamento",
  "models.Object3dModel.properties.origin.description": "Usa X se l'oggetto \xE8 rivolto a destra o Y se l'oggetto \xE8 rivolto verso il basso",
  "models.MapScale.singular": "scala del progetto",
  "models.MapScale.plural": "scale del progetto",
  "models.MapScale.determinant.defined": "la scala",
  "models.MapScale.determinant.undefined": "scala",
  "models.MapScale.determinants.defined": "le scale",
  "models.MapScale.determinants.undefined": "bilancia",
  "models.MapScale.properties.id.label": "ID bilancia",
  "models.MapScale.properties.p1.description": "Punto di partenza",
  "models.MapScale.properties.p2.description": "Punto di arrivo",
  "models.MapScale.properties.name.label": "Nome scala",
  "models.MapScale.properties.name.description": "Per ricordare il nome e riutilizzarlo su altri piani",
  "models.MapScale.properties.length.label": "Distanza",
  "models.MapScale.properties.length.description": "La distanza mostrata sulla planimetria tra i 2 punti in metri",
  "models.MapScale.properties.roomTextSize.label": "Dimensione del testo dello spazio",
  "models.MapScale.properties.roomTextSize.description": "La dimensione del testo degli spazi sulla pianta per ottimizzare la visualizzazione",
  "models.MapScale.properties.workplaceTextSize.label": "Dimensione del testo sugli oggetti",
  "models.MapScale.properties.workplaceTextSize.description": "La dimensione del testo sulle postazioni e sugli oggetti in pianta per ottimizzare la visualizzazione",
  "models.MapScale.properties.segmentDistanceTextSize.label": "Dimensione del testo del segmento",
  "models.MapScale.properties.segmentDistanceTextSize.description": "La dimensione del testo sulle distanze tra i punti sulla pianta per ottimizzare la visualizzazione",
  "models.MapScale.properties.itemTypeIconSize.label": "Dimensioni delle icone del tipo di oggetto",
  "models.MapScale.properties.itemTypeIconSize.description": "La dimensione delle icone del tipo di oggetto sulla mappa, la dimensione sar\xE0 limitata dalla dimensione dello spazio",
  "models.MapScale.properties.roomIconSize.label": "Dimensioni delle icone del tipo di spazio",
  "models.MapScale.properties.roomIconSize.description": "La dimensione delle icone sulla mappa negli spazi rispetto ai tipi di spazio",
  "models.MapScale.properties.strokeWidth.label": "Spessore della linea",
  "models.MapScale.properties.strokeWidth.description": "\xC8 possibile ridurre lo spessore delle linee per aumentare la leggibilit\xE0 del piano",
  "models.MapScale.views.dq-not-used.label": "Scale inutilizzate",
  "models.MapScale.views.dq-not-used.help": "Visualizza le scale che non vengono utilizzate sui pavimenti e che possono essere rimosse",
  "models.MapScale.views.dq-uniq-name.label": "Nomi proposti per le scale",
  "models.MapScale.views.dq-uniq-name.help": "Fornisce nomi univoci per le scale, inclusi i piani e gli edifici in cui vengono utilizzate",
  "models.Manufacturer.singular": "Produttore del tipo di oggetto",
  "models.Manufacturer.plural": "Produttori di tipi di oggetti",
  "models.Manufacturer.determinant.defined": "il produttore del tipo di oggetto",
  "models.Manufacturer.determinant.undefined": "un produttore del tipo di oggetto",
  "models.Manufacturer.determinants.defined": "produttori di tipi di oggetti",
  "models.Manufacturer.determinants.undefined": "produttori tipici di oggetti",
  "models.Manufacturer.properties.name.label": "Nome del fornitore del tipo di oggetto",
  "models.Manufacturer.properties.name.description": "Identifica il nome o il marchio del produttore",
  "models.Manufacturer.properties.website.label": "Sito web",
  "models.Manufacturer.properties.website.description": "Indirizzo del sito web del produttore",
  "models.Legend.singular": "Leggenda",
  "models.Legend.plural": "Leggenda",
  "models.Legend.determinant.defined": "la leggenda",
  "models.Legend.determinant.undefined": "una leggenda",
  "models.Legend.determinants.defined": "le leggende",
  "models.Legend.determinants.undefined": "leggende",
  "models.Legend.description": "La legenda permette di configurare le propriet\xE0 visibili quando la planimetria viene salvata come immagine",
  "models.JupUserCompanyToJupRole.singular": "Ruolo utente aziendale",
  "models.JupUserCompanyToJupRole.plural": "Ruoli utente aziendali",
  "models.JupUserCompanyToJupRole.determinant.defined": "il ruolo dell'utente aziendale",
  "models.JupUserCompanyToJupRole.determinant.undefined": "un ruolo di utente aziendale",
  "models.JupUserCompanyToJupRole.determinants.defined": "ruoli degli utenti aziendali",
  "models.JupUserCompanyToJupRole.determinants.undefined": "ruoli utente aziendali",
  "models.JupUiView.singular": "Vista interfaccia",
  "models.JupUiView.plural": "Viste dell'interfaccia",
  "models.JupUiView.determinant.defined": "la vista dell'interfaccia",
  "models.JupUiView.determinant.undefined": "una vista dell'interfaccia",
  "models.JupUiView.determinants.defined": "viste dell'interfaccia",
  "models.JupUiView.determinants.undefined": "viste dell'interfaccia",
  "models.JupUiTenantOperation.singular": "Operazione di interfaccia per un'azienda",
  "models.JupUiTenantOperation.plural": "Operazioni di interfaccia per un'azienda",
  "models.JupUiTenantOperation.determinant.defined": "l'operazione di interfaccia per un'azienda",
  "models.JupUiTenantOperation.determinant.undefined": "un'operazione di interfaccia per un'azienda",
  "models.JupUiTenantOperation.determinants.defined": "operazioni di interfaccia per un'azienda",
  "models.JupUiTenantOperation.determinants.undefined": "operazioni di interfaccia per un'azienda",
  "models.JupUiOption.singular": "Opzione interfaccia",
  "models.JupUiOption.plural": "Opzioni di interfaccia",
  "models.JupUiOption.determinant.defined": "opzione di interfaccia",
  "models.JupUiOption.determinant.undefined": "un'opzione di interfaccia",
  "models.JupUiOption.determinants.defined": "opzioni di interfaccia",
  "models.JupUiOption.determinants.undefined": "opzioni di interfaccia",
  "models.JupUiOperation.singular": "Funzionamento dell'interfaccia",
  "models.JupUiOperation.plural": "Operazioni di interfaccia",
  "models.JupUiOperation.determinant.defined": "funzionamento dell'interfaccia",
  "models.JupUiOperation.determinant.undefined": "un'operazione di interfaccia",
  "models.JupUiOperation.determinants.defined": "operazioni di interfaccia",
  "models.JupUiOperation.determinants.undefined": "operazioni di interfaccia",
  "models.JupUiLayout.singular": "Visione del piano",
  "models.JupUiLayout.plural": "Visioni del piano",
  "models.JupUiLayout.determinant.defined": "la visione del piano",
  "models.JupUiLayout.determinant.undefined": "una visione del piano",
  "models.JupUiLayout.determinants.defined": "le visioni del piano",
  "models.JupUiLayout.determinants.undefined": "visioni del piano",
  "models.JupRoleToJupUiView.singular": "Associazione di ruoli alle viste interfaccia",
  "models.JupRoleToJupUiView.plural": "Associazioni di ruolo per interfacciare le viste",
  "models.JupRoleToJupUiView.determinant.defined": "l'associazione del ruolo alle viste dell'interfaccia",
  "models.JupRoleToJupUiView.determinant.undefined": "un'associazione del ruolo alle viste dell'interfaccia",
  "models.JupRoleToJupUiView.determinants.defined": "associazioni di ruoli per interfacciare le viste",
  "models.JupRoleToJupUiView.determinants.undefined": "associazioni di ruoli per interfacciare le viste",
  "models.JupRoleToJupUiView.properties.canSee.label": "pu\xF2 vedere la vista",
  "models.JupRoleToJupUiView.properties.canSee.description": "Consenti alla vista di essere vista dal ruolo",
  "models.JupRoleToJupUiOption.singular": "Ruolo associativo alle visioni del progetto",
  "models.JupRoleToJupUiOption.plural": "Associazioni di ruolo per progettare visioni",
  "models.JupRoleToJupUiOption.determinant.defined": "l'associazione del ruolo con le visioni del piano",
  "models.JupRoleToJupUiOption.determinant.undefined": "un'associazione del ruolo con le visioni del piano",
  "models.JupRoleToJupUiOption.determinants.defined": "associazioni di ruolo alle visioni del progetto",
  "models.JupRoleToJupUiOption.determinants.undefined": "associazioni di ruolo alle visioni del progetto",
  "models.JupRoleToJupUiOption.properties.canSee.label": "Pu\xF2 vedere l'opzione",
  "models.JupRoleToJupUiOption.properties.canSee.description": "Consenti all'opzione di essere visualizzata per ruolo",
  "models.JupRoleToJupUiOperation.singular": "Ruolo di associazione per interfacciare le operazioni",
  "models.JupRoleToJupUiOperation.plural": "Ruolo di associazione per interfacciare le operazioni",
  "models.JupRoleToJupUiOperation.determinant.defined": "associazione del ruolo alle operazioni di interfaccia",
  "models.JupRoleToJupUiOperation.determinant.undefined": "un'associazione del ruolo alle operazioni di interfaccia",
  "models.JupRoleToJupUiOperation.determinants.defined": "associazioni di ruoli per interfacciare le operazioni",
  "models.JupRoleToJupUiOperation.determinants.undefined": "associazioni di ruoli per interfacciare le operazioni",
  "models.JupRoleToJupObjectType.singular": "Ruolo di associazione al tipo di oggetto",
  "models.JupRoleToJupObjectType.plural": "Associazioni di tipo da ruolo a oggetto",
  "models.JupRoleToJupObjectType.determinant.defined": "l'associazione del ruolo al tipo di oggetto",
  "models.JupRoleToJupObjectType.determinant.undefined": "un'associazione del ruolo al tipo di oggetto",
  "models.JupRoleToJupObjectType.determinants.defined": "le associazioni del ruolo al tipo di oggetto",
  "models.JupRoleToJupObjectType.determinants.undefined": "associazioni del ruolo al tipo di oggetto",
  "models.JupRoleToJupObjectType.properties.arCreate.label": "Creazione (C)",
  "models.JupRoleToJupObjectType.properties.arCreate.description": "Consenti la creazione di entit\xE0",
  "models.JupRoleToJupObjectType.properties.arRead.label": "Lettura (R)",
  "models.JupRoleToJupObjectType.properties.arRead.description": "Consenti la lettura delle entit\xE0",
  "models.JupRoleToJupObjectType.properties.arUpdate.label": "Aggiorna (U)",
  "models.JupRoleToJupObjectType.properties.arUpdate.description": "Consenti la modifica delle entit\xE0",
  "models.JupRoleToJupObjectType.properties.arDelete.label": "Elimina (D)",
  "models.JupRoleToJupObjectType.properties.arDelete.description": "Consenti l'eliminazione di entit\xE0",
  "models.JupRole.singular": "Ruolo",
  "models.JupRole.plural": "Ruoli",
  "models.JupRole.determinant.defined": "il ruolo",
  "models.JupRole.determinant.undefined": "un ruolo",
  "models.JupRole.determinants.defined": "i ruoli",
  "models.JupRole.determinants.undefined": "ruoli",
  "models.JupRole.views.matrix.help": "La matrice di sicurezza del ruolo %{name}",
  "models.JupRole.views.matrix.label": "Matrice",
  "models.JupRole.views.help.help": "Riepilogo delle autorizzazioni del ruolo",
  "models.JupRole.views.help.label": "Aiuto",
  "models.JupObjectType.singular": "Tipo di entit\xE0",
  "models.JupObjectType.plural": "Tipi di entit\xE0",
  "models.JupObjectType.determinant.defined": "tipo di entit\xE0",
  "models.JupObjectType.determinant.undefined": "un tipo di entit\xE0",
  "models.JupObjectType.determinants.defined": "tipi di entit\xE0",
  "models.JupObjectType.determinants.undefined": "tipi di entit\xE0",
  "models.ItemTypePoint.singular": "Punto dei tipi di oggetto",
  "models.ItemTypePoint.plural": "Punti dei tipi di oggetto",
  "models.ItemTypePoint.determinant.defined": "punto dei tipi di oggetto",
  "models.ItemTypePoint.determinant.undefined": "un punto di tipi di oggetto",
  "models.ItemTypePoint.determinants.defined": "punti di tipi di oggetto",
  "models.ItemTypePoint.determinants.undefined": "punti di tipi di oggetto",
  "models.ItemTypePoint.properties.id.label": "ID",
  "models.ItemTypePoint.properties.id.description": "???",
  "models.ItemTypePoint.properties.x.label": "X",
  "models.ItemTypePoint.properties.x.description": "???",
  "models.ItemTypePoint.properties.y.label": "l\xE0",
  "models.ItemTypePoint.properties.y.description": "???",
  "models.ItemTypePoint.properties.externalId.label": "Identificatore esterno",
  "models.ItemTypePoint.properties.externalId.description": "???",
  "models.ItemTypePoint.properties.itemTypeId.label": "Identificatore del tipo di oggetto",
  "models.ItemTypePoint.properties.itemTypeId.description": "???",
  "models.ItemTypePoint.properties.sortIndex.label": "Ordina indice",
  "models.ItemTypePoint.properties.sortIndex.description": "???",
  "models.ItemTypePoint.properties.itemType.label": "Tipo di oggetto",
  "models.ItemTypePoint.properties.itemType.description": "???",
  "models.ItemTypeFamily.singular": "famiglia di tipi di oggetti",
  "models.ItemTypeFamily.plural": "famiglie di tipi di oggetti",
  "models.ItemTypeFamily.determinant.defined": "la famiglia dei tipi di oggetto",
  "models.ItemTypeFamily.determinant.undefined": "una famiglia di tipi di oggetti",
  "models.ItemTypeFamily.determinants.defined": "famiglie di tipi di oggetti",
  "models.ItemTypeFamily.determinants.undefined": "famiglie di tipi di oggetti",
  "models.ItemTypeFamily.description": "Permette di visualizzare gli oggetti per Famiglia sulle planimetrie e nell'inventario pdf",
  "models.ItemTypeFamily.properties.id.label": "Identificatore della famiglia di tipi dell'oggetto",
  "models.ItemTypeFamily.properties.name.label": "Nome della famiglia di tipi dell'oggetto",
  "models.ItemTypeFamily.properties.name.description": "Il nome della famiglia ne permette l'identificazione, questo nome serve per raggruppare le tipologie di oggetti",
  "models.ItemType.singular": "tipo di oggetto",
  "models.ItemType.plural": "tipi di oggetti",
  "models.ItemType.determinant.defined": "il tipo di oggetto",
  "models.ItemType.determinant.undefined": "un tipo di oggetto",
  "models.ItemType.determinants.defined": "tipi di oggetti",
  "models.ItemType.determinants.undefined": "tipi di oggetti",
  "models.ItemType.properties.id.label": "Identificatore del tipo di oggetto",
  "models.ItemType.properties.id.description": "Identificatore del tipo di oggetto",
  "models.ItemType.properties.description.label": "Descrizione",
  "models.ItemType.properties.description.description": "Permette di avere informazioni aggiuntive sulla tipologia dell'oggetto",
  "models.ItemType.properties.name.label": "Nome del tipo di oggetto",
  "models.ItemType.properties.name.description": "Permette di identificare velocemente la tipologia di oggetto con un nome completo, logico e descrittivo; Puoi indicare le dimensioni, ad esempio: Tavolo Riunione 340x120; Suggerimento: inizia sempre con la dimensione pi\xF9 grande",
  "models.ItemType.properties.zIndex.label": "Indice di altezza",
  "models.ItemType.properties.zIndex.description": "Pi\xF9 alto \xE8 l'indice di altezza, pi\xF9 l'oggetto sar\xE0 posizionato sopra gli altri; Pu\xF2 essere negativo; ad esempio per un posto: -1; Suggerimento: per le Icone, imposta l'indice su 9",
  "models.ItemType.properties.picture.label": "Foto",
  "models.ItemType.properties.picture.description": "Permette di caricare la foto della tipologia dell'oggetto, che sar\xE0 visibile nell'inventario in PDF e sulla scheda dell'oggetto selezionato in planimetria",
  "models.ItemType.properties.iconShape.label": "Forma dell'icona",
  "models.ItemType.properties.iconShape.description": "La forma dell'icona pu\xF2 influenzare la sua visualizzazione in pianta",
  "models.ItemType.properties.displayItemReferenceInMap.label": "Visualizza le informazioni sul piano",
  "models.ItemType.properties.displayItemReferenceInMap.description": "Permette di visualizzare il campo \u201CRiferimento\u201D di ogni oggetto presente sulla planimetria",
  "models.ItemType.properties.code.label": "codificato",
  "models.ItemType.properties.code.description": "Permette di accedere velocemente alla tipologia dell'oggetto digitando il codice nella ricerca durante la creazione dell'oggetto",
  "models.ItemType.properties.icon.label": "Icona",
  "models.ItemType.properties.icon.description": "D\xE0 accesso a tre tipi di icone: 1) Icone \u201CFontawsome\u201D, visibili selezionando \u201Cmostra tutto\u201D o effettuando una ricerca per parola chiave in inglese nella casella di ricerca; 2) Icone \u201CSURFY\u201D destinate ad illustrazioni aggiunte a planimetrie in posizioni strategiche (WC, Scale, Ascensori, Punti Copia, ecc.) ma che possono essere utilizzate anche come icone classiche; 3) Le Icone \u201CSURFY 2\u201D che elencano le icone normative dello standard di Sicurezza ISO 7010; La loro forma pu\xF2 essere rotonda, quadrata o triangolare",
  "models.ItemType.properties.color.label": "Colore",
  "models.ItemType.properties.color.description": "Pu\xF2 essere scelto da una preselezione, oppure in selezione avanzata tramite codice Hexa o RGB per rispettare la vostra carta grafica",
  "models.ItemType.properties.height.label": "Altezza",
  "models.ItemType.properties.height.description": "Permette di dare l'altezza in centimetri del tipo di oggetto nella visione 3d",
  "models.ItemType.properties.price.label": "Prezzo",
  "models.ItemType.properties.price.description": "Il prezzo di acquisto del tipo di articolo",
  "models.ItemType.properties.seatsCount.label": "Numero di posti",
  "models.ItemType.properties.seatsCount.description": "Il numero di posti per questo tipo di oggetto (poltrona, sedile, divano, ecc.) viene accumulato in Surfy per spazio, piano ed edificio",
  "models.ItemType.properties.manufacturer.description": "Permette di identificare il produttore della tipologia di oggetto",
  "models.ItemType.properties.carbonFootprint.label": "Impronta ecologica",
  "models.ItemType.properties.carbonFootprint.description": "L'impronta di carbonio \xE8 il peso in chilogrammi di CO2 emessa da ciascun oggetto di questo tipo di oggetti; \xE8 dato dal produttore",
  "models.ItemType.properties.iconBackgroundColor.label": "Colore di sfondo dell'icona",
  "models.ItemType.properties.iconBackgroundColor.description": "Il colore di sfondo permette di configurare correttamente le icone multicolori, in particolare quelle triangolari.",
  "models.ItemType.properties.iconBorderColor.label": "Colore del bordo dell'icona",
  "models.ItemType.properties.iconBorderColor.description": "Il colore del bordo consente di configurare correttamente le icone multicolori, soprattutto quelle triangolari.",
  "models.ItemType.properties.isAffectable.label": "\xC8 associabile ad una persona?",
  "models.ItemType.properties.isAffectable.description": "Permette di sapere se la tipologia di oggetto pu\xF2 essere associata ad una persona",
  "models.ItemType.properties.excludeFromPathfinding.label": "Abilita la navigazione",
  "models.ItemType.properties.excludeFromPathfinding.description": "Consente di abilitare la navigazione per questo tipo di oggetto",
  "models.ItemType.views.shape-editor.help": "Modifica la forma del tipo di oggetto %{name}",
  "models.ItemType.views.shape-editor.label": "Modifica forma",
  "models.ItemType.views.avatar.help": "Guarda la forma di %{name}",
  "models.ItemType.views.avatar.label": "Modulo",
  "models.ItemType.views.dq-not-used.label": "Non usato",
  "models.ItemType.views.dq-not-used.help": "Elenca tutti i tipi di oggetti inutilizzati tramite oggetti o tramite tipi di workstation inutilizzati",
  "models.ItemToPerson.singular": "Associazione di oggetto a persona",
  "models.ItemToPerson.plural": "Associazioni da oggetto a persona",
  "models.ItemToPerson.description": "Permette di associare un oggetto ad una persona (seduta ergonomica, armadietto)",
  "models.ItemToPerson.determinant.defined": "associazione di oggetto a persona",
  "models.ItemToPerson.determinant.undefined": "un'associazione da oggetto a persona",
  "models.ItemToPerson.determinants.defined": "associazioni da oggetto a persona",
  "models.ItemToPerson.determinants.undefined": "associazioni da oggetto a persona",
  "models.ItemFact.singular": "Movimento dell'oggetto",
  "models.ItemFact.plural": "Movimenti di oggetti",
  "models.ItemFact.determinant.defined": "il movimento di un oggetto",
  "models.ItemFact.determinant.undefined": "un movimento di un oggetto",
  "models.ItemFact.determinants.defined": "movimenti degli oggetti",
  "models.ItemFact.determinants.undefined": "movimenti degli oggetti",
  "models.Item.singular": "oggetto",
  "models.Item.plural": "oggetti",
  "models.Item.determinant.defined": "l'oggetto",
  "models.Item.determinant.undefined": "un oggetto",
  "models.Item.determinants.defined": "Elementi",
  "models.Item.determinants.undefined": "Oggetti",
  "models.Item.views.dq-item-not-in-workplace-room.label": "Spazi oggetto diversi dagli spazi workstation",
  "models.Item.views.dq-item-not-in-workplace-room.help": "Elenco di oggetti fisici nelle workstation che si trovano in spazi diversi dagli spazi della workstation",
  "models.Item.properties.id.label": "ID oggetto",
  "models.Item.properties.price.label": "Prezzo",
  "models.Item.properties.price.description": "Il prezzo di acquisto dell'articolo se \xE8 diverso dal prezzo del tipo di articolo",
  "models.Item.properties.reference.label": "Riferimento all'oggetto",
  "models.Item.properties.reference.description": "Il riferimento dell'oggetto viene utilizzato per trovarlo e per differenziare questo oggetto dagli altri",
  "models.Item.properties.code.label": "Codice immobilizzatore",
  "models.Item.properties.code.description": "Il numero cespite viene utilizzato per memorizzare il numero contabile",
  "models.Item.properties.purchaseDate.label": "Data di acquisto",
  "models.Item.properties.purchaseDate.description": "La data di acquisto dell'oggetto",
  "models.Item.properties.room.label": "Spazio oggetto",
  "models.Item.properties.itemAffectationsCount.label": "Numero di associazioni alle persone",
  "models.Item.properties.itemAffectationsCount.description": "Il numero di associazioni di questo oggetto con le persone",
  "models.Floor.singular": "piano",
  "models.Floor.plural": "piani",
  "models.Floor.determinant.defined": "al piano superiore",
  "models.Floor.determinant.undefined": "un piano",
  "models.Floor.determinants.defined": "I piani",
  "models.Floor.determinants.undefined": "piani",
  "models.Floor.description": "I piani rappresentano un piano di lavoro o un livello di un edificio",
  "models.Floor.views.map.help": "La planimetria %{name} in 2d",
  "models.Floor.views.map.label": "progetto 2D",
  "models.Floor.views.3d.help": "La planimetria %{name} in 3d",
  "models.Floor.views.3d.label": "progetto 3d",
  "models.Floor.views.cuby.help": "La planimetria %{name} in 3d",
  "models.Floor.views.cuby.label": "3d",
  "models.Floor.views.simple-list.help": "Elenca i piani con pochi dettagli",
  "models.Floor.views.simple-list.label": "Elenco unico",
  "models.Floor.views.geojson.help": "Visualizza le informazioni in GeoJson",
  "models.Floor.views.geojson.label": "Copia le coordinate GeoJson",
  "models.Floor.views.standalone-2d-map.help": "La planimetria %{name} in 2D senza menu",
  "models.Floor.views.standalone-2d-map.label": "Solo piano 2d",
  "models.Floor.properties.id.label": "ID piano",
  "models.Floor.properties.name.label": "Nome del piano",
  "models.Floor.properties.name.description": "Il nome del piano serve per trovarlo facilmente.",
  "models.Floor.properties.level.label": "Livello",
  "models.Floor.properties.level.description": "Il livello del piano permette di definirne la posizione rispetto agli altri piani, ad esempio utilizzare 0 per il piano terra o -1 per i parcheggi",
  "models.Floor.properties.backgroundLayout.label": "Sfondo",
  "models.Floor.properties.backgroundLayout.description": "Il piano di base consente di avere un livello di primo livello per poter ridisegnare i piani, deve essere in scala",
  "models.Floor.properties.backgroundLayoutOpacity.label": "Opacit\xE0 della mappa di base",
  "models.Floor.properties.backgroundLayoutOpacity.description": "L'opacit\xE0 permette di vedere pi\xF9 o meno lo sfondo",
  "models.Floor.properties.regulatoryCapacity.label": "Capacit\xE0 normativa",
  "models.Floor.properties.regulatoryCapacity.description": "La capacit\xE0 normativa del set, permette di gestire l'evacuazione del pubblico e dei dipendenti",
  "models.Floor.properties.pathfindingGraph.label": "Grafico di navigazione del piano",
  "models.Floor.properties.pathfindingGraph.description": "Il grafico di navigazione consente di calcolare i percorsi pi\xF9 brevi tra i punti sul pavimento",
  "models.Floor.properties.workplacesCount.label": "Numero di postazioni di lavoro",
  "models.Floor.properties.workplacesCount.description": "Il numero di postazioni di lavoro nel piano viene calcolato automaticamente",
  "models.Floor.properties.workplacesRatio.label": "Rapporto di postazioni di lavoro",
  "models.Floor.properties.workplacesRatio.description": "Il rapporto delle postazioni \xE8 il numero di metri quadrati del piano diviso per il numero delle postazioni, questo valore viene calcolato automaticamente",
  "models.Floor.properties.peopleCount.label": "Numero di incarichi",
  "models.Floor.properties.peopleCount.description": "Il numero di persone assegnate al piano, assegnate direttamente agli spazi o tramite una postazione di lavoro",
  "models.Floor.properties.totalPeopleCount.label": "Numero di incarichi totali",
  "models.Floor.properties.totalPeopleCount.description": "Il numero di persone assegnate al piano, assegnate direttamente agli spazi o tramite una postazione di lavoro",
  "models.Floor.properties.peopleRatio.label": "Rapporto di occupazione",
  "models.Floor.properties.peopleRatio.description": "Il rapporto di occupazione \xE8 il numero di metri quadrati al piano diviso per il numero di persone assegnate direttamente agli spazi o tramite postazione di lavoro, questo valore viene calcolato",
  "models.Floor.properties.freeWorkplacesCount.label": "Numero di posti vacanti",
  "models.Floor.properties.freeWorkplacesCount.description": "Numero di estensioni libere sul pavimento",
  "models.Floor.properties.flexWorkplacesCount.label": "Numero di posizioni flessibili",
  "models.Floor.properties.flexWorkplacesCount.description": "Numero di pali flessibili nel pavimento",
  "models.Floor.properties.roomsArea.label": "Zona qualificata",
  "models.Floor.properties.roomsArea.description": "La superficie qualificata \xE8 la somma delle superfici dei vani",
  "models.Floor.properties.roomsCount.label": "Numero di spazi",
  "models.Floor.properties.roomsCount.description": "Il numero di vani presenti in questo piano",
  "models.Floor.properties.sharedWorkplacesCount.label": "Numero di postazioni condivise",
  "models.Floor.properties.sharedWorkplacesCount.description": "Numero di postazioni condivise al piano da almeno 2 persone",
  "models.Floor.properties.sharedWorkplacesRatio.label": "Tasso di postazioni di lavoro condivise",
  "models.Floor.properties.sharedWorkplacesRatio.description": "Percentuale di postazioni condivise da almeno 2 persone rispetto a tutte le postazioni a terra",
  "models.Floor.properties.flexRatio.label": "Tasso di postazioni di lavoro flessibili",
  "models.Floor.properties.flexRatio.description": "La tariffa per workstation flessibili viene calcolata dividendo il numero di workstation flessibili per il numero totale di workstation",
  "models.Floor.properties.transitWorkplacesCount.label": "Numero di postazioni di transito",
  "models.Floor.properties.transitWorkplacesCount.description": "Numero di postazioni temporanee, queste posizioni non sono conteggiate nelle posizioni libere e non sono in flex",
  "models.Floor.properties.height.label": "Altezza del soffitto",
  "models.Floor.properties.height.description": "L'altezza sotto il soffitto del pavimento",
  "models.Floor.properties.mapScale.label": "Scala del piano",
  "models.Floor.properties.mapScale.description": "La scala ci consente di calcolare in proporzione le aree e le dimensioni effettive degli oggetti",
  "models.FactType.singular": "Tipo di fatto",
  "models.FactType.plural": "Tipi di fatto",
  "models.FactType.determinant.defined": "il tipo di fatto",
  "models.FactType.determinant.undefined": "un tipo di fatto",
  "models.FactType.determinants.defined": "tipi di fatto",
  "models.FactType.determinants.undefined": "tipi di fatto",
  "models.Fact.singular": "Fare",
  "models.Fact.plural": "Fatti",
  "models.Fact.determinant.defined": "il fatto",
  "models.Fact.determinant.undefined": "un fatto",
  "models.Fact.determinants.defined": "fatti",
  "models.Fact.determinants.undefined": "fatti",
  "models.DistributionCostType.singular": "tipo di distribuzione dei costi",
  "models.DistributionCostType.plural": "tipi di distribuzione dei costi",
  "models.DistributionCostType.determinant.defined": "il tipo di distribuzione dei costi",
  "models.DistributionCostType.determinant.undefined": "un tipo di distribuzione dei costi",
  "models.DistributionCostType.determinants.defined": "tipi di distribuzione dei costi",
  "models.DistributionCostType.determinants.undefined": "tipi di distribuzione dei costi",
  "models.DistributionCostType.properties.name.label": "Nome del tipo di distribuzione dei costi",
  "models.DistributionCostType.properties.code.labe": "codificato",
  "models.DistributionCostType.properties.code.description": "Il codice viene utilizzato per poter calcolare automaticamente i costi associati",
  "models.DimensionTypeToBuilding.singular": "Tipo di livello di assegnazione dell'edificio",
  "models.DimensionTypeToBuilding.plural": "Tipi di livelli di assegnazione degli edifici",
  "models.DimensionTypeToBuilding.determinant.defined": "il tipo di livello di assegnazione dell'edificio",
  "models.DimensionTypeToBuilding.determinant.undefined": "un tipo di livello di assegnazione degli edifici",
  "models.DimensionTypeToBuilding.determinants.defined": "i tipi di livelli di assegnazione degli edifici",
  "models.DimensionTypeToBuilding.determinants.undefined": "tipi di livelli di assegnazione degli edifici",
  "models.DimensionTypeToBuilding.description": "I tipi di layer di assegnazione degli edifici consentono di definire i diversi tipi di layer di assegnazione degli edifici. Associando una tipologia di layer di assegnazione ad un edificio, \xE8 possibile trasformare un layer di analisi in un layer di assegnazione.",
  "models.DimensionType.singular": "Tipo di livello",
  "models.DimensionType.plural": "Tipi di livello",
  "models.DimensionType.determinant.defined": "il tipo di strato",
  "models.DimensionType.determinant.undefined": "un tipo di strato",
  "models.DimensionType.determinants.defined": "tipi di livelli",
  "models.DimensionType.determinants.undefined": "tipi di strato per piano",
  "models.DimensionType.properties.id.label": "Identificatore del tipo di dimensione",
  "models.DimensionType.properties.order.label": "ordine di apparizione",
  "models.DimensionType.properties.order.description": "Consente di ordinare i tipi di layer per visualizzarli",
  "models.DimensionType.properties.name.label": "Nome del tipo di dimensione",
  "models.DimensionType.properties.code.label": "Codice tipo dimensione",
  "models.DimensionType.properties.code.description": "Il codice identifica il tipo di dimensione, viene utilizzato quando si applicano calcoli specifici al tipo di dimensione",
  "models.DimensionToPerson.singular": "Assegnazione al livello di assegnazione",
  "models.DimensionToPerson.plural": "Assegnazioni ai livelli di assegnazione",
  "models.DimensionToPerson.description": "Ti permette di assegnare una persona a un distretto, territorio o villaggio",
  "models.DimensionToPerson.determinant.defined": "l'assegnazione al livello di assegnazione",
  "models.DimensionToPerson.determinant.undefined": "un'assegnazione al livello di assegnazione",
  "models.DimensionToPerson.determinants.defined": "assegnazioni ai livelli di assegnazione",
  "models.DimensionToPerson.determinants.undefined": "assegnazioni ai livelli di assegnazione",
  "models.DimensionRoom.singular": "Livello di analisi spaziale",
  "models.DimensionRoom.plural": "Strati di analisi spaziale",
  "models.DimensionRoom.determinant.defined": "il livello di analisi spaziale",
  "models.DimensionRoom.determinant.undefined": "uno strato di analisi spaziale",
  "models.DimensionRoom.determinants.defined": "strati di analisi spaziale",
  "models.DimensionRoom.determinants.undefined": "strati di analisi spaziale",
  "models.DimensionRoom.properties.id.label": "Identificatore del layer di analisi spaziale",
  "models.DimensionFloor.singular": "Analisi strato per pavimento",
  "models.DimensionFloor.plural": "Strati di analisi per piano",
  "models.DimensionFloor.determinant.defined": "l'analisi strato per piano",
  "models.DimensionFloor.determinant.undefined": "uno strato di analisi per piano",
  "models.DimensionFloor.determinants.defined": "strati di analisi per piano",
  "models.DimensionFloor.determinants.undefined": "strati di analisi per piano",
  "models.DimensionFloor.properties.id.label": "Identificatore dello strato di analisi per piano",
  "models.DimensionFloor.properties.peopleCount.label": "Numero di incarichi",
  "models.DimensionFloor.properties.peopleCount.description": "Il numero di persone assegnate, assegnate direttamente agli spazi o tramite una postazione di lavoro per questo piano",
  "models.DimensionFloor.properties.totalPeopleCount.label": "Numero totale di incarichi indiretti sul piano",
  "models.DimensionFloor.properties.totalPeopleCount.description": "Il numero totale di persone assegnate indirettamente al piano, assegnate direttamente agli spazi o tramite una postazione di lavoro, ma non tramite i livelli di assegnazione che si trovano solo a livello di edificio",
  "models.DimensionBuilding.singular": "Livello di analisi dell'edificio",
  "models.DimensionBuilding.plural": "Livelli di analisi per edificio",
  "models.DimensionBuilding.determinant.defined": "il livello di analisi per edificio",
  "models.DimensionBuilding.determinant.undefined": "un livello di analisi per edificio",
  "models.DimensionBuilding.determinants.defined": "livelli di analisi per costruzione",
  "models.DimensionBuilding.determinants.undefined": "costruzione di livelli di analisi",
  "models.DimensionBuilding.properties.id.label": "Identificatore del livello di analisi per edificio",
  "models.DimensionBuilding.properties.dimensionPeopleCount.label": "Numero di assegnazioni direttamente a questo livello di assegnazione",
  "models.DimensionBuilding.properties.dimensionPeopleCount.description": "Il numero di persone assegnate a questo livello di assegnazione per l'intero edificio",
  "models.DimensionBuilding.properties.totalPeopleCount.label": "Numero totale di incarichi",
  "models.DimensionBuilding.properties.totalPeopleCount.description": "Il numero totale di persone assegnate, assegnate direttamente agli spazi, tramite una workstation o tramite un livello di assegnazione",
  "models.Dimension.singular": "Livello di analisi",
  "models.Dimension.plural": "Livelli di analisi",
  "models.Dimension.determinant.defined": "il livello di analisi",
  "models.Dimension.determinant.undefined": "uno strato di analisi",
  "models.Dimension.determinants.defined": "livelli di analisi",
  "models.Dimension.determinants.undefined": "livelli di analisi",
  "models.Dimension.properties.id.label": "Identificatore del livello di analisi",
  "models.Dimension.properties.id.description": "Identificatore interno di Surfy",
  "models.Dimension.properties.name.label": "Nome del livello di analisi",
  "models.Dimension.properties.name.description": "Utile per differenziare lo strato tra gli altri",
  "models.Dimension.properties.color.label": "Colore",
  "models.Dimension.properties.color.description": "Il colore del livello di analisi consente di differenziare gli spazi sulla pianta",
  "models.Dimension.properties.value.label": "Valore numerico",
  "models.Dimension.properties.value.description": "Il valore pu\xF2 essere utilizzato per associare il layer ad un valore numerico in modo da poter eseguire statistiche analitiche",
  "models.Dimension.properties.peopleCount.label": "Numero di incarichi diretti",
  "models.Dimension.properties.peopleCount.description": "Il numero di persone assegnate direttamente a questo livello di assegnazione nell'edificio",
  "models.Dimension.properties.manualPeopleCount.label": "Numero di assegnazioni manuali dirette",
  "models.Dimension.properties.manualPeopleCount.description": "Il numero di persone assegnate direttamente a questo livello di assegnazione senza considerare le assegnazioni con persone reali",
  "models.Dimension.properties.totalPeopleCount.label": "Numero totale di incarichi diretti",
  "models.Dimension.properties.totalPeopleCount.description": "Il numero totale di persone assegnate direttamente a questo livello di assegnazione nell'edificio, la somma delle persone effettive assegnate e il numero di persone assegnate manualmente",
  "models.Dimension.properties.carbonFootprintPerMeter.label": "Impronta di carbonio per metro quadrato",
  "models.Dimension.properties.carbonFootprintPerMeter.description": "L'impronta di carbonio per metro quadrato calcola l'impronta di carbonio in chilogrammi di CO2 di uno strato di analisi per metro quadrato",
  "models.CostCenterFloor.singular": "centro di costo del piano",
  "models.CostCenterFloor.plural": "centri di costo iniziali",
  "models.CostCenterFloor.determinant.defined": "il centro di costo dei piani",
  "models.CostCenterFloor.determinant.undefined": "un centro di costo a pavimento",
  "models.CostCenterFloor.determinants.defined": "i centri di costo dei piani",
  "models.CostCenterFloor.determinants.undefined": "centri di costo del piano",
  "models.CostCenterBuilding.singular": "centro di costo edilizio",
  "models.CostCenterBuilding.plural": "centri di costo edilizio",
  "models.CostCenterBuilding.determinant.defined": "centro di costo edilizio",
  "models.CostCenterBuilding.determinant.undefined": "un centro di costo edilizio",
  "models.CostCenterBuilding.determinants.defined": "costruire centri di costo",
  "models.CostCenterBuilding.determinants.undefined": "costruendo centri di costo",
  "models.CostCenter.singular": "centro di costo",
  "models.CostCenter.plural": "centri di costo",
  "models.CostCenter.description": "Il centro di costo consente di distribuire dinamicamente gli spazi per la rifatturazione",
  "models.CostCenter.determinant.defined": "il centro di costo",
  "models.CostCenter.determinant.undefined": "un centro di costo",
  "models.CostCenter.determinants.defined": "centri di costo",
  "models.CostCenter.determinants.undefined": "centri di costo",
  "models.CostCenter.properties.id.label": "Identificatore del centro di costo",
  "models.CostCenter.properties.name.label": "Nome del centro di costo",
  "models.CostCenter.properties.color.label": "Colore",
  "models.CostCenter.properties.distributeByFloor.label": "Distribuire per piano",
  "models.CostCenter.properties.distributeByFloor.description": "Ripartire proporzionalmente lo spazio utilizzato da questo centro di costo sul piano agli altri centri di costo sullo stesso piano",
  "models.CostCenter.properties.distributeByBuilding.label": "Distribuire per edificio",
  "models.CostCenter.properties.distributeByBuilding.description": "Ripartire proporzionalmente lo spazio utilizzato da questo centro di costo nell'edificio agli altri centri di costo nell'edificio",
  "models.ContentRoleToUserCompany.singular": "Ruolo contenuto utente aziendale",
  "models.ContentRoleToUserCompany.plural": "Ruoli dei contenuti degli utenti aziendali",
  "models.ContentRoleToUserCompany.determinant.defined": "il ruolo del contenuto dell'utente aziendale",
  "models.ContentRoleToUserCompany.determinant.undefined": "un ruolo di contenuto utente aziendale",
  "models.ContentRoleToUserCompany.determinants.defined": "ruoli dei contenuti degli utenti aziendali",
  "models.ContentRoleToUserCompany.determinants.undefined": "ruoli dei contenuti degli utenti aziendali",
  "models.ContentRoleToJupUiTenantOperation.singular": "Associazione del ruolo del contenuto alle operazioni di interfaccia per un'azienda",
  "models.ContentRoleToJupUiTenantOperation.plural": "Associazione del ruolo del contenuto alle operazioni di interfaccia per un'azienda",
  "models.ContentRoleToJupUiTenantOperation.determinant.defined": "associare il ruolo del contenuto con le operazioni di interfaccia per un'azienda",
  "models.ContentRoleToJupUiTenantOperation.determinant.undefined": "un'associazione del ruolo del contenuto per interfacciare le operazioni per un'azienda",
  "models.ContentRoleToJupUiTenantOperation.determinants.defined": "associazioni di ruoli di contenuto per interfacciare le operazioni per un'azienda",
  "models.ContentRoleToJupUiTenantOperation.determinants.undefined": "associazioni di ruoli di contenuto per interfacciare le operazioni per un'azienda",
  "models.ContentRoleToFloor.singular": "Associazione del ruolo del contenuto alle storie",
  "models.ContentRoleToFloor.plural": "Associazioni dei ruoli dei contenuti alle storie",
  "models.ContentRoleToFloor.determinant.defined": "l'associazione del ruolo di contenuto ai piani",
  "models.ContentRoleToFloor.determinant.undefined": "un'associazione del ruolo del contenuto ai piani",
  "models.ContentRoleToFloor.determinants.defined": "associazioni di ruoli di contenuto ai piani",
  "models.ContentRoleToFloor.determinants.undefined": "associazioni di ruolo del contenuto alle storie",
  "models.ContentRoleToBuilding.singular": "Associazione del ruolo del contenuto agli edifici",
  "models.ContentRoleToBuilding.plural": "Associazioni di ruolo del contenuto agli edifici",
  "models.ContentRoleToBuilding.determinant.defined": "associare il ruolo del contenuto agli edifici",
  "models.ContentRoleToBuilding.determinant.undefined": "un'associazione del ruolo del contenuto agli edifici",
  "models.ContentRoleToBuilding.determinants.defined": "associazioni di ruolo del contenuto agli edifici",
  "models.ContentRoleToBuilding.determinants.undefined": "associazioni di ruolo del contenuto agli edifici",
  "models.ContentRole.singular": "Ruolo dei contenuti",
  "models.ContentRole.plural": "Ruoli del contenuto",
  "models.ContentRole.determinant.defined": "il ruolo del contenuto",
  "models.ContentRole.determinant.undefined": "un ruolo di contenuto",
  "models.ContentRole.determinants.defined": "ruoli di contenuto",
  "models.ContentRole.determinants.undefined": "ruoli di contenuto",
  "models.CompanyType.singular": "Tipo di Compagnia",
  "models.CompanyType.plural": "tipo di imprese",
  "models.CompanyType.determinant.defined": "il tipo di attivit\xE0",
  "models.CompanyType.determinant.undefined": "un tipo di attivit\xE0",
  "models.CompanyType.determinants.defined": "tipi di imprese",
  "models.CompanyType.determinants.undefined": "tipi di imprese",
  "models.CompanyType.properties.name.label": "Nome del tipo di attivit\xE0",
  "models.Company.singular": "azienda",
  "models.Company.plural": "aziende",
  "models.Company.determinant.defined": "l'azienda",
  "models.Company.determinant.undefined": "una societ\xE0",
  "models.Company.determinants.defined": "imprese",
  "models.Company.determinants.undefined": "imprese",
  "models.Company.properties.id.label": "Codice Identificativo dell'azienda",
  "models.Company.properties.logoPath.label": "Logo",
  "models.Company.properties.logoPath.description": "Il percorso verso il logo della tua azienda",
  "models.Company.properties.iconPath.label": "icona",
  "models.Company.properties.iconPath.description": "Il logo aziendale quadrato",
  "models.Company.properties.name.label": "Nome della ditta",
  "models.Company.properties.workingDaysCount.label": "Numero di giorni lavorativi alla settimana",
  "models.Company.properties.workingDaysCount.description": "Il numero di giorni lavorativi settimanali pu\xF2 essere 5 per i giorni lavorativi, 6 compreso il sabato e 7 compresa la domenica",
  "models.Company.views.usage.label": "Utilizzo delle piattaforme",
  "models.Company.views.usage.help": "Comprendere l'utilizzo delle piattaforme disponibili",
  "models.Company.views.cards.help": "Veduta delle aziende produttrici di piastrelle",
  "models.Company.views.cards.label": "Tegole",
  "models.Company.views.dq-fix-inventory.label": "Coerenza dell'inventario",
  "models.Company.views.dq-fix-inventory.help": "Trova e ripara le incongruenze dell'inventario fisico e virtuale per le workstation",
  "models.Company.views.dq-shapes-position.label": "Posizionamento delle forme",
  "models.Company.views.dq-shapes-position.help": "Trova e riposiziona le forme che si trovano sulla pianta in uno spazio diverso da quello nel database",
  "models.Company.views.people-info.label": "Statistiche sulla creazione di compiti da parte delle persone",
  "models.Company.views.people-info.help": "Visualizza le statistiche delle assegnazioni",
  "models.Company.reports.export-all.fileName": "backup",
  "models.Company.reports.export-all.help": "Esegui il backup di tutti i dati di Surfy",
  "models.Company.reports.export-all-duplicate.fileName": "duplicazione",
  "models.Company.reports.export-all-duplicate.help": "Eseguire il backup dei dati aziendali per creare una copia della piattaforma",
  "models.Campus.singular": "campus",
  "models.Campus.plural": "campus",
  "models.Campus.description": "Campus viene utilizzato per raggruppare edifici che si trovano nella stessa posizione.",
  "models.Campus.determinant.defined": "il campus",
  "models.Campus.determinant.undefined": "un campus",
  "models.Campus.determinants.defined": "campus",
  "models.Campus.determinants.undefined": "campus",
  "models.Campus.views.cards.help": "Veduta di gruppo degli edifici",
  "models.Campus.views.cards.label": "Informazioni",
  "models.Campus.properties.id.label": "Identificativo del campus",
  "models.Campus.properties.name.label": "Nome del campus",
  "models.Campus.properties.name.description": "Nome del campus",
  "models.Campus.properties.color.label": "Colore",
  "models.Campus.properties.color.description": "Colore del campus",
  "models.Campus.properties.externalId.label": "Identificatore esterno",
  "models.BuildingType.singular": "tipo di edificio",
  "models.BuildingType.plural": "tipi di edifici",
  "models.BuildingType.determinant.defined": "il tipo di edificio",
  "models.BuildingType.determinant.undefined": "un tipo di edificio",
  "models.BuildingType.determinants.defined": "tipi di edificio",
  "models.BuildingType.determinants.undefined": "tipi di edificio",
  "models.BuildingType.properties.id.label": "Identificatore del tipo di edificio",
  "models.BuildingType.properties.name.label": "Nome del tipo di edificio",
  "models.BuildingType.properties.name.description": "Nome del tipo di edificio",
  "models.BuildingType.properties.code.label": "codificato",
  "models.BuildingType.properties.code.description": "???",
  "models.BuildingType.properties.externalId.label": "Identificatore esterno",
  "models.BuildingType.properties.externalId.description": "???",
  "models.Building.singular": "edificio",
  "models.Building.plural": "edifici",
  "models.Building.determinant.defined": "edificio",
  "models.Building.determinant.undefined": "un edificio",
  "models.Building.determinants.defined": "gli edifici",
  "models.Building.determinants.undefined": "edifici",
  "models.Building.description": "L'edificio \xE8 utilizzato per raggruppare i piani",
  "models.Building.reports.workplaces.fileName": "Posti di lavoro personali",
  "models.Building.reports.workplaces.help": "Rapporto sulle stazioni di lavoro edilizie",
  "models.Building.reports.allWorkplaces.fileName": "Postazioni di lavoro con compiti",
  "models.Building.reports.allWorkplaces.help": "Report di tutte le postazioni di lavoro nell'edificio, compresi gli incarichi",
  "models.Building.reports.workplaceAffectations.fileName": "Compiti della postazione di lavoro",
  "models.Building.reports.workplaceAffectations.help": "Report sull'assegnazione della postazione di lavoro dell'edificio",
  "models.Building.reports.buildingPeople.fileName": "Persone",
  "models.Building.reports.buildingPeople.help": "Segnalazione delle persone interessate nell'edificio",
  "models.Building.reports.organizations.fileName": "Organizzazioni",
  "models.Building.reports.organizations.help": "Rapporto delle organizzazioni edilizie",
  "models.Building.reports.buildingItems.fileName": "Inventario",
  "models.Building.reports.buildingItems.help": "Rapporto sull'inventario degli edifici",
  "models.Building.reports.area.fileName": "Spazi",
  "models.Building.reports.area.help": "Rapporto sugli spazi edificabili",
  "models.Building.reports.buildingCleaning.fileName": "Benefici",
  "models.Building.reports.buildingCleaning.help": "Report dei servizi di pulizia degli edifici",
  "models.Building.reports.buildingDimensions.fileName": "Livelli di analisi",
  "models.Building.reports.buildingDimensions.help": "Rapporto sui livelli di analisi dello spazio dell'edificio",
  "models.Building.views.cards.help": "Veduta di edifici piastrellati",
  "models.Building.views.cards.label": "Informazioni",
  "models.Building.views.pictures.help": "Visualizza gli edifici con le foto",
  "models.Building.views.pictures.label": "Immagini",
  "models.Building.views.gmap.help": "Visualizza gli edifici su una mappa",
  "models.Building.views.gmap.label": "Carta",
  "models.Building.views.cost-distribution-by-cost-center.help": "<b>Chiavi di distribuzione</b> e superficie qualificata per centro di costo per l'edificio %{name}",
  "models.Building.views.cost-distribution-by-cost-center.label": "Chiavi di distribuzione",
  "models.Building.views.3d-cards.help": "Guarda gli edifici in 3d",
  "models.Building.views.3d-cards.label": "3d",
  "models.Building.views.assets.help": "Patrimonio immobiliare",
  "models.Building.views.assets.label": "Immobiliare",
  "models.Building.views.cuby.help": "La pianta <b>3D</b> interattiva dell'edificio %{name}",
  "models.Building.views.cuby.label": "progetto 3d",
  "models.Building.views.3d.help": "La pianta 3d dell'edificio %{name} (cuby)",
  "models.Building.views.3d.label": "progetto 3d",
  "models.Building.views.clone.help": "Costruire <b>scenari</b> e progetti %{name}",
  "models.Building.views.clone.label": "Scenari",
  "models.Building.views.building-ifc.help": "Esporta questo edificio in IFC per BIM",
  "models.Building.views.building-ifc.label": "IFC",
  "models.Building.views.zbre-sync.help": "Sincronizza l'edificio con la piattaforma Zbre",
  "models.Building.views.zbre-sync.label": "Sincronizzazione Zebra",
  "models.Building.views.inventory.help": "Creazione <b>dell'inventario</b> %{name}",
  "models.Building.views.inventory.label": "Inventario",
  "models.Building.views.list-simple.help": "Elenca gli edifici con pochi dettagli",
  "models.Building.views.list-simple.label": "Elenco semplice",
  "models.Building.views.building-3d-gmap.label": "Costruzione 3d sul piano",
  "models.Building.views.building-3d-gmap.help": "Guarda l'edificio in 3d su una pianta",
  "models.Building.properties.id.label": "ID edificio",
  "models.Building.properties.name.label": "nome dell'edificio",
  "models.Building.properties.name.description": "Nome dell'edificio o dello scenario",
  "models.Building.properties.picture.label": "Foto dell'edificio",
  "models.Building.properties.picture.description": "Puoi utilizzare una foto del tuo edificio per ritrovarlo velocemente dalla home page (vedi edifici con foto) o per illustrare il punto di vista dei collaboratori",
  "models.Building.properties.documents.label": "Documenti correlati",
  "models.Building.properties.documents.description": "Mantieni un collegamento alla posizione dei documenti associati a questo edificio nel tuo GED",
  "models.Building.properties.securityDeposit.label": "Deposito di sicurezza",
  "models.Building.properties.securityDeposit.description": "Importo della cauzione depositata al momento della firma del contratto di locazione",
  "models.Building.properties.buildings.label": "Scenari di edifici",
  "models.Building.properties.buildings.description": "Scenari generati da questo edificio",
  "models.Building.properties.constructionYear.label": "Anno di costruzione dell'immobile",
  "models.Building.properties.constructionYear.description": "Anno di costruzione dell'edificio che consente di misurarne l'obsolescenza",
  "models.Building.properties.parkingSpaceCount.label": "Numero di posti auto",
  "models.Building.properties.parkingSpaceCount.description": "Numero di posti auto disponibili",
  "models.Building.properties.yearlyParkingRent.label": "Affitto annuale del parcheggio",
  "models.Building.properties.yearlyParkingRent.description": "Quota di canone destinata al parcheggio",
  "models.Building.properties.yearlyTaxFees.label": "Importo delle tasse annuali",
  "models.Building.properties.yearlyTaxFees.description": "Importo totale delle tasse",
  "models.Building.properties.yearlyExploitationFees.label": "Spese operative annuali",
  "models.Building.properties.yearlyExploitationFees.description": "Importo annuo delle spese operative (esempio: acqua, elettricit\xE0)",
  "models.Building.properties.rentReferenceIndex.label": "Indice di riferimento per gli affitti",
  "models.Building.properties.rentReferenceIndex.description": "L'indice di riferimento dell'affitto (IRL) serve come base per la revisione degli affitti di alloggi vuoti o arredati",
  "models.Building.properties.color.label": "Colore",
  "models.Building.properties.color.description": "Il colore dell'edificio viene utilizzato per definire il colore di sfondo nelle presentazioni dei piani o dell'edificio e per poter distinguere questo edificio dagli altri",
  "models.Building.properties.roomsCount.label": "Numero di spazi",
  "models.Building.properties.roomsCount.description": "Il numero di spazi creati in questo edificio",
  "models.Building.properties.roomsArea.label": "Zona qualificata",
  "models.Building.properties.roomsArea.description": "La superficie qualificata rappresenta tutte le aree modellate in Surfy",
  "models.Building.properties.workplacesCount.label": "Numero di postazioni di lavoro",
  "models.Building.properties.workplacesCount.description": "Il numero di postazioni di lavoro nell'edificio viene calcolato automaticamente",
  "models.Building.properties.workplacesRatio.label": "Rapporto di postazioni di lavoro",
  "models.Building.properties.workplacesRatio.description": "Il rapporto per postazione di lavoro \xE8 il numero di metri quadrati dell'edificio diviso per il numero di postazioni di lavoro, questo valore viene calcolato automaticamente",
  "models.Building.properties.peopleCount.label": "Numero di incarichi",
  "models.Building.properties.peopleCount.description": "Il numero di persone assegnate all'edificio, ai quartieri, agli spazi o alle postazioni di lavoro",
  "models.Building.properties.peopleRatio.label": "Rapporto di occupazione",
  "models.Building.properties.peopleRatio.description": "Il rapporto di occupazione \xE8 il numero di metri quadrati nell'edificio diviso per il numero di persone assegnate direttamente ai quartieri, agli spazi o alle postazioni di lavoro, questo valore viene calcolato",
  "models.Building.properties.freeWorkplacesCount.label": "Numero di posti vacanti",
  "models.Building.properties.freeWorkplacesCount.description": "Numero di posti liberi nell'edificio",
  "models.Building.properties.flexWorkplacesCount.label": "Numero di posizioni flessibili",
  "models.Building.properties.flexWorkplacesCount.description": "Numero di postazioni di lavoro flessibili nell'edificio",
  "models.Building.properties.address.label": "Indirizzo",
  "models.Building.properties.address.description": "L'indirizzo dell'edificio per individuarlo sulla mappa",
  "models.Building.properties.yearlyCondominiumFees.label": "Spese annuali",
  "models.Building.properties.yearlyCondominiumFees.description": "Importo delle spese annuali di gestione o di compropriet\xE0, ad esempio",
  "models.Building.properties.yearlyRent.label": "Affitto annuale",
  "models.Building.properties.yearlyRent.description": "Importo dell'affitto annuo per questo edificio",
  "models.Building.properties.leaseStartDate.label": "Data inizio locazione",
  "models.Building.properties.leaseStartDate.description": "Data inizio locazione",
  "models.Building.properties.leaseEndDate.label": "Data di scadenza del contratto di locazione",
  "models.Building.properties.leaseEndDate.description": "Data di scadenza del contratto di locazione",
  "models.Building.properties.purchaseDate.label": "Data di acquisto dell'immobile",
  "models.Building.properties.purchaseDate.description": "Data di acquisto dell'immobile",
  "models.Building.properties.buildingId.label": "Identificativo edificio di riferimento",
  "models.Building.properties.buildingId.description": "L'identificativo dell'edificio di riferimento viene utilizzato nell'ambito della creazione degli scenari, l'identificativo permette l'associazione con questo edificio",
  "models.Building.properties.building.label": "edificio originale",
  "models.Building.properties.building.description": "L'edificio originale o di riferimento viene utilizzato nella creazione degli scenari, permette di identificare l'edificio originale da cui \xE8 stato creato l'edificio",
  "models.Building.properties.jupUiLayout.label": "Visione del piano predefinito",
  "models.Building.properties.jupUiLayout.description": "Alla prima apertura della pianta di questo edificio verr\xE0 selezionata la visione predefinita, dopo la prima apertura verr\xE0 applicata la visione attuale",
  "models.Building.properties.sharedWorkplacesCount.label": "Numero di postazioni condivise",
  "models.Building.properties.sharedWorkplacesCount.description": "Numero di postazioni condivise nell'edificio da almeno 2 persone",
  "models.Building.properties.sharedWorkplacesRatio.label": "Tasso di postazioni di lavoro condivise",
  "models.Building.properties.sharedWorkplacesRatio.description": "Percentuale di postazioni condivise da almeno 2 persone rispetto a tutte le postazioni presenti nell'edificio",
  "models.Building.properties.flexRatio.label": "Tasso di postazioni di lavoro flessibili",
  "models.Building.properties.flexRatio.description": "La tariffa per workstation flessibili viene calcolata dividendo il numero di workstation flessibili per il numero totale di workstation",
  "models.Building.properties.transitWorkplacesCount.label": "Numero di postazioni di transito",
  "models.Building.properties.transitWorkplacesCount.description": "Numero di postazioni temporanee, queste posizioni non sono conteggiate nelle posizioni libere e non sono in flex",
  "models.Building.properties.regulatoryCapacity.label": "Capacit\xE0 normativa",
  "models.Building.properties.regulatoryCapacity.description": "La capacit\xE0 normativa del set, permette di gestire l'evacuazione del pubblico e dei dipendenti",
  "models.Building.properties.dimensionPeopleCount.label": "Numero di assegnazioni di layer",
  "models.Building.properties.dimensionPeopleCount.description": "Il numero di persone assegnate ai livelli di assegnazione associati a questo edificio",
  "models.Building.properties.userCompanyOwner.label": "Utente proprietario dell'edificio",
  "models.Building.properties.userCompanyOwner.description": "L'utente che possiede l'edificio vede sempre l'edificio anche in presenza di un ruolo di contenuto, in caso di creazione di uno scenario, l'utente che ha creato lo scenario diventa il proprietario, il proprietario pu\xF2 essere cambiato successivamente",
  "models.AuthentificationConnection.singular": "Accesso di autenticazione",
  "models.AuthentificationConnection.plural": "Connessioni di autenticazione",
  "models.AuthentificationConnection.determinant.defined": "la connessione di autenticazione",
  "models.AuthentificationConnection.determinant.undefined": "una connessione di autenticazione",
  "models.AuthentificationConnection.determinants.defined": "connessioni di autenticazione",
  "models.AuthentificationConnection.determinants.undefined": "connessioni di autenticazione",
  "models.ApiUserToJupRole.singular": "Associazione dell'utente API al ruolo",
  "models.ApiUserToJupRole.plural": "Utente API alle associazioni di ruoli",
  "models.ApiUserToJupRole.determinant.defined": "associazione utente API al ruolo",
  "models.ApiUserToJupRole.determinant.undefined": "un'associazione utente API al ruolo",
  "models.ApiUserToJupRole.determinants.defined": "associazioni utente API al ruolo",
  "models.ApiUserToJupRole.determinants.undefined": "Associazioni utente API al ruolo",
  "models.ApiUserToContentRole.singular": "Associazione dell'utente API al ruolo contenuto",
  "models.ApiUserToContentRole.plural": "Utente API per associazioni di ruoli di contenuto",
  "models.ApiUserToContentRole.determinant.defined": "associazione utente API al ruolo contenuto",
  "models.ApiUserToContentRole.determinant.undefined": "un'associazione utente API al ruolo contenuto",
  "models.ApiUserToContentRole.determinants.defined": "associazioni utente API al ruolo contenuto",
  "models.ApiUserToContentRole.determinants.undefined": "Associazioni utente API al ruolo contenuto",
  "models.ApiUser.singular": "Utente API",
  "models.ApiUser.plural": "Utenti API",
  "models.ApiUser.determinant.defined": "utente API",
  "models.ApiUser.determinant.undefined": "un utente API",
  "models.ApiUser.determinants.defined": "utenti API",
  "models.ApiUser.determinants.undefined": "Utenti API",
  "models.ApiUser.properties.clientSecret.label": "Codice segreto",
  "models.ApiUser.properties.clientSecret.description": "la password segreta del tuo account API pu\xF2 essere generata e non dovrebbe mai essere condivisa",
  "ToggleZbreSyncCheckbox.label": "Sincronizza con le occupazioni in tempo reale in Z#ber",
  "ToggleZbreSyncCheckbox.help": "La sincronizzazione consente di colorare gli spazi e le postazioni di lavoro in base ai sensori posizionati in Z#ber",
  "FloorSpaceSlider.title": "Spazio tra ogni piano in centimetri",
  "FloorSelector.title": "Seleziona i piani",
  "FloorSelector.focus": "Seleziona solo questo piano",
  "FloorSelector.selectAll.false": "Seleziona tutti i piani",
  "FloorSelector.selectAll.true": "Deseleziona tutti i piani",
  "ToggleEnableMissingFloors.label": "Mostra pavimenti fantasma",
  "ToggleEnableMissingFloors.help": "Mostra i piani fantasma per i piani mancanti tra il livello 0 e il piano pi\xF9 alto in base ai livelli reali",
  "RoomGraphHandler.buttons.generateGraph.label": "Generare il grafico di orientamento",
  "RoomGraphHandler.buttons.generateGraph.description": "Generando il grafico di orientamento si calcolano i nodi attraverso i quali il pathfinder pu\xF2 trovare gli spazi e gli arredi. Se \xE8 possibile selezionare lo spazio originale, il grafico \xE8 gi\xE0 stato generato.",
  "RoomGraphHandler.buttons.selectOriginRoom.label": "Seleziona lo spazio originale",
  "RoomGraphHandler.buttons.selectOriginRoom.description": "Seleziona uno spazio, quindi potrai utilizzare questa opzione per definirlo come spazio iniziale",
  "RoomGraphHandler.icons.displayNodes.description": "Mostra i percorsi nelle stanze",
  "RoomGraphHandler.icons.displayBoundingBoxes.description": "Mostra gli spazi di esclusione dei mobili",
  "RoomGraphHandler.icons.enablePathfinding.description": "Attiva il disegno del percorso dallo spazio di origine con la forma sotto il mouse",
  "RoomGraphHandler.rooms.origin": "Spazio originale",
  "ThemeModeSwitchMenuItem.dark.label": "Passa alla modalit\xE0 luminosa",
  "ThemeModeSwitchMenuItem.dark.help": "L'uso della modalit\xE0 luminosa consente di lavorare con uno sfondo bianco",
  "ThemeModeSwitchMenuItem.light.label": "Passa alla modalit\xE0 oscura",
  "ThemeModeSwitchMenuItem.light.help": "L'uso della modalit\xE0 scura consente di lavorare con i colori scuri sullo sfondo per ridurre l'affaticamento degli occhi",
  "copilot.actions.add.door": "Una porta \xE8 stata appena aggiunta da Surfy Copilot",
  "generateDocumentation.properties.technicalName": "Nome tecnico",
  "generateDocumentation.properties.belongsTo": "Enti associati (singoli)",
  "generateDocumentation.properties.hasMany": "Enti associati (elenco)",
  "generateDocumentation.properties.base": "Propriet\xE0 di base",
  "generateDocumentation.properties.mandatory": "Propriet\xE0 obbligatorie",
  "help.key1": "Ciao %{name}",
  "help.key2": "ciao %{name}"
};

// public/assets/i18n/nl.json
var nl_default = {
  "ImportUpdateOption.label": "Update",
  "ImportUpdateOption.help": "Geselecteerde objecten bijwerken",
  "ImportUpdateEntitiesTable.description": "Lijst met objecten die moeten worden bijgewerkt",
  "PropertyTypeErrors.title": "De volgende waarden bestaan \u200B\u200Bniet voor eigenschap <b>%{propertyTypeLabel}</b> in <b>%{objectTypeLabel}</b>",
  "ImportDeleteOption.label": "verwijderen",
  "ImportDeleteOption.help": "Voer het verwijderen van geselecteerde objecten uit in Surfy",
  "ImportDeleteEntitiesTable.description": "Lijst met objecten die moeten worden verwijderd in Surfy",
  "ImportCreateOption.label": "scheppen",
  "ImportCreateOption.help": "Maak de geselecteerde objecten in Surfy",
  "ImportCreateEntitiesTable.description": "Lijst met objecten die moeten worden gemaakt",
  "ImportCreateEntitiesTable.open.label": "Bekijk de entiteiten die u wilt maken",
  "ImportCreateEntitiesTable.open.help": "Bekijk de details van de entiteiten die moeten worden aangemaakt, omdat er meer dan 500 regels zijn. Om prestatieredenen zijn de regels standaard verborgen",
  "ImportCreateAllOption.label": "Maak alles",
  "ImportCreateAllOption.help": "Voer de creatie van alle objecten uit zonder ze afzonderlijk te selecteren",
  "entitiesImportType.date.wrongImportFormat": "Het formaat van de datum %{value} is niet correct, het verwachte formaat is %{excelImportDateFormat}",
  "InfoTabContent.description": "Opmerkelijke fouten of informatie tijdens het importeren",
  "InfoTabContent.noChange": "In de vergelijking zijn geen veranderingen waargenomen",
  "InfoTabContent.copyIds": "Kopieer entiteits-ID's naar het klembord",
  "InfoTabContent.equals.multiple": "%{count} bestaande en ongewijzigde objecten",
  "InfoTabContent.equals.one": "E\xE9n enkel object bestaat al en is niet gewijzigd",
  "InfoTabContent.open.label": "Bekijk importdetails",
  "InfoTabContent.open.help": "Zie importdetails voor identieke vergelijkingen",
  "ImportObjectType.tabs.create.label": "Creatie",
  "ImportObjectType.tabs.update.label": "Update",
  "ImportObjectType.tabs.errors.label": "Info",
  "ImportObjectType.tabs.delete.label": "Verwijdering",
  "ImportObjectType.usedKeys": "De gebruikte afstemmingssleutel is:",
  "ImportObjectType.errors.noChange": "Bij de vergelijking werd geen wijziging waargenomen",
  "CompareEntities.buttons.reset.label": "Herstarten",
  "CompareEntities.buttons.reset.help": "Start het importeren opnieuw",
  "ObjectTypeImportKeys.title": "De beschikbare sleutels voor het afstemmen van %{determinants.undefined} in de volgorde van uw keuze. Als u een van de sleuteleigenschappen wilt wijzigen, moet u de ID als sleutel gebruiken",
  "ObjectTypeImportScalarProperties.help": "Kopieer naar klembord",
  "ImportHelpDrawerIconButton.icon.help": "Zie hulp bij het importeren van gegevens voor %{determinants.defined}",
  "ImportHelpDrawerIconButton.drawer.title": "Hulp bij het importeren %{determinants.undefined}",
  "ImportHelpDrawerIconButton.drawer.tabLabel": "Hulp bij importeren",
  "DownloadObjectTypeImportTemplateFileButton.label": "Download het importsjabloon",
  "DownloadObjectTypeImportTemplateFileButton.help": "Download een importsjabloon in execl met de namen van de kolommen die u kunt kiezen",
  "ImportHelpDrawer.tab": "Help bij het importeren van %{objectTypeLabel}",
  "BelongsToListItem.clipboard": "Kopieer de kolomtitel naar het klembord",
  "BelongsToListItem.noKeys": "Geen unieke sleutel beschikbaar",
  "BelongsToImportHelp.title": "Objecttypen geassocieerd met %{objectTypeLabel} gesorteerd op beschikbare importsleutels",
  "FileDropZone.dropZone": "Verplaats en sleep het importbestand naar dit gebied of klik in het gebied om uw bestand te selecteren",
  "EntitiesImporter.tabs.file": "Bestand",
  "EntitiesImporter.tabs.copypaste": "Knippen en plakken",
  "TextAreaImporter.errors.title": "Er zijn fouten opgetreden tijdens het importeren",
  "TextAreaImporter.textarea.placeholder": "Kopieer en plak uw kolommen vanuit Excel met de titel om de eigenschappen te vinden die u wilt bijwerken",
  "TextAreaImporter.help": "Gebruik het tabblad tussen elke kolom door de naam van elke kolom in de eerste rij op te nemen of rechtstreeks vanuit Excel te plakken",
  "ImportOptionsBar.buttons.compare.label": "Vergelijken",
  "ImportOptionsBar.buttons.compare.help": "Start de vergelijking met de gegevens in surfy om de te importeren wijzigingen te bepalen",
  "ImportErrors.errors.title": "Er zijn fouten opgetreden tijdens het importeren",
  "DashboardView.tabs.reports": "Excel-rapporten",
  "IconShape.values.circle": "Cirkel",
  "IconShape.values.rectangle": "Rechthoek",
  "IconShape.values.triangle": "Driehoek",
  "EntityDialogSearchList.NoResult": "Er zijn geen resultaten gevonden. Wis uw filters of wijzig uw zoekopdracht",
  "FieldTypeEntity.edit": "Wijzig %{determinant.defined}",
  "FieldTypeEntity.remove": "Verwijder %{determinant.defined}",
  "FieldTypeEntity.add": "%{determinant.undefined} toevoegen",
  "LegendSelector.title": "Legenda selecteren",
  "LegendSelector.labels.default": "Standaardlegenda",
  "HasManyStandaloneNoData.noData": "Er is geen %{targetObjectTypeLabel} gekoppeld voor %{determinant.defined}",
  "FieldTypeAddress.edit": "Adres wijzigen",
  "FieldTypeAddress.remove": "Adres verwijderen",
  "AutocompleteAddress.autocomplete.placeholder": "Vind hier uw adres",
  "AddressDialog.search": "Vind adres",
  "AddressDialog.validate": "bevestigen",
  "FieldTypePassword.icons.copy": "Kopieer de inhoud van het wachtwoord naar het klembord",
  "FieldTypePassword.icons.generate": "Genereer een uniek wachtwoord",
  "FieldTypeModel3d.Remove": "3D-model verwijderen",
  "FieldTypeModel3d.Upload": "Wijzig het 3D-model",
  "FieldTypeImage.Remove": "Afbeelding verwijderen",
  "FieldTypeImage.Upload": "Verander afbeelding",
  "FieldTypeIcon.Edit": "Verander icoon",
  "FieldTypeIcon.Remove": "Pictogram verwijderen",
  "FieldTypeColor.Remove": "Kleur verwijderen",
  "FieldTypeColor.NoColorHelp": "Selecteer een kleur",
  "FieldTypeColor.NotHexMatchError": "Het veld respecteert het hexadecimale formaat van een kleur niet",
  "CopyImagePathToClipboard.CopyUrl": "Kopie URL",
  "ColorBox.NoColorHelp": "Selecteer een kleur via het palet",
  "ChangeColor.classic": "Selecteer een kleur met de geavanceerde plaat",
  "weight.kilogram": "Kilogram",
  "weight.gram": "Gram",
  "distance.meter": "Meters",
  "distance.centimeter": "Centimeter",
  "FieldTypeIndexBoolean.help": "Wijzig de waarde rechtstreeks",
  "FieldTypeIndexBoolean.values.true": "Ja",
  "FieldTypeIndexBoolean.values.false": "Neen",
  "calculatedProperties.properties.workplacesCount.label": "Aantal werkstations",
  "calculatedProperties.properties.workplacesCount.description": "Het totaal aantal werkplekken in de ruimtes",
  "calculatedProperties.properties.workplacesRatio.label": "Werkstationverhouding",
  "calculatedProperties.properties.workplacesRatio.description": "De werkplekverhouding is het aantal vierkante meters gedeeld door het aantal werkplekken",
  "calculatedProperties.properties.peopleCount.label": "Aantal opdrachten",
  "calculatedProperties.properties.peopleCount.description": "Het aantal toegewezen personen, hetzij direct toegewezen aan ruimtes, hetzij via een werkstation",
  "calculatedProperties.properties.totalPeopleCount.label": "Totaal aantal opdrachten",
  "calculatedProperties.properties.totalPeopleCount.description": "Het totale aantal toegewezen personen, rechtstreeks toegewezen aan ruimtes of via een werkstation",
  "calculatedProperties.properties.peopleRatio.label": "Bezettingsgraad",
  "calculatedProperties.properties.peopleRatio.description": "De bezettingsgraad is het aantal vierkante meters gedeeld door het aantal personen dat direct of via een werkplek aan de ruimtes wordt toegewezen",
  "calculatedProperties.properties.freeWorkplacesCount.label": "Aantal vrije posities",
  "calculatedProperties.properties.freeWorkplacesCount.description": "Totaal aantal vrije posities",
  "calculatedProperties.properties.flexWorkplacesCount.label": "Aantal flexposities",
  "calculatedProperties.properties.flexWorkplacesCount.description": "Totaal aantal flexposities",
  "calculatedProperties.properties.occupancyRate.label": "Bezettingsgraad",
  "calculatedProperties.properties.occupancyRate.description": "Hiermee kunt u de bezettingsgraad van werkstations kennen. Dit is het aantal getroffen personen gedeeld door het aantal werkstations",
  "calculatedProperties.properties.expansionRatio.label": "Overgroeisnelheid",
  "calculatedProperties.properties.expansionRatio.description": "Hiermee kunt u het gebruikspercentage van werkstations kennen. Dit is het omgekeerde van het aantal getroffen mensen gedeeld door het aantal werkstations",
  "calculatedProperties.properties.roomsArea.label": "Gekwalificeerd oppervlak",
  "calculatedProperties.properties.roomsArea.description": "Het gekwalificeerde oppervlak is de som van de oppervlakken van de ruimtes",
  "calculatedProperties.properties.roomsCount.label": "Aantal spaties",
  "calculatedProperties.properties.roomsCount.description": "Het totale aantal spaties",
  "calculatedProperties.properties.sharedWorkplacesCount.label": "Aantal gedeelde werkstations",
  "calculatedProperties.properties.sharedWorkplacesCount.description": "Totaal aantal werkplekken gedeeld door minimaal 2 personen",
  "calculatedProperties.properties.sharedWorkplacesRatio.label": "Tarief gedeeld werkstation",
  "calculatedProperties.properties.sharedWorkplacesRatio.description": "Percentage werkstations gedeeld door minimaal 2 personen vergeleken met alle werkstations",
  "calculatedProperties.properties.flexRatio.label": "Tarief flexwerkplekken",
  "calculatedProperties.properties.flexRatio.description": "Het flexwerkplektarief wordt berekend door het aantal flexwerkplekken te delen door het totaal aantal werkplekken",
  "calculatedProperties.properties.transitWorkplacesCount.label": "Aantal passerende werkplekken",
  "calculatedProperties.properties.transitWorkplacesCount.description": "Aantal tijdelijke werkplekken, deze posities worden niet meegeteld in de vrije posities en zijn niet in flex",
  "calculatedProperties.properties.seatsCount.label": "aantal zitplaatsen",
  "calculatedProperties.properties.seatsCount.description": "Het totaal aantal zetels",
  "calculatedProperties.properties.seatsPeopleRatio.label": "Zitplaatstarief per toewijzing",
  "calculatedProperties.properties.seatsPeopleRatio.description": "Het aantal zetels per getroffen persoon",
  "calculatedProperties.properties.carbonFootprint.label": "Koolstofvoetafdruk",
  "calculatedProperties.properties.carbonFootprint.description": "De CO2-voetafdruk is de hoeveelheid CO2 die wordt uitgestoten",
  "calculatedProperties.properties.totalCapacityCount.label": "Totale capaciteit",
  "calculatedProperties.properties.totalCapacityCount.description": "De totale stoelcapaciteit is de som van het aantal zitplaatsen en de niet-zittende capaciteit op ruimteniveau.",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.label": "Aantal zitplaatsen per werkplek",
  "calculatedProperties.properties.totalCapacityWorkplaceCountRatio.description": "Het aantal plaatsen per werkplek is de totale capaciteit van de ruimtes gedeeld door het aantal werkstations. Hierdoor kunnen we het aantal plaatsen begrijpen op basis van het aantal werkstations",
  "DeleteMultipleDialog.title": "Verwijder %{determinants.undefined}",
  "DeleteMultipleDialog.content": "U staat op het punt <b>%{determinants.undefined}</b> te verwijderen. Deze actie is niet ongedaan te maken en kan gevolgen hebben. Weet u zeker dat u deze actie wilt uitvoeren?",
  "DeleteMultipleDialog.cancel.label": "Annuleren",
  "DeleteMultipleDialog.cancel.help": "Verwijdering ongedaan maken",
  "DeleteMultipleDialog.delete.label": "verwijderen",
  "DeleteMultipleDialog.delete.help": "%{determinants.defined} definitief verwijderen",
  "DownloadTableToExcelIconButton.help": "Exporteren %{determinants.defined} geselecteerd",
  "DeleteMultipleEntities.help": "Verwijder geselecteerde %{determinants.defined}",
  "EntityCreateModeSelect.open-on-create.text": "Open na creatie",
  "EntityCreateModeSelect.open-on-create.help": "Zodra uw object is gemaakt, wordt u doorgestuurd naar de objectvisualisatiepagina om de eigenschappen en associaties ervan te bekijken",
  "EntityCreateModeSelect.keep-creating.text": "Ga door met cre\xEBren",
  "EntityCreateModeSelect.keep-creating.help": "Met deze optie kunt u meerdere objecten achter elkaar blijven maken, terwijl u de eigenschappen van de oude creatie behoudt.",
  "EntityCreateModeSelect.edit-on-create.text": "Bewerken na creatie",
  "EntityCreateModeSelect.edit-on-create.help": "Zodra uw object is gemaakt, wordt u doorgestuurd naar de objectbewerkingspagina om de eigenschappen en koppelingen ervan te voltooien.",
  "TableView.options": "Opties",
  "ErrorImpossibleToFindTheEntity.text": "De gezochte %{determinant.defined} kan niet worden gevonden",
  "ErrorImpossibleToFindTheEntities.text": "Kon het gezochte %{determinants.defined} niet vinden",
  "EntityPropertyTypesMandatoryNotRespected.title": "De volgende eigenschappen zijn vereist",
  "entity.properties.mandatory": "De eigenschap %{name} is vereist.",
  "entity.properties.calculated": "De eigenschap %{name} wordt automatisch berekend.",
  "entity.properties.readonly-lock": "De eigenschap %{name} is alleen-lezen en kan niet vanaf deze pagina worden gewijzigd.",
  "EntityHasManyProperties.associations.others": "Associaties voor %{determinant.defined}",
  "EntityHasManyProperties.associations.reporting": "Rapportageassociaties voor %{determinant.defined}",
  "EntityHasManyProperties.associations.security": "Beveiligingsassociaties voor %{determinant.defined}",
  "EntitiesView.NoItem": "Er is geen %{objectType} . U kunt uw eerste %{objectType} maken met behulp van de onderstaande knop",
  "DeleteDialog.title": "Verwijder %{determinant.undefined}",
  "DeleteDialog.content": "U staat op het punt <b>%{determinant.undefined}</b> te verwijderen. Deze actie is niet ongedaan te maken en kan gevolgen hebben. Weet u zeker dat u deze actie wilt uitvoeren?",
  "DeleteDialog.cancel.label": "Annuleren",
  "DeleteDialog.cancel.help": "Verwijdering ongedaan maken",
  "DeleteDialog.delete.label": "verwijderen",
  "DeleteDialog.delete.help": "%{determinant.defined} definitief verwijderen",
  "ExportQueryNodeToFileButton.help.list": "Downloaden in Excel %{determinants.defined}",
  "entity.excel.headers.count": "%{label} :Nummer",
  "entity.properties.externalId.label": "Externe sleutel",
  "entity.properties.externalId.description": "Dit veld kan worden gebruikt om de correspondentiesleutel in andere software te onthouden",
  "entity.properties.createdAt.label": "Aanmaakdatum",
  "entity.properties.createdAt.description": "Datum van creatie in Surfy, hiermee kunt u de geschiedenis van creatie in Surfy kennen",
  "entity.properties.userCompanyCreatedBy.label": "Gemaakt door gebruiker",
  "entity.properties.userCompanyCreatedBy.description": "Gemaakt door deze gebruiker in Surfy, kunt u de aanmaakgeschiedenis in Surfy kennen",
  "entity.properties.userCompanyCreatedById.label": "ID van de gebruiker die het heeft gemaakt",
  "entity.properties.userCompanyCreatedById.description": "Aangemaakt op basis van de identificatie van deze gebruiker in Surfy, kunt u de aanmaakgeschiedenis in Surfy kennen",
  "entity.properties.userCompanyUpdatedById.label": "Identificatie van de gebruiker die heeft gewijzigd",
  "entity.properties.userCompanyUpdatedById.description": "Bijgewerkt door de identificatie van deze gebruiker in Surfy, kunt u de aanmaakgeschiedenis in Surfy kennen",
  "entity.properties.userCompanyUpdatedBy.label": "Bijgewerkt door gebruiker",
  "entity.properties.userCompanyUpdatedBy.description": "Bijgewerkt door deze gebruiker in Surfy, kunt u de geschiedenis van de wijziging in Surfy kennen",
  "entity.properties.updatedAt.label": "Updatedatum",
  "entity.properties.updatedAt.description": "Updatedatum in Surfy, hiermee kunt u de geschiedenis van wijzigingen kennen",
  "entity.delete.button.label": "verwijderen",
  "entity.delete.button.help": "Verwijder %{determinant.defined} %{name}",
  "entity.cancel": "Annuleren",
  "entity.see.label": "zien",
  "entity.see.help": "Zie %{determinant.defined} %{name}",
  "entity.views.dataquality.help": "Rapporten en acties voor datakwaliteit voor %{determinants.defined}",
  "entity.views.dataquality.label": "Data kwaliteit",
  "entity.views.list.help": "Lijst %{determinants.defined}",
  "entity.views.list.label": "Oplijsten",
  "entity.views.import.help": "Importeer %{determinants.undefined}",
  "entity.views.import.label": "Importeren",
  "entity.views.details.help": "Zie %{determinant.defined} %{name}",
  "entity.views.details.label": "zien",
  "entity.views.create.help": "Maak %{determinant.undefined} aan",
  "entity.views.create.label": "scheppen",
  "entity.views.edit.help": "Bewerk %{determinant.defined} %{name}",
  "entity.views.edit.label": "Bewerken",
  "entity.views.dashboard.help": "Dashboard voor %{determinant.defined} %{name}",
  "entity.views.dashboard.label": "Dashboard",
  "entity.create.validate.help": "Valideer de creatie voor %{determinant.defined}",
  "entity.create.validate.label": "Valideer de creatie",
  "entity.create.button.help": "Begin met cre\xEBren voor %{determinant.defined}",
  "entity.create.button.label": "Maak %{determinant.defined}",
  "entity.create.association.help": "Begin met cre\xEBren voor %{determinant.undefined}",
  "entity.create.association.label": "Maak %{determinant.undefined} aan",
  "entity.update.button.label": "Besparen",
  "entity.update.button.help": "Bespaar %{determinant.defined} %{name}",
  "entity.createAndAssociate.button.label": "Cre\xEBer en associeer",
  "entity.createAndAssociate.button.help": "Maak en koppel %{determinant.undefined}",
  "entity.associate.button.label": "Associ\xEBren",
  "entity.associate.button.help": "Associatie %{determinant.undefined}",
  "entity.back": "Rug",
  "WorkCanvas.Options.ZoomCanvasOption.label.enable": "Activeer het vergrootglas rond de muis",
  "WorkCanvas.Options.ZoomCanvasOption.label.disable": "Schakel het vergrootglas rond de muis uit",
  "WorkCanvas.Options.ZoomCanvasOption.help.enable": "Door het vergrootglas te activeren, houdt u het overzicht over een gebied of verdieping en ziet u het muisgedrag nauwkeurig",
  "WorkCanvas.Options.ZoomCanvasOption.help.disable": "Stop het muisvergrootglas",
  "WorkCanvas.Options.AddSegmentPointOption.label.enable": "Voeg een hoekpunt toe aan een segment",
  "WorkCanvas.Options.AddSegmentPointOption.label.disable": "Stop met het toevoegen van een hoekpunt aan een segment",
  "WorkCanvas.Options.AddSegmentPointOption.help.enable": "Door een hoekpunt aan een segment toe te voegen, kunt u overal een punt plaatsen zonder rekening te houden met andere punten",
  "WorkCanvas.Options.AddSegmentPointOption.help.disable": "Stop met het maken van hoekpunten op segmenten",
  "WorkCanvas.Options.AddSegmentPointOption.description": "Selecteer een spatie om een \u200B\u200Bhoekpunt op een van de segmenten te kunnen maken",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.enable": "Schakel omkering van de ori\xEBntatie van het maken van hoekpunten in",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.label.disable": "Schakel de inversie van de ori\xEBntatie voor het maken van hoekpunten uit",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.enable": "Als u de omkering van de ori\xEBntatie voor het maken van hoekpunten inschakelt, kunt u de richting van het maken van hoekpunten wijzigen",
  "WorkCanvas.Options.ReversePointCreationOrientationOption.help.disable": "Schakel inversie uit om de initi\xEBle richting van het maken van de hoekpunten te vinden",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.enable": "Schakel inversie van de rechte hoek in voor het maken van hoekpunten",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.label.disable": "Schakel de omkering van de rechte hoek uit voor het maken van hoekpunten",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.enable": "Als u inversie inschakelt, kunt u de rechte hoek gebruiken terwijl u hoekpunten op het andere segment maakt",
  "WorkCanvas.Options.ReverseOrthogonalPointOption.help.disable": "Als u de inversie uitschakelt, kunt u de rechte hoek op het initi\xEBle segment gebruiken",
  "LoadingSvgCircle.pleaseWait": "Een ogenblik geduld tijdens het synchroniseren",
  "WorkCanvas.Options.AddRoomPointOption.label.enable": "Voeg een hoekpunt toe",
  "WorkCanvas.Options.AddRoomPointOption.label.disable": "Stop met het toevoegen van een hoekpunt",
  "WorkCanvas.Options.AddRoomPointOption.help.enable": "Door een hoekpunt toe te voegen, kunt u een vorm nauwkeuriger bewerken",
  "WorkCanvas.Options.AddRoomPointOption.help.disable": "Stop met het maken van hoekpunten",
  "WorkCanvas.Options.SplitPolygoneOption.label": "Scheid de ruimte",
  "WorkCanvas.Options.SplitPolygoneOption.help": "Cre\xEBer 2 ruimtes vanuit een andere ruimte door 2 hoekpunten te kiezen",
  "WorkCanvas.Options.SplitRoomPointOption.help": "Door de hoekpunten te scheiden, kunt u voor elk segment meerdere hoekpunten hergebruiken en zo afzonderlijke ruimtes cre\xEBren",
  "WorkCanvas.Options.SplitRoomPointOption.label": "Splits de bovenkant",
  "WorkCanvas.Options.MergeRoomPointsOption.help": "Door hoekpunten samen te voegen, kunt u hetzelfde hoekpunt voor verschillende ruimtes hergebruiken",
  "WorkCanvas.Options.MergeRoomPointsOption.label": "Hoekpunten samenvoegen",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.help": "Verwijder hoekpunten uit de ruimte",
  "WorkCanvas.Options.DeleteRoomPointRoomOption.label": "Verwijder geselecteerde hoekpunten",
  "WorkCanvas.Options.ZoomOnEdgePoints.help": "Zoom in op \xE9\xE9n of meerdere punten, zodat je rustig kunt werken",
  "WorkCanvas.Options.ZoomOnEdgePoints.label": "Zoom in op punten",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.enable": "Objecttype verplaatsen",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.label.disable": "Stop met bewegen",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.enable": "Verplaats objecttype op plan",
  "WorkCanvas.Options.MoveWorkplaceTypeItemTypeOption.help.disable": "Stop met het verplaatsen van het objecttype",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.help": "Verwijder het objecttype van het werkstationtype",
  "WorkCanvas.Options.DeleteWorkplaceTypeItemTypeOption.label": "Objecttype verwijderen",
  "WorkCanvas.Options.DeleteItemTypePointsOption.help": "Verwijder hoekpunten uit het objecttype",
  "WorkCanvas.Options.DeleteItemTypePointsOption.label": "Verwijder geselecteerde hoekpunten",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.enable": "Voeg een vorm toe",
  "WorkCanvas.Options.AddItemTypeShapeOption.label.disable": "Stop met het toevoegen van vorm",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.enable": "Voeg een vorm voor een objecttype toe aan het plan",
  "WorkCanvas.Options.AddItemTypeShapeOption.help.disable": "Stop met het maken van de vorm",
  "WorkCanvas.Options.AddItemTypeShapeSaveOption.help": "Sla het type object op dat wordt gemaakt",
  "WorkCanvas.Options.AddItemTypePointOption.label.enable": "Voeg een hoekpunt toe",
  "WorkCanvas.Options.AddItemTypePointOption.label.disable": "Stop met het toevoegen van een hoekpunt",
  "WorkCanvas.Options.AddItemTypePointOption.help.enable": "Door een hoekpunt toe te voegen, kunt u een vorm nauwkeuriger bewerken",
  "WorkCanvas.Options.AddItemTypePointOption.help.disable": "Stop met het maken van hoekpunten",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.enable": "Verplaats spaties",
  "WorkCanvas.Options.ToggleMoveRoomOption.label.disable": "Stop met reizen",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.enable": "Schakel bewegende ruimtes in op het plan",
  "WorkCanvas.Options.ToggleMoveRoomOption.help.disable": "Stop met het verplaatsen van ruimtes",
  "WorkCanvas.Options.ToggleMoveRoomOption.description": "Eenmaal geactiveerd, selecteert u een ruimte en kunt u deze verplaatsen",
  "WorkCanvas.Options.DuplicateShapesOption.label": "Dubbele vormen",
  "WorkCanvas.Options.DuplicateShapesOption.help": "Dupliceer vormen zonder eigenschappen om snel objecten of werkstations op het plan te maken",
  "CancelDuplicateShapsToRoomMouse.help": "Vormduplicatie ongedaan maken",
  "ToggleWorkplaceFreeConditionTypeIconButton.or": "Bekijk vrije werkplekken voor alle aangevraagde dagen",
  "ToggleWorkplaceFreeConditionTypeIconButton.and": "Bekijk vrije werkplekken voor minimaal \xE9\xE9n van de aangevraagde dagen",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.false": "Kleur de vrije posities %{day}",
  "FreeWorkplacesDayListItem.updateFreeWorkplaceVisibleDay.true": "Stop met het kleuren van gratis berichten %{day}",
  "FreeWorkplacesDayList.title": "Bekijk vrije plaatsen %{days}",
  "FreeWorkplacesDayList.conditions.and": "En",
  "FreeWorkplacesDayList.conditions.or": "Of",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.enable": "Kleur de kruispunten",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.label.disable": "Stop met het kleuren van kruispunten",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.enable": "Bekijk op het kleurplan de werkplekken die passeren",
  "WorkCanvas.Options.ToggleColorizeIsTransitWorkplacesOption.help.disable": "Zie passerende werkplekken niet meer anders op het plan",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.enable": "Kleur gedeelde berichten",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.label.disable": "Stop met het kleuren van gedeelde berichten",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.enable": "Zie op het kleurplan de werkplekken die gedeeld worden door minimaal 2 personen",
  "WorkCanvas.Options.ToggleColorizeIsSharedWorkplacesOption.help.disable": "Zie gedeelde werkplekken niet meer anders in termen van",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.enable": "Kleur objecten zonder associatie",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.label.disable": "Stop met het kleuren van objecten zonder associatie",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.enable": "Bekijk de vrije objecten op de kaart",
  "WorkCanvas.Options.ToggleColorizeFreeItemOption.help.disable": "Zie vrije objecten niet langer anders op de kaart",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.enable": "Kleur de reserveerbare posities",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.label.disable": "Stop met het inkleuren van reserveerbare posities",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.enable": "Bekijk op het kleurplan de werkplekken die reserveerbaar zijn",
  "WorkCanvas.Options.ToggleColorizeBookableWorkplacesOption.help.disable": "Zie reserveerbare werkplekken niet meer anders qua",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.enable": "Kleur de vrije posities",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.label.disable": "Stop met het inkleuren van open posities",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.enable": "Bekijk beschikbare posities op de kaart",
  "WorkCanvas.Options.ToggleColorizeFreeWorkplacesOption.help.disable": "Vrije posities niet meer anders zien qua plan",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.enable": "Kleurflexposities",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.label.disable": "Stop met het kleuren van flexposities",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.enable": "Bekijk de flexposities op de kaart",
  "WorkCanvas.Options.ToggleColorizeFlexWorkplacesOption.help.disable": "Flexposities niet meer anders zien qua plan",
  "WorkCanvas.Options.CalibrateLayoutOption.help.enable": "Met Calibrate Plan kunt u alle ruimtes vergroten of verkleinen, of ze allemaal op het plan verplaatsen",
  "WorkCanvas.Options.CalibrateLayoutOption.help.disable": "Stop met het kalibreren van het plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.enable": "Kalibreer het plan",
  "WorkCanvas.Options.CalibrateLayoutOption.label.disable": "Stop met het kalibreren van het plan",
  "CalibrateLayoutDrawer.title": "Kalibreer het plan",
  "CalibrateLayoutDrawer.options.mapScale.label": "Planschaal uitlijnen",
  "CalibrateLayoutDrawer.options.mapScale.help": "Past de schaalfactor toe op de schaalelementen (tekstlengte en -grootte)",
  "CalibrateLayoutDrawer.options.inputs.scale.label": "Schaal factor",
  "CalibrateLayoutDrawer.options.inputs.step.label": "Vertaalwaarde",
  "CalibrateLayoutDrawer.options.inputs.translate.x.label": "X-as",
  "CalibrateLayoutDrawer.options.inputs.translate.y.label": "Y-as",
  "CalibrateLayoutDrawer.options.reduce.label": "Verminderen",
  "CalibrateLayoutDrawer.options.save.label": "Opnemen",
  "CalibrateLayoutDrawer.options.save.help": "Sla de kalibratie op in de planning",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.enable": "Schakel de weergave van pictogrammen op de 2D-kaart in",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.label.disable": "Schakel de weergave van pictogrammen op de kaart uit",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.enable": "De iconen die bij de soorten ruimtes horen, maken het makkelijker om de soorten ruimtes op de plattegrond te visualiseren",
  "WorkCanvas.Options.ToggleIconizedRoomTypeOption.help.disable": "Ruimte-informatie weergeven",
  "WorkCanvasToggleOptionHelp.shortcut": "Sneltoets: <b>%{shortcut}</b>",
  "WorkCanvasShortcutTooltipHelp.help": "Sneltoets: <b>%{shortcut}</b>",
  "WorkCanvas.Options.ZoomOutOption.label": "Zoom uit op de kaart",
  "WorkCanvas.Options.ZoomOutOption.help": "Zoom uit op de kaart door de muispositie te centreren",
  "WorkCanvas.Options.ZoomOutOption.description": "U kunt het muiswiel en uw touchpad gebruiken om uit te zoomen",
  "WorkCanvas.Options.ZoomOnMousePosition.help": "Zoom in op de muispositie om nauwkeuriger op een gebied te kunnen werken",
  "WorkCanvas.Options.ZoomOnMousePosition.label": "Zoom naar muispositie",
  "WorkCanvasLoadingIcon.title": "Het plan laden",
  "WorkCanvas.Options.ZoomOnItemsOption.help": "Zoom in op \xE9\xE9n of meerdere objecten om preciezer te werken",
  "WorkCanvas.Options.ZoomOnItemsOption.label": "Zoom in op de selectie",
  "WorkCanvas.Options.ZoomOnDimensionsOption.label": "Zoom in op toewijzingslagen",
  "WorkCanvas.Options.ZoomOnDimensionsOption.help": "Zoom direct naar de opdrachtlagen waarin je kunt reserveren op het plan",
  "WorkCanvas.Options.ZoomInOption.label": "Zoom in op de kaart",
  "WorkCanvas.Options.ZoomInOption.help": "Zoom in op de kaart door naar de linkerbovenhoek van het scherm te centreren",
  "WorkCanvas.Options.ZoomInOption.description": "U kunt het muiswiel en uw touchpad gebruiken om te zoomen",
  "WorkCanvas.Options.ToggleSelectModeOption.help.enable": "Verkrijg de planopties om te kunnen inzoomen of de details van de vormen te bekijken en de sneltoetsen te activeren. U kunt ook in het plan klikken om de manipulatie te activeren",
  "WorkCanvas.Options.ToggleSelectModeOption.help.disable": "???",
  "WorkCanvas.Options.ToggleSelectModeOption.label.enable": "Begin met manipulatie van de werkruimte",
  "WorkCanvas.Options.ToggleSelectModeOption.label.disable": "Stop manipulatie van de werkruimte",
  "WorkCanvas.Options.ToggleSelectModeOption.description": "U kunt meerdere vormen selecteren door <b>SHIFT</b> ingedrukt te houden en op de vormen te klikken",
  "WorkCanvas.Options.ToggleEditModeOption.label.enable": "Schakel de planbewerkingsmodus in",
  "WorkCanvas.Options.ToggleEditModeOption.label.disable": "Schakel de planbewerkingsmodus uit",
  "WorkCanvas.Options.ToggleEditModeOption.help.enable": "Door de planbewerkingsmodus te activeren, kunt u vormen maken en verplaatsen of ruimtes cre\xEBren",
  "WorkCanvas.Options.ToggleEditModeOption.help.disable": "Schakel de planbewerkingsmodus uit om terug te keren naar de planleesmodus",
  "WorkCanvas.Options.ToggleEditModeOption.description": "Bij het roteren van objecten en werkstations wordt standaard een hoek van 45\xB0 toegepast. Om deze te deactiveren gebruikt u de <b>SHIFT-</b> toetsenbordtoets",
  "WorkCanvas.Options.FitToViewOption.label": "Centreer het plan om alles te zien",
  "WorkCanvas.Options.FitToViewOption.help": "Hiermee krijgt u een overzicht van het plan",
  "HeatMapSelection.title": "Kleur de ruimtes met een hittekaart om de dichtheden te begrijpen. De hittekaarten kunnen momenteel niet als afbeeldingen worden ge\xEBxporteerd",
  "HeatMapSelection.heatmaps.seatsCount.label": "Zitdichtheid",
  "HeatMapSelection.heatmaps.seatsCount.description": "Kleur de ruimtes volgens het aantal zitplaatsen",
  "HeatMapSelection.heatmaps.workplacesCount.label": "Dichtheid van werkstations",
  "HeatMapSelection.heatmaps.workplacesCount.description": "Kleur de ruimtes volgens het aantal werkplekken",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.label": "Dichtheid van werkstationtoewijzingen",
  "HeatMapSelection.heatmaps.workplaceAffectationsCount.description": "Kleur de ruimtes volgens het aantal werkplekopdrachten",
  "HeatMapSelection.heatmaps.carbonFootprintCount.label": "Koolstofvoetafdrukdichtheid van meubilair",
  "HeatMapSelection.heatmaps.carbonFootprintCount.description": "Kleurruimtes volgens de ecologische voetafdruk van het meubilair",
  "FurnituresSelectionDragZone.help": "Groep verplaatsen",
  "FurnituresSelection.move": "Verplaats de hele groep",
  "WorkCanvas.Options.TextAnchorOption.label.enable": "Stel de weergavetekstlocatie in",
  "WorkCanvas.Options.TextAnchorOption.label.disable": "Stop met het beheren van de displaytekst",
  "WorkCanvas.Options.TextAnchorOption.help.enable": "Displaytekst verplaatsen",
  "WorkCanvas.Options.TextAnchorOption.help.disable": "Stop met het verplaatsen van de displaytekst",
  "TextAnchorDrawer.title": "Wijzig de weergavetekstlocatie voor %{determinant.defined} %{name}",
  "WorkCanvas.Options.TextAnchorDrawer.label.enable": "Displaytekst verplaatsen",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.label": "Pas de tekstpositie aan",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.createAnchor.help": "Hiermee kunt u de aanpassing van de positie van de tekst van het plan activeren",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.label": "Ankerweergave inschakelen",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.enableAnchor.help": "Hiermee kunt u de weergave van het segment en het ankerpunt voor deze ruimte activeren",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.label": "Tekstpositie opnieuw instellen",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textPosition.help": "Met deze optie wordt de tekstpositie voor deze ruimte teruggezet naar de oorspronkelijke locatie",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.label": "Ankerpositie opnieuw instellen",
  "WorkCanvas.Options.TextAnchorDrawer.buttons.reset.textAnchor.help": "Deze optie retourneert de ankerpositie voor deze ruimte naar de oorspronkelijke locatie",
  "ShapeTextAnchorDrawer.empty": "Selecteer een compatibele vorm om de displaytekst te verplaatsen",
  "IconsPicker.DisplayAll.text": "Toon alles",
  "IconsPicker.DisplayAll.help": "Wees voorzichtig, het laden kan een beetje lang duren.",
  "IconsPicker.close": "Pictogramselectie sluiten",
  "IconPickerSearch.SearchPlaceholder": "Zoek naar een pictogram met minimaal 3 letters",
  "EntitiesAutocomplete.searchEmpty.help.false": "Selecteer %{determinants.defined} zonder %{objectTypeName}",
  "EntitiesAutocomplete.searchEmpty.help.true": "Keer terug naar de standaard zoekmodus",
  "SearchFieldString.searchEmpty.help.false": "Zoek naar lege of waardeloze elementen",
  "SearchFieldString.searchEmpty.help.true": "Schakel standaard zoeken opnieuw in",
  "SearchFilters.buttons.clear.label": "Wis alle filters",
  "SearchFilters.buttons.clear.help": "Wis alle filters en breng ze terug naar hun oorspronkelijke staat om ervoor te zorgen dat u alle beschikbare entiteiten kunt zien",
  "RightSearchFilterDrawer.filter": "Filter %{determinants.defined}",
  "RightSearchFilterDrawer.tabLabel": "Filter",
  "RightSearchFilterDrawer.buttons.clear.label": "Wis alle filters",
  "RightSearchFilterDrawer.buttons.clear.help": "Wis alle filters en breng ze terug naar hun oorspronkelijke staat om ervoor te zorgen dat u alle beschikbare entiteiten kunt zien",
  "PropertSelectorDrawer.help": "Selecteer de eigenschappen die u in de tabel wilt weergeven",
  "PropertSelectorDrawer.options.reset.label": "Selectie opnieuw instellen",
  "PropertSelectorDrawer.options.reset.help": "Breng de selectie van eigenschappen terug naar hun oorspronkelijke staat",
  "PropertSelectorDrawer.tabLabel": "Eigenschappen",
  "TableSelectionAllCheckbox.checked.true": "Deselecteer alles",
  "TableSelectionAllCheckbox.checked.false": "Selecteer alles",
  "TableSelectionAllCheckbox.help": "Selecteer of deselecteer alle rijen (inclusief de rijen die niet zichtbaar zijn in de gepagineerde lijst)",
  "TableOptionsRow.checked.true": "Deselecteer alles",
  "TableOptionsRow.checked.false": "Selecteer alles",
  "TableOptionsRow.help": "Selecteer of deselecteer alle lijnen",
  "ErrorTextZone.reload": "Herhaal de handeling",
  "ReportErrorSteps.report.title": "Er is zojuist een fout opgetreden",
  "ReportErrorSteps.report.description": "Deze fout is aan onze teams gemeld en we zullen proberen deze zo snel mogelijk te corrigeren.",
  "ReportErrorSteps.report.steps.title": "Je kunt het in volgorde proberen",
  "ReportErrorSteps.report.steps.reload": "Laad de pagina opnieuw en kijk of de fout is opgelost",
  "ReportErrorSteps.report.steps.logout": "Verbreek de verbinding en keer terug naar deze pagina nadat u opnieuw verbinding heeft gemaakt",
  "ReportErrorSteps.report.steps.contact": "Neem contact met ons op, zodat wij u zo snel mogelijk een alternatief kunnen bieden",
  "ReportErrorByMailButton.label": "Neem contact met ons op",
  "RefreshPageButton.label": "Herlaad pagina",
  "Errors.networkError": "Er zijn verbindings- of netwerkproblemen gedetecteerd. Wacht even en probeer het over een paar seconden opnieuw",
  "ShowEntityDrawer.title.show": "Zie %{determinant.defined}",
  "ShowEntityDrawer.title.listItem": "Zie informatie voor %{determinant.defined} in de zijbalk",
  "EditEntityDrawer.title.edit": "Bewerk %{determinant.defined}",
  "RightDrawerContent.close": "Sluit het rechterpaneel door op het kruisje te klikken.",
  "DropDownOptions.moreOptions": "Bekijk meer opties voor %{determinant.defined} %{name}",
  "BuildingFloorsList.title": "Navigeer door de verdiepingen",
  "RefetchEntityButton.refetch": "Gegevens opnieuw laden",
  "RefetchEntitiesButton.refetch": "Herlaad zichtbare objectgegevens",
  "RefetchObjectTypeIcon.help": "Gegevens voor %{determinant.defined} opnieuw laden",
  "ImpactButtonReload.help.single": "Berekende gegevens bijwerken voor %{determinant.defined}",
  "ImpactButtonReload.help.list": "Berekende gegevens bijwerken voor %{determinants.defined}",
  "EditInlineToggleIconButton.edit.label": "Bewerken",
  "EditInlineToggleIconButton.edit.help": "Wijzig de eigenschappen voor %{determinant.defined} rechtstreeks op deze pagina",
  "EditInlineToggleIconButton.cancel.help": "Stop met bewerken zonder op te slaan",
  "ConfirmationButtons.confirm": "Bevestig de voltooiing van de actie",
  "ConfirmationButtons.cancel": "Annuleren",
  "ConfirmationButtons.loading": "De actie wordt uitgevoerd, een ogenblik geduld",
  "EmailNotVerified.errorMessage": "Valideer uw e-mailadres ( %{email} ). Eenmaal gevalideerd kunt u de verbinding verbreken en vervolgens opnieuw verbinding maken om toegang te krijgen tot Surfy",
  "NoRoleAssociated.noRole": "Er lijkt geen rol te zijn gekoppeld aan uw gebruiker voor het bedrijf %{tenant} . Neem contact op met uw beheerder",
  "NoCompanies.title.whatIsSurfy": "Wat is Surfy?",
  "NoCompanies.NoCompanyAssigned": "Je bent aan geen enkel platform gekoppeld, je kunt surfy momenteel niet gebruiken",
  "NoCompanies.whatIsSurfy": "Surfy biedt aan om bouwplannen te digitaliseren om het beheer van de werkomgeving te vergemakkelijken.<br/> Je kunt de Surfy-app gebruiken om<ul><li> ruimtes regelen</li><li> medewerkers toewijzen</li><li> ruimtes opnieuw factureren</li><li> ruimtes analyseren</li><li> het beheren van compliance en regelgeving</li><li> ruimtes verbinden</li><li> aanwezigheidsschema's beheren</li><li> werkplekken reserveren</li></ul>",
  "NoCompanies.whatIsSurfyForTeams": "Surfy biedt aan om bouwplannen te digitaliseren om het beheer van de werkomgeving te vergemakkelijken. Je kunt de Surfy-app gebruiken om<ul><li> beheer uw aanwezigheidsschema</li><li> meld uw aanwezigheid op kantoor</li><li> reserveer een werkplek</li><li> Geef aan dat u telewerkt</li><li> bekijk welke collega's een werkplek op het abonnement hebben gereserveerd</li></ul>",
  "NoCompanies.ContactUs.text": "Log in op uw bedrijfsplatform",
  "NoCompanies.ContactUs.subject": "Toegang tot Surfy",
  "NoCompanies.ContactUs.body": "Hallo, kunt u mij toegang geven tot de Surfy-applicatie? Dankjewel.",
  "NoCompanies.accessSurfy.title": "Waarom heb ik geen toegang tot Surfy?",
  "NoCompanies.accessSurfy.alreadyUsing": "Indien uw bedrijf Surfy al gebruikt, neem dan contact op met uw werkomgevingsmanager om toegang aan te vragen of neem contact met ons op via de volgende link",
  "NoCompanies.accessSurfy.joinTenant": "Sluit u aan bij het platform van uw bedrijf",
  "NoCompanies.notUsing.title": "Maakt jouw bedrijf nog geen gebruik van Surfy?",
  "NoCompanies.knowMore": "Meer informatie over Surfy",
  "AuthenticationButton.connections.google-oauth2.label": "Googlen",
  "AuthenticationButton.connections.google-oauth2.help": "Log in met je Google account",
  "AuthenticationButton.connections.AzureADv2.label": "Office 365",
  "AuthenticationButton.connections.AzureADv2.help": "Meld u aan met uw Microsoft Professional-account via Office 365",
  "AuthenticationButton.connections.auth0.label": "Surfy-account",
  "AuthenticationButton.connections.auth0.help": "Log in met je Surfy-account",
  "Auth0AuthenticationButton.connections.auth0.label": "Surfy-account (open id)",
  "Auth0AuthenticationButton.connections.auth0.help": "Log in met je Surfy-account",
  "EnterpriseConnectionButton.label": "Onderneming",
  "EnterpriseConnectionButton.help": "Log in met uw bedrijfsaccount via speciale authenticatie zoals OKTA of DigitalP@ss",
  "EnterpriseConnectionForm.title": "Voer uw e-mailadres in, zodat wij uw bedrijf kunnen herkennen",
  "EnterpriseConnectionForm.forms.email.placeholder": "E-mail",
  "EnterpriseConnectionForm.error": "Kan uw bedrijf niet identificeren met uw e-mailadres",
  "EnterpriseConnectionForm.buttons.validate.label": "bevestigen",
  "EnterpriseConnectionForm.buttons.validate.help": "Door de e-mail te valideren, leert u uw bedrijf kennen en wordt u naar het juiste authenticatieplatform geleid",
  "EnterpriseConnectionForm.buttons.back.label": "Rug",
  "EnterpriseConnectionForm.buttons.back.help": "Keer terug naar de authenticatiepagina met alle opties",
  "LoginView.loadingPage": "De authenticatiepagina laden",
  "LoginView.connections.google-oauth2.label": "Googlen",
  "LoginView.connections.google-oauth2.help": "Log in met je Google account",
  "LoginView.connections.AzureADv2.label": "Office 365",
  "LoginView.connections.AzureADv2.help": "Meld u aan met uw Microsoft Professional-account via Office 365",
  "LoginView.connections.Username-Password-Authentication.label": "Surfy-account",
  "LoginView.connections.Username-Password-Authentication.help": "Log in met je Surfy-account",
  "LoginView.texts.title": "Verbinding",
  "LoginView.texts.description": "Toegang tot Surfy",
  "LoginView.helpers.register": "Registreer uw bedrijf bij Surfy",
  "LoginView.helpers.moreInfo": "Meer informatie over Surfy",
  "LoginView.helpers.privacy": "Privacybeleid",
  "CustomUserRegisterForm.tabs.login": "Inloggen",
  "CustomUserRegisterForm.tabs.signup": "Register",
  "CustomUserRegisterForm.form.email": "E-mail",
  "CustomUserRegisterForm.form.password": "Wachtwoord",
  "CustomUserRegisterForm.form.firstName": "Voornaam",
  "CustomUserRegisterForm.form.lastName": "Achternaam",
  "CustomUserRegisterForm.form.confirmPassword": "wachtwoordbevestiging",
  "CustomUserRegisterForm.buttons.login.label": "bevestigen",
  "CustomUserRegisterForm.buttons.login.help": "Log in als u al een account heeft",
  "CustomUserRegisterForm.buttons.signup.label": "bevestigen",
  "CustomUserRegisterForm.buttons.signup.help": "Meld je aan voor Surfy als je nog geen account hebt",
  "ReportChart.NoValue": "Geen waarde",
  "ChangeLanguage.title": "Verander de taal",
  "ChangeLanguage.help": "Wijzig de app-taal",
  "DataQualityTable.numberOfLines": "Aantal regels",
  "AllTenantsDataQualityTable.enableAllTenants.label": "Neem alle platforms op",
  "SingleNodeQuery.refetch": "Gegevens opnieuw laden",
  "ListRefetchButton.refetch": "Herlaad zichtbare objectgegevens",
  "ImpactObjectTypeIconButton.refetch": "Herlaad alle gegevens zonder rekening te houden met filters",
  "CollapseSwitchButton.help.true": "Details verbergen",
  "CollapseSwitchButton.help.false": "Zie de details",
  "menu.logout": "Afmelden",
  "menu.tenantOperations": "Synchronisatie",
  "menu.menuLeft.shoppingCart": "Mand",
  "menu.menuLeft.personCompanies": "Aanbieders",
  "menu.menuLeft.workplace": "Persoonlijke werkplekken",
  "menu.menuLeft.security": "Beveiliging",
  "menu.menuLeft.globalSecurity": "Algemene veiligheid",
  "menu.menuLeft.all": "Administratie",
  "menu.menuLeft.operations": "Activiteiten",
  "menu.menuLeft.types": "Typologie\xEBn",
  "menu.menuLeft.roomTypes": "Ruimtetypologie\xEBn",
  "menu.menuLeft.inventory": "Voorraden",
  "menu.menuLeft.people": "Mensen",
  "menu.menuLeft.spaces": "Spaties",
  "menu.menuLeft.organizations": "Organisaties",
  "menu.menuLeft.dimensions": "Analyse lagen",
  "menu.menuLeft.api": "API",
  "menu.menuLeft.authentification": "Authenticatie",
  "menu.menuLeft.globalAdmin": "Algemene administratie",
  "menu.menuLeft.human": "Medewerkers",
  "menu.menuLeft.things": "Meubilair",
  "menu.menuLeft.admin": "Administratie",
  "menu.menuLeft.surfy": "Surfen",
  "menu.menuLeft.partnerExportMapping": "Partners",
  "menu.menuLeft.personType": "Typologie\xEBn",
  "menu.menuLeft.personRelations": "Relaties",
  "menu.menuLeft.affectations": "Opdrachten",
  "menu.menuLeft.buildings": "Gebouwen",
  "menu.menuLeft.thingsType": "Typologie\xEBn",
  "menu.menuLeft.spacePoints": "Punten",
  "menu.menuLeft.adminReporting": "Rapportage",
  "menu.menuLeft.adminCostCenterReporting": "Kostenplaats",
  "menu.menuLeft.adminDimensionReporting": "Dimensies",
  "menu.menuLeft.adminRoomTypeReporting": "Soort ruimtes",
  "menu.menuLeft.adminOrganizationReporting": "Organisaties",
  "menu.menuLeft.adminRoomTypeGroupReporting": "Ruimtetypologiegroepen",
  "menu.menuLeft.buildingFacts": "Gebouwgegevens met tijdstempel",
  "menu.menuLeft.itemsFact": "Objectgegevens met tijdstempel",
  "menu.menuLeft.segments": "Segmenten",
  "menu.menuLeft.connectors": "Connectoren",
  "menu.menuLeft.planning": "Schema's",
  "menu.menuLeft.bookings": "Reserveringen",
  "menu.menuLeft.help": "Hulp",
  "menu.menuLeft.company": "Platformen",
  "ReduceMenuSwitch.open.true": "Vouw menu uit",
  "ReduceMenuSwitch.open.false": "Vouw het menu samen om te profiteren van de werkruimte",
  "LogoutMenuLink.logout": "Afmelden",
  "HelpPortalListItemLink.label": "Hulpportaal",
  "HelpPortalListItemLink.help": "Ontdek het Surfy-helpportaal met al onze tutorials en gebruikershandleidingen",
  "ChangeLogListItemLink.label": "nieuwtjes",
  "ChangeLogListItemLink.help": "Ken de nieuwe functies en veranderingen in Surfy",
  "DisplayRoomTexts.dragOption": "Houd ingedrukt en wijzig de volgorde van weergave van eigenschappen op het plan door de velden naar boven of beneden te verplaatsen",
  "DisplayRoomTexts.roomPeopleDimensions.label": "Buurt",
  "DisplayRoomTexts.roomPeopleDimensions.help": "Toon de buurt wel of niet op de kaart",
  "DisplayRoomTexts.roomSeatsCount.label": "aantal zitplaatsen",
  "DisplayRoomTexts.roomSeatsCount.help": "Toon wel of niet het aantal zitplaatsen op de kaart",
  "DisplayRoomTexts.roomCapacity.label": "Ruimtecapaciteit",
  "DisplayRoomTexts.roomCapacity.help": "Toon wel of niet de ruimtecapaciteit op het plan",
  "DisplayRoomTexts.roomCostCenter.label": "Kostenplaats",
  "DisplayRoomTexts.roomCostCenter.help": "Toon wel of niet de ruimtekostenplaats op het plan",
  "DisplayRoomTexts.roomMergedName.label": "Samengevoegde naam",
  "DisplayRoomTexts.roomMergedName.help": "Wel of niet de samengevoegde naam van de ruimte op het plan weergeven, deze naam combineert de weergavenaam en de naam van de ruimte",
  "DisplayRoomTexts.roomName.label": "Naam van de ruimte",
  "DisplayRoomTexts.roomName.help": "Toon wel of niet de naam van de ruimte op het plan",
  "DisplayRoomTexts.roomPrettyName.label": "Weergavenaam",
  "DisplayRoomTexts.roomPrettyName.help": "Toon of niet de weergavenaam van de ruimte op het plan",
  "DisplayRoomTexts.roomArea.label": "Oppervlak",
  "DisplayRoomTexts.roomArea.help": "Toon wel of niet de oppervlakte van de ruimte op de plattegrond",
  "DisplayRoomTexts.roomType.label": "Typologie van de ruimte",
  "DisplayRoomTexts.roomType.help": "Toon of niet de ruimtetypologie",
  "DisplayRoomTexts.roomPerimeter.label": "Omtrek",
  "DisplayRoomTexts.roomPerimeter.help": "Toon of niet de omtrek van de ruimte op het plan",
  "DisplayRoomTexts.roomOrganizationLevel1.label": "Dienst",
  "DisplayRoomTexts.roomOrganizationLevel1.help": "Geef de naam van de ruimtedienst wel of niet weer op het plan",
  "DisplayRoomTexts.roomOrganizationTopLevel.label": "Richting",
  "DisplayRoomTexts.roomOrganizationTopLevel.help": "Toon wel of niet de naam van de richting van de ruimte op de plattegrond",
  "DisplayRoomTexts.roomPeople.label": "Mensen toegewezen aan ruimtes",
  "DisplayRoomTexts.roomPeople.help": "Geef op het plan de namen weer van de mensen die aan deze ruimte zijn toegewezen of niet",
  "DisplayRoomTexts.roomWorkplaceAffectations.label": "Mensen die aan werkstations zijn toegewezen",
  "DisplayRoomTexts.roomWorkplaceAffectations.help": "Geef al dan niet de namen weer van de mensen die zijn toegewezen aan werkstations in deze ruimte op het plan",
  "DisplayRoomTexts.roomPeopleCount.label": "Aantal opdrachten",
  "DisplayRoomTexts.roomPeopleCount.help": "Geef op het plan het aantal mensen weer dat aan deze ruimte is toegewezen of niet",
  "DisplayRoomTexts.roomPeopleRatio.label": "Bezettingsgraad",
  "DisplayRoomTexts.roomPeopleRatio.help": "Toon wel of niet de ruimtebezettingsgraad op het plan",
  "DisplayRoomTexts.roomWorkplacesCount.label": "Aantal werkstations",
  "DisplayRoomTexts.roomWorkplacesCount.help": "Toon wel of niet het aantal werkplekken in de ruimte op het plan",
  "DisplayRoomTexts.roomWorkplacesRatio.label": "Werkstationverhouding",
  "DisplayRoomTexts.roomWorkplacesRatio.help": "Toon wel of niet de verhouding tussen werkplekken en de ruimte op het plan",
  "DisplayRoomTexts.roomOccupancyRate.label": "Bezettingsgraad",
  "DisplayRoomTexts.roomOccupancyRate.help": "Geef de bezettingsgraad van de ruimte wel of niet weer op het plan",
  "DisplayRoomTexts.roomExpansionRatio.label": "Overgroeisnelheid",
  "DisplayRoomTexts.roomExpansionRatio.help": "Toon wel of niet het uitbreidingspercentage van de ruimte op het plan",
  "DisplayRoomTexts.roomFreeWorkplacesCount.label": "Aantal vrije posities",
  "DisplayRoomTexts.roomFreeWorkplacesCount.help": "Geef het aantal vrije posities op het plan wel of niet weer",
  "DisplayRoomTexts.roomFlexWorkplacesCount.label": "Aantal flexposities",
  "DisplayRoomTexts.roomFlexWorkplacesCount.help": "Geef het aantal flexposities op het plan wel of niet weer",
  "DisplayRoomOptions.roomSeatsCount.one": "%{value} stoel",
  "DisplayRoomOptions.roomSeatsCount.more": "%{value} zetels",
  "DisplayRoomOptions.roomCapacity.one": "Capaciteit: %{value} plaats",
  "DisplayRoomOptions.roomCapacity.more": "Capaciteit: %{value} plaatsen",
  "DisplayRoomOptions.roomFreeWorkplacesCount.one": "%{value} vrije positie",
  "DisplayRoomOptions.roomFreeWorkplacesCount.more": "%{value} vrije posities",
  "DisplayRoomOptions.roomFlexWorkplacesCount.one": "%{value} flexpositie",
  "DisplayRoomOptions.roomFlexWorkplacesCount.more": "%{value} flexposities",
  "DisplayRoomOptions.roomWorkplacesCount.one": "%{value} werkstation",
  "DisplayRoomOptions.roomWorkplacesCount.more": "%{value} werkstations",
  "DisplayRoomOptions.roomPeopleCount.one": "%{value} getroffen persoon",
  "DisplayRoomOptions.roomPeopleCount.more": "%{value} mensen getroffen",
  "DisplayRoomOptions.roomOccupancyRate": "Bezetting: %{value}",
  "DisplayRoomOptions.roomExpansionRatio": "Overloop: %{value}",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.enable": "Beheer ruimteweergaveteksten",
  "WorkCanvas.Options.DisplayRoomTextsOption.label.disable": "Schermtekstbeheer sluiten",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.enable": "Hiermee kunt u voor elke ruimte de teksten configureren die op het plan worden weergegeven",
  "WorkCanvas.Options.DisplayRoomTextsOption.help.disable": "Keer terug naar de normale planbewerkingsmodus.",
  "DisplayRoomTextsDrawer.tabs.map": "Plan",
  "DisplayRoomTextsDrawer.tabs.tooltip": "Tooltip",
  "DisplayRoomTextsDrawer.tabs.base.tabs.rooms": "Spaties",
  "DisplayRoomTextsDrawer.tabs.base.tabs.people": "Mensen",
  "DisplayRoomTextsDrawer.tabs.base.people.description": "Om de eigenschappen van de mensen te defini\xEBren die op de kaart moeten worden weergegeven, kiest u op het tabblad Ruimten de mensen die aan de ruimtes of werkstations zijn toegewezen en kiest u vervolgens de eigenschappen op dit tabblad",
  "DisplayWorkplaceTexts.workplaceName.label": "Naam van werkstation",
  "DisplayWorkplaceTexts.workplaceName.help": "Toon of niet de naam van het werkstation op het plan",
  "DisplayWorkplaceTexts.workplaceCostCenter.label": "Kostenplaats",
  "DisplayWorkplaceTexts.workplaceCostCenter.help": "Toon wel of niet de kostenplaats van de werkplek op het plan",
  "DisplayWorkplaceTexts.people.label": "Laat mensen zien",
  "DisplayWorkplaceTexts.people.help": "Toon wel of niet de mensen die op het plan aan het werkstation zijn toegewezen",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.label": "Richting",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel0.help": "Toon wel of niet de aanwijzingen van de werkplekken op het plan",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.label": "Dienst",
  "DisplayWorkplaceTexts.workplaceOrganizationLevel1.help": "Werkstationservices wel of niet weergeven in het abonnement",
  "DisplayPersonTexts.personPicture.label": "Foto van mensen",
  "DisplayPersonTexts.personPicture.help": "Geef wel of niet de foto weer van de mensen die op het plan aan de werkstations zijn toegewezen",
  "DisplayPersonTexts.personName.label": "Naam van mensen",
  "DisplayPersonTexts.personName.help": "Geef wel of niet de namen weer van mensen die zijn toegewezen aan werkstations in het plan",
  "DisplayPersonTexts.personSecurityProfile.label": "Beveiligingsprofiel",
  "DisplayPersonTexts.personSecurityProfile.help": "Geef wel of niet het beveiligingsprofiel weer van de mensen die zijn toegewezen aan de werkstations in het plan",
  "DisplayPersonTexts.personOrganizationLevel0.label": "Richting",
  "DisplayPersonTexts.personOrganizationLevel0.help": "Toon wel of niet de richting van de mensen die op het plan aan werkstations zijn toegewezen",
  "DisplayPersonTexts.personOrganizationLevel1.label": "Dienst",
  "DisplayPersonTexts.personOrganizationLevel1.help": "Toon wel of niet de service van de mensen die zijn toegewezen aan de werkstations op het plan",
  "DisplayPersonTexts.personOrganizationHierarchy.label": "Organisatiehi\xEBrarchie",
  "DisplayPersonTexts.personOrganizationHierarchy.help": "Toon wel of niet de afdeling en richting van de mensen die op het plan aan de werkplekken zijn toegewezen",
  "DisplayPersonTexts.personCostCenter.label": "Kostenplaats",
  "DisplayPersonTexts.personCostCenter.help": "Toon wel of niet de kostenplaats van de mensen die zijn toegewezen aan de werkstations in het plan",
  "DisplayPersonTexts.personCode.label": "Registratie nummer",
  "DisplayPersonTexts.personCode.help": "Wel of niet het personeelsnummer weergeven van de mensen die op het plan aan de werkstations zijn toegewezen",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.enable": "Beheer de displayteksten van het werkstation",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.label.disable": "Schermtekstbeheer sluiten",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.enable": "Hiermee kunt u voor elk werkstation de teksten configureren die op het plan worden weergegeven",
  "WorkCanvas.Options.DisplayWorkplaceTextsOption.help.disable": "Keer terug naar de normale planbewerkingsmodus.",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.enable": "Schakel transparantie van achtergrondkleuren van de ruimte in",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.label.disable": "Schakel kleurtransparantie uit",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.enable": "Door kleurtransparantie te activeren, kunt u de achtergrond door spaties heen zien",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.help.disable": "Als u kleurtransparantie uitschakelt, worden ruimtekleuren geretourneerd",
  "WorkCanvas.Options.EnableRoomColorTransparencyOption.description": "Door de transparantie van de kleuren van de ruimtes kun je de achtergrond zien",
  "WorkCanvas.Options.MapScaleOption.label.enable": "Beheer schaal",
  "WorkCanvas.Options.MapScaleOption.label.disable": "Schaal sluiten",
  "WorkCanvas.Options.MapScaleOption.help.enable": "Verplicht configureer de schaal op uw plan om de ruimtes en objecten op de juiste schaal te hebben",
  "WorkCanvas.Options.MapScaleOption.help.disable": "Keer terug naar de normale planbewerkingsmodus.",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.label": "Schaal verwijderen",
  "WorkCanvas.Options.MapScaleOption.buttons.delete.help": "Het verwijderen van de schaal komt neer op het verwijderen van de schaal uit de plattegrond en deze verwijderen van de basis, deze zal niet meer toegankelijk zijn via andere plannen. Het is niet mogelijk om een \u200B\u200Bschaal te verwijderen die zich op meerdere verdiepingen bevindt.",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.label": "Degroepeer schaal",
  "WorkCanvas.Options.MapScaleOption.buttons.unlink.help": "Als u de weegschaal ontkoppelt van dit plan, wordt deze uit het plan verwijderd, maar blijft de weegschaal in de database staan \u200B\u200Bvoor toekomstig gebruik",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.label": "Zoom in op de schaal",
  "WorkCanvas.Options.MapScaleOption.buttons.zoom.help": "Door te zoomen kunt u gemakkelijk de schaal op de plattegrond vinden.",
  "WorkCanvas.Options.DrawMapScaleOption.help": "U moet de weegschaal op uw plan configureren, op het begin en einde van de weegschaal op het plan klikken om deze te kalibreren",
  "ToggleCopilotEnable.label.false": "Activeer Surfy Copilot",
  "ToggleCopilotEnable.label.true": "Schakel Surfy Copilot uit",
  "ToggleCopilotEnable.help.false": "Activeer Surfy Copilot om automatische deurherkenning in te schakelen",
  "ToggleCopilotEnable.help.true": "Schakel Surfy Copilot uit en ga terug naar handmatige modellering",
  "WorkCanvas.Options.CopilotOption.label.enable": "Surfy copiloot",
  "WorkCanvas.Options.CopilotOption.label.disable": "Sluit de Surfy Copilot-opties ",
  "WorkCanvas.Options.CopilotOption.help.enable": "Activeer en pas de Surfy Copilot-opties aan",
  "WorkCanvas.Options.CopilotOption.help.disable": "Keer terug naar de normale planmodus.",
  "WorkCanvas.Options.AddRoomShapeOption.label.enable": "Voeg een spatie toe",
  "WorkCanvas.Options.AddRoomShapeOption.label.disable": "Het toevoegen van een spatie ongedaan maken",
  "WorkCanvas.Options.AddRoomShapeOption.help.enable": "Voeg ruimte toe aan het plan",
  "WorkCanvas.Options.AddRoomShapeOption.help.disable": "Maak het maken van ruimte ongedaan",
  "WorkCanvas.Options.AddRoomShapeOption.description": "De creatiehoeken zijn geblokkeerd op 45\xB0. Om ze te ontgrendelen, houdt u de <b>SHIFT-</b> toetsenbordtoets ingedrukt en gaat u door met cre\xEBren. Om uw hoekpunt te cre\xEBren, plaatst u de muis in de cirkel op het snijpunt van de driehoek. Om een \u200B\u200Bspatie te starten door een bestaand hoekpunt te hergebruiken, houdt u ingedrukt Houd de <b>ALT-</b> toetsenbordtoets ingedrukt en klik op het hoekpunt.",
  "WorkCanvas.Options.AddRoomShapeSaveOption.label": "Sla de ruimte op die momenteel wordt gemodelleerd",
  "WorkCanvas.Options.AddRoomShapeSaveOption.help": "Ruimte besparen sluit de ruimte automatisch en slaat deze op, zodat u er objecten of werkstations aan kunt toevoegen",
  "WorkCanvas.Options.ViewLegendOption.label.enable": "Voorbeeldlegenda",
  "WorkCanvas.Options.ViewLegendOption.label.disable": "Sluit het bijschrift voor het opslaan van het plan",
  "WorkCanvas.Options.ViewLegendOption.help.enable": "Kijk waar het gedeelte met de kaartlegenda voor bedoeld is",
  "WorkCanvas.Options.ViewLegendOption.help.disable": "Keer terug naar de normale planmodus.",
  "DownloadImageQualitySlider.label": "Kwaliteit van de ge\xEBxporteerde afbeelding",
  "DownloadImagePdfButton.label": "Download het plan zonder legenda (PDF)",
  "DownloadImagePdfButton.help": "Download het plan in PDF zonder legenda, deze functionaliteit is in b\xE8ta",
  "WorkCanvas.Options.DownloadImageOption.label.enable": "Opslaan als afbeelding",
  "WorkCanvas.Options.DownloadImageOption.label.disable": "Sluit de opslagopties voor planafbeeldingen",
  "WorkCanvas.Options.DownloadImageOption.help.enable": "Sla het plan op als afbeelding met deze optie",
  "WorkCanvas.Options.DownloadImageOption.help.disable": "Keer terug naar de normale planmodus.",
  "DownloadImageDrawer.ViewImage.text": "Download het plan met legenda (PNG)",
  "DownloadImageDrawer.ViewImage.help": "Download het gehele plan in goede kwaliteit met de legenda, de export kan langer duren.",
  "DownloadImageDrawer.ViewImageNoLegend.text": "Download het plan zonder legenda (PNG)",
  "DownloadImageDrawer.ViewImageNoLegend.help": "Download het volledige plan in goede kwaliteit zonder de legenda, de export kan langer duren.",
  "DownloadImageDrawer.ScreenshotNoLegend.text": "Screenshot zonder onderschrift",
  "DownloadImageDrawer.ScreenshotNoLegend.help": "Download de afbeelding van wat u op het scherm ziet zonder bijschrift. De uitvoer zal snel zijn, maar de kwaliteit van de export zal niet optimaal zijn",
  "DownloadBuildingImagesAccordion.accordion.title": "Exporteer afbeeldingen van het hele gebouw",
  "DownloadBuildingImagesAccordion.buttons.download.help": "Download alle plattegronden van alle verdiepingen van het gebouw in png-formaat in een zip, de wachttijd voor deze uittreksel kan lang zijn",
  "DownloadBuildingImagesAccordion.buttons.download.label": "Download de ZIP",
  "DisplayTexts.dragOption": "U kunt de weergave van eigenschappen op het plan sorteren en kiezen door de kleine balken op de velden naar boven of beneden te verplaatsen",
  "DisplayRoomTextsPeople.roomPeopleFullName.label": "Volledige naam van mensen",
  "DisplayRoomTextsPeople.roomPeopleFullName.help": "Toon of niet de volledige naam van de persoon op de kaart",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.label": "Beveiligingsprofiel",
  "DisplayRoomTextsPeople.roomPeopleSecurityProfile.help": "Geef al dan niet het beveiligingsprofiel weer van de mensen die aan de ruimtes in het plan zijn toegewezen",
  "NumberOfPeoplePerRowField.label": "Aantal personen per lijn voor ruimtetoewijzingen",
  "WorkCanvas.Options.BackgroundLayoutOption.label.enable": "Beheer de achtergrond",
  "WorkCanvas.Options.BackgroundLayoutOption.label.disable": "Sluit het beheer van achtergrondafbeeldingen",
  "WorkCanvas.Options.BackgroundLayoutOption.help.enable": "Hiermee kunt u de achtergrond beheren",
  "WorkCanvas.Options.BackgroundLayoutOption.help.disable": "Keer terug naar de normale planbewerkingsmodus.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.label": "Schaal verwijderen",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.delete.help": "Het verwijderen van de schaal komt neer op het verwijderen van de schaal uit de plattegrond en deze verwijderen van de basis, deze zal niet meer toegankelijk zijn via andere plannen. Het is niet mogelijk om een \u200B\u200Bschaal te verwijderen die zich op meerdere verdiepingen bevindt.",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.label": "Degroepeer schaal",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.unlink.help": "Als u de weegschaal ontkoppelt van dit plan, wordt deze uit het plan verwijderd, maar blijft de weegschaal in de database staan \u200B\u200Bvoor toekomstig gebruik",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.label": "Zoom in op de schaal",
  "WorkCanvas.Options.BackgroundLayoutOption.buttons.zoom.help": "Door te zoomen kunt u gemakkelijk de schaal op de plattegrond vinden.",
  "WorkplaceCanvasItem.workplace.free": "De werkplek is niet bezet",
  "WorkplaceCanvasItem.workplace.isFlex": "De werkplek is in flex",
  "WorkplaceCanvasItem.workplace.isTransit": "Het werkstation passeert",
  "WorkplaceCanvasItem.workplace.isBookable": "De werkplek is te reserveren",
  "WrongRoomsTable.table.headers.objectType": "Natuur",
  "WrongRoomsTable.table.headers.type": "Vriendelijk",
  "WrongRoomsTable.table.headers.identity": "Identificeren",
  "WrongRoomsTable.table.headers.currentRoom": "Huidige ruimte",
  "WrongRoomsTable.table.headers.newRoom": "Nieuwe ruimte",
  "WrongRoomsTable.SelectAll.checked.true": "Deselecteer alles",
  "WrongRoomsTable.SelectAll.checked.false": "Selecteer alles",
  "WrongRoomsTable.SelectAll.help": "Selecteer of deselecteer alle lijnen",
  "WrongRoomsListner.dialog.title": "Valideer de keuze van de ruimtes",
  "WrongRoomsListner.dialog.description": "Er zijn vormen die zich niet in hun startvak bevinden",
  "WrongRoomsListner.close.label": "sluiten",
  "WrongRoomsListner.close.help": "sluit dit venster",
  "MoveShapestoNewRoomAsyncButton.label": "Pas ruimteverandering toe",
  "MoveShapestoNewRoomAsyncButton.help": "Wijzig de ruimtes van de geselecteerde vormen om ze in de ruimtes te plaatsen waarin ze zich in het vlak bevinden",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.enable": "Objecttype verplaatsen",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.label.disable": "Stop met het verplaatsen van het objecttype",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.enable": "Verplaats een type object op het plan",
  "WorkCanvas.Options.ToggleMoveItemTypeOption.help.disable": "Stop met het verplaatsen van het objecttype",
  "ResetRotationAngle.resetRotationAngle": "Reset de rotatiehoek naar 0\xB0, momenteel %{initialRotation}",
  "TenantOperations.sephora-sync-sap-success-factors.label": "MSC-synchronisatie",
  "TenantOperations.st-grenoble-import-hr-file.label": "Het RH-bestand importeren",
  "TenantOperations.egis-import-hr-file.label": "HR-bestand importeren",
  "TenantOperations.essilor-import-hr-file.label": "HR-bestand importeren",
  "TenantOperations.agpm-import-hr-file.label": "Importeren van het HR-bestand (STILOG)",
  "ConnectedPartnerContext.title": "U bent verbonden met <b>%{label}</b> ( %{host} )",
  "Operations.talentsoft-import.label": "Talentsoft importeren",
  "Operations.zbre-sync.label": "Z#bre-synchronisatie",
  "Operations.exportZbre.label": "Exporteer Z#bre",
  "GenericNoChangeTable.open.label": "Bekijk de gegevens",
  "GenericNoChangeTable.open.help": "Bekijk details van identieke gegevens",
  "Operations.sharingcloud-sync.label": "Sharingcloud-synchronisatie",
  "Operations.moffi-sync.label": "Moffi-synchronisatie",
  "Operations.lucca-sync.label": "Lucca synchronisatie",
  "CompareObjectTypeUpdateIcon.help": "Deze synchronisatie zal de entiteiten bijwerken",
  "CompareObjectTypeDeleteIcon.help": "Deze synchronisatie verwijdert entiteiten die niet afkomstig zijn van de bron",
  "CompareObjectTypeCreateIcon.help": "Door deze synchronisatie worden entiteiten gemaakt die niet in het doel bestaan",
  "RoomTooltip.roomWorkplaceAffectations": "Werkstationopdrachten",
  "RoomSegmentRoomsList.title": "De ruimtes die aan dit segment zijn gekoppeld",
  "MeetingRoomCard.seats.1": "%{count} stoel",
  "MeetingRoomCard.seats.n": "%{count}",
  "MeetingRoomCard.locateSpace": "Zoek de ruimte op het plan",
  "MeetingRoomCard.viewPicture": "Zie ruimtefoto",
  "days.monday": "Maandag",
  "days.tuesday": "Dinsdag",
  "days.wednesday": "Woensdag",
  "days.thursday": "DONDERDAG",
  "days.friday": "Vrijdag",
  "days.saturday": "ZATERDAG",
  "days.sunday": "Zondag",
  "WorkplaceAffectationDailyTitle.all": "Deze persoon wordt elke dag getroffen",
  "WorkplaceAffectationDailyTitle.person.affected": "Deze persoon is %{daysText} toegewezen",
  "WorkplaceAffectationDailyTitle.person.notAffected": "Deze persoon wordt niet be\xEFnvloed ",
  "WorkplaceAffectationDailyTitle.calculatedRate": "Het gemiddelde toewijzingspercentage is %{calculatedRate}",
  "WorkplaceNestedList.title": "Mensen die aan werkstations zijn toegewezen",
  "WorkplaceList.workplace.free": "Dit werkstation is gratis",
  "WorkplaceList.workplace.flex": "Deze werkplek is flex",
  "WorkplaceList.workplace.transit": "Dit werkstation wordt gedeeld",
  "WorkplaceList.zoomOnWorkplace": "Zoom in op de werkplek op de plattegrond",
  "WorkplaceAffectionPersonListItem.remove.help": "Verwijder de toewijzing van de persoon aan het werkstation",
  "WorkplaceAffectations.edit.help": "Wijs een persoon toe aan dit werkstation",
  "WorkplaceAffectationDays.all": "Deze persoon wordt elke dag getroffen",
  "WorkplaceAffectationDays.and": "de %{days} en %{lastDay}",
  "WorkplaceAffectationDays.one": "op %{day}",
  "WorkplaceAffectationDays.person.affected": "Deze persoon is %{daysText} toegewezen",
  "WorkplaceAffectationDays.person.notAffected": "Deze persoon wordt niet be\xEFnvloed ",
  "RoomWorkplaceList.EmptyList": "In deze ruimte zijn geen werkplekken aanwezig",
  "RoomCard.buttons.edit.false": "Ruimte-eigenschappen bewerken",
  "RoomCard.buttons.edit.true": "Stop met bewerken",
  "RoomCard.tabs.people": "Opdrachten",
  "RoomCard.tabs.inventory": "Inventaris",
  "RoomCard.tabs.room": "Ruimte",
  "RoomAffectationsOnlyList.title": "Mensen toegewezen aan ruimtes",
  "RoomAffectationsList.title": "Mensen toegewezen aan ruimtes",
  "RoomAffectationsList.EmptyList": "Er is niemand toegewezen aan deze ruimte",
  "ItemsInventory.EmptyList": "Er bevinden zich geen objecten in deze ruimte",
  "MovePersonFromWorkplaceToRoomListButtonItem.label": "Verplaats deze persoon van zijn/haar werkplek naar de werkplekruimte",
  "MovePersonFromWorkplaceToRoomListButtonItem.help": "Deze optie vereist het vernieuwen van de pagina om het resultaat te zien. Het is mogelijk om meerdere bewegingen aan elkaar te koppelen zonder te vernieuwen",
  "CollapseWorkplaceAffectationList.title": "Wijs deze persoon alleen toe voor de volgende dagen",
  "CollapseWorkplaceAffectationList.updateAffectationDay.true": "Wijs deze persoon toe %{day}",
  "CollapseWorkplaceAffectationList.updateAffectationDay.false": "Verwijder de opdracht van deze persoon %{day}",
  "CancelAddWorkplaceToRoom.help": "Het toevoegen van een werkstation ongedaan maken",
  "CancelAddItemToRoom.help": "Maak het toevoegen van het object ongedaan",
  "AddPersonToRoom.help": "Wijs een persoon toe aan ruimte %{name}",
  "SecurityComplianceModeSwitch.label": "Filter mensen met beveiligingsprofielen",
  "SecurityComplianceModeSwitch.description": "Zie alleen mensen met beveiligingsprofielen op de kaart",
  "layoutViewSets.roomType.label": "Ruimtetypologie\xEBn",
  "layoutViewSets.roomType.description": "Zie de plattegrond volgens de typologie van ruimtes",
  "layoutViewSets.costCenter.label": "Opnieuw factureren",
  "layoutViewSets.costCenter.description": "Analyseer de sleutels tot de financi\xEBle verdeling van ruimtes",
  "layoutViewSets.workplaces.label": "Beroepen",
  "layoutViewSets.workplaces.description": "Focus op het bezetten van werkplekken",
  "layoutViewSets.organizationLevel0.label": "Routebeschrijving",
  "layoutViewSets.organizationLevel0.description": "Bezetting per richting",
  "layoutViewSets.flex.label": "Buigen",
  "layoutViewSets.flex.description": "Flexbezetting van ruimtes",
  "layoutViewSets.walls.label": "Partities",
  "layoutViewSets.walls.description": "Focus op ruimtes en scheidingswanden",
  "layoutViewSets.securityCompliance.label": "Beveiligingsnaleving",
  "layoutViewSets.securityCompliance.description": "Analyseer de naleving van uw beveiligingspreventieplan en de beveiligingsprofielen van de getroffen mensen",
  "layoutViewSets.peopleDimensionTypes.label": "Buurten",
  "layoutViewSets.peopleDimensionTypes.description": "Analyseer opdrachtlagen en navigeer per buurt of zone",
  "LayoutViewSwitch.title": "Verander de visie op het plan",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.viewSet": "Visie",
  "CustomEntityBreadcrumbWorkCanvasLayoutViewLabel.help": "Via de planmenu's kunt u de visie wijzigen",
  "SurfyLegendBottomLogo.text": "Kaart gegenereerd door Surfy",
  "SurfyLegendBottomLogo.caption": "https://www.surfy.pro",
  "MapLegendWorkplace.title": "Werkplek",
  "MapLegendWorkplace.workplaces.free": "Werkstations zijn gratis",
  "MapLegendWorkplace.workplaces.flex": "De werkplekken zijn flex",
  "MapLegendRoom.title": "Spaties",
  "MapLegendPersonSecurityProfile.title": "Beveiligingsprofielen",
  "MapLegendFloor.title.building": "Gebouw",
  "MapLegendFloor.title.floor": "Vloer",
  "MapLegend.workplaces": "Persoonlijke werkplekken",
  "MapLegend.rooms": "Spaties",
  "PersonSecurityProfileTabContent.tabs.merged": "Via beveiligingsprofielen",
  "PersonSecurityProfileTabContent.tabs.split": "Door opdrachten",
  "DimensionInfo.infos.building": "Berekende gebouwinformatie",
  "DimensionInfo.infos.impactBuildings": "Berekende gebouwgegevens opnieuw laden",
  "DimensionToPeopleList.title": "Mensen toegewezen aan %{name}",
  "DimensionToPeopleList.noDimensionPerson": "Er is niemand rechtstreeks aan deze analyselaag toegewezen",
  "DimensionPeople.title": "Mensen toegewezen aan ruimtes",
  "AddPersonToDimension.help": "Wijs iemand toe aan %{name}",
  "CubyWallModeSelect.label": "Weergave van partities",
  "CubyWallModeSelect.options.no": "Geen",
  "CubyWallModeSelect.options.half": "Halve scheidingswanden",
  "CubyWallModeSelect.options.reality": "Realiteit",
  "CubyWallModeSelect.options.cuby": "Kubus",
  "CubySaveAsImageButton.label": "Afbeelding opslaan",
  "CubySaveAsImageButton.help": "Afbeelding van de plattegrond opslaan",
  "CubyFitToViewIsometricButtonOption.label": "Centreer het plan in isometrisch aanzicht",
  "CubyFitToViewIsometricButtonOption.help": "Centreer de plattegrond op de ruimtes in isometrisch aanzicht",
  "CubyFitToViewZenithalButtonOption.label": "Centreer het plan in zenitaanzicht",
  "CubyFitToViewZenithalButtonOption.help": "Centreer de plattegrond op de ruimtes in zenitaanzicht",
  "RefetchFloorLayoutButton.refetch": "Plangegevens opnieuw laden",
  "ItemTypesMapFilterZone.tabs.options": "Opties",
  "FloorMap.tabs.layout": "Verander de visie op het plan. De huidige weergave is <b>%{layoutName}</b>",
  "FloorMap.tabs.floor": "Bekijk verdiepingsinformatie",
  "FloorMap.tabs.building": "Bekijk gebouwinformatie",
  "FloorMap.tabs.roomTypes": "Kleur de ruimtes op de plattegrond volgens de <b>ruimtetypologie\xEBn</b>",
  "FloorMap.tabs.roomTypeGroups": "Zie de ruimte-indicatoren op het plan volgens de <b>groepen ruimtetypologie\xEBn</b>",
  "FloorMap.tabs.analyticsDimensionTypes": "Kleur de ruimtes op het plan volgens de <b>analyselagen</b>",
  "FloorMap.tabs.itemTypes": "Geef <b>objecten</b> op de kaart weer per objectfamilie en type",
  "FloorMap.tabs.workplaceTypes": "Geef <b>werkstations</b> per werkstationtype weer op de kaart",
  "FloorMap.tabs.organizations": "Kleur de ruimtes op het plan volgens de <b>organisaties</b>",
  "FloorMap.tabs.costCenters": "Kleurruimtes en werkplekken in relatie tot <b>kostenplaatsen</b>",
  "FloorMap.tabs.users": "Kleurwerkplekken in relatie tot mensen",
  "FloorMap.tabs.selection": "Bekijk de details van de geselecteerde elementen op het plan",
  "FloorMap.tabs.rooms": "Details van geselecteerde <b>ruimtes</b>",
  "FloorMap.tabs.items": "Details van geselecteerde <b>objecten</b>",
  "FloorMap.tabs.workplaces": "Details van geselecteerde <b>werkstations</b>",
  "FloorMap.tabs.all": "Bekijk alle geselecteerde vormen in de lijst",
  "FloorMap.tabs.peopleDimensionTypes": "Kleur de ruimtes op de plattegrond volgens de <b>opdrachtlagen</b>",
  "FloorMap.tabs.workplaceUsage": "Kleur werkstations volgens hun <b>staat</b>",
  "FloorMap.tabs.options": "Bekijk abonnementsopties",
  "FloorMap.tabs.heatmap": "Kleuren met hittekaarten",
  "FloorMap.tabs.pathFinding": "Je weg vinden in ruimtes",
  "DateDimensionSelect.options.day": "Dag",
  "DateDimensionSelect.options.week": "Week",
  "DateDimensionSelect.options.month": "Maand",
  "DateDimensionSelect.options.year": "Jaar",
  "DateDimensionSelect.options.quarter": "Kwartaal",
  "JupDateRangePicker.chooseRange": "Kies een periode",
  "WorkpaceBookingPeopleCountByDate.title": "Aantal geboekte personen op datum",
  "WorkpaceBookingPeopleCountByDate.labels.line": "Aantal mensen",
  "WorkpaceBookingCountByDate.title": "Werkplekreserveringen op datum",
  "WorkpaceBookingCountByDate.labels.line": "Aantal reserveringen",
  "WorkpaceBookingAverageByWeekDay.title": "Reservering van werkplekken per dag van de week",
  "WorkpaceBookingAverageByWeekDay.labels.line": "Gemiddeld per week",
  "WorkpaceBookingAverageByWeekDay.labels.bar": "Aantal reserveringen",
  "PersonPanelWorkplaceAffectations.title": "Werkstationopdrachten",
  "PersonPanelRoomAffectations.title": "Ruimte opdrachten",
  "PersonPanelDimensionToPeople.title": "Toewijzingen aan %{dimensionTypeName}",
  "PersonPanelBuildingAffectations.title": "Bouwopdrachten",
  "PersonPanelBuildingAffectations.addToPeopleCount.false": "Deze persoon is geen accountant in het gebouw",
  "PersonAffectationsPanel.title": "Opdrachten",
  "PersonAffectationsPanel.description": "De opdrachten van de persoon",
  "PersonSecurityPanel.title": "Beveiliging",
  "PersonSecurityPanel.description": "Veiligheids- en evacuatie-informatie",
  "PersonRelationsPanel.title": "Relaties",
  "PersonRelationsPanel.description": "De relaties van deze persoon",
  "PersonInventoryPanel.title": "Inventaris",
  "PersonInventoryPanel.description": "Voorraadinformatie",
  "PersonInventoryPanel.items.subheader": "Lijst met bijbehorende objecten",
  "PersonInfoPanel.title": "Persoonlijke informatie",
  "PersonContractPanel.title": "CONTRACT",
  "PersonContractPanel.description": "Contractinformatie",
  "PersonContactPanel.title": "Contact",
  "PersonContactPanel.description": "Hoe kunt u contact opnemen met deze persoon?",
  "PersonBadgePanel.title": "Gemengd",
  "PersonBadgePanel.description": "Diverse informatie over de persoon",
  "AvatarPersonDrawer.help": "Bekijk meer informatie over %{name}",
  "TopLevelOrganizationFilter.Empty": "Er is geen organisatie gekoppeld aan ruimtes. U kunt meer toevoegen door een ruimte te wijzigen en deze aan een organisatie te koppelen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "OrganizationTabsFilter.tabs.topLevel": "Routebeschrijving",
  "OrganizationTabsFilter.tabs.hierarchy": "Hi\xEBrarchie",
  "OrganizationTabsFilter.tabs.level1": "Diensten",
  "OrganizationFloorMapFilter.TooltipTitle.notSelected": "Selecteer %{organization} om de ruimtes op het plan te kleuren",
  "OrganizationFloorMapFilter.TooltipTitle.selected": "Als u %{organization} deselecteert, worden de kleuren uit het vlak verwijderd",
  "OrganizationFloorMapFilter.tooltip.true": "Selecteer hieronder alle objecttypen om ze op de kaart in te kleuren",
  "OrganizationFloorMapFilter.tooltip.false": "Deselecteer hieronder alle organisaties",
  "Level1OrganizationFilter.Empty": "Er is geen organisatie gekoppeld aan ruimtes. U kunt er meer toevoegen door een ruimte te wijzigen en deze aan een organisatie te koppelen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "HierarchyOrganizationFilter.Empty": "Er is geen organisatie gekoppeld aan ruimtes. U kunt meer toevoegen door een ruimte te wijzigen en deze aan een organisatie te koppelen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "CompanyDashboard.dashboards.workplace": "Werkstationdashboard",
  "CompanyDashboard.dashboards.area": "Dashboard voor oppervlakken",
  "ChangeCompanyMenu.ChangeCompany": "Bekijk een ander bedrijf op een nieuwe pagina",
  "WorkplaceTypeDataQualityNotUsed.columns.name": "Naam van het werkstationtype",
  "WorkplaceTypeDataQualityNotUsed.columns.shape": "Vorm",
  "workplaceTypeLayoutFilter.Empty": "Er zijn momenteel geen werkstations in ruimtes. U kunt er meer toevoegen door een ruimte te wijzigen en er werkstations aan toe te voegen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "WorkplaceTypeInfo.help": "Het aantal werkstations is %{count}",
  "CopyWorkplaceTypeToCart.help": "Kopieer werkstationtypen naar winkelwagen",
  "WorkCanvas.Options.ZoomOnWorkplaceType.label": "Zoom in op het type werkplek",
  "WorkCanvas.Options.ZoomOnWorkplaceType.help": "Door in te zoomen op het type werkplek kunt u deze in het werkgebied lokaliseren",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.enable": "Lijst met objecttypen",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.label.disable": "Sluit de lijst met objecttypen",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.enable": "Zie de lijst met objecttypen voor dit type werkstation",
  "WorkCanvas.Options.WorkplaceTypeItemTypesOption.help.disable": "Sluit de lijst met objecttypen voor dit werkstationtype",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.open": "Vouw opties uit",
  "WorkplaceTypeItemTypesDrawerSortableItem.info.close": "Opties samenvouwen",
  "WorkplaceTypeItemTypesDrawer.title": "Lijst met objecttypen",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.help": "Voeg een objecttype toe om het werkplektype te kunnen samenstellen",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeOption.label": "Voeg een objecttype toe",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.help": "Maak het toevoegen van een objecttype aan dit werkstation ongedaan",
  "WorkCanvas.Options.AddItemTypeToWorkplaceTypeCancelOption.label": "Het toevoegen van een objecttype ongedaan maken",
  "WorkCanvas.Options.DeleteStructureShapeOption.help": "Verwijder de vorm van de machtsstructuur volledig, teken deze bijvoorbeeld volledig opnieuw",
  "WorkCanvas.Options.DeleteStructureShapeOption.label": "Vorm verwijderen",
  "WorkCanvas.Options.AddStructurePointOption.label.enable": "Voeg een hoekpunt toe",
  "WorkCanvas.Options.AddStructurePointOption.label.disable": "Stop met het toevoegen van een hoekpunt",
  "WorkCanvas.Options.AddStructurePointOption.help.enable": "Door een hoekpunt toe te voegen, kunt u een vorm nauwkeuriger bewerken",
  "WorkCanvas.Options.AddStructurePointOption.help.disable": "Stop met het maken van hoekpunten",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloorButton.label": "Reserveer een werkstation op %{floorName}",
  "BookPersonBuildingWorkplace.bookWorkplaceOnFloor": "Reserveer een werkplek op %{floorName} voor de periode %{slotString}",
  "BookPersonBuildingWorkplace.availableWorkplaces": "%{freeWorkplaces} plaatsen beschikbaar",
  "BookPersonBuildingWorkplace.help": "%{bookedWorkplaces} reservering(en), %{freeWorkplaces} werkstations beschikbaar op %{totalFloorWorkplacesCount}",
  "booking.snackbar.delete.workplace": "De reservering op werkstation %{workplaceName} is geannuleerd voor de periode %{slot}",
  "booking.snackbar.delete.room": "De reservering bij ruimte %{roomName} is geannuleerd voor de periode %{slot}",
  "BookingWorkplaceTitle.booked": "Deze werkplek is al gereserveerd",
  "BookingWorkplaceTitle.userBooked": "U heeft deze werkplek gereserveerd",
  "BookingWorkplaceTitle.free": "Reserveer deze werkplek",
  "PlanningPersonAffectations.alerts.noAffectation.title": "Kan geen werkplek reserveren",
  "PlanningPersonAffectations.alerts.noAffectation.message": "U bent aan geen enkel gebied gekoppeld. Neem contact op met uw opdrachtmanager om een \u200B\u200Bwerkruimte te kunnen reserveren",
  "WorkingLocationToggle.locations.OFFICE": "Bureau",
  "WorkingLocationToggle.locations.REMOTE": "Telewerk",
  "PersonBookingListItem.workplaceBookedOnFloor": "Zie werkplek %{workplaceName} op de plattegrond %{floorName}",
  "PersonBookingList.noBooking": "Er zal voorlopig geen collega op hetzelfde slot op kantoor aanwezig zijn",
  "PersonBookingList.bookings.one": "Op hetzelfde slot zal een collega aanwezig zijn",
  "PersonBookingList.bookings.more": "%{count} collega's zullen op hetzelfde tijdstip aanwezig zijn",
  "ParkingBookIcon.parking.booked": "Uw parkeerplaats is gereserveerd",
  "ParkingBookIcon.parking.release.help": "Parkeerreservering vrijgeven",
  "ParkingBookIcon.parking.viewOnMap": "Zie gereserveerde parkeerplaats op de kaart",
  "ParkingBookIcon.parking.book.label": "Parkeerplaats reserveren",
  "ParkingBookIcon.parking.book.help": "Reserveer een parkeerplaats die automatisch aan het slot wordt toegewezen",
  "HalfDayWorkingLocationToggle.am.label": "Ochtend",
  "HalfDayWorkingLocationToggle.am.help": "De ochtenduren zijn van 8.00 uur tot 13.30 uur.",
  "HalfDayWorkingLocationToggle.pm.label": "Middag",
  "HalfDayWorkingLocationToggle.pm.help": "De middaguren zijn van 14.00 uur.",
  "DirectBuildingPlanningLabel.youAreAssigned": "Je bent toegewezen aan gebouw %{buildingName}",
  "DimensionBuildingPlanningLabel.youAreAssigned": "U bent toegewezen aan %{dimensionTypeName} %{dimensionName}",
  "BookedBuildingWorkplaceList.noWorkplaceBooked": "Geen gereserveerde werkplek",
  "BookedBuildingWorkplaceList.workplaceIsBooked": "Uw werkplek is gereserveerd",
  "BookedBuildingWorkplaceList.viewBookedWorkplaceOnMap": "Bekijk het werkstation %{workplaceName} dat is gereserveerd in het abonnement",
  "BookedBuildingWorkplaceList.freeWorkplaceBooking": "Geef deze reservering vrij",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.noFloor": "De grootte is op geen enkele verdieping onmogelijk te boeken op dit moment vanuit het plan",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.errors.moreThanOneFloor": "De grootte is op verschillende verdiepingen onmogelijk te reserveren op dit moment sinds het plan",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.drawer.title": "Reserveer een specifiek werkstation voor de periode %{slotString}",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.help": "Reserveer een specifiek werkstation volgens het abonnement voor dit slot",
  "BookWorkplaceOnDimensionWithSlotOpenDrawerButton.button.label": "Reserveer een werkstation in %{dimensionName}",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.peopleCount": "Er zijn %{count} perso(o)n(en) met beveiligingsprofiel %{name} toegewezen aan de werkstations",
  "PersonSecurityProfileWorkplaceInfo.nodeInfo.workplaceCount": "Er zijn %{count} werkstation(s) met minstens \xE9\xE9n persoon met %{name} beveiligingsprofiel",
  "PersonSecurityProfileWorkplaceFilter.Empty": "Uw mensen hebben geen beveiligingsprofielen of zijn niet toegewezen aan werkstations, het is niet mogelijk om werkstations in te kleuren op basis van de beveiligingsprofielen van mensen",
  "PersonSecurityProfileWorkplaceFilter.title": "Beveiligingsprofielen van mensen die aan werkstations zijn toegewezen",
  "PersonSecurityProfileMerged.title": "Lijst met beveiligingsprofielen gegroepeerd op profieltype",
  "PersonSecurityProfileMerged.empty": "Er is geen profiel gekoppeld aan ruimtes of werkstations",
  "PersonSecurityProfileInRooms.title": "De beveiligingsprofielen van de mensen die aan de ruimtes zijn toegewezen",
  "PersonSecurityProfileInRoomListItem.peopleCount": "Er zijn %{count} persoon(en) met beveiligingsprofiel %{name} toegewezen aan ruimtes",
  "PersonSecurityProfileInRoomListItem.roomsCount": "Er zijn %{count} ruimte(s) met minstens \xE9\xE9n persoon met beveiligingsprofiel %{name}",
  "ToggleAllOpenInfoState.true": "Sluit alle details en indicatoren",
  "ToggleAllOpenInfoState.false": "Open alle details en indicatoren",
  "MapFiltersNodesToggleAll.help.true": "Selecteer alles",
  "MapFiltersNodesToggleAll.help.false": "deselecteer alles",
  "MapFiltersNode.info.open": "Bekijk details en indicatoren voor %{label}",
  "MapFiltersNode.info.close": "Sluit aanvullende informatie",
  "MapFiltersCategory.CategoryHasChildrenSelected": "Artikelen zijn geselecteerd",
  "MapFilterNodeToggleAll.action.true": "Selecteer alles",
  "MapFilterNodeToggleAll.action.false": "deselecteer alles",
  "MapFilterNodeIsAllSelected.help": "De gehele selectie hieronder wordt geladen, zelfs als er nieuwe objecten worden aangemaakt",
  "JupRoleToObjectTypeMatrix.views.help.true": "Interfaceweergave verbergen",
  "JupRoleToObjectTypeMatrix.views.help.false": "Interfaceweergave tonen",
  "JupRoleToObjectTypeMatrix.objectTypes.help.checkbox": "Eigenschap bijwerken ( %{name} )",
  "GlobalOptions.CartCopyItemTypeOption.help": "Kopieer itemtypen naar winkelwagen",
  "GlobalOptions.CartCopyWorkplaceTypeOption.help": "Kopieer werkstationtypen naar winkelwagen",
  "GlobalOptions.CartCopyBuildingOption.help": "Kopieer gebouwen naar winkelwagen",
  "CheckAllDefaultViews.shortcuts.title": "Configuratiesnelkoppelingen",
  "CheckAllDefaultViews.shortcuts.views.title": "Snelkoppelingen voor standaardinterfaceweergaven",
  "CheckAllDefaultViews.shortcuts.views.buttonsHelp": "Controleer deze weergave voor alle entiteitstypen",
  "CheckAllDefaultViews.shortcuts.objectTypes.title": "Snelkoppelingen voor entiteitstypen",
  "CheckAllDefaultViews.shortcuts.objectTypes.buttonsHelp": "Controleer deze regel voor alle objecttypen",
  "RemoveItemColorsOption.label": "Kleur geen voorwerpen",
  "RemoveItemColorsOption.help": "Kleur objecten wit, zodat u zich kunt concentreren op andere elementen op de kaart",
  "ItemTypeOptions.help": "Het aantal objecten is %{count}",
  "ItemTypeMapFilter.TooltipTitle.notSelected": "Selecteer %{itemType} om objecten op de kaart te bekijken",
  "ItemTypeMapFilter.TooltipTitle.selected": "Als u %{itemType} deselecteert, wordt de bijbehorende kleur van de kaart verwijderd",
  "ItemTypeMapFilter.tooltip.true": "Selecteer hieronder alle objecttypen om ze op de kaart weer te geven",
  "ItemTypeMapFilter.tooltip.false": "Deselecteer hieronder alle objecttypen",
  "ItemTypeMapFilter.NoNode": "Er zijn momenteel geen objecten in ruimtes. Je kunt er meer toevoegen door een ruimte te wijzigen en er objecten aan toe te voegen. Vervolgens kun je de weergave ervan vanuit deze sectie regelen",
  "ItemTypeMapFilter.NoCategory": "Er zijn momenteel geen objecten in ruimtes. Je kunt er meer toevoegen door een ruimte te wijzigen en er objecten aan toe te voegen. Vervolgens kun je de weergave ervan vanuit deze sectie regelen",
  "ItemTypeDataQualityNotUsed.columns.name": "Naam objecttype",
  "ItemTypeDataQualityNotUsed.columns.shape": "Vorm",
  "ItemTypeDataQualityNotUsed.columns.workplaceTypeCount": "Aantal werkplektypes",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.help": "Kies een referentievlak om de vorm te cre\xEBren, zodat u uw type object als referentie op een vlak kunt tekenen en de juiste schaal hebt",
  "WorkCanvas.Options.ChooseBackgroundFloorItemTypeOption.label": "Kies een referentievlak om de vorm te maken",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.help": "Kies een referentieplan om het type werkstation samen te stellen met bestaande typen objecten door ze op een plattegrond te lokaliseren en de juiste schaal te hebben en de typen objecten correct te positioneren",
  "WorkCanvas.Options.ChooseBackgroundFloorWorkplaceTypeOption.label": "Kies een referentievlak om de vorm van het type werkstation samen te stellen",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.help": "Kies een referentievlak om de vorm te cre\xEBren, zodat u de structuur kunt tekenen aan de hand van een plan en de juiste schaal hebt",
  "WorkCanvas.Options.ChooseBackgroundFloorStructureOption.label": "Kies een referentievlak om de structuur te maken",
  "ItemTypeAvatarSingleView.copy": "Kopieer punten naar het klembord",
  "ItemTypeAvatarSingleView.debug.label": "Schakel de geavanceerde modus voor 3D in",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.help": "Verwijder de vorm van het objecttype volledig, zodat u deze bijvoorbeeld volledig opnieuw kunt tekenen of in een pictogram kunt transformeren",
  "WorkCanvas.Options.DeleteItemTypeShapeOption.label": "Vorm verwijderen",
  "CopyItemTypesToCart.help": "Kopieer itemtypen naar winkelwagen",
  "PhysicalItemNotInsideWorkplaceRoom.alignRooms": "Wijzig de objectruimten naar die van het werkstation",
  "AddPersonToItem.text": "Koppel een persoon aan dit object",
  "AddPersonToItem.help": "Koppel een persoon aan dit object, u kunt meerdere personen toevoegen aan hetzelfde object",
  "DimensionTypeDescription.NoDescription": "Er is geen beschrijving voor dit type analyselaag. U kunt er meer toevoegen door deze aan te passen",
  "dimensionTypes.room_ground_type.one": "Aard van de bodem",
  "dimensionTypes.room_ground_type.description": "Hiermee kunt u de samenstelling van de grond in de ruimte kennen",
  "dimensionTypes.room_usage.one": "Aard van ruimtes",
  "dimensionTypes.room_usage.description": "Hiermee kunt u ruimtes identificeren op basis van hun gebruik",
  "dimensionTypes.frequency.one": "Frequentie",
  "dimensionTypes.frequency.description": "Hiermee kunt u de frequentie van passage in de ruimte kennen",
  "dimensionTypes.evacuation_zone.one": "Beveiliging",
  "dimensionTypes.evacuation_zone.description": "Hiermee kunt u beveiligings- en evacuatiezones beheren",
  "dimensionTypes.referent.one": "Referent",
  "dimensionTypes.referent.description": "Hiermee kunt u weten wie is belast met het onderhoud van deze ruimte",
  "DimensionTypesByTab.action.true": "Selecteer alles",
  "DimensionTypesByTab.action.false": "deselecteer alles",
  "DimensionTypesByTab.ListItemHasChildrenSelected": "Afmetingen zijn geselecteerd",
  "DimensionListItem.notSelected": "Selecteer %{dimension} om de ruimtes op de plattegrond met de bijbehorende kleur te zien",
  "DimensionListItem.selected": "Deselecteer %{dimension}",
  "DimensionInfo.roomsArea.help": "De oppervlakte voor %{dimensionType} %{dimension} is %{value} m\xB2",
  "DimensionInfo.roomsCount.help": "Er zijn %{value} spatie(s) voor %{dimensionType} %{dimension}",
  "DimensionInfo.peopleCount.help": "Er zijn %{value} persoon(en) toegewezen voor %{dimensionType} %{dimension}",
  "DimensionInfo.totalPeopleCount.help": "Er zijn in totaal %{value} persoon(en) toegewezen voor %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesCount.help": "Er zijn %{value} werkstation(s) voor %{dimensionType} %{dimension}",
  "DimensionInfo.peopleRatio.help": "Er zijn %{value} m\xB2 per getroffen persoon voor %{dimensionType} %{dimension}",
  "DimensionInfo.workplacesRatio.help": "Er zijn %{value} m\xB2 per werkstation voor %{dimensionType} %{dimension}",
  "DimensionInfo.occupancyRate.help": "De bezettingsgraad is %{value} % voor %{dimensionType} %{dimension}",
  "DimensionInfo.expansionRatio.help": "Het uitbreidingspercentage is %{value} voor %{dimensionType} %{dimension}",
  "DimensionInfo.freeWorkplacesCount.help": "Er zijn %{value} vrije werkstation(s) voor %{dimensionType} %{dimension}",
  "DimensionInfo.flexWorkplacesCount.help": "Er zijn %{value} flexwerkstation(s) voor %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesCount.help": "Er zijn %{value} gedeelde werkstations voor %{dimensionType} %{dimension}",
  "DimensionInfo.sharedWorkplacesRatio.help": "Het tarief voor gedeelde desktops is %{value} voor %{dimensionType} %{dimension}",
  "DimensionInfo.flexRatio.help": "Het tarief van flexwerkplekken",
  "DimensionInfo.transitWorkplacesCount.help": "Er zijn %{value} transitwerkstation(s) voor %{dimensionType} %{dimension}",
  "DimensionInfo.dimensionPeopleCount.help": "Er zijn %{value} persoon(en) toegewezen in %{dimensionType} %{dimension}",
  "DimensionInfo.seatsCount.help": "Er zijn %{value} zitplaatsen voor %{dimensionType} %{dimension}",
  "DimensionInfo.seatsPeopleRatio.help": "Het aantal zitplaatsen is %{value} beschikbare plaatsen per persoon voor %{dimensionType} %{dimension}",
  "DimensionInfo.carbonFootprint.help": "De CO2-voetafdruk is %{value} van de CO2-uitstoot voor %{dimensionType} %{dimension}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.peopleCount": "Er zijn %{count} mensen met kostenplaats %{costCenterName}",
  "PersonCostCenterWorkplaceInfo.nodeInfo.workplaceCount": "Er zijn %{count} werkstations met minstens \xE9\xE9n persoon met kostenplaats %{costCenterName}",
  "PersonCostCenterWorkplaceFilter.Empty": "Er zijn geen kostenplaatsen verbonden aan mensen",
  "NoDataOnBuildingInfo.noData": "Selecteer alle verdiepingen in de planopties om gegevens te hebben. Er mogen geen gegevens zijn voor de verdiepingen die u hebt geselecteerd",
  "CostCenterWorkplaceMapFilter.nodeInfo.workplacesCount": "Er zijn %{count} werkstations met kostenplaats %{name}",
  "CostCenterMapFilterTabs.tabs.rooms": "Spaties",
  "CostCenterMapFilterTabs.tabs.workplaces": "Persoonlijke werkplekken",
  "CostCenterMapFilterTabs.tabs.people": "Mensen",
  "CostCenterMapFilter.Empty": "Er zijn momenteel geen kostenplaatsen gekoppeld aan ruimtes. U kunt er meer toevoegen door een ruimte te wijzigen en er een kostenplaats aan te koppelen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "CostCenterWorkplaceMapFilter.Empty": "Er zijn momenteel geen kostenplaatsen gekoppeld aan werkstations. U kunt er meer toevoegen door een werkstation te wijzigen en er een kostenplaats aan te koppelen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "BuildingReports.items.sheets.physicals": "Fysieke objecten",
  "BuildingReports.items.sheets.virtuals": "Virtuele objecten",
  "BuildingReports.items.sheets.merged": "Fusie",
  "BuildingInventory.floor": "Vloer",
  "BuildingInventory.quantity": "hoeveelheid",
  "BuildingInventory.price": "Prijs",
  "BuildingInventory.manufacturer": "Maker",
  "BuildingInventory.quantityTotal": "Totaal",
  "BuildingInventory.title": "De inventaris van het gebouw %{building.name}",
  "BuildingInventory.buttons.viewPDF.help": "Download het bestand als PDF zodat u het kunt downloaden of delen",
  "BuildingInventory.buttons.viewPDF.label": "Download de PDF-versie",
  "BuildingInventory.itemTypesFamilySectionTitle": "Voorraadcategorie\xEBn",
  "BuildingInventory.fileNamePrefix": "inventaris",
  "BuildingLabel.scenario": "Dit gebouw is een scenario van het gebouw %{name}",
  "CopyBuildingToCart.help": "Kopieer de gebouwstructuur",
  "BuildingClonePropertiesSelector.properties.clone.workplaces": "Kopieer werkstations",
  "BuildingClonePropertiesSelector.properties.clone.items": "Kopieer objecten",
  "BuildingDistributionCost.floors.excel.tabs.floors": "Verdeling sleutels per verdieping",
  "BuildingDistributionCost.floors.excel.tabs.building": "Verdeelsleutels voor het gebouw",
  "BuildingDistributionCost.floors.excel.tabs.buildingDetailed": "Gebouwdetails per kostenplaats",
  "BuildingDistributionCost.floors.excel.download.label": "Download het Excel-bestand met de uitsplitsingen",
  "BuildingDistributionCost.floors.excel.download.help": "Download het Excel-bestand om de distributiesleutels en gekwalificeerde gebieden per kostenplaats en per verdieping te kunnen delen en exporteren. De export omvat de verdeling per verdieping of per gebouw van de kostenplaatsen",
  "BuildingDistributionCost.floors.excel.headers.floors.floorName": "Naam verdieping",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterName": "Kostenplaats",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterArea": "Oppervlakte van ruimtes inclusief vloerverdelingen",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterRoomsArea": "Gebied met kostenplaatsruimten",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterDistributedFloorRatio": "Verbruiksverhouding op de vloer",
  "BuildingDistributionCost.floors.excel.headers.floors.costCenterFloorDistributedArea": "Totale oppervlakte van de over de verdieping te verdelen ruimtes voor deze kostenplaats",
  "BuildingDistributionCost.floors.excel.headers.floors.floorArea": "Totaal vloeroppervlak inclusief vloerverdelingen",
  "BuildingDistributionCost.floors.excel.headers.floors.totalFloorDistributedArea": "Oppervlak om over de vloer te verdelen",
  "BuildingDistributionCost.floors.excel.headers.floors.totalBuildingDistributedArea": "Vloeroppervlak te verdelen in het gebouw",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterName": "Kostenplaats",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterArea": "Totale oppervlakte van de kostenplaats",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterBuildingRatio": "Gebruiksratio van gebouwen",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterDistributedBuildingArea": "Totale oppervlakte van de verdeelde ruimtes van het gebouw",
  "BuildingDistributionCost.floors.excel.headers.building.costCenterRoomsArea": "Gebied met kostenplaatsruimten",
  "BuildingDistributionCost.floors.excel.headers.building.buildingArea": "Totale oppervlakte van de bouwruimtes",
  "BuildingDistributionCost.floors.excel.headers.building.buildingDistributedArea": "Te verdelen oppervlakte in het gebouw",
  "BuildingDistributionCost.floors.excel.headers.building.totalBuildingArea": "Totale bouwoppervlakte",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.buildingName": "Gebouw",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterName": "Kostenplaats",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterArea": "Kostenplaatsgebied",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterBuildingRatio": "Distributiesleutel in het gebouw",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.distributedCostCenterArea": "Verdeling van kostenplaats %{costCenterName}",
  "BuildingDistributionCost.floors.excel.headers.buildingDetailed.costCenterTotalArea": "Totale oppervlakte die opnieuw moet worden gefactureerd",
  "BuildingDistributionCost.excel.tabs.distributionCost": "Distributiesleutels",
  "BuildingDistributionCost.excel.tabs.distributionCostDetails": "Details",
  "BuildingDistributionCost.excel.download.label": "Download het Excel-bestand zonder de storingen",
  "BuildingDistributionCost.excel.download.help": "Download het Excel-bestand om de distributiesleutels en gekwalificeerde gebieden per kostenplaats te kunnen delen en exporteren",
  "BuildingDistributionCost.Title": "Verdeelsleutels en gekwalificeerde gebieden per kostenplaats zonder storingen",
  "BuildingDistributionCost.table.type": "Vriendelijk",
  "BuildingDistributionCost.table.distributionKey": "Distributie sleutel",
  "BuildingDistributionCost.table.costCenterDistributionKey": "Verdeelsleutel voor kostenplaats",
  "BuildingDistributionCost.table.workplacesCount": "Aantal werkstations",
  "BuildingDistributionCost.table.workplaceTotalCount": "Totaal aantal werkstations",
  "BuildingFloorSelection.title": "De verdiepingen die u in uw scenario moet dupliceren",
  "BuildingFloorSelection.all.select": "Selecteer alle verdiepingen",
  "BuildingFloorSelection.all.unselect": "Deselecteer alle verdiepingen",
  "BuildingCloneFloorSelection.title": "De verdiepingen die u in uw scenario moet dupliceren",
  "BuildingCloneFloorSelection.all.select": "Selecteer alle verdiepingen",
  "BuildingCloneFloorSelection.all.unselect": "Deselecteer alle verdiepingen",
  "BuildingClone.noClone": "Er is nog geen scenario gemaakt. U kunt uw eerste scenario voor dit gebouw maken",
  "BuildingClone.buttons.CreateClone.label": "Cre\xEBer een scenario",
  "BuildingClone.buttons.CreateClone.help": "Het scenario dupliceert het gebouw met de aangevinkte eigenschappen",
  "BuildingClone.accordion.title": "Cre\xEBer een nieuw scenario",
  "BuildingClone.properties.clone.people": "Dubbele opdrachten",
  "BuildingClone.properties.clone.workplaces": "Dubbele werkstations",
  "BuildingClone.properties.clone.items": "Dubbele objecten",
  "BuildingClone.properties.clone.dimensions": "Koppel analyse- en toewijzingslagen aan spaties",
  "BuildingClone.properties.clone.organization": "Koppel organisaties aan ruimtes",
  "BuildingDashboard.dashboards.workplace": "Werkstationdashboard",
  "BuildingDashboard.dashboards.area": "Dashboard voor oppervlakken",
  "CampusBuildingsAccordion.buildingCount": "Het aantal gebouwen",
  "CalculatedPropertiesAccordions.mesures": "Maatregelen",
  "CalculatedPropertiesAccordions.kpi": "Indicatoren",
  "DimensionMapFilter.TooltipTitle.notSelected": "Selecteer %{dimension} om de ruimtes op de plattegrond met de bijbehorende kleur te zien",
  "DimensionMapFilter.TooltipTitle.selected": "Als u %{dimension} deselecteert, wordt de bijbehorende kleur uit het vlak verwijderd",
  "DimensionMapFilter.tooltip.true": "Selecteer alle onderstaande filters om ze op de kaart in te kleuren",
  "DimensionMapFilter.tooltip.false": "Deselecteer alle onderstaande filters",
  "DimensionMapFilter.NoNode": "Er zijn momenteel geen analyselagen. U kunt er meer toevoegen door een ruimte te bewerken en er analyselagen aan toe te voegen",
  "DimensionMapFilter.NoCategory": "Er zijn geen analyselagen beschikbaar. U moet deze eerst aan spaties koppelen",
  "SelectDimensionTypeNavigationLayoutIcon.select": "Selecteer dit laagtype voor navigatie",
  "SelectDimensionTypeNavigationLayoutIcon.unselect": "Verwijder navigatie per analyselaag en keer terug naar navigatie per spaties",
  "SelectDimensionTypeNavigationLayoutIcon.help": "Door te navigeren per analyselaag kunt u op een ruimte klikken, de bijbehorende laag selecteren en door de ruimtes heen de mensen bekijken die aan deze laag zijn toegewezen of de werkstations en objecten die aan deze laag zijn gekoppeld",
  "DimensionTypeNavigationWarning.message": "U bladert op %{name} , spaties worden tijdens de selectie gegroepeerd. Klik om te annuleren en terug te keren naar ruimtenavigatie",
  "RoomCardSelectDimensions.needSave": "Bewaar of annuleer uw wijzigingen voordat u de analyselagen van deze ruimte kunt wijzigen",
  "AssignPersonToWorkplaceCheckListDialogTitle.title": "U heeft %{personName} toegewezen aan werkstation %{workplaceName}",
  "AssignPersonToRoomCheckListDialogTitle.title": "Je hebt %{personName} toegewezen aan ruimte %{roomName}",
  "WorkplaceFullName.noName": "Naamloze werkstation",
  "RoomFullName.noName": "Naamloze ruimte",
  "AssignPersonCheckListWorkplaceTransit.title": "Werkstation %{workplaceName} is een transitwerkstation",
  "AssignPersonCheckListWorkplaceTransit.RemoveIsTransit": "Verwijder het type \u201Cgaat door\u201D van het werkstation",
  "AssignPersonCheckListWorkplaceAffectations.title": "Deze persoon is al toegewezen aan andere werkstations, wil je de volgende toewijzingen voor %{personFullname} verwijderen",
  "AssignPersonCheckListRoomAffectations.title": "Deze persoon is al direct toegewezen aan andere ruimtes, wil je de volgende toewijzingen voor %{personFullname} verwijderen",
  "AssignPersonCheckListDialogApplyButton.help": "Verwijder geselecteerde opdrachten die mogelijk overeenkomen met de oude opdrachten van de persoon",
  "AssignPersonCheckListDialogApplyButton.label": "Geselecteerde toewijzingen verwijderen",
  "AssignPersonCheckListDialog.actions.close.label": "sluiten",
  "AssignPersonCheckListDialog.actions.close.help": "Sluit en verwijder geen andere toewijzingen",
  "AssignPersonCheckListBuildingAffectations.title": "Deze persoon is al direct toegewezen aan andere gebouwen, wil je de volgende toewijzingen voor %{personFullname} verwijderen",
  "WorkplaceVirtualInventory.title": "Virtuele werkplekinventaris",
  "WorkplacePhysicalInventory.title": "Fysieke inventaris van de werkplek",
  "WorkplaceTypeSeatsCount.label": "aantal zitplaatsen",
  "WorkplaceTypeSeatsCount.help": "Het aantal zitplaatsen dat voor dit type werkplek wordt geteld",
  "WorkplaceTypeCarbonFootprintCount.label": "Koolstofvoetafdruk",
  "WorkplaceTypeCarbonFootprintCount.help": "De CO2-voetafdruk is de hoeveelheid broeikasgassen die worden uitgestoten door de meubelobjecten van dit type werkplek",
  "DeleteWorkplace.help": "Werkstation verwijderen: [ %{name} ], opdrachten worden ook verwijderd",
  "AddPersonToWorkplace.text": "Wijs een persoon toe",
  "AddPersonToWorkplace.help": "Voeg een opdracht toe aan dit werkstation, je kunt meerdere opdrachten toevoegen voor hetzelfde werkstation",
  "MouvementMatrixImport.errors.noSheet": "Kan Excel-blad met naam %{name} [ %{objectTypeName} ] niet vinden",
  "RoomTypeGroupMapFilter.Empty": "Er is geen ruimtetypegroep gekoppeld aan ruimtes via ruimtetypen. U kunt er meer toevoegen door een ruimtetypegroep te bewerken en er een ruimtetype aan toe te voegen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "RoomTypeGroupLabel.exclude.tooltip": "De ruimtetypologiegroep sluit bijbehorende ruimtetypen uit",
  "RoomTypeGroupHelpTitle.exclude": "De groepering van het ruimtetype %{name} is van het uitsluitingstype. Het brengt alle ruimtes samen, met uitzondering van de volgende ruimtetypologie\xEBn:",
  "RoomTypeGroupHelpTitle.include": "De ruimtetypegroepering %{name} brengt de volgende ruimtetypologie\xEBn samen:",
  "RoomTypeGroupToRoomTypeLabel.exclude.tooltip": "De ruimtetypologie is uitgesloten",
  "RoomMapFilter.Empty": "Er is geen ruimtetype gekoppeld aan ruimtes. U kunt er meer toevoegen door een ruimte te wijzigen en er een bijbehorend type aan toe te voegen. Vervolgens kunt u de weergave ervan vanuit deze sectie beheren",
  "LayoutFiltersTabZone.collapse.help": "Het menu is gesloten, u kunt het openen door op het eerste pictogram te klikken om het te openen en de details van de planelementen te bekijken",
  "LayoutFiltersTabOpenToggleIcon.open.true": "Sluit het kaartmenu om de ruimte van de kaartweergave te optimaliseren",
  "LayoutFiltersTabOpenToggleIcon.open.false": "Open het planmenu om gedetailleerde informatie over het plan te bekijken",
  "CompanyTypeLabel.notClassified": "Niet-geclassificeerd platform",
  "BuildingMenuItem.menu.scenario": "Scenario's ( %{count} )",
  "SearchMenuItem.icon.tooltip": "Zoeken",
  "RemoveFromCartIconButton.help": "Uit winkelwagen verwijderen",
  "CopyCartContentIntoTenant.buttons.single.paste.help": "Importeer in dit bedrijf",
  "IndexContextMenuItem.navigation": "Navigatie",
  "GlobalSearchIncludeScenarios.label": "Scenario's opnemen in zoeken",
  "GlobalSearch.Input.placeholder": "Zoeken",
  "GlobalSearch.Start": "U kunt zoeken op bijvoorbeeld mensen, ruimtes, werkstations, objecten of andere entiteiten, de zoekopdracht begint vanaf het 2e teken",
  "GlobalSearch.NoResult": "Er zijn geen resultaten gevonden voor uw zoekopdracht",
  "GlobalSearch.close.help": "Duidelijke zoek",
  "models.PartnerExportMappingConfigurationToFloor.singular": "Fase opgenomen in de configuratie van de transformatie van partnerexporten",
  "models.PartnerExportMappingConfigurationToFloor.plural": "Fasen die zijn opgenomen in de partnerexporttransformatieconfiguratie",
  "models.PartnerExportMappingConfigurationToFloor.determinant.defined": "de fase die is opgenomen in de configuratie van de transformatie van partnerexporten",
  "models.PartnerExportMappingConfigurationToFloor.determinant.undefined": "een fase die is opgenomen in de configuratie van de transformatie van partnerexporten",
  "models.PartnerExportMappingConfigurationToFloor.determinants.defined": "de fasen die zijn opgenomen in de configuraties van partnerexporttransformaties",
  "models.PartnerExportMappingConfigurationToFloor.determinants.undefined": "fasen die zijn opgenomen in de configuraties van partnerexporttransformaties",
  "models.PartnerExportMappingToRoomType.singular": "Transformatie van partnerexporten voor ruimtetypen",
  "models.PartnerExportMappingToRoomType.plural": "Transformaties van partnerexporten voor ruimtetypen",
  "models.PartnerExportMappingToRoomType.determinant.defined": "de transformatie van partnerexporten voor ruimtetypen",
  "models.PartnerExportMappingToRoomType.determinant.undefined": "een transformatie van partnerexporten voor soorten ruimtes",
  "models.PartnerExportMappingToRoomType.determinants.defined": "transformaties van partnerexporten voor ruimtetypen",
  "models.PartnerExportMappingToRoomType.determinants.undefined": "transformaties van partnerexporten voor ruimtetypen",
  "models.PartnerExportMappingConfiguration.singular": "Partnerexporttransformatie configureren",
  "models.PartnerExportMappingConfiguration.plural": "Configuraties van partnerexporttransformaties",
  "models.PartnerExportMappingConfiguration.determinant.defined": "het configureren van de transformatie van partnerexporten",
  "models.PartnerExportMappingConfiguration.determinant.undefined": "een configuratie van de transformatie van partnerexporten",
  "models.PartnerExportMappingConfiguration.determinants.defined": "configuraties van partnerexporttransformaties",
  "models.PartnerExportMappingConfiguration.determinants.undefined": "configuraties van partnerexporttransformaties",
  "models.PartnerExportMapping.singular": "Transformatie van partnerexport",
  "models.PartnerExportMapping.plural": "Transformaties van partnerexport",
  "models.PartnerExportMapping.determinant.defined": "de transformatie van de partnerexport",
  "models.PartnerExportMapping.determinant.undefined": "een transformatie van de partnerexport",
  "models.PartnerExportMapping.determinants.defined": "transformaties van de partnerexport",
  "models.PartnerExportMapping.determinants.undefined": "transformaties van de partnerexport",
  "models.WorkplaceTypeItemType.singular": "objecttype in werkstationtype",
  "models.WorkplaceTypeItemType.plural": "objecttypen in werkstationtype",
  "models.WorkplaceTypeItemType.determinant.defined": "het objecttype in het werkstationtype",
  "models.WorkplaceTypeItemType.determinant.undefined": "een objecttype in een werkstationtype",
  "models.WorkplaceTypeItemType.determinants.defined": "objecttypen in werkstationtypen",
  "models.WorkplaceTypeItemType.determinants.undefined": "objecttypen in werkstationtypen",
  "models.WorkplaceTypeItemType.properties.id.label": "Identificatie van het objecttype in het werkstationtype",
  "models.WorkplaceTypeItemType.properties.zIndex.label": "Hoogte-index",
  "models.WorkplaceTypeItemType.properties.zIndex.description": "Met de hoogte-index kunt u de volgorde van weergave van objecttypen defini\xEBren: hoe groter de index, hoe meer het object boven de andere zal staan",
  "models.WorkplaceTypeItemType.properties.physicalInventory.label": "Fysieke voorraad",
  "models.WorkplaceTypeItemType.properties.physicalInventory.description": "Als deze optie is aangevinkt wordt er per werkplek een fysiek object aangemaakt in Surfy, dit object mag een unieke referentie hebben, in alle gevallen is de bouwinventaris up-to-date",
  "models.WorkplaceTypeItemType.properties.seatsCount.label": "aantal zitplaatsen",
  "models.WorkplaceTypeItemType.properties.seatsCount.description": "Hiermee kunt u het aantal beschikbare zitplaatsen defini\xEBren in het type werkstation voor dit type object",
  "models.WorkplaceType.singular": "soort werkstation",
  "models.WorkplaceType.plural": "soorten werkstations",
  "models.WorkplaceType.determinant.defined": "het type werkstation",
  "models.WorkplaceType.determinant.undefined": "een soort werkstation",
  "models.WorkplaceType.determinants.defined": "soorten werkstations",
  "models.WorkplaceType.determinants.undefined": "soorten werkstations",
  "models.WorkplaceType.properties.id.label": "Identificatie van de werkstationtypologie",
  "models.WorkplaceType.properties.id.description": "???",
  "models.WorkplaceType.properties.name.label": "Naam van het werkstationtype",
  "models.WorkplaceType.properties.name.description": "???",
  "models.WorkplaceType.views.editor.help": "Vormen en locaties van objecttypen bewerken voor werkstationtype %{name}",
  "models.WorkplaceType.views.editor.label": "Vormen bewerken",
  "models.WorkplaceType.views.avatar.help": "Vorm van werkstationtype %{name} bekijken",
  "models.WorkplaceType.views.avatar.label": "Zie de vorm",
  "models.WorkplaceType.views.dq-not-used.label": "Niet gebruikt",
  "models.WorkplaceType.views.dq-not-used.help": "Vermeld alle ongebruikte typen werkstations via werkstations",
  "models.WorkplaceAffectation.singular": "Toewijzing aan werkstation",
  "models.WorkplaceAffectation.plural": "Werkstationopdrachten",
  "models.WorkplaceAffectation.description": "Hiermee kunt u een vaste werkplek aan een persoon toewijzen",
  "models.WorkplaceAffectation.determinant.defined": "toewijzing aan het werkstation",
  "models.WorkplaceAffectation.determinant.undefined": "een opdracht aan de werkplek",
  "models.WorkplaceAffectation.determinants.defined": "werkstation opdrachten",
  "models.WorkplaceAffectation.determinants.undefined": "werkstation opdrachten",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.help": "Importeer werkstationoverdrachtsmatrices",
  "models.WorkplaceAffectation.views.workplace-mouvement-matrix-import.label": "Overdrachtsmatrix importeren",
  "models.Workplace.singular": "werkplek",
  "models.Workplace.plural": "persoonlijke werkplekken",
  "models.Workplace.determinant.defined": "bureaublad",
  "models.Workplace.determinant.undefined": "een werkstation",
  "models.Workplace.determinants.defined": "werkstations",
  "models.Workplace.determinants.undefined": "werkstations",
  "models.Workplace.views.assign-current-user.label": "Bezet het werkstation",
  "models.Workplace.views.assign-current-user.help": "Bezet werkstation %{name}",
  "models.Workplace.properties.id.label": "Werkstation-ID",
  "models.Workplace.properties.id.description": "???",
  "models.Workplace.properties.color.label": "Kleur",
  "models.Workplace.properties.color.description": "De kleur die het type werkplek op het plan krijgt",
  "models.Workplace.properties.name.label": "Naam van werkstation",
  "models.Workplace.properties.name.description": "De naam van het werkstation wordt gebruikt om het eenvoudiger te identificeren",
  "models.Workplace.properties.isFlex.label": "Is het in flex?",
  "models.Workplace.properties.isFlex.description": "Als dit station in Flex-modus wordt gebruikt",
  "models.Workplace.properties.isShared.label": "Is gedeeld ?",
  "models.Workplace.properties.isShared.description": "Indien dit werkstation door meerdere personen gedeeld wordt, wordt dit automatisch veld gevalideerd zodra er minimaal 2 opdrachten op het werkstation staan",
  "models.Workplace.properties.isTransit.label": "Komt er doorheen?",
  "models.Workplace.properties.isTransit.description": "Indien deze functie van voorbijgaande aard is, wordt deze functie uitgesloten van vrije werkplekken zonder in flex te reserveren, een tijdelijke functie maakt het mogelijk om voor iedereen die er gebruik van wil maken een werkplek beschikbaar te hebben zonder opgenomen te zijn in een reserveringssysteem",
  "models.Workplace.properties.isBookable.label": "Is het boekbaar?",
  "models.Workplace.properties.isBookable.description": "Als deze werkplek reserveerbaar is in een reserveringssysteem",
  "models.Workplace.properties.position.label": "Positie",
  "models.Workplace.properties.position.description": "De positie van het werkstation in de ruimte",
  "models.Workplace.properties.rotation.label": "Rotatie",
  "models.Workplace.properties.rotation.description": "De rotatiehoek van het werkstation in de ruimte",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.label": "Gemiddeld toewijzingspercentage",
  "models.Workplace.properties.workplaceAffectationsCalculatedRateSum.description": "Gemiddelde toewijzingssnelheid van de werkplek, afhankelijk van de toewijzing van aanwezigheidsdagen van personen",
  "models.Workplace.properties.workplaceAffectationsCount.label": "Aantal opdrachten",
  "models.Workplace.properties.workplaceAffectationsCount.description": "Aantal opdrachten op de werkplek",
  "models.Workplace.properties.comment.label": "Opmerking",
  "models.Workplace.properties.comment.description": "Aanvullende informatie over de werkplek",
  "models.Workplace.properties.room.label": "Werkplek ruimte",
  "models.UserRegistrationTenantRuleToJupRole.singular": "Op rollen gebaseerde associatie van authenticatieregels",
  "models.UserRegistrationTenantRuleToJupRole.plural": "Op rollen gebaseerde authenticatieregelassociaties",
  "models.UserRegistrationTenantRuleToJupRole.determinant.defined": "de associatie van authenticatieregel met rol",
  "models.UserRegistrationTenantRuleToJupRole.determinant.undefined": "een op rollen gebaseerde authenticatieregelkoppeling",
  "models.UserRegistrationTenantRuleToJupRole.determinants.defined": "authenticatieregelkoppelingen aan rollen",
  "models.UserRegistrationTenantRuleToJupRole.determinants.undefined": "authenticatieregelkoppelingen aan rollen",
  "models.UserRegistrationTenantRuleToContentRole.singular": "Associatie van authenticatieregel met inhoudsrol",
  "models.UserRegistrationTenantRuleToContentRole.plural": "Authenticatieregel voor associaties met inhoudsrollen",
  "models.UserRegistrationTenantRuleToContentRole.determinant.defined": "koppeling van authenticatieregel aan inhoudsrol",
  "models.UserRegistrationTenantRuleToContentRole.determinant.undefined": "een authenticatieregelkoppeling met inhoudsrol",
  "models.UserRegistrationTenantRuleToContentRole.determinants.defined": "authenticatieregel aan inhoudrolassociaties",
  "models.UserRegistrationTenantRuleToContentRole.determinants.undefined": "authenticatieregel aan contentrolassociaties",
  "models.UserRegistrationTenantRule.singular": "Authenticatieregel",
  "models.UserRegistrationTenantRule.plural": "Authenticatieregels",
  "models.UserRegistrationTenantRule.determinant.defined": "de authenticatieregel",
  "models.UserRegistrationTenantRule.determinant.undefined": "een authenticatieregel",
  "models.UserRegistrationTenantRule.determinants.defined": "authenticatieregels",
  "models.UserRegistrationTenantRule.determinants.undefined": "authenticatieregels",
  "models.UserRegistrationTenantRule.properties.domains.label": "Gebieden",
  "models.UserRegistrationTenantRule.properties.domains.description": "Scheid domeinen met spaties en plaats het apenstaartje",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.label": "Automatisch rollen koppelen",
  "models.UserRegistrationTenantRule.properties.automaticUserToRoleMapping.description": "Koppel automatisch rollen en inhoudsrollen aan gebruikers die aan deze regel voldoen",
  "models.UserCompany.singular": "bedrijfsgebruiker",
  "models.UserCompany.plural": "zakelijke gebruikers",
  "models.UserCompany.description": "Zakelijke gebruikers hebben toegang tot het Surfy-platform van hun bedrijf",
  "models.UserCompany.determinant.defined": "zakelijke gebruiker",
  "models.UserCompany.determinant.undefined": "een bedrijfsgebruiker",
  "models.UserCompany.determinants.defined": "zakelijke gebruikers",
  "models.UserCompany.determinants.undefined": "van bedrijfsgebruikers",
  "models.UserCompany.properties.id.label": "Bedrijfsgebruikers-ID",
  "models.UserCompany.properties.buildingOwners.label": "Eigen gebouwen",
  "models.UserCompany.properties.buildingOwners.description": "Gebouwen die eigendom zijn van de gebruiker",
  "models.User.singular": "gebruiker",
  "models.User.plural": "gebruikers",
  "models.User.determinant.defined": "de gebruiker",
  "models.User.determinant.undefined": "een gebruiker",
  "models.User.determinants.defined": "de gebruikers",
  "models.User.determinants.undefined": "gebruikers",
  "models.User.properties.id.label": "gebruikersnaam",
  "models.User.properties.id.description": "???",
  "models.User.properties.firstname.label": "Voornaam",
  "models.User.properties.firstname.description": "De voornaam van de gebruiker",
  "models.User.properties.lastname.label": "Achternaam",
  "models.User.properties.lastname.description": "De achternaam van de gebruiker",
  "models.User.properties.email.label": "E-mail",
  "models.User.properties.email.description": "Het e-mailadres dat door de gebruiker wordt gebruikt voor correspondentie of authenticatie",
  "models.Structure.singular": "structuur",
  "models.Structure.plural": "structuren",
  "models.Structure.determinant.defined": "de structuur",
  "models.Structure.determinant.undefined": "een structuur",
  "models.Structure.determinants.defined": "de structuren",
  "models.Structure.determinants.undefined": "structuren",
  "models.Structure.properties.nom.label": "Naam van de structuur",
  "models.Structure.properties.nom.description": "Om de structuur gemakkelijk te vinden en opnieuw te gebruiken",
  "models.Structure.properties.transform.label": "Transformatie",
  "models.Structure.properties.transform.description": "Transformatie van de structuur om deze op een kaart te kalibreren",
  "models.Structure.views.editor.label": "Vorm bewerken",
  "models.Structure.views.editor.help": "Verander de vorm van de structuur",
  "models.Structure.views.gmap-calibrate.label": "Kalibreer de structuur op een kaart",
  "models.Structure.views.gmap-calibrate.help": "Kalibreer de structuur op een kaart om geografische co\xF6rdinaten te associ\xEBren",
  "models.RoomTypeGroupToRoomType.singular": "associatie van ruimtetypologiegroep met ruimtetypologie",
  "models.RoomTypeGroupToRoomType.plural": "associaties van groepen ruimtetypologie\xEBn met ruimtetypologie\xEBn",
  "models.RoomTypeGroupToRoomType.determinant.defined": "de associatie van ruimtetypologiegroep met ruimtetypologie",
  "models.RoomTypeGroupToRoomType.determinant.undefined": "een groepsassociatie van ruimtetypologie met ruimtetypologie",
  "models.RoomTypeGroupToRoomType.determinants.defined": "groepsassociaties van ruimtetypologie\xEBn met ruimtetypologie\xEBn",
  "models.RoomTypeGroupToRoomType.determinants.undefined": "groepsassociaties van ruimtetypologie\xEBn met ruimtetypologie\xEBn",
  "models.RoomTypeGroupFloor.singular": "typologiegroep vloeroppervlak",
  "models.RoomTypeGroupFloor.plural": "typologiegroepen voor vloeroppervlakken",
  "models.RoomTypeGroupFloor.determinant.defined": "de vloeroppervlaktypologiegroep",
  "models.RoomTypeGroupFloor.determinant.undefined": "een groep vloeroppervlaktypologie\xEBn",
  "models.RoomTypeGroupFloor.determinants.defined": "de vloeroppervlaktypologiegroep",
  "models.RoomTypeGroupFloor.determinants.undefined": "groepen vloeroppervlaktypologie\xEBn",
  "models.RoomTypeGroupBuilding.singular": "ruimtetypologie groep gebouwen",
  "models.RoomTypeGroupBuilding.plural": "groepen typologie\xEBn van gebouwruimten",
  "models.RoomTypeGroupBuilding.determinant.defined": "de typologiegroep gebouwruimte",
  "models.RoomTypeGroupBuilding.determinant.undefined": "een groep typologie\xEBn van bouwruimtes",
  "models.RoomTypeGroupBuilding.determinants.defined": "de typologiegroep gebouwruimte",
  "models.RoomTypeGroupBuilding.determinants.undefined": "groepen typologie\xEBn van gebouwruimten",
  "models.RoomTypeGroup.singular": "groep ruimtetypologie",
  "models.RoomTypeGroup.plural": "ruimtetypologiegroepen",
  "models.RoomTypeGroup.determinant.defined": "de ruimtetypologiegroep",
  "models.RoomTypeGroup.determinant.undefined": "een ruimtetypologiegroep",
  "models.RoomTypeGroup.determinants.defined": "ruimtetypologiegroepen",
  "models.RoomTypeGroup.determinants.undefined": "groepen ruimtetypologie\xEBn",
  "models.RoomTypeGroup.properties.id.label": "Groepsidentificatie voor ruimtetypologie",
  "models.RoomTypeGroup.properties.name.label": "Groepsnaam van ruimtetypologie",
  "models.RoomTypeGroup.properties.code.label": "Gecodeerd",
  "models.RoomTypeGroup.properties.color.label": "Kleur",
  "models.RoomTypeGroup.properties.exclude.label": "Uitsluiten",
  "models.RoomTypeGroup.properties.exclude.description": "Sluit ruimtetypologie\xEBn uit van deze groep",
  "models.RoomTypeFloor.singular": "typologie van de vloeroppervlakte",
  "models.RoomTypeFloor.plural": "typologie\xEBn van vloeroppervlakken",
  "models.RoomTypeFloor.determinant.defined": "de typologie van vloeroppervlak",
  "models.RoomTypeFloor.determinant.undefined": "een typologie van vloeroppervlak",
  "models.RoomTypeFloor.determinants.defined": "typologie\xEBn van vloeroppervlakken",
  "models.RoomTypeFloor.determinants.undefined": "typologie\xEBn van vloeroppervlakken",
  "models.RoomTypeBuilding.singular": "typologie van de bouwruimte",
  "models.RoomTypeBuilding.plural": "typologie\xEBn van de bouwruimte",
  "models.RoomTypeBuilding.determinant.defined": "de typologie van de bouwruimte",
  "models.RoomTypeBuilding.determinant.undefined": "een typologie van bouwruimte",
  "models.RoomTypeBuilding.determinants.defined": "typologie\xEBn van de bouwruimte",
  "models.RoomTypeBuilding.determinants.undefined": "typologie\xEBn van de bouwruimte",
  "models.RoomType.singular": "typologie van de ruimte",
  "models.RoomType.plural": "typologie\xEBn van de ruimte",
  "models.RoomType.determinant.defined": "typologie van de ruimte",
  "models.RoomType.determinant.undefined": "een typologie van de ruimte",
  "models.RoomType.determinants.defined": "typologie\xEBn van de ruimte",
  "models.RoomType.determinants.undefined": "typologie\xEBn van de ruimte",
  "models.RoomType.properties.id.label": "Identificatie voor ruimtetypologie",
  "models.RoomType.properties.name.label": "Naam van de ruimtetypologie",
  "models.RoomType.properties.color.label": "Kleur in 2d",
  "models.RoomType.properties.color.description": "De kleur van het type ruimte maakt het mogelijk om elk type op het 2D-plan te onderscheiden",
  "models.RoomType.properties.color3d.label": "Kleur in 3D",
  "models.RoomType.properties.color3d.description": "Hiermee kunt u de kleur van het type ruimte in 3D beheren, deze optie is alleen van toepassing op de 3D-visie van de vloer",
  "models.RoomType.properties.displayWallsOn3d.label": "Laat muren zien",
  "models.RoomType.properties.displayWallsOn3d.description": "Hiermee kunt u de wanden van de ruimte al dan niet in het 3D-plan van de vloer weergeven. De niet weergegeven muren zijn in 2D gestippeld, waardoor u een aangenamer zicht krijgt, vooral in open ruimtes",
  "models.RoomType.properties.icon.label": "Icoon",
  "models.RoomType.properties.icon.description": "Met het icoon voor het type ruimte kunt u in de 2D- en 3D-plannen een icoon voor dit type ruimte weergeven in plaats van de klassieke informatie op het plan, gekoppeld aan de achtergrondkleur maakt dit het lezen van het plan aangenamer",
  "models.RoomType.properties.cadence.label": "Cadans",
  "models.RoomType.properties.cadence.description": "Het tarief is een numerieke waarde die wordt gebruikt om de moeilijkheidsgraad van het opschonen van de ruimtetypologie aan te geven. Het is gelijk aan het aantal m\xB2 dat in \xE9\xE9n uur kan worden behandeld in deze typologie (circulatie, laboratorium, enz.)",
  "models.RoomType.properties.isBookable.label": "Is het boekbaar?",
  "models.RoomType.properties.isBookable.description": "Vink dit vakje aan als dit type ruimte reserveerbaar is",
  "models.RoomPointSegmentType.singular": "Segmenttype",
  "models.RoomPointSegmentType.plural": "Segmenttypen",
  "models.RoomPointSegmentType.determinant.defined": "het type segment",
  "models.RoomPointSegmentType.determinant.undefined": "een soort segment",
  "models.RoomPointSegmentType.determinants.defined": "segmenttypen",
  "models.RoomPointSegmentType.determinants.undefined": "segmenttypen",
  "models.RoomPointSegment.singular": "segmentkwalificatie",
  "models.RoomPointSegment.plural": "segmentkwalificaties",
  "models.RoomPointSegment.determinant.defined": "segmentkwalificatie",
  "models.RoomPointSegment.determinant.undefined": "een segmentkwalificatie",
  "models.RoomPointSegment.determinants.defined": "segmentkwalificaties",
  "models.RoomPointSegment.determinants.undefined": "segmentkwalificaties",
  "models.RoomPointSegment.properties.reversePoints.label": "Omgekeerde punten",
  "models.RoomPointSegment.properties.reversePoints.description": "Draai de punten van het segment om, zodat bijvoorbeeld deuren in de juiste richting worden weergegeven",
  "models.RoomPointSegment.properties.displayBothSides.label": "Aan beide kanten laten zien",
  "models.RoomPointSegment.properties.displayBothSides.description": "Toon segment aan beide zijden van het segment",
  "models.RoomPointSegment.views.dq-not-uniq.label": "Niet-unieke puntsegmenten",
  "models.RoomPointSegment.views.dq-not-uniq.help": "Hiermee kunt u controleren of er geen exact duplicaatsegment op dezelfde punten is",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.label": "De segmentpunten bevinden zich op 2 verschillende verdiepingen",
  "models.RoomPointSegment.views.dq-point-not-on-same-floor.help": "Hiermee kunt u controleren of de segmentpunten zich op dezelfde verdieping bevinden",
  "models.RoomPointRoom.singular": "Associatie tussen een punt en een spatie",
  "models.RoomPointRoom.plural": "Associaties tussen een punt en een ruimte",
  "models.RoomPointRoom.determinant.defined": "de associatie tussen een punt en een ruimte",
  "models.RoomPointRoom.determinant.undefined": "een punt",
  "models.RoomPointRoom.description": "De associatie tussen een punt en een ruimte maakt het mogelijk om de volgorde van de punten in een ruimte te behouden om zo een polyon te vormen",
  "models.RoomPointRoom.properties.id.label": "Identificatie van de associatie tussen een punt en een spatie",
  "models.RoomPointRoom.properties.id.description": "???",
  "models.RoomPointRoom.properties.roomId.label": "Ruimte-ID",
  "models.RoomPointRoom.properties.roomId.description": "???",
  "models.RoomPointRoom.properties.externalId.label": "Externe identificatie",
  "models.RoomPointRoom.properties.externalId.description": "???",
  "models.RoomPointRoom.properties.sortIndex.label": "Sorteerindex",
  "models.RoomPointRoom.properties.sortIndex.description": "???",
  "models.RoomPointRoom.properties.roomPointId.label": "Punt-ID",
  "models.RoomPointRoom.properties.roomPointId.description": "???",
  "models.RoomPoint.singular": "punt van spaties",
  "models.RoomPoint.plural": "punten van spaties",
  "models.RoomPoint.determinant.defined": "het punt van spaties",
  "models.RoomPoint.determinant.undefined": "een punt van spaties",
  "models.RoomPoint.properties.id.label": "Identificatie van het ruimtepunt",
  "models.RoomPoint.properties.x.label": "X",
  "models.RoomPoint.properties.x.description": "Co\xF6rdinaat X-as",
  "models.RoomPoint.properties.y.label": "j",
  "models.RoomPoint.properties.y.description": "Y-as co\xF6rdinaat",
  "models.RoomPoint.properties.sort_index.label": "Volgorde",
  "models.RoomPoint.properties.sort_index.description": "De index die wordt gebruikt voor het sorteren",
  "models.RoomPoint.properties.room.description": "???",
  "models.RoomPoint.properties.externalId.label": "Externe identificatie",
  "models.RoomPoint.properties.externalId.description": "???",
  "models.RoomPoint.views.dq-uniq-position.label": "Unieke steekpositie",
  "models.RoomPoint.views.dq-uniq-position.help": "Hiermee kunt u controleren of er geen exacte dubbele positie op de punten is",
  "models.RoomPoint.views.dq-not-used.label": "Ongebruikte punten",
  "models.RoomPoint.views.dq-not-used.help": "Hiermee kunt u punten zien die niet in ruimtes worden gebruikt",
  "models.RoomConnector.singular": "Ruimteconnector",
  "models.RoomConnector.plural": "Ruimteconnectoren",
  "models.RoomConnector.determinant.defined": "de ruimteconnector",
  "models.RoomConnector.determinant.undefined": "een ruimteconnector",
  "models.RoomConnector.determinants.defined": "ruimte connectoren",
  "models.RoomConnector.determinants.undefined": "ruimte connectoren",
  "models.RoomConnector.description": "Met ruimteverbinders kunt u een koppeling cre\xEBren tussen meerdere ruimtes op verschillende verdiepingen",
  "models.RoomConnector.properties.id.label": "Space Connector-ID",
  "models.RoomConnector.properties.name.label": "Naam van ruimteconnector",
  "models.RoomConnector.properties.waitTime.label": "Gemiddelde wachttijd",
  "models.RoomConnector.properties.waitTime.description": "De gemiddelde wachttijd voordat de ruimteconnector beschikbaar komt",
  "models.RoomConnector.properties.timePerFloor.label": "Tijd tussen elke verdieping",
  "models.RoomConnector.properties.timePerFloor.description": "De tijd die nodig is om van de ene verdieping naar de volgende te gaan",
  "models.RoomAffectation.singular": "Toewijzing van ruimte",
  "models.RoomAffectation.plural": "Ruimte opdrachten",
  "models.RoomAffectation.description": "Hiermee kunt u een persoon aan \xE9\xE9n ruimte toewijzen",
  "models.RoomAffectation.determinant.defined": "toewijzing van ruimte",
  "models.RoomAffectation.determinant.undefined": "een ruimteverdeling",
  "models.RoomAffectation.determinants.defined": "ruimte opdrachten",
  "models.RoomAffectation.determinants.undefined": "ruimte opdrachten",
  "models.RoomAffectation.views.room-mouvement-matrix-import.help": "Importeer ruimteoverdrachtsmatrices",
  "models.RoomAffectation.views.room-mouvement-matrix-import.label": "Overdrachtsmatrix importeren",
  "models.Room.singular": "ruimte",
  "models.Room.plural": "ruimtes",
  "models.Room.determinant.defined": "ruimte",
  "models.Room.determinant.undefined": "een gebied",
  "models.Room.determinants.defined": "de ruimtes",
  "models.Room.determinants.undefined": "ruimtes",
  "models.Room.description": "Ruimtes zijn werkplekken of zones om een \u200B\u200Bverdieping in deelruimtes te verdelen",
  "models.Room.views.map.help": "Bekijk het ruimteplan %{name}",
  "models.Room.views.map.label": "Plan",
  "models.Room.views.dq-uniq-name.help": "Stelt namen voor voor ruimtes die geen naam hebben of de naam is niet uniek op dezelfde verdieping",
  "models.Room.views.dq-uniq-name.label": "Voorgestelde namen voor spaties",
  "models.Room.views.dq-no-point.help": "Ruimtes die 0, 1 of 2 punten hebben en daarom een \u200B\u200Boppervlakte nul moeten hebben",
  "models.Room.views.dq-no-point.label": "Spaties zonder voldoende punten",
  "models.Room.views.dq-capacity-equals-seats-count.help": "Ruimten met een capaciteit exclusief zitplaatsen gelijk aan het aantal zitplaatsen en met een totale capaciteit verdubbeld",
  "models.Room.views.dq-capacity-equals-seats-count.label": "Ruimtes met een capaciteit exclusief zitplaatsen gelijk aan het aantal zitplaatsen",
  "models.Room.views.dq-capacity-gt-0.help": "Hiermee kunt u zien of er inconsistenties zijn in de capaciteiten van ruimtes of bijvoorbeeld meubels detecteren die nog geen zitplaatsen hebben",
  "models.Room.views.dq-capacity-gt-0.label": "Ruimtes met een capaciteit exclusief stoelen verschillend van 0",
  "models.Room.views.meeting-rooms.help": "Bekijk en navigeer door vergaderruimtes",
  "models.Room.views.meeting-rooms.label": "Vergaderzalen",
  "models.Room.properties.prettyName.label": "Weergavenaam",
  "models.Room.properties.prettyName.description": "Hiermee kunt u naast de technische naam van de ruimte ook een weergavenaam gebruiken, bijvoorbeeld voor vergaderruimtes",
  "models.Room.properties.id.label": "Ruimte-ID",
  "models.Room.properties.livePeopleCount.label": "Aantal mensen in de ruimte in realtime",
  "models.Room.properties.livePeopleCount.description": "Deze waarde wordt bijgewerkt door de mensentelsensoren die in de ruimte aanwezig zijn en geeft het aantal mensen weer dat in realtime in de ruimte aanwezig is",
  "models.Room.properties.picture.label": "Ruimte foto",
  "models.Room.properties.picture.description": "De foto van de ruimte maakt het gemakkelijk te visualiseren",
  "models.Room.properties.capacity.label": "Capaciteit exclusief zitplaatsen",
  "models.Room.properties.capacity.description": "De opgegeven capaciteit kan worden gebruikt om het aantal beschikbare zitplaatsen in een ruimte te bepalen of om het maximale aantal mensen te kennen dat in een ruimte kan worden geplaatst. Dit cijfer wordt opgeteld bij het aantal zitplaatsen om de totale capaciteit te verkrijgen",
  "models.Room.properties.workplacesCount.label": "Aantal werkstations",
  "models.Room.properties.workplacesCount.description": "Het aantal werkplekken in de ruimte wordt automatisch berekend",
  "models.Room.properties.workplacesRatio.label": "Verhouding per werkplek",
  "models.Room.properties.workplacesRatio.description": "De verhouding per werkplek is het aantal vierkante meter ruimte gedeeld door het aantal werkplekken, deze waarde wordt automatisch berekend",
  "models.Room.properties.peopleCount.label": "Aantal opdrachten",
  "models.Room.properties.peopleCount.description": "Het aantal mensen dat rechtstreeks of via een werkplek aan de ruimte is toegewezen",
  "models.Room.properties.peopleRatio.label": "Bezettingsgraad",
  "models.Room.properties.peopleRatio.description": "De bezettingsgraad is het aantal vierkante meters van de ruimte gedeeld door het aantal personen dat aan de ruimtes is toegewezen, direct of via een werkplek, deze waarde wordt berekend",
  "models.Room.properties.freeWorkplacesCount.label": "Aantal vrije posities",
  "models.Room.properties.freeWorkplacesCount.description": "Aantal vrije posities in de ruimte",
  "models.Room.properties.flexWorkplacesCount.label": "Aantal flexposities",
  "models.Room.properties.flexWorkplacesCount.description": "Aantal flexposities in de ruimte",
  "models.Room.properties.sharedWorkplacesCount.label": "Aantal gedeelde werkstations",
  "models.Room.properties.sharedWorkplacesCount.description": "Aantal werkplekken gedeeld door minimaal 2 personen",
  "models.Room.properties.transitWorkplacesCount.label": "Aantal passerende werkplekken",
  "models.Room.properties.transitWorkplacesCount.description": "Aantal tijdelijke werkplekken, deze posities worden niet meegeteld in de vrije posities en zijn niet in flex",
  "models.Room.properties.sharedWorkplacesRatio.label": "Tarief gedeeld werkstation",
  "models.Room.properties.sharedWorkplacesRatio.description": "Percentage werkstations gedeeld door minimaal 2 personen, vergeleken met alle werkstations in de ruimte",
  "models.Room.properties.flexRatio.label": "Tarief flexwerkplekken",
  "models.Room.properties.flexRatio.description": "Het flexwerkplektarief wordt berekend door het aantal flexwerkplekken te delen door het totaal aantal werkplekken",
  "models.Room.properties.name.label": "Naam van de ruimte",
  "models.Room.properties.name.description": "De ruimtenaam wordt gebruikt om deze te defini\xEBren en gemakkelijk te vinden.",
  "models.Room.properties.area.label": "Oppervlak",
  "models.Room.properties.area.description": "Het gekwalificeerde vloeroppervlak voor deze ruimte",
  "models.Room.properties.perimeter.label": "Omtrek",
  "models.Room.properties.perimeter.description": "De omtrek van de ruimte vertegenwoordigt de omtrek ervan",
  "models.Room.properties.costCenter.description": "Hiermee kunt u weten aan welke kostenplaats u de ruimte moet koppelen als het gaat om het beheren van de herfacturering naar de kostenplaats per ruimte",
  "models.Room.properties.distributionCostType.description": "Hiermee kunt u de methode bepalen voor het berekenen van de kostenverdeelsleutel",
  "models.Room.properties.info.label": "Extra informatie",
  "models.Room.properties.info.description": "Hiermee kunt u aanvullende teksttype-informatie over de ruimte behouden",
  "models.Room.properties.bookingEmail.label": "E-mailadres gebruikt om deze ruimte te reserveren",
  "models.Room.properties.bookingEmail.description": "Met deze e-mail kunt u deze kamer reserveren via het berichtensysteem",
  "models.Room.properties.keyCylinderCode.label": "Cilinder nummer",
  "models.Room.properties.keyCylinderCode.description": "Met het cilindernummer kunt u het cilindernummer van het ruimtedeurslot of een element dat verband houdt met de fysieke toegang tot de ruimte defini\xEBren",
  "models.Room.reports.mouvementMatrix.fileName": "Overdrachtsmatrix",
  "models.Room.reports.mouvementMatrix.help": "Maak een overdrachtsmatrix aan in Excel waarmee u eenvoudig de verplaatsingen van uw medewerkers kunt uitvoeren",
  "models.PersonWorkingLocation.singular": "Werklocatie van mensen",
  "models.PersonWorkingLocation.plural": "Werklocaties van mensen",
  "models.PersonWorkingLocation.determinant.defined": "de werkplek van mensen",
  "models.PersonWorkingLocation.determinant.undefined": "een plek waar mensen werken",
  "models.PersonWorkingLocation.determinants.defined": "werklocaties van mensen",
  "models.PersonWorkingLocation.determinants.undefined": "werklocaties van mensen",
  "models.PersonWorkingLocation.description": "Een werkplek van mensen definieert de werkplek van mensen",
  "models.PersonWorkingLocation.views.my-planning.help": "Beheer mijn agenda voor de komende weken",
  "models.PersonWorkingLocation.views.my-planning.label": "Beheer mijn agenda",
  "models.PersonToWorkplaceBooking.singular": "Reserveren op de werkplek van mensen",
  "models.PersonToWorkplaceBooking.plural": "Reserveringen op de werkplekken van mensen",
  "models.PersonToWorkplaceBooking.description": "Werkplekreserveringen van mensen worden vastgelegd en zijn beschikbaar met de begin- en einddatum van de reservering",
  "models.PersonToWorkplaceBooking.determinant.defined": "reservering op de werkplek van mensen",
  "models.PersonToWorkplaceBooking.determinant.undefined": "een reservering op de mensenwerkplek",
  "models.PersonToWorkplaceBooking.determinants.defined": "reserveringen op de werkplekken van mensen",
  "models.PersonToWorkplaceBooking.determinants.undefined": "reserveringen op de werkplekken van mensen",
  "models.PersonToWorkplaceBooking.properties.startDatetime.label": "Begin van de boeking",
  "models.PersonToWorkplaceBooking.properties.startDatetime.description": "De startdatum en -tijd van de reservering",
  "models.PersonToWorkplaceBooking.properties.endDatetime.label": "Einde reservering",
  "models.PersonToWorkplaceBooking.properties.endDatetime.description": "De datum en tijd waarop de reservering eindigt",
  "models.PersonToWorkplaceBooking.views.dashboard-index.label": "Dashboard",
  "models.PersonToWorkplaceBooking.views.dashboard-index.help": "Dashboard van reserveringen op de werkplekken van mensen",
  "models.PersonToRoomBooking.singular": "Reservering voor het mensengedeelte",
  "models.PersonToRoomBooking.plural": "Reserveringen voor het mensengedeelte",
  "models.PersonToRoomBooking.description": "Reserveringen voor ruimtes van personen worden vastgelegd en zijn beschikbaar met de begin- en einddatum van de reservering",
  "models.PersonToRoomBooking.determinant.defined": "reserveren in de volksruimte",
  "models.PersonToRoomBooking.determinant.undefined": "een reservering voor het personengedeelte",
  "models.PersonToRoomBooking.determinants.defined": "reserveringen voor het mensengedeelte",
  "models.PersonToRoomBooking.determinants.undefined": "reserveringen voor het mensengedeelte",
  "models.PersonToRoomBooking.properties.startDatetime.label": "Begin van de boeking",
  "models.PersonToRoomBooking.properties.startDatetime.description": "De startdatum en -tijd van de reservering",
  "models.PersonToRoomBooking.properties.endDatetime.label": "Einde reservering",
  "models.PersonToRoomBooking.properties.endDatetime.description": "De datum en tijd waarop de reservering eindigt",
  "models.PersonToPersonType.singular": "Soort relatie tussen mensen",
  "models.PersonToPersonType.plural": "Soorten relaties tussen mensen",
  "models.PersonToPersonType.determinant.defined": "het soort relatie tussen mensen",
  "models.PersonToPersonType.determinant.undefined": "een soort relatie tussen mensen",
  "models.PersonToPersonType.determinants.defined": "soorten relaties tussen mensen",
  "models.PersonToPersonType.determinants.undefined": "soorten relaties tussen mensen",
  "models.PersonToPersonType.properties.labelForward.label": "Natuurlijke relatie [vooruit]",
  "models.PersonToPersonType.properties.labelForward.description": "De definitie van relatie in de natuurlijke zin, bijvoorbeeld tussen een vader en zijn zoon, de natuurlijke definitie is 'is de vader van'",
  "models.PersonToPersonType.properties.labelBackward.label": "Omgekeerde relatie",
  "models.PersonToPersonType.properties.labelBackward.description": "De definitie van relatie in de omgekeerde zin van de natuurlijke zin, bijvoorbeeld tussen een vader en zijn zoon, de omgekeerde definitie van de natuurlijke zin is 'is de zoon van'",
  "models.PersonToPerson.singular": "Persoon tot persoon relatie",
  "models.PersonToPerson.plural": "Relaties van persoon tot persoon",
  "models.PersonToPerson.determinant.defined": "relatie van persoon tot persoon",
  "models.PersonToPerson.determinant.undefined": "een relatie van persoon tot persoon",
  "models.PersonToPerson.determinants.defined": "relaties van persoon tot persoon",
  "models.PersonToPerson.determinants.undefined": "relaties van persoon tot persoon",
  "models.PersonToPerson.properties.personSource.label": "Bron persoon",
  "models.PersonToPerson.properties.personTarget.label": "Bestemmingspersoon",
  "models.PersonToDimensionBooking.singular": "Reservering voor de laag voor personentoewijzing",
  "models.PersonToDimensionBooking.plural": "Reserveringen op de laag voor personentoewijzing",
  "models.PersonToDimensionBooking.description": "Reserveringen voor toewijzingslagen voor mensen worden opgeslagen en zijn beschikbaar met begin- en einddatums voor reserveringen",
  "models.PersonToDimensionBooking.determinant.defined": "reservering op de laag voor personentoewijzing",
  "models.PersonToDimensionBooking.determinant.undefined": "een reservering op de laag voor personentoewijzing",
  "models.PersonToDimensionBooking.determinants.defined": "reserveringen op de laag voor personentoewijzing",
  "models.PersonToDimensionBooking.determinants.undefined": "reserveringen naar de laag voor personentoewijzing",
  "models.PersonToDimensionBooking.properties.startDatetime.label": "Begin van de boeking",
  "models.PersonToDimensionBooking.properties.startDatetime.description": "De startdatum en -tijd van de reservering",
  "models.PersonToDimensionBooking.properties.endDatetime.label": "Einde reservering",
  "models.PersonToDimensionBooking.properties.endDatetime.description": "De datum en tijd waarop de reservering eindigt",
  "models.PersonState.singular": "status van mensen",
  "models.PersonState.plural": "status van mensen",
  "models.PersonState.description": "Hiermee kunt u alle soorten contracten tussen mensen en het bedrijf defini\xEBren",
  "models.PersonState.determinant.defined": "de status van mensen",
  "models.PersonState.determinant.undefined": "een status van mensen",
  "models.PersonState.determinants.defined": "de status van mensen",
  "models.PersonState.determinants.undefined": "statussen van mensen",
  "models.PersonState.properties.id.label": "Identificatie van de status van de persoon",
  "models.PersonState.properties.name.label": "Naam van persoonsstatus",
  "models.PersonToBuilding.singular": "Opdracht aan het gebouw",
  "models.PersonToBuilding.plural": "bouwopdrachten",
  "models.PersonToBuilding.description": "Hiermee kunt u een persoon aan een gebouw toewijzen, zonder aanvullende informatie. De toewijzing kan wel of niet worden meegeteld.",
  "models.PersonToBuilding.determinant.defined": "genegenheid voor het gebouw",
  "models.PersonToBuilding.determinant.undefined": "een genegenheid voor het gebouw",
  "models.PersonToBuilding.determinants.defined": "bouwomstandigheden",
  "models.PersonToBuilding.determinants.undefined": "schade aan het gebouw",
  "models.PersonToBuilding.properties.addToPeopleCount.label": "Verantwoord de toewijzing",
  "models.PersonToBuilding.properties.addToPeopleCount.description": "Voeg deze toewijzing toe aan het totaal aantal personen dat aan het gebouw is toegewezen",
  "models.PersonSecurityProfile.singular": "persoonlijk veiligheidsprofiel",
  "models.PersonSecurityProfile.plural": "levensveiligheidsprofielen",
  "models.PersonSecurityProfile.description": "Hiermee kunt u de verschillende beveiligingsprofielen defini\xEBren die aan personen kunnen worden gekoppeld",
  "models.PersonSecurityProfile.determinant.defined": "het persoonlijke veiligheidsprofiel",
  "models.PersonSecurityProfile.determinant.undefined": "een persoonlijk veiligheidsprofiel",
  "models.PersonSecurityProfile.determinants.defined": "persoonlijke veiligheidsprofielen",
  "models.PersonSecurityProfile.determinants.undefined": "persoonlijke veiligheidsprofielen",
  "models.PersonSecurityProfile.properties.id.label": "Persoonlijke beveiligingsprofiel-ID",
  "models.PersonSecurityProfile.properties.name.label": "Naam beveiligingsprofiel",
  "models.PersonSecurityProfile.properties.name.description": "Hiermee kunt u de verschillende beveiligingsprofielen defini\xEBren die aan personen kunnen worden gekoppeld",
  "models.PersonSecurityProfile.properties.color.label": "Kleur beveiligingsprofiel",
  "models.PersonSecurityProfile.properties.color.description": "Hiermee kunt u het toegewezen werkstation en het beveiligingspictogram van de persoon inkleuren op basis van zijn of haar beveiligingsprofiel",
  "models.PersonSecurityProfile.properties.icon.label": "Beveiligingsprofielpictogram",
  "models.PersonSecurityProfile.properties.icon.description": "Hiermee kunt u een pictogram aan een beveiligingsprofiel toewijzen om de beveiligingsprofielen op het plan of in de lijsten duidelijk te visualiseren",
  "models.PersonCompanyToRoomType.singular": "Type providerruimte",
  "models.PersonCompanyToRoomType.plural": "Soorten providerruimten",
  "models.PersonCompanyToRoomType.description": "De typen ruimtes van de dienstverleners maken het mogelijk om een \u200B\u200Brelatie tussen een type ruimte en de dienstverlener te defini\xEBren en een missie te defini\xEBren.",
  "models.PersonCompanyToRoomType.determinant.defined": "het type ruimte van de dienstverlener",
  "models.PersonCompanyToRoomType.determinant.undefined": "een type ruimte van de dienstverlener",
  "models.PersonCompanyToRoomType.determinants.defined": "de soorten ruimtes van dienstverleners",
  "models.PersonCompanyToRoomType.determinants.undefined": "soorten ruimtes van dienstverleners",
  "models.PersonGender.singular": "Geslacht van persoon",
  "models.PersonGender.plural": "Soorten mensen",
  "models.PersonGender.description": "Hiermee kunt u elk type tellen, bijvoorbeeld voor sanitairbeheer",
  "models.PersonGender.determinant.defined": "het geslacht van de persoon",
  "models.PersonGender.determinant.undefined": "een soort persoon",
  "models.PersonGender.determinants.defined": "soorten mensen",
  "models.PersonGender.determinants.undefined": "soorten mensen",
  "models.PersonGender.properties.name.label": "Naam",
  "models.PersonGender.properties.name.description": "De naam van het geslacht van de persoon",
  "models.PersonCompanyToItemType.singular": "Objecttype provider",
  "models.PersonCompanyToItemType.plural": "Objecttypen van provider",
  "models.PersonCompanyToItemType.description": "De serviceprovider-objecttypen maken het mogelijk om een \u200B\u200Brelatie tussen het objecttype en de serviceprovider te defini\xEBren en de missie te defini\xEBren.",
  "models.PersonCompanyToItemType.determinant.defined": "het type object van de dienstverlener",
  "models.PersonCompanyToItemType.determinant.undefined": "een type providerobject",
  "models.PersonCompanyToItemType.determinants.defined": "de typen objecten van dienstverleners",
  "models.PersonCompanyToItemType.determinants.undefined": "soorten objecten van dienstverleners",
  "models.PersonCompanyToItem.singular": "Interventie op een object",
  "models.PersonCompanyToItem.plural": "Interventies op objecten",
  "models.PersonCompanyToItem.description": "De interventies van dienstverleners op objecten maken het mogelijk om bijvoorbeeld de datum van een bezoek aan een brandblusser te defini\xEBren",
  "models.PersonCompanyToItem.determinant.defined": "ingrijpen op een object",
  "models.PersonCompanyToItem.determinant.undefined": "een interventie op een object",
  "models.PersonCompanyToItem.determinants.defined": "interventies op objecten",
  "models.PersonCompanyToItem.determinants.undefined": "interventies op objecten",
  "models.PersonCompanyToItem.properties.datetime.label": "Datum en tijdstip van interventie",
  "models.PersonCompanyToItem.properties.datetime.description": "Toen de interventie plaatsvond",
  "models.PersonCompanyToItem.properties.comment.label": "Opmerking",
  "models.PersonCompanyToItem.properties.comment.description": "Een reactie op de interventie",
  "models.PersonCompanyMission.singular": "missie van de dienstverlener",
  "models.PersonCompanyMission.plural": "missies van dienstverleners",
  "models.PersonCompanyMission.description": "De missies van de dienstverleners maken het mogelijk om het interventiegebied van de dienstverleners te kennen",
  "models.PersonCompanyMission.determinant.defined": "de missie van de dienstverlener",
  "models.PersonCompanyMission.determinant.undefined": "een missie van de dienstverlener",
  "models.PersonCompanyMission.determinants.defined": "de missies van de dienstverleners",
  "models.PersonCompanyMission.determinants.undefined": "missies van dienstverleners",
  "models.PersonCompanyMission.properties.name.label": "Naam",
  "models.PersonCompanyMission.properties.name.description": "De naam van de missie van de dienstverlener",
  "models.PersonCompany.singular": "dienstverlener bedrijf",
  "models.PersonCompany.plural": "dienstverlenende bedrijven",
  "models.PersonCompany.description": "Met het dienstverlenerbedrijf kunt u het personeel van de dienstverlener per bedrijf beheren.",
  "models.PersonCompany.determinant.defined": "het dienstverlenerbedrijf",
  "models.PersonCompany.determinant.undefined": "een dienstverlenend bedrijf",
  "models.PersonCompany.determinants.defined": "dienstverlenende bedrijven",
  "models.PersonCompany.determinants.undefined": "dienstverlenende bedrijven",
  "models.PersonCompany.properties.name.label": "Naam",
  "models.PersonCompany.properties.name.description": "De naam van de dienstverlener, bijvoorbeeld de bedrijfsnaam van een dienstverlener",
  "models.PersonCompany.properties.comment.label": "Verdere informatie",
  "models.PersonCompany.properties.comment.description": "Aanvullende informatie over de dienstverlener, zoals zijn missie, zijn waarden, de functionele reikwijdte van zijn dienst, enz.",
  "models.PersonCompany.properties.contact.label": "Contact",
  "models.PersonCompany.properties.contact.description": "Contactgegevens van de dienstverlener",
  "models.PersonCompany.properties.documents.label": "Gerelateerde documenten",
  "models.PersonCompany.properties.documents.description": "De link naar de documenten die bij deze dienstverlener horen",
  "models.Person.singular": "persoon",
  "models.Person.plural": "mensen",
  "models.Person.description": "Dit zijn de personen die in de Surfy-database zijn ingevoerd",
  "models.Person.determinant.defined": "de persoon",
  "models.Person.determinant.undefined": "een persoon",
  "models.Person.determinants.defined": "de mensen",
  "models.Person.determinants.undefined": "mensen",
  "models.Person.properties.id.label": "Surfy-ID",
  "models.Person.properties.fullname.label": "Voor-en achternaam",
  "models.Person.properties.fullname.description": "De volledige naam van de persoon maakt het makkelijker om hem te vinden",
  "models.Person.properties.personState.label": "Toestand",
  "models.Person.properties.personState.description": "Hiermee kunt u aangeven welk type contract de persoon heeft met het bedrijf",
  "models.Person.properties.personSecurityProfile.label": "Beveiligingsprofiel",
  "models.Person.properties.personSecurityProfile.description": "Hiermee kunt u het beveiligingsprofiel van de persoon aangeven voor beveiligingsbeheer",
  "models.Person.properties.firstname.label": "Voornaam",
  "models.Person.properties.firstname.description": "De voornaam van de persoon",
  "models.Person.properties.lastname.label": "Achternaam",
  "models.Person.properties.lastname.description": "De achternaam van de persoon",
  "models.Person.properties.email.label": "E-mail",
  "models.Person.properties.email.description": "Het e-mailadres van de persoon",
  "models.Person.properties.picture.label": "Profielfoto",
  "models.Person.properties.picture.description": "De foto van de persoon om hem in de trombinoscoop of bij het zoeken te hebben",
  "models.Person.properties.monitorReference.label": "Schermreferentie",
  "models.Person.properties.monitorReference.description": "De referentie van het computerscherm dat bij deze persoon hoort",
  "models.Person.properties.computerReference.label": "Computerreferentie",
  "models.Person.properties.computerReference.description": "De referentie van de computer die aan deze persoon is gekoppeld",
  "models.Person.properties.cellphone.label": "Mobiele telefoon",
  "models.Person.properties.cellphone.description": "De mobiele telefoon van de persoon",
  "models.Person.properties.telephone.label": "Telefoon",
  "models.Person.properties.telephone.description": "De vaste lijn van de persoon",
  "models.Person.properties.title.label": "Titel",
  "models.Person.properties.title.description": "De titel van de persoon",
  "models.Person.properties.badgeNumber.label": "Badgenummer",
  "models.Person.properties.badgeNumber.description": "Het badgenummer van de persoon",
  "models.Person.properties.boxNumber.label": "Lockernummer",
  "models.Person.properties.boxNumber.description": "Het lockernummer van de persoon",
  "models.Person.properties.badgeRestaurant.label": "RIE-badge",
  "models.Person.properties.badgeRestaurant.description": "D\xE9 referentie voor de RIE of bedrijfsrestaurantbadge",
  "models.Person.properties.registrationNumber.label": "Registratie",
  "models.Person.properties.registrationNumber.description": "Het registratienummer van de persoon",
  "models.Person.properties.startDate.label": "Datum van binnenkomst",
  "models.Person.properties.startDate.description": "De datum waarop de persoon bij het bedrijf is gekomen",
  "models.Person.properties.endDate.label": "Datum van publicatie",
  "models.Person.properties.endDate.description": "De datum waarop de persoon het bedrijf verlaat",
  "models.Person.properties.code.label": "Registratie nummer",
  "models.Person.properties.code.description": "Het HR-nummer van de persoon",
  "models.Person.properties.personToPersonTargets.label": "Relaties met deze persoon",
  "models.Person.properties.personToPersonTargets.description": "Hiermee kunt u de oplopende relatie tussen twee mensen kennen, bijvoorbeeld de hi\xEBrarchische relatie",
  "models.Person.properties.personToPersonSources.label": "Relaties van deze persoon",
  "models.Person.properties.personToPersonSources.description": "Hiermee kunt u de aflopende relatie tussen twee mensen kennen, bijvoorbeeld de hi\xEBrarchische relatie",
  "models.Person.properties.organization.label": "De organisatie van de persoon",
  "models.Person.properties.organization.description": "De verbindingsservice van de persoon",
  "models.Person.properties.info.label": "Opmerking",
  "models.Person.properties.info.description": "Geef commentaar op de persoon die toestaat dat aanvullende of diverse informatie wordt bewaard",
  "models.Person.properties.notAffectable.label": "Niet toewijsbaar",
  "models.Person.properties.notAffectable.description": "De persoon kan niet worden toegewezen aan een werkstation-, ruimte-, gebouw- of opdrachtlaag",
  "models.Person.views.home.help": "Bekijk het bestand van de persoon <b>%{name}</b> met zijn/haar informatie en opdrachten",
  "models.Person.views.home.label": "Persoonsbestand",
  "models.Person.views.relationship-list.help": "Maak een lijst van relaties tussen mensen",
  "models.Person.views.relationship-list.label": "Lijst met relaties",
  "models.Person.views.dq-only-associated-to-building.help": "Lijst van de toewijsbare personen die aan een gebouw zijn toegewezen en geteld zonder te zijn toegewezen (werkplek, toewijzingslaag, ruimte)",
  "models.Person.views.dq-only-associated-to-building.label": "Personen die zonder andere opdracht aan een gebouw zijn toegewezen",
  "models.Person.views.dq-near-end-date.help": "Vermeld de mensen met een einddatum van het contract na vandaag en die aan een werkplek zijn toegewezen",
  "models.Person.views.dq-near-end-date.label": "Mensen die het bedrijf verlaten",
  "models.Person.views.dq-no-affectations.label": "Mensen zonder opdrachten",
  "models.Person.views.dq-no-affectations.help": "Maak een lijst van de toewijsbare personen die geen opdrachten hebben (gebouw, werkplek, opdrachtlaag, ruimte)",
  "models.Person.views.dq-person-duplicate.label": "Dubbele mensen",
  "models.Person.views.dq-person-duplicate.help": "Maak een lijst van dubbele mensen",
  "models.PartnerApiCredential.singular": "Partner-API-sleutel",
  "models.PartnerApiCredential.plural": "Partner-API-sleutels",
  "models.PartnerApiCredential.determinant.defined": "de partner-API-sleutel",
  "models.PartnerApiCredential.determinant.undefined": "een partner-API-sleutel",
  "models.PartnerApiCredential.determinants.defined": "partner-API-sleutels",
  "models.PartnerApiCredential.determinants.undefined": "partner-API-sleutels",
  "models.PartnerApiCredential.properties.enable.label": "Ingeschakeld",
  "models.PartnerApiCredential.properties.enable.description": "U moet de sleutel activeren om deze te kunnen gebruiken",
  "models.OrganizationFloor.singular": "Organisatie van verdiepingen",
  "models.OrganizationFloor.plural": "Verdiepingsorganisaties",
  "models.OrganizationFloor.determinant.defined": "de organisatie van de verdiepingen",
  "models.OrganizationFloor.determinant.undefined": "een organisatie van verdiepingen",
  "models.OrganizationFloor.determinants.defined": "organisaties op de vloer",
  "models.OrganizationFloor.determinants.undefined": "organisaties op de vloer",
  "models.OrganizationBuilding.singular": "Organisatie van gebouwen",
  "models.OrganizationBuilding.plural": "Organisaties bouwen",
  "models.OrganizationBuilding.determinant.defined": "organisatie van gebouwen",
  "models.OrganizationBuilding.determinant.undefined": "een organisatie van gebouwen",
  "models.OrganizationBuilding.determinants.defined": "organisaties bouwen",
  "models.OrganizationBuilding.determinants.undefined": "organisaties bouwen",
  "models.Organization.singular": "organisatie",
  "models.Organization.plural": "organisaties",
  "models.Organization.determinant.defined": "de organisatie",
  "models.Organization.determinant.undefined": "een organisatie",
  "models.Organization.determinants.defined": "organisaties",
  "models.Organization.determinants.undefined": "organisaties",
  "models.Organization.description": "Organisaties hebben twee hi\xEBrarchische niveaus: directoraten en afdelingen, en maken het mogelijk om de organisatiestructuur van het bedrijf te defini\xEBren",
  "models.Organization.properties.id.label": "Organisatie-ID",
  "models.Organization.properties.name.label": "Naam",
  "models.Organization.properties.name.description": "Naam die de organisatie definieert",
  "models.Organization.properties.code.label": "Gecodeerd",
  "models.Organization.properties.code.description": "Deze code kan worden gebruikt om de organisatiecodering te bevatten of de sleutel voor identificatie via software van derden",
  "models.Organization.properties.organizationId.label": "Beheer-ID",
  "models.Organization.properties.organizationId.description": "Dankzij deze identificatie is het mogelijk om de organisatiehi\xEBrarchie te cre\xEBren",
  "models.Organization.properties.organization.label": "Richting",
  "models.Organization.properties.organizations.label": "Diensten",
  "models.Organization.views.hierarchy.label": "Hi\xEBrarchie",
  "models.Organization.views.hierarchy.help": "Bekijk de organisatiehi\xEBrarchie",
  "models.Organization.views.dq-organization-to-room.label": "Fouten in de organisatie van ruimtes",
  "models.Organization.views.dq-organization-to-room.help": "Detecteer ruimteassociaties met organisaties die niet geldig zijn",
  "models.Organization.views.dq-organization-hierarchy.label": "Fouten in de hi\xEBrarchie van organisaties",
  "models.Organization.views.dq-organization-hierarchy.help": "Detecteer organisaties die niet in de juiste hi\xEBrarchie staan",
  "models.OpenerPostMessageHost.singular": "Berichthost voor pop-up",
  "models.OpenerPostMessageHost.plural": "Berichthosts voor pop-up",
  "models.OpenerPostMessageHost.determinant.defined": "pop-upberichthost",
  "models.OpenerPostMessageHost.determinant.undefined": "een pop-upberichthost",
  "models.OpenerPostMessageHost.determinants.defined": "hosts voor pop-upberichten",
  "models.OpenerPostMessageHost.determinants.undefined": "hosts voor pop-upberichten",
  "models.OpenerPostMessageHost.description": "Een pop-upberichthost is een element dat communiceert met een open pop-up over planacties",
  "models.OccupancyStatus.singular": "bezettingsstatus",
  "models.OccupancyStatus.plural": "bezettingstoestanden",
  "models.OccupancyStatus.determinant.defined": "de bezettingstoestand",
  "models.OccupancyStatus.determinant.undefined": "een bezettingsstaat",
  "models.OccupancyStatus.determinants.defined": "bezettingstoestanden",
  "models.OccupancyStatus.determinants.undefined": "bezettingstoestanden",
  "models.OccupancyStatus.description": "De bezettingsstatus maakt het mogelijk om de real-time status van een ruimte of werkplek te identificeren, bijvoorbeeld of deze vrij, bezet of gekraakt is, de bezettingsstatus wordt dagelijks bijgewerkt door verbonden objecten die in de ruimte aanwezig zijn",
  "models.OccupancyStatus.properties.id.label": "Identificatie van de bezettingsstatus",
  "models.OccupancyStatus.properties.name.label": "Naam van de bezettingsstatus",
  "models.OccupancyStatus.properties.color.label": "Kleur",
  "models.OccupancyStatus.properties.color.description": "Met Kleur kunt u ruimtes of werkstations op plattegronden kleuren op basis van hun bezettingsstatus",
  "models.OccupancyStatus.properties.code.label": "Bezettingsstatuscode",
  "models.OccupancyStatus.properties.code.description": "De code maakt het mogelijk om technische handelingen op de bezettingstoestand te identificeren en uit te voeren",
  "models.Object3dModel.singular": "3d model",
  "models.Object3dModel.plural": "3D-modellen",
  "models.Object3dModel.determinant.defined": "het 3D-model",
  "models.Object3dModel.determinant.undefined": "een 3D-model",
  "models.Object3dModel.determinants.defined": "3D-modellen",
  "models.Object3dModel.determinants.undefined": "3D-modellen",
  "models.Object3dModel.description": "Het 3D-model maakt een realistische 3D-weergave mogelijk van objecten die op het plan zijn geplaatst; Bij gebrek aan een 3D-model worden de objecten in volledige vorm weergegeven in de 3D-weergave",
  "models.Object3dModel.properties.origin.label": "Ori\xEBntatie",
  "models.Object3dModel.properties.origin.description": "Gebruik X als het object naar rechts is gericht, of Y als het object naar beneden is gericht",
  "models.MapScale.singular": "vlakke schaal",
  "models.MapScale.plural": "vliegtuig schalen",
  "models.MapScale.determinant.defined": "de schaal",
  "models.MapScale.determinant.undefined": "een weegschaal",
  "models.MapScale.determinants.defined": "de weegschaal",
  "models.MapScale.determinants.undefined": "schubben",
  "models.MapScale.properties.id.label": "Schaal-ID",
  "models.MapScale.properties.p1.description": "Uitgangspunt",
  "models.MapScale.properties.p2.description": "Aankomstpunt",
  "models.MapScale.properties.name.label": "Naam van schaal",
  "models.MapScale.properties.name.description": "Om de naam te onthouden en op andere verdiepingen te hergebruiken",
  "models.MapScale.properties.length.label": "Afstand",
  "models.MapScale.properties.length.description": "De afstand weergegeven op de plattegrond tussen de 2 punten in meters",
  "models.MapScale.properties.roomTextSize.label": "Tekstgrootte van de ruimte",
  "models.MapScale.properties.roomTextSize.description": "De grootte van de tekst van de ruimtes op het plan om de weergave te optimaliseren",
  "models.MapScale.properties.workplaceTextSize.label": "Grootte van tekst op objecten",
  "models.MapScale.properties.workplaceTextSize.description": "De grootte van de tekst op werkstations en op objecten op het plan om de weergave te optimaliseren",
  "models.MapScale.properties.segmentDistanceTextSize.label": "Tekstgrootte segmenteren",
  "models.MapScale.properties.segmentDistanceTextSize.description": "De grootte van de tekst op de afstanden tussen punten op de plattegrond om de weergave te optimaliseren",
  "models.MapScale.properties.itemTypeIconSize.label": "Grootte van objecttypepictogrammen",
  "models.MapScale.properties.itemTypeIconSize.description": "De grootte van de objecttypepictogrammen op de kaart, de grootte wordt beperkt door de grootte van de ruimte",
  "models.MapScale.properties.roomIconSize.label": "Grootte van pictogrammen voor het ruimtetype",
  "models.MapScale.properties.roomIconSize.description": "De grootte van pictogrammen op de kaart in ruimtes in verhouding tot ruimtetypes",
  "models.MapScale.properties.strokeWidth.label": "Lijndikte",
  "models.MapScale.properties.strokeWidth.description": "Het is mogelijk om de dikte van de lijnen te verminderen om de leesbaarheid van de plattegrond te vergroten",
  "models.MapScale.views.dq-not-used.label": "Ongebruikte schalen",
  "models.MapScale.views.dq-not-used.help": "Bekijk schalen die niet op vloeren gebruikt worden en verwijderd kunnen worden",
  "models.MapScale.views.dq-uniq-name.label": "Voorgestelde namen voor schalen",
  "models.MapScale.views.dq-uniq-name.help": "Biedt unieke namen voor weegschalen, inclusief de verdiepingen en gebouwen waar ze worden gebruikt",
  "models.Manufacturer.singular": "Fabrikant van objecttype",
  "models.Manufacturer.plural": "Artikeltype Fabrikanten",
  "models.Manufacturer.determinant.defined": "de fabrikant van het objecttype",
  "models.Manufacturer.determinant.undefined": "een fabrikant van het objecttype",
  "models.Manufacturer.determinants.defined": "fabrikanten van objecttypen",
  "models.Manufacturer.determinants.undefined": "fabrikanten soorten objecten",
  "models.Manufacturer.properties.name.label": "Naam van de fabrikant van het objecttype",
  "models.Manufacturer.properties.name.description": "Hiermee kunt u de naam van de fabrikant of het merk identificeren",
  "models.Manufacturer.properties.website.label": "Website",
  "models.Manufacturer.properties.website.description": "Het websiteadres van de fabrikant",
  "models.Legend.singular": "Legende",
  "models.Legend.plural": "Legende",
  "models.Legend.determinant.defined": "de legende",
  "models.Legend.determinant.undefined": "een legende",
  "models.Legend.determinants.defined": "de legendes",
  "models.Legend.determinants.undefined": "legendes",
  "models.Legend.description": "Met de legenda kunt u de eigenschappen configureren die zichtbaar zijn wanneer het plan als afbeelding wordt opgeslagen",
  "models.JupUserCompanyToJupRole.singular": "Rol van de zakelijke gebruiker",
  "models.JupUserCompanyToJupRole.plural": "Enterprise-gebruikersrollen",
  "models.JupUserCompanyToJupRole.determinant.defined": "de rol van de zakelijke gebruiker",
  "models.JupUserCompanyToJupRole.determinant.undefined": "een zakelijke gebruikersrol",
  "models.JupUserCompanyToJupRole.determinants.defined": "zakelijke gebruikersrollen",
  "models.JupUserCompanyToJupRole.determinants.undefined": "zakelijke gebruikersrollen",
  "models.JupUiView.singular": "Interface-weergave",
  "models.JupUiView.plural": "Interface-weergaven",
  "models.JupUiView.determinant.defined": "de interfaceweergave",
  "models.JupUiView.determinant.undefined": "een interfaceweergave",
  "models.JupUiView.determinants.defined": "interface-weergaven",
  "models.JupUiView.determinants.undefined": "interface-weergaven",
  "models.JupUiTenantOperation.singular": "Interfacebediening voor een bedrijf",
  "models.JupUiTenantOperation.plural": "Interfacebewerkingen voor een bedrijf",
  "models.JupUiTenantOperation.determinant.defined": "de interfacewerking voor een bedrijf",
  "models.JupUiTenantOperation.determinant.undefined": "een interfaceoperatie voor een bedrijf",
  "models.JupUiTenantOperation.determinants.defined": "interfacebewerkingen voor een bedrijf",
  "models.JupUiTenantOperation.determinants.undefined": "interfacebewerkingen voor een bedrijf",
  "models.JupUiOption.singular": "Interface-optie",
  "models.JupUiOption.plural": "Interface-opties",
  "models.JupUiOption.determinant.defined": "interface-optie",
  "models.JupUiOption.determinant.undefined": "een interface-optie",
  "models.JupUiOption.determinants.defined": "interface-opties",
  "models.JupUiOption.determinants.undefined": "interface-opties",
  "models.JupUiOperation.singular": "Interface-bediening",
  "models.JupUiOperation.plural": "Interface-bewerkingen",
  "models.JupUiOperation.determinant.defined": "interface-bediening",
  "models.JupUiOperation.determinant.undefined": "een interfaceoperatie",
  "models.JupUiOperation.determinants.defined": "interface-operaties",
  "models.JupUiOperation.determinants.undefined": "interface-bewerkingen",
  "models.JupUiLayout.singular": "Visie op het plan",
  "models.JupUiLayout.plural": "Visies op het plan",
  "models.JupUiLayout.determinant.defined": "de visie op het plan",
  "models.JupUiLayout.determinant.undefined": "een visie op het plan",
  "models.JupUiLayout.determinants.defined": "de visies van het plan",
  "models.JupUiLayout.determinants.undefined": "visies op het plan",
  "models.JupRoleToJupUiView.singular": "Rollen koppelen aan interfaceweergaven",
  "models.JupRoleToJupUiView.plural": "Rolassociaties aan interfaceweergaven",
  "models.JupRoleToJupUiView.determinant.defined": "het koppelen van de rol aan interfaceweergaven",
  "models.JupRoleToJupUiView.determinant.undefined": "een koppeling van de rol aan interfaceweergaven",
  "models.JupRoleToJupUiView.determinants.defined": "Rolassociaties aan interfaceweergaven",
  "models.JupRoleToJupUiView.determinants.undefined": "rolassociaties aan interfaceweergaven",
  "models.JupRoleToJupUiView.properties.canSee.label": "Kan het uitzicht zien",
  "models.JupRoleToJupUiView.properties.canSee.description": "Zorg ervoor dat de weergave zichtbaar is voor de rol",
  "models.JupRoleToJupUiOption.singular": "Associatierol bij planvisies",
  "models.JupRoleToJupUiOption.plural": "Rolassociaties om visies te plannen",
  "models.JupRoleToJupUiOption.determinant.defined": "de associatie van de rol met de visies van het plan",
  "models.JupRoleToJupUiOption.determinant.undefined": "een associatie van de rol met de visies van het plan",
  "models.JupRoleToJupUiOption.determinants.defined": "associaties van de rol met de visies van het plan",
  "models.JupRoleToJupUiOption.determinants.undefined": "associaties van de rol met de visies van het plan",
  "models.JupRoleToJupUiOption.properties.canSee.label": "Kan optie zien",
  "models.JupRoleToJupUiOption.properties.canSee.description": "Zorg ervoor dat de optie zichtbaar is voor de rol",
  "models.JupRoleToJupUiOperation.singular": "Rolassociatie met interfacebewerkingen",
  "models.JupRoleToJupUiOperation.plural": "Rolassociatie met interfacebewerkingen",
  "models.JupRoleToJupUiOperation.determinant.defined": "het koppelen van de rol aan interfacebewerkingen",
  "models.JupRoleToJupUiOperation.determinant.undefined": "een associatie van de rol met interfacebewerkingen",
  "models.JupRoleToJupUiOperation.determinants.defined": "rolassociaties voor interfacebewerkingen",
  "models.JupRoleToJupUiOperation.determinants.undefined": "rolassociaties voor interfacebewerkingen",
  "models.JupRoleToJupObjectType.singular": "Rol-naar-objecttype-associatie",
  "models.JupRoleToJupObjectType.plural": "Rol-naar-objecttype-associaties",
  "models.JupRoleToJupObjectType.determinant.defined": "de associatie van de rol met het type object",
  "models.JupRoleToJupObjectType.determinant.undefined": "een associatie van de rol met het type object",
  "models.JupRoleToJupObjectType.determinants.defined": "de associaties van de rol met het type object",
  "models.JupRoleToJupObjectType.determinants.undefined": "associaties van de rol met het type object",
  "models.JupRoleToJupObjectType.properties.arCreate.label": "Schepping (C)",
  "models.JupRoleToJupObjectType.properties.arCreate.description": "Autoriseert het maken van entiteiten",
  "models.JupRoleToJupObjectType.properties.arRead.label": "Lezen (R)",
  "models.JupRoleToJupObjectType.properties.arRead.description": "Maakt het lezen van entiteiten mogelijk",
  "models.JupRoleToJupObjectType.properties.arUpdate.label": "Bijwerken (U)",
  "models.JupRoleToJupObjectType.properties.arUpdate.description": "Maakt het bijwerken van entiteiten mogelijk",
  "models.JupRoleToJupObjectType.properties.arDelete.label": "Verwijdering (D)",
  "models.JupRoleToJupObjectType.properties.arDelete.description": "Maakt het verwijderen van entiteiten mogelijk",
  "models.JupRole.singular": "Rol",
  "models.JupRole.plural": "Rollen",
  "models.JupRole.determinant.defined": "de rol",
  "models.JupRole.determinant.undefined": "een rol",
  "models.JupRole.determinants.defined": "de rollen",
  "models.JupRole.determinants.undefined": "rollen",
  "models.JupRole.views.matrix.help": "De %{name} rolbeveiligingsmatrix",
  "models.JupRole.views.matrix.label": "Matrix",
  "models.JupRole.views.help.help": "Samenvatting van rolrechten",
  "models.JupRole.views.help.label": "Hulp",
  "models.JupObjectType.singular": "Entiteitstype",
  "models.JupObjectType.plural": "Entiteitstypen",
  "models.JupObjectType.determinant.defined": "het entiteitstype",
  "models.JupObjectType.determinant.undefined": "een soort entiteit",
  "models.JupObjectType.determinants.defined": "entiteitstypen",
  "models.JupObjectType.determinants.undefined": "entiteitstypen",
  "models.ItemTypePoint.singular": "Punt van objecttypen",
  "models.ItemTypePoint.plural": "Punten van objecttypen",
  "models.ItemTypePoint.determinant.defined": "punt van objecttypen",
  "models.ItemTypePoint.determinant.undefined": "een punt van objecttypen",
  "models.ItemTypePoint.determinants.defined": "punten van objecttypen",
  "models.ItemTypePoint.determinants.undefined": "punten van objecttypen",
  "models.ItemTypePoint.properties.id.label": "Identificatie",
  "models.ItemTypePoint.properties.id.description": "???",
  "models.ItemTypePoint.properties.x.label": "X",
  "models.ItemTypePoint.properties.x.description": "???",
  "models.ItemTypePoint.properties.y.label": "j",
  "models.ItemTypePoint.properties.y.description": "???",
  "models.ItemTypePoint.properties.externalId.label": "Externe identificatie",
  "models.ItemTypePoint.properties.externalId.description": "???",
  "models.ItemTypePoint.properties.itemTypeId.label": "Objecttype-ID",
  "models.ItemTypePoint.properties.itemTypeId.description": "???",
  "models.ItemTypePoint.properties.sortIndex.label": "Sorteerindex",
  "models.ItemTypePoint.properties.sortIndex.description": "???",
  "models.ItemTypePoint.properties.itemType.label": "Object type",
  "models.ItemTypePoint.properties.itemType.description": "???",
  "models.ItemTypeFamily.singular": "familie van objecttypen",
  "models.ItemTypeFamily.plural": "objecttypefamilies",
  "models.ItemTypeFamily.determinant.defined": "de familie van objecttypen",
  "models.ItemTypeFamily.determinant.undefined": "een familie van objecttypen",
  "models.ItemTypeFamily.determinants.defined": "objecttypefamilies",
  "models.ItemTypeFamily.determinants.undefined": "families van objecttypen",
  "models.ItemTypeFamily.description": "Hiermee kunt u objecten per Familie weergeven op de plattegronden en in de pdf-inventaris",
  "models.ItemTypeFamily.properties.id.label": "Identificatie van de typefamilie van het object",
  "models.ItemTypeFamily.properties.name.label": "Naam van de typefamilie van het object",
  "models.ItemTypeFamily.properties.name.description": "De naam van de familie maakt identificatie mogelijk, deze naam wordt gebruikt om de soorten objecten te groeperen",
  "models.ItemType.singular": "object type",
  "models.ItemType.plural": "objecttypen",
  "models.ItemType.determinant.defined": "het soort voorwerp",
  "models.ItemType.determinant.undefined": "een soort voorwerp",
  "models.ItemType.determinants.defined": "objecttypen",
  "models.ItemType.determinants.undefined": "objecttypen",
  "models.ItemType.properties.id.label": "Objecttype-ID",
  "models.ItemType.properties.id.description": "Objecttype-ID",
  "models.ItemType.properties.description.label": "Beschrijving",
  "models.ItemType.properties.description.description": "Hiermee kunt u aanvullende informatie krijgen over het type object",
  "models.ItemType.properties.name.label": "Naam objecttype",
  "models.ItemType.properties.name.description": "Hiermee kunt u snel het type object identificeren met een volledige, logische en beschrijvende naam; De afmetingen kun je aangeven, bijvoorbeeld: Vergadertafel 340x120; Tip: begin altijd met de grootste maat",
  "models.ItemType.properties.zIndex.label": "Hoogte-index",
  "models.ItemType.properties.zIndex.description": "Hoe hoger de hoogte-index, hoe meer het object boven de andere zal worden gepositioneerd; Het kan negatief zijn; bijvoorbeeld voor een stoel: -1; Tip: voor pictogrammen stelt u de index in op 9",
  "models.ItemType.properties.picture.label": "Foto",
  "models.ItemType.properties.picture.description": "Hiermee kunt u de foto van het type object laden, die zichtbaar zal zijn in de inventaris in PDF en op het blad van het object dat op het plan is geselecteerd",
  "models.ItemType.properties.iconShape.label": "Pictogramvorm",
  "models.ItemType.properties.iconShape.description": "Door de vorm van het pictogram kunt u de weergave ervan op de kaart be\xEFnvloeden",
  "models.ItemType.properties.displayItemReferenceInMap.label": "Toon planinformatie",
  "models.ItemType.properties.displayItemReferenceInMap.description": "Hiermee kunt u het veld \u201CReferentie\u201D van elk object op het plan weergeven",
  "models.ItemType.properties.code.label": "Gecodeerd",
  "models.ItemType.properties.code.description": "Hiermee kunt u snel toegang krijgen tot het objecttype door de code in de zoekopdracht te typen tijdens het maken van het object",
  "models.ItemType.properties.icon.label": "Icoon",
  "models.ItemType.properties.icon.description": "Geeft u toegang tot drie soorten pictogrammen: 1) \u201CFontawsome\u201D-pictogrammen, zichtbaar door \u201Calles weergeven\u201D aan te vinken of door in het zoekvak op trefwoord in het Engels te zoeken; 2) \u201CSURFY\u201D-iconen bedoeld voor illustraties toegevoegd aan plannen op strategische locaties (toiletten, trappen, liften, kopieerpunten, enz.) maar die ook kunnen worden gebruikt als klassieke iconen; 3) De \u201CSURFY 2\u201D-pictogrammen met de wettelijke pictogrammen van de ISO 7010-veiligheidsnorm; Hun vorm kan rond, vierkant of driehoekig zijn",
  "models.ItemType.properties.color.label": "Kleur",
  "models.ItemType.properties.color.description": "Kan worden gekozen uit een voorselectie, of uit een geavanceerde selectie via Hexa- of RGB-code om uw grafische charter te respecteren",
  "models.ItemType.properties.height.label": "Hoogte",
  "models.ItemType.properties.height.description": "Hiermee kunt u de hoogte in centimeters van het type object in 3D-weergave weergeven",
  "models.ItemType.properties.price.label": "Prijs",
  "models.ItemType.properties.price.description": "De aankoopprijs van het artikeltype",
  "models.ItemType.properties.seatsCount.label": "aantal zitplaatsen",
  "models.ItemType.properties.seatsCount.description": "Het aantal zitplaatsen voor dit type object (fauteuil, stoel, bank etc.) wordt in Surfy opgeteld per ruimte, verdieping en gebouw",
  "models.ItemType.properties.manufacturer.description": "Hiermee kunt u de fabrikant van het objecttype identificeren",
  "models.ItemType.properties.carbonFootprint.label": "Koolstofvoetafdruk",
  "models.ItemType.properties.carbonFootprint.description": "De CO2-voetafdruk is het gewicht in kilogram CO2 dat wordt uitgestoten door elk object van dit type object; het wordt gegeven door de fabrikant",
  "models.ItemType.properties.iconBackgroundColor.label": "Achtergrondkleur van het pictogram",
  "models.ItemType.properties.iconBackgroundColor.description": "Met de achtergrondkleur kunt u meerkleurige pictogrammen, vooral driehoekige, correct configureren.",
  "models.ItemType.properties.iconBorderColor.label": "Randkleur van het pictogram",
  "models.ItemType.properties.iconBorderColor.description": "Met de randkleur kunt u meerkleurige pictogrammen correct configureren, vooral driehoekige.",
  "models.ItemType.properties.isAffectable.label": "Is het te associ\xEBren met een persoon?",
  "models.ItemType.properties.isAffectable.description": "Hiermee kunt u weten of het type object aan een persoon kan worden gekoppeld",
  "models.ItemType.properties.excludeFromPathfinding.label": "Schakel navigatie in",
  "models.ItemType.properties.excludeFromPathfinding.description": "Hiermee kunt u navigatie voor dit type object inschakelen",
  "models.ItemType.views.shape-editor.help": "Vorm van objecttype %{name} bewerken",
  "models.ItemType.views.shape-editor.label": "Vorm bewerken",
  "models.ItemType.views.avatar.help": "Zie de vorm van %{name}",
  "models.ItemType.views.avatar.label": "Vorm",
  "models.ItemType.views.dq-not-used.label": "Niet gebruikt",
  "models.ItemType.views.dq-not-used.help": "Maak een lijst van alle ongebruikte objecttypen via objecten of via ongebruikte werkstationtypen",
  "models.ItemToPerson.singular": "Associatie van object tot persoon",
  "models.ItemToPerson.plural": "Object-tot-persoon-associaties",
  "models.ItemToPerson.description": "Hiermee kunt u een object aan een persoon koppelen (ergonomische stoel, kluisje)",
  "models.ItemToPerson.determinant.defined": "de associatie van object met persoon",
  "models.ItemToPerson.determinant.undefined": "een associatie van object met persoon",
  "models.ItemToPerson.determinants.defined": "object-tot-persoon associaties",
  "models.ItemToPerson.determinants.undefined": "object-tot-persoon associaties",
  "models.ItemFact.singular": "Objectbeweging",
  "models.ItemFact.plural": "Objectbewegingen",
  "models.ItemFact.determinant.defined": "de beweging van een object",
  "models.ItemFact.determinant.undefined": "een beweging van een object",
  "models.ItemFact.determinants.defined": "objectbewegingen",
  "models.ItemFact.determinants.undefined": "objectbewegingen",
  "models.Item.singular": "voorwerp",
  "models.Item.plural": "voorwerpen",
  "models.Item.determinant.defined": "het object",
  "models.Item.determinant.undefined": "een voorwerp",
  "models.Item.determinants.defined": "Artikelen",
  "models.Item.determinants.undefined": "Voorwerpen",
  "models.Item.views.dq-item-not-in-workplace-room.label": "Objectruimten verschillen van werkstationruimten",
  "models.Item.views.dq-item-not-in-workplace-room.help": "Lijst met fysieke objecten op werkstations die zich in ruimtes bevinden die verschillen van de werkstationruimten",
  "models.Item.properties.id.label": "Object-ID",
  "models.Item.properties.price.label": "Prijs",
  "models.Item.properties.price.description": "De aankoopprijs van het artikel als deze afwijkt van de prijs van het artikeltype",
  "models.Item.properties.reference.label": "Objectreferentie",
  "models.Item.properties.reference.description": "De objectreferentie wordt gebruikt om het te vinden en om dit object van anderen te onderscheiden",
  "models.Item.properties.code.label": "Startonderbrekercode",
  "models.Item.properties.code.description": "Het activanummer wordt gebruikt om het boekhoudnummer bij te houden",
  "models.Item.properties.purchaseDate.label": "Aankoopdatum",
  "models.Item.properties.purchaseDate.description": "De datum waarop het artikel is gekocht",
  "models.Item.properties.room.label": "Objectruimte",
  "models.Item.properties.itemAffectationsCount.label": "Aantal associaties met mensen",
  "models.Item.properties.itemAffectationsCount.description": "Het aantal associaties van dit object met mensen",
  "models.Floor.singular": "vloer",
  "models.Floor.plural": "vloeren",
  "models.Floor.determinant.defined": "de vloer",
  "models.Floor.determinant.undefined": "een vloer",
  "models.Floor.determinants.defined": "De vloeren",
  "models.Floor.determinants.undefined": "vloeren",
  "models.Floor.description": "De vloeren vertegenwoordigen een werkoppervlak of een niveau van een gebouw",
  "models.Floor.views.map.help": "De plattegrond %{name} in 2d",
  "models.Floor.views.map.label": "2d vliegtuig",
  "models.Floor.views.3d.help": "De plattegrond %{name} in 3d",
  "models.Floor.views.3d.label": "3D-plan",
  "models.Floor.views.cuby.help": "De plattegrond %{name} in 3d",
  "models.Floor.views.cuby.label": "3d",
  "models.Floor.views.simple-list.help": "Maak een lijst van de verdiepingen met weinig details",
  "models.Floor.views.simple-list.label": "Eenvoudige lijst",
  "models.Floor.views.geojson.help": "Zie de informatie in GeoJson",
  "models.Floor.views.geojson.label": "Kopieer GeoJson-co\xF6rdinaten",
  "models.Floor.views.standalone-2d-map.help": "De plattegrond %{name} in 2d zonder menu",
  "models.Floor.views.standalone-2d-map.label": "Alleen 2D-plan",
  "models.Floor.properties.id.label": "Verdieping-ID",
  "models.Floor.properties.name.label": "Naam verdieping",
  "models.Floor.properties.name.description": "De naam van de verdieping wordt gebruikt om deze gemakkelijk vindbaar te maken.",
  "models.Floor.properties.level.label": "Niveau",
  "models.Floor.properties.level.description": "Dankzij het niveau van de verdieping kunt u de positie ervan ten opzichte van de andere verdiepingen bepalen, gebruik bijvoorbeeld 0 voor de begane grond of -1 voor de parkeerplaatsen",
  "models.Floor.properties.backgroundLayout.label": "Achtergrond",
  "models.Floor.properties.backgroundLayout.description": "Met het achtergrondplan kunt u een eerste laagniveau hebben om de plannen opnieuw te kunnen tekenen, het moet op schaal zijn",
  "models.Floor.properties.backgroundLayoutOpacity.label": "Achtergronddekking",
  "models.Floor.properties.backgroundLayoutOpacity.description": "Met dekking kunt u meer of minder van de achtergrond zien",
  "models.Floor.properties.regulatoryCapacity.label": "Regelgevende capaciteit",
  "models.Floor.properties.regulatoryCapacity.description": "De regelgevende capaciteit van het platform maakt het mogelijk om de evacuatie van publiek en werknemers te beheren",
  "models.Floor.properties.pathfindingGraph.label": "Vloernavigatiegrafiek",
  "models.Floor.properties.pathfindingGraph.description": "Met de navigatiegrafiek kunt u de kortste paden tussen punten op de vloer berekenen",
  "models.Floor.properties.workplacesCount.label": "Aantal werkstations",
  "models.Floor.properties.workplacesCount.description": "Het aantal werkplekken op de verdieping wordt automatisch berekend",
  "models.Floor.properties.workplacesRatio.label": "Werkstationverhouding",
  "models.Floor.properties.workplacesRatio.description": "De werkplekverhouding is het aantal vierkante meters op de verdieping gedeeld door het aantal werkplekken, deze waarde wordt automatisch berekend",
  "models.Floor.properties.peopleCount.label": "Aantal opdrachten",
  "models.Floor.properties.peopleCount.description": "Het aantal mensen dat aan de verdieping is toegewezen, hetzij rechtstreeks aan ruimtes, hetzij via een werkstation",
  "models.Floor.properties.totalPeopleCount.label": "Totaal aantal opdrachten",
  "models.Floor.properties.totalPeopleCount.description": "Het aantal mensen dat aan de verdieping is toegewezen, hetzij rechtstreeks aan ruimtes, hetzij via een werkstation",
  "models.Floor.properties.peopleRatio.label": "Bezettingsgraad",
  "models.Floor.properties.peopleRatio.description": "De bezettingsgraad is het aantal vierkante meters op de verdieping gedeeld door het aantal personen dat direct of via een werkplek aan de ruimtes is toegewezen, deze waarde wordt berekend",
  "models.Floor.properties.freeWorkplacesCount.label": "Aantal vrije posities",
  "models.Floor.properties.freeWorkplacesCount.description": "Aantal vrije posities op de vloer",
  "models.Floor.properties.flexWorkplacesCount.label": "Aantal flexposities",
  "models.Floor.properties.flexWorkplacesCount.description": "Aantal flexposities op de vloer",
  "models.Floor.properties.roomsArea.label": "Gekwalificeerd oppervlak",
  "models.Floor.properties.roomsArea.description": "Het gekwalificeerde oppervlak is de som van de oppervlakken van de ruimtes",
  "models.Floor.properties.roomsCount.label": "Aantal spaties",
  "models.Floor.properties.roomsCount.description": "Het aantal aanwezige ruimtes op deze verdieping",
  "models.Floor.properties.sharedWorkplacesCount.label": "Aantal gedeelde werkstations",
  "models.Floor.properties.sharedWorkplacesCount.description": "Aantal werkplekken gedeeld op de verdieping door minimaal 2 personen",
  "models.Floor.properties.sharedWorkplacesRatio.label": "Tarief gedeeld werkstation",
  "models.Floor.properties.sharedWorkplacesRatio.description": "Percentage werkplekken gedeeld door minimaal 2 personen vergeleken met alle werkplekken op de verdieping",
  "models.Floor.properties.flexRatio.label": "Tarief flexwerkplekken",
  "models.Floor.properties.flexRatio.description": "Het flexwerkplektarief wordt berekend door het aantal flexwerkplekken te delen door het totaal aantal werkplekken",
  "models.Floor.properties.transitWorkplacesCount.label": "Aantal passerende werkplekken",
  "models.Floor.properties.transitWorkplacesCount.description": "Aantal tijdelijke werkplekken, deze posities worden niet meegeteld in de vrije posities en zijn niet in flex",
  "models.Floor.properties.height.label": "Plafondhoogte",
  "models.Floor.properties.height.description": "Plafondhoogte van de eerste verdieping",
  "models.Floor.properties.mapScale.label": "Schaal plannen",
  "models.Floor.properties.mapScale.description": "Dankzij de schaal kunnen we de werkelijke oppervlakten en afmetingen van objecten proportioneel berekenen",
  "models.FactType.singular": "Soort feit",
  "models.FactType.plural": "Feittypen",
  "models.FactType.determinant.defined": "het soort feit",
  "models.FactType.determinant.undefined": "een soort feit",
  "models.FactType.determinants.defined": "soorten feiten",
  "models.FactType.determinants.undefined": "soorten feiten",
  "models.Fact.singular": "Doen",
  "models.Fact.plural": "Feiten",
  "models.Fact.determinant.defined": "het feit",
  "models.Fact.determinant.undefined": "een feit",
  "models.Fact.determinants.defined": "feiten",
  "models.Fact.determinants.undefined": "feiten",
  "models.DistributionCostType.singular": "soort kostenverdeling",
  "models.DistributionCostType.plural": "soorten kostenverdeling",
  "models.DistributionCostType.determinant.defined": "het type kostenverdeling",
  "models.DistributionCostType.determinant.undefined": "een vorm van kostenverdeling",
  "models.DistributionCostType.determinants.defined": "soorten kostenverdeling",
  "models.DistributionCostType.determinants.undefined": "soorten kostenverdeling",
  "models.DistributionCostType.properties.name.label": "Naam van het type kostenverdeling",
  "models.DistributionCostType.properties.code.labe": "Gecodeerd",
  "models.DistributionCostType.properties.code.description": "De code wordt gebruikt om automatisch de bijbehorende kosten te kunnen berekenen",
  "models.DimensionTypeToBuilding.singular": "Type bouwopdrachtlaag",
  "models.DimensionTypeToBuilding.plural": "Soorten bouwopgavelagen",
  "models.DimensionTypeToBuilding.determinant.defined": "het type bouwopgavelaag",
  "models.DimensionTypeToBuilding.determinant.undefined": "een soort bouwopdrachtlaag",
  "models.DimensionTypeToBuilding.determinants.defined": "de typen bouwopgavelagen",
  "models.DimensionTypeToBuilding.determinants.undefined": "soorten bouwopgavelagen",
  "models.DimensionTypeToBuilding.description": "Met de typen bouwopgavelagen kunt u de verschillende typen bouwopgavelagen defini\xEBren. Door een type toewijzingslaag aan een gebouw te koppelen, kunt u een analyselaag transformeren in een toewijzingslaag.",
  "models.DimensionType.singular": "Laagtype",
  "models.DimensionType.plural": "Laagtypen",
  "models.DimensionType.determinant.defined": "het type laag",
  "models.DimensionType.determinant.undefined": "een soort laag",
  "models.DimensionType.determinants.defined": "soorten lagen",
  "models.DimensionType.determinants.undefined": "laagsoorten per verdieping",
  "models.DimensionType.properties.id.label": "Identificatie van het dimensietype",
  "models.DimensionType.properties.order.label": "volgorde van verschijnen",
  "models.DimensionType.properties.order.description": "Hiermee kunt u laagtypen sorteren om ze weer te geven",
  "models.DimensionType.properties.name.label": "Naam van dimensietype",
  "models.DimensionType.properties.code.label": "Code van het dimensietype",
  "models.DimensionType.properties.code.description": "Met de code kunt u het type dimensie identificeren. Deze wordt gebruikt wanneer specifieke berekeningen van toepassing zijn op het type dimensie",
  "models.DimensionToPerson.singular": "Toewijzing aan toewijzingslaag",
  "models.DimensionToPerson.plural": "Toewijzingen aan toewijzingslagen",
  "models.DimensionToPerson.description": "Hiermee kunt u een persoon toewijzen aan een district, gebied of dorp",
  "models.DimensionToPerson.determinant.defined": "toewijzing naar toewijzingslaag",
  "models.DimensionToPerson.determinant.undefined": "een toewijzing aan de toewijzingslaag ",
  "models.DimensionToPerson.determinants.defined": "toewijzingen aan toewijzingslagen",
  "models.DimensionToPerson.determinants.undefined": "toewijzingen aan toewijzingslagen",
  "models.DimensionRoom.singular": "Ruimteanalyselaag",
  "models.DimensionRoom.plural": "Lagen voor ruimteanalyse",
  "models.DimensionRoom.determinant.defined": "de ruimteanalyselaag",
  "models.DimensionRoom.determinant.undefined": "een ruimteanalyselaag",
  "models.DimensionRoom.determinants.defined": "lagen voor ruimteanalyse",
  "models.DimensionRoom.determinants.undefined": "lagen voor ruimteanalyse",
  "models.DimensionRoom.properties.id.label": "Identificatie van de ruimteanalyselaag",
  "models.DimensionFloor.singular": "Analyselaag per verdieping",
  "models.DimensionFloor.plural": "Analyselagen per verdieping",
  "models.DimensionFloor.determinant.defined": "de analyse laag voor verdieping",
  "models.DimensionFloor.determinant.undefined": "\xE9\xE9n analyselaag per verdieping",
  "models.DimensionFloor.determinants.defined": "analyselagen per verdieping",
  "models.DimensionFloor.determinants.undefined": "analyselagen per verdieping",
  "models.DimensionFloor.properties.id.label": "Identificatie van de analyselaag per verdieping",
  "models.DimensionFloor.properties.peopleCount.label": "Aantal opdrachten",
  "models.DimensionFloor.properties.peopleCount.description": "Het aantal toegewezen personen, hetzij rechtstreeks toegewezen aan ruimtes, hetzij via een werkplek voor deze verdieping",
  "models.DimensionFloor.properties.totalPeopleCount.label": "Totaal aantal indirecte opdrachten op de vloer",
  "models.DimensionFloor.properties.totalPeopleCount.description": "Het totale aantal mensen dat indirect aan de verdieping is toegewezen, hetzij rechtstreeks aan ruimtes, hetzij via een werkstation, maar niet via de toewijzingslagen die zich alleen op gebouwniveau bevinden",
  "models.DimensionBuilding.singular": "Analyse laag per gebouw",
  "models.DimensionBuilding.plural": "Analyselagen per gebouw",
  "models.DimensionBuilding.determinant.defined": "de analyselaag door te bouwen",
  "models.DimensionBuilding.determinant.undefined": "\xE9\xE9n analyselaag per gebouw",
  "models.DimensionBuilding.determinants.defined": "analyselagen door te bouwen",
  "models.DimensionBuilding.determinants.undefined": "analyselagen per gebouw",
  "models.DimensionBuilding.properties.id.label": "Identificatie van de analyselaag per gebouw",
  "models.DimensionBuilding.properties.dimensionPeopleCount.label": "Aantal toewijzingen rechtstreeks naar deze toewijzingslaag",
  "models.DimensionBuilding.properties.dimensionPeopleCount.description": "Het aantal mensen dat voor het gehele gebouw aan deze opdrachtlaag is toegewezen",
  "models.DimensionBuilding.properties.totalPeopleCount.label": "Totaal aantal opdrachten",
  "models.DimensionBuilding.properties.totalPeopleCount.description": "Het totale aantal toegewezen personen, hetzij direct toegewezen aan ruimtes, hetzij via een werkstation, of via een toewijzingslaag",
  "models.Dimension.singular": "Analyse laag",
  "models.Dimension.plural": "Analyse lagen",
  "models.Dimension.determinant.defined": "de analyselaag",
  "models.Dimension.determinant.undefined": "een analyselaag",
  "models.Dimension.determinants.defined": "analyse lagen",
  "models.Dimension.determinants.undefined": "analyse lagen",
  "models.Dimension.properties.id.label": "Identificatie van analyselaag",
  "models.Dimension.properties.id.description": "Surfy interne identificatie",
  "models.Dimension.properties.name.label": "Naam van analyselaag",
  "models.Dimension.properties.name.description": "Handig om onder andere de laag te differenti\xEBren",
  "models.Dimension.properties.color.label": "Kleur",
  "models.Dimension.properties.color.description": "Met de kleur van de analyselaag kunt u ruimtes op het plan onderscheiden",
  "models.Dimension.properties.value.label": "Numerieke waarde",
  "models.Dimension.properties.value.description": "De waarde kan worden gebruikt om de laag te associ\xEBren met een numerieke waarde om analytische statistieken te kunnen produceren",
  "models.Dimension.properties.peopleCount.label": "Aantal directe opdrachten",
  "models.Dimension.properties.peopleCount.description": "Het aantal mensen dat rechtstreeks aan deze opdrachtlaag in het gebouw is toegewezen",
  "models.Dimension.properties.manualPeopleCount.label": "Aantal directe handmatige opdrachten",
  "models.Dimension.properties.manualPeopleCount.description": "Het aantal mensen dat rechtstreeks aan deze opdrachtlaag is toegewezen zonder rekening te houden met opdrachten met echte mensen",
  "models.Dimension.properties.totalPeopleCount.label": "Totaal aantal directe opdrachten",
  "models.Dimension.properties.totalPeopleCount.description": "Het totaal aantal mensen dat direct aan deze toewijzingslaag in het gebouw is toegewezen, de optelling van de daadwerkelijk toegewezen mensen en het aantal handmatig toegewezen mensen",
  "models.Dimension.properties.carbonFootprintPerMeter.label": "Koolstofvoetafdruk per vierkante meter",
  "models.Dimension.properties.carbonFootprintPerMeter.description": "Met de CO2-voetafdruk per vierkante meter kunt u de CO2-voetafdruk in kilogrammen CO2 van een analyselaag per vierkante meter berekenen",
  "models.CostCenterFloor.singular": "kostenplaats van de verdieping",
  "models.CostCenterFloor.plural": "kostenplaatsen op de vloer",
  "models.CostCenterFloor.determinant.defined": "de kostenplaats van de vloeren ",
  "models.CostCenterFloor.determinant.undefined": "een vloerkostenplaats",
  "models.CostCenterFloor.determinants.defined": "kostenplaatsen op de vloer",
  "models.CostCenterFloor.determinants.undefined": "kostenplaatsen op de vloer",
  "models.CostCenterBuilding.singular": "kostenplaats bouwen",
  "models.CostCenterBuilding.plural": "kostenplaatsen bouwen",
  "models.CostCenterBuilding.determinant.defined": "de kostenplaats van gebouwen ",
  "models.CostCenterBuilding.determinant.undefined": "een bouwkostenpost",
  "models.CostCenterBuilding.determinants.defined": "kostenplaatsen bouwen",
  "models.CostCenterBuilding.determinants.undefined": "kostenplaatsen bouwen",
  "models.CostCenter.singular": "kostenplaats",
  "models.CostCenter.plural": "kostencentra",
  "models.CostCenter.description": "Met de kostenplaats kunt u ruimtes dynamisch verdelen voor herfacturatie",
  "models.CostCenter.determinant.defined": "de kostenplaats",
  "models.CostCenter.determinant.undefined": "een kostenplaats",
  "models.CostCenter.determinants.defined": "kostencentra",
  "models.CostCenter.determinants.undefined": "kostencentra",
  "models.CostCenter.properties.id.label": "Identificatie van de kostenplaats",
  "models.CostCenter.properties.name.label": "Naam kostenplaats",
  "models.CostCenter.properties.color.label": "Kleur",
  "models.CostCenter.properties.distributeByFloor.label": "Verdeel per verdieping",
  "models.CostCenter.properties.distributeByFloor.description": "Verdeel de ruimte die deze kostenplaats op de verdieping in beslag neemt, evenredig aan die van andere kostenplaatsen op dezelfde verdieping",
  "models.CostCenter.properties.distributeByBuilding.label": "Verdeel door te bouwen",
  "models.CostCenter.properties.distributeByBuilding.description": "Verdeel de ruimte die deze kostenplaats in het gebouw in beslag neemt evenredig aan de andere kostenplaatsen in het gebouw",
  "models.ContentRoleToUserCompany.singular": "Rol zakelijke gebruikersinhoud",
  "models.ContentRoleToUserCompany.plural": "Inhoudsrollen voor zakelijke gebruikers",
  "models.ContentRoleToUserCompany.determinant.defined": "de inhoudsrol van zakelijke gebruikers",
  "models.ContentRoleToUserCompany.determinant.undefined": "een inhoudsrol voor zakelijke gebruikers",
  "models.ContentRoleToUserCompany.determinants.defined": "Inhoudsrollen voor zakelijke gebruikers",
  "models.ContentRoleToUserCompany.determinants.undefined": "inhoudsrollen voor zakelijke gebruikers",
  "models.ContentRoleToJupUiTenantOperation.singular": "De inhoudsrol koppelen aan interfacebewerkingen voor een onderneming",
  "models.ContentRoleToJupUiTenantOperation.plural": "De inhoudsrol koppelen aan interfacebewerkingen voor een onderneming",
  "models.ContentRoleToJupUiTenantOperation.determinant.defined": "het koppelen van de inhoudsrol aan interfacebewerkingen voor een onderneming",
  "models.ContentRoleToJupUiTenantOperation.determinant.undefined": "een koppeling van de inhoudsrol met interfacebewerkingen voor een onderneming",
  "models.ContentRoleToJupUiTenantOperation.determinants.defined": "inhoudsrolassociaties om bewerkingen voor een onderneming te interfacen",
  "models.ContentRoleToJupUiTenantOperation.determinants.undefined": "associaties van inhoudsrollen met interface-activiteiten voor een onderneming",
  "models.ContentRoleToFloor.singular": "Associatierol van inhoud aan verhalen",
  "models.ContentRoleToFloor.plural": "Associaties van inhoudsrollen met verhalen",
  "models.ContentRoleToFloor.determinant.defined": "de associatie van de inhoudsrol met de verhalen",
  "models.ContentRoleToFloor.determinant.undefined": "een koppeling van de inhoudsrol aan de verdiepingen",
  "models.ContentRoleToFloor.determinants.defined": "associaties van de inhoudsrol met de verdiepingen",
  "models.ContentRoleToFloor.determinants.undefined": "associaties van de inhoudsrol met de verdiepingen",
  "models.ContentRoleToBuilding.singular": "Associatie-inhoudsrol voor gebouwen",
  "models.ContentRoleToBuilding.plural": "Associaties van inhoudsrollen aan gebouwen",
  "models.ContentRoleToBuilding.determinant.defined": "het associ\xEBren van de inhoudsrol met gebouwen",
  "models.ContentRoleToBuilding.determinant.undefined": "een associatie van de inhoudsrol met gebouwen",
  "models.ContentRoleToBuilding.determinants.defined": "associaties van de inhoudsrol met gebouwen",
  "models.ContentRoleToBuilding.determinants.undefined": "associaties van de inhoudsrol met gebouwen",
  "models.ContentRole.singular": "Inhoudelijke rol",
  "models.ContentRole.plural": "Inhoudelijke rollen",
  "models.ContentRole.determinant.defined": "de rol van de inhoud",
  "models.ContentRole.determinant.undefined": "een inhoudelijke rol",
  "models.ContentRole.determinants.defined": "inhoud rollen",
  "models.ContentRole.determinants.undefined": "inhoud rollen",
  "models.CompanyType.singular": "type bedrijf",
  "models.CompanyType.plural": "soort bedrijven",
  "models.CompanyType.determinant.defined": "het soort bedrijf",
  "models.CompanyType.determinant.undefined": "een soort bedrijf",
  "models.CompanyType.determinants.defined": "soorten bedrijven",
  "models.CompanyType.determinants.undefined": "soorten bedrijven",
  "models.CompanyType.properties.name.label": "Naam bedrijfstype",
  "models.Company.singular": "onderneming",
  "models.Company.plural": "bedrijven",
  "models.Company.determinant.defined": "het bedrijf",
  "models.Company.determinant.undefined": "een bedrijf",
  "models.Company.determinants.defined": "ondernemingen",
  "models.Company.determinants.undefined": "bedrijven",
  "models.Company.properties.id.label": "bedrijfs ID",
  "models.Company.properties.logoPath.label": "Logo",
  "models.Company.properties.logoPath.description": "Het pad naar uw bedrijfslogo",
  "models.Company.properties.iconPath.label": "icoon",
  "models.Company.properties.iconPath.description": "Het bedrijfslogo in vierkant",
  "models.Company.properties.name.label": "Bedrijfsnaam",
  "models.Company.properties.workingDaysCount.label": "Aantal werkdagen per week",
  "models.Company.properties.workingDaysCount.description": "Het aantal werkdagen per week kan voor werkdagen 5 bedragen, 6 inclusief zaterdag en 7 inclusief zondag",
  "models.Company.views.usage.label": "Gebruik van platformen",
  "models.Company.views.usage.help": "Inzicht in het gebruik van beschikbare platforms",
  "models.Company.views.cards.help": "Uitzicht op tegelbedrijven",
  "models.Company.views.cards.label": "Dakpannen",
  "models.Company.views.dq-fix-inventory.label": "Consistentie van de voorraad",
  "models.Company.views.dq-fix-inventory.help": "Vind en repareer inconsistenties in de fysieke en virtuele voorraad voor werkstations",
  "models.Company.views.dq-shapes-position.label": "Locatie van vormen",
  "models.Company.views.dq-shapes-position.help": "Zoek en verplaats vormen die op het plan staan \u200B\u200Bin een andere ruimte dan die in de database",
  "models.Company.views.people-info.label": "Statistieken over de creaties van opdrachten door mensen",
  "models.Company.views.people-info.help": "Bekijk opdrachtstatistieken",
  "models.Company.reports.export-all.fileName": "back-up",
  "models.Company.reports.export-all.help": "Maak een back-up van alle Surfy-gegevens",
  "models.Company.reports.export-all-duplicate.fileName": "duplicatie",
  "models.Company.reports.export-all-duplicate.help": "Maak een back-up van bedrijfsgegevens om een \u200B\u200Bkopie van het platform te maken",
  "models.Campus.singular": "campus",
  "models.Campus.plural": "campus",
  "models.Campus.description": "Campus wordt gebruikt om gebouwen te groeperen die zich op dezelfde locatie bevinden.",
  "models.Campus.determinant.defined": "de campus",
  "models.Campus.determinant.undefined": "een campus",
  "models.Campus.determinants.defined": "campussen",
  "models.Campus.determinants.undefined": "campussen",
  "models.Campus.views.cards.help": "Groepsaanzicht van gebouwen",
  "models.Campus.views.cards.label": "Info",
  "models.Campus.properties.id.label": "Campus-ID",
  "models.Campus.properties.name.label": "Campusnaam",
  "models.Campus.properties.name.description": "Campusnaam",
  "models.Campus.properties.color.label": "Kleur",
  "models.Campus.properties.color.description": "Campuskleur",
  "models.Campus.properties.externalId.label": "Externe identificatie",
  "models.BuildingType.singular": "soort gebouw",
  "models.BuildingType.plural": "soorten gebouwen",
  "models.BuildingType.determinant.defined": "het type gebouw",
  "models.BuildingType.determinant.undefined": "een type gebouw",
  "models.BuildingType.determinants.defined": "soorten gebouwen",
  "models.BuildingType.determinants.undefined": "soorten gebouwen",
  "models.BuildingType.properties.id.label": "Identificatie van het gebouwtype",
  "models.BuildingType.properties.name.label": "Naam gebouwtype",
  "models.BuildingType.properties.name.description": "Naam gebouwtype",
  "models.BuildingType.properties.code.label": "Gecodeerd",
  "models.BuildingType.properties.code.description": "???",
  "models.BuildingType.properties.externalId.label": "Externe identificatie",
  "models.BuildingType.properties.externalId.description": "???",
  "models.Building.singular": "gebouw",
  "models.Building.plural": "gebouwen",
  "models.Building.determinant.defined": "gebouw",
  "models.Building.determinant.undefined": "een gebouw",
  "models.Building.determinants.defined": "de gebouwen",
  "models.Building.determinants.undefined": "gebouwen",
  "models.Building.description": "Het gebouw wordt gebruikt om de verdiepingen te groeperen",
  "models.Building.reports.workplaces.fileName": "Persoonlijke werkplekken",
  "models.Building.reports.workplaces.help": "Rapport bouwwerkplek",
  "models.Building.reports.allWorkplaces.fileName": "Werkplekken met opdrachten",
  "models.Building.reports.allWorkplaces.help": "Rapportage van alle werkplekken in het gebouw inclusief opdrachten",
  "models.Building.reports.workplaceAffectations.fileName": "Werkstationopdrachten",
  "models.Building.reports.workplaceAffectations.help": "Toewijzingsrapport voor het bouwen van een werkstation",
  "models.Building.reports.buildingPeople.fileName": "Mensen",
  "models.Building.reports.buildingPeople.help": "Melding van getroffen personen in het gebouw",
  "models.Building.reports.organizations.fileName": "Organisaties",
  "models.Building.reports.organizations.help": "Verslag van bouworganisaties",
  "models.Building.reports.buildingItems.fileName": "Inventaris",
  "models.Building.reports.buildingItems.help": "Rapport van de bouwinventaris",
  "models.Building.reports.area.fileName": "Spaties",
  "models.Building.reports.area.help": "Rapport bouwruimte",
  "models.Building.reports.buildingCleaning.fileName": "Diensten",
  "models.Building.reports.buildingCleaning.help": "Verslag over schoonmaakdiensten voor gebouwen",
  "models.Building.reports.buildingDimensions.fileName": "Analyse lagen",
  "models.Building.reports.buildingDimensions.help": "Rapport van analyselagen van gebouwruimten",
  "models.Building.views.cards.help": "Uitzicht op betegelde gebouwen",
  "models.Building.views.cards.label": "Info",
  "models.Building.views.pictures.help": "Bekijk gebouwen met foto's",
  "models.Building.views.pictures.label": "Foto's",
  "models.Building.views.gmap.help": "Bekijk gebouwen op een kaart",
  "models.Building.views.gmap.label": "Kaart",
  "models.Building.views.cost-distribution-by-cost-center.help": "<b>Verdeelsleutels</b> en gekwalificeerde oppervlakte per kostenplaats voor het gebouw %{name}",
  "models.Building.views.cost-distribution-by-cost-center.label": "Distributiesleutels",
  "models.Building.views.3d-cards.help": "Bekijk gebouwen in 3D",
  "models.Building.views.3d-cards.label": "3d",
  "models.Building.views.assets.help": "Onroerende goederen",
  "models.Building.views.assets.label": "Vastgoed",
  "models.Building.views.cuby.help": "Het interactieve <b>3D-</b> plan van het gebouw %{name}",
  "models.Building.views.cuby.label": "3D-plan",
  "models.Building.views.3d.help": "Het 3D-plan van het gebouw %{name} (cuby)",
  "models.Building.views.3d.label": "3D-plan",
  "models.Building.views.clone.help": "<b>Scenario's</b> en projecten bouwen %{name}",
  "models.Building.views.clone.label": "Scenario's",
  "models.Building.views.building-ifc.help": "Exporteer dit gebouw in IFC voor BIM",
  "models.Building.views.building-ifc.label": "IFC",
  "models.Building.views.zbre-sync.help": "Synchroniseer het gebouw met het Zbre-platform",
  "models.Building.views.zbre-sync.label": "Zbre-synchronisatie",
  "models.Building.views.inventory.help": "<b>Gebouwinventaris</b> %{name}",
  "models.Building.views.inventory.label": "Inventaris",
  "models.Building.views.list-simple.help": "Noem gebouwen met weinig details",
  "models.Building.views.list-simple.label": "Simpele lijst",
  "models.Building.views.building-3d-gmap.label": "3D-gebouw op het plan",
  "models.Building.views.building-3d-gmap.help": "Bekijk het gebouw in 3D op een kaart",
  "models.Building.properties.id.label": "Gebouw-ID",
  "models.Building.properties.name.label": "naam van gebouw",
  "models.Building.properties.name.description": "Naam van gebouw of scenario",
  "models.Building.properties.picture.label": "Foto van het gebouw",
  "models.Building.properties.picture.description": "U kunt een foto van uw gebouw gebruiken om het snel te vinden vanaf de startpagina (zie gebouwen met foto's) of om de mening van medewerkers te illustreren",
  "models.Building.properties.documents.label": "Gerelateerde documenten",
  "models.Building.properties.documents.description": "Onderhoud een link naar de locatie van documenten die aan dit gebouw zijn gekoppeld in uw GED",
  "models.Building.properties.securityDeposit.label": "Borg",
  "models.Building.properties.securityDeposit.description": "Bedrag van de aanbetaling die is gestort bij ondertekening van het huurcontract",
  "models.Building.properties.buildings.label": "Gebouwscenario's",
  "models.Building.properties.buildings.description": "Scenario's gegenereerd vanuit dit gebouw",
  "models.Building.properties.constructionYear.label": "Bouwjaar van het gebouw",
  "models.Building.properties.constructionYear.description": "Bouwjaar van het gebouw waardoor de veroudering kan worden gemeten",
  "models.Building.properties.parkingSpaceCount.label": "Aantal parkeerplaatsen",
  "models.Building.properties.parkingSpaceCount.description": "Aantal beschikbare parkeerplaatsen",
  "models.Building.properties.yearlyParkingRent.label": "Jaarlijkse parkeerhuur",
  "models.Building.properties.yearlyParkingRent.description": "Aandeel van de huur bestemd voor parkeren",
  "models.Building.properties.yearlyTaxFees.label": "Bedrag van de jaarlijkse belastingen",
  "models.Building.properties.yearlyTaxFees.description": "Totaalbedrag aan belastingen",
  "models.Building.properties.yearlyExploitationFees.label": "Jaarlijkse bedrijfskosten",
  "models.Building.properties.yearlyExploitationFees.description": "Jaarlijks bedrag aan bedrijfskosten (bijvoorbeeld: water, elektriciteit)",
  "models.Building.properties.rentReferenceIndex.label": "Huurbenchmarkindex",
  "models.Building.properties.rentReferenceIndex.description": "De huurreferentie-index (IRL) dient als basis voor de herziening van de huurprijzen van leegstaande of gemeubileerde woonruimte",
  "models.Building.properties.color.label": "Kleur",
  "models.Building.properties.color.description": "De kleur van het gebouw wordt gebruikt om de achtergrondkleur in de presentaties van de verdiepingen of het gebouw te defini\xEBren en om dit gebouw van de anderen te kunnen onderscheiden",
  "models.Building.properties.roomsCount.label": "Aantal spaties",
  "models.Building.properties.roomsCount.description": "Het aantal ruimtes dat in dit gebouw is gecre\xEBerd",
  "models.Building.properties.roomsArea.label": "Gekwalificeerd oppervlak",
  "models.Building.properties.roomsArea.description": "Het gekwalificeerde oppervlak vertegenwoordigt alle gebieden die in Surfy zijn gemodelleerd",
  "models.Building.properties.workplacesCount.label": "Aantal werkstations",
  "models.Building.properties.workplacesCount.description": "Het aantal werkplekken in het gebouw wordt automatisch berekend",
  "models.Building.properties.workplacesRatio.label": "Werkstationverhouding",
  "models.Building.properties.workplacesRatio.description": "De verhouding per werkplek is het aantal vierkante meters in het pand gedeeld door het aantal werkplekken, deze waarde wordt automatisch berekend",
  "models.Building.properties.peopleCount.label": "Aantal opdrachten",
  "models.Building.properties.peopleCount.description": "Het aantal personen dat is toegewezen aan het gebouw, de buurt, de ruimte of de werkplek",
  "models.Building.properties.peopleRatio.label": "Bezettingsgraad",
  "models.Building.properties.peopleRatio.description": "De bezettingsgraad is het aantal vierkante meters in het gebouw gedeeld door het aantal mensen dat direct aan de wijken, ruimtes of werkplekken is toegewezen. Deze waarde wordt berekend",
  "models.Building.properties.freeWorkplacesCount.label": "Aantal vrije posities",
  "models.Building.properties.freeWorkplacesCount.description": "Aantal vacante posities in het gebouw",
  "models.Building.properties.flexWorkplacesCount.label": "Aantal flexposities",
  "models.Building.properties.flexWorkplacesCount.description": "Aantal flexwerkplekken in het gebouw",
  "models.Building.properties.address.label": "Adres",
  "models.Building.properties.address.description": "Het adres van het gebouw om het op de kaart te lokaliseren",
  "models.Building.properties.yearlyCondominiumFees.label": "Jaarlijkse kosten",
  "models.Building.properties.yearlyCondominiumFees.description": "Bijvoorbeeld het bedrag van de jaarlijkse beheer- of mede-eigendomskosten",
  "models.Building.properties.yearlyRent.label": "Jaarlijkse huur",
  "models.Building.properties.yearlyRent.description": "Bedrag van de jaarlijkse huur voor dit gebouw",
  "models.Building.properties.leaseStartDate.label": "Ingangsdatum huurcontract",
  "models.Building.properties.leaseStartDate.description": "Ingangsdatum huurcontract",
  "models.Building.properties.leaseEndDate.label": "Einddatum huurcontract",
  "models.Building.properties.leaseEndDate.description": "Einddatum huurcontract",
  "models.Building.properties.purchaseDate.label": "Datum van aankoop van het gebouw",
  "models.Building.properties.purchaseDate.description": "Datum van aankoop van het gebouw",
  "models.Building.properties.buildingId.label": "Referentiegebouw-ID",
  "models.Building.properties.buildingId.description": "De identificatiecode van het referentiegebouw wordt gebruikt als onderdeel van het maken van scenario's, de identificatiecode maakt de associatie met dit gebouw mogelijk",
  "models.Building.properties.building.label": "Origineel gebouw",
  "models.Building.properties.building.description": "Het originele of referentiegebouw wordt gebruikt bij het maken van scenario's. Hiermee kunt u het oorspronkelijke gebouw identificeren waaruit het gebouw is gemaakt",
  "models.Building.properties.jupUiLayout.label": "Standaard planweergave",
  "models.Building.properties.jupUiLayout.description": "Wanneer een plattegrond van dit gebouw voor het eerst wordt geopend, wordt de standaardvisie geselecteerd. Na de eerste opening wordt de huidige visie toegepast.",
  "models.Building.properties.sharedWorkplacesCount.label": "Aantal gedeelde werkstations",
  "models.Building.properties.sharedWorkplacesCount.description": "Aantal werkplekken gedeeld in het gebouw door minimaal 2 personen",
  "models.Building.properties.sharedWorkplacesRatio.label": "Tarief gedeeld werkstation",
  "models.Building.properties.sharedWorkplacesRatio.description": "Percentage werkplekken gedeeld door minimaal 2 personen vergeleken met alle werkplekken in het gebouw",
  "models.Building.properties.flexRatio.label": "Tarief flexwerkplekken",
  "models.Building.properties.flexRatio.description": "Het flexwerkplektarief wordt berekend door het aantal flexwerkplekken te delen door het totaal aantal werkplekken",
  "models.Building.properties.transitWorkplacesCount.label": "Aantal passerende werkplekken",
  "models.Building.properties.transitWorkplacesCount.description": "Aantal tijdelijke werkplekken, deze posities worden niet meegeteld in de vrije posities en zijn niet in flex",
  "models.Building.properties.regulatoryCapacity.label": "Regelgevende capaciteit",
  "models.Building.properties.regulatoryCapacity.description": "De regelgevende capaciteit van het platform maakt het mogelijk om de evacuatie van publiek en werknemers te beheren",
  "models.Building.properties.dimensionPeopleCount.label": "Aantal laagtoewijzingen",
  "models.Building.properties.dimensionPeopleCount.description": "Het aantal mensen dat is toegewezen aan de opdrachtlagen die bij dit gebouw horen",
  "models.Building.properties.userCompanyOwner.label": "Gebruiker die eigenaar is van het gebouw",
  "models.Building.properties.userCompanyOwner.description": "De gebruiker die eigenaar is van het gebouw ziet het gebouw altijd, zelfs als er een inhoudsrol aanwezig is. In het geval van het maken van een scenario wordt de gebruiker die het scenario heeft gemaakt de eigenaar, de eigenaar kan later worden gewijzigd",
  "models.AuthentificationConnection.singular": "Authenticatie verbinding",
  "models.AuthentificationConnection.plural": "Authenticatieverbindingen",
  "models.AuthentificationConnection.determinant.defined": "de authenticatieverbinding",
  "models.AuthentificationConnection.determinant.undefined": "een authenticatieverbinding",
  "models.AuthentificationConnection.determinants.defined": "authenticatie verbindingen",
  "models.AuthentificationConnection.determinants.undefined": "authenticatie verbindingen",
  "models.ApiUserToJupRole.singular": "API-gebruikerskoppeling aan rol",
  "models.ApiUserToJupRole.plural": "API-gebruikerskoppelingen aan rol",
  "models.ApiUserToJupRole.determinant.defined": "API-gebruikerskoppeling aan rol",
  "models.ApiUserToJupRole.determinant.undefined": "een API-gebruikerskoppeling aan de rol",
  "models.ApiUserToJupRole.determinants.defined": "API-gebruikersassociaties aan de rol",
  "models.ApiUserToJupRole.determinants.undefined": "API-gebruikersassociaties aan de rol",
  "models.ApiUserToContentRole.singular": "API-gebruikerskoppeling aan inhoudsrol",
  "models.ApiUserToContentRole.plural": "API-gebruikersassociaties met inhoudsrol",
  "models.ApiUserToContentRole.determinant.defined": "API-gebruikerskoppeling aan inhoudsrol",
  "models.ApiUserToContentRole.determinant.undefined": "een API-gebruikerskoppeling aan de inhoudsrol",
  "models.ApiUserToContentRole.determinants.defined": "API-gebruikerskoppelingen aan inhoudsrol",
  "models.ApiUserToContentRole.determinants.undefined": "API-gebruikerskoppelingen aan inhoudsrol",
  "models.ApiUser.singular": "API-gebruiker",
  "models.ApiUser.plural": "API-gebruikers",
  "models.ApiUser.determinant.defined": "API-gebruiker",
  "models.ApiUser.determinant.undefined": "een API-gebruiker",
  "models.ApiUser.determinants.defined": "API-gebruikers",
  "models.ApiUser.determinants.undefined": "API-gebruikers",
  "models.ApiUser.properties.clientSecret.label": "Geheime code",
  "models.ApiUser.properties.clientSecret.description": "het geheime wachtwoord voor uw API-account kan worden gegenereerd en mag nooit worden gedeeld",
  "ToggleZbreSyncCheckbox.label": "Synchroniseer met realtime bezigheden in Z#bre",
  "ToggleZbreSyncCheckbox.help": "Door synchronisatie kunnen ruimtes en werkplekken worden gekleurd op basis van de in Z#bre geplaatste sensoren",
  "FloorSpaceSlider.title": "Ruimte tussen elke verdieping in centimeters",
  "FloorSelector.title": "Selecteer verdiepingen",
  "FloorSelector.focus": "Selecteer alleen deze verdieping",
  "FloorSelector.selectAll.false": "Selecteer alle verdiepingen",
  "FloorSelector.selectAll.true": "Deselecteer alle verdiepingen",
  "ToggleEnableMissingFloors.label": "Laat spookvloeren zien",
  "ToggleEnableMissingFloors.help": "Toon spookvloeren voor ontbrekende verdiepingen tussen niveau 0 en de hoogste verdieping op basis van echte vloerniveaus",
  "RoomGraphHandler.buttons.generateGraph.label": "Genereer de ori\xEBntatiegrafiek",
  "RoomGraphHandler.buttons.generateGraph.description": "Door de ori\xEBntatiegrafiek te genereren, worden de knooppunten berekend waarlangs de verkenner de ruimtes en meubels kan vinden. Als de oorspronkelijke ruimte kan worden geselecteerd, is de grafiek al gegenereerd.",
  "RoomGraphHandler.buttons.selectOriginRoom.label": "Selecteer originele ruimte",
  "RoomGraphHandler.buttons.selectOriginRoom.description": "Selecteer een ruimte en gebruik deze optie om deze als startruimte te defini\xEBren",
  "RoomGraphHandler.icons.displayNodes.description": "Toon paden in kamers",
  "RoomGraphHandler.icons.displayBoundingBoxes.description": "Toon uitsluitingsruimten voor meubels",
  "RoomGraphHandler.icons.enablePathfinding.description": "Activeer padtekening vanuit de bronruimte met vorm onder de muis",
  "RoomGraphHandler.rooms.origin": "Originele ruimte",
  "ThemeModeSwitchMenuItem.dark.label": "Schakel over naar de heldere modus",
  "ThemeModeSwitchMenuItem.dark.help": "Door de heldere modus te gebruiken, kunt u met een witte achtergrond werken",
  "ThemeModeSwitchMenuItem.light.label": "Schakel over naar de donkere modus",
  "ThemeModeSwitchMenuItem.light.help": "Door de donkere modus te gebruiken, kunt u met donkere kleuren op de achtergrond werken om vermoeide ogen te verminderen.",
  "copilot.actions.add.door": "Er is zojuist een deur toegevoegd door Surfy Copilot",
  "generateDocumentation.properties.technicalName": "Technische naam",
  "generateDocumentation.properties.belongsTo": "Geassocieerde entiteiten (enkel)",
  "generateDocumentation.properties.hasMany": "Geassocieerde entiteiten (lijst)",
  "generateDocumentation.properties.base": "Basiseigenschappen",
  "generateDocumentation.properties.mandatory": "Verplichte eigenschappen",
  "help.key1": "Hallo %{name}",
  "help.key2": "doei %{name}"
};

// src/front/jup/I18n/i18n.backends.languages.ts
var jsonTranslationsFiles = {
  fr: fr_default,
  en: en_default,
  es: es_default,
  it: it_default,
  nl: nl_default
};

// src/front/jup/I18n/PolyglotHelpApi.ts
var PolyglotHelpApi = class extends PolyglotApi {
  static {
    __name(this, "PolyglotHelpApi");
  }
  async setLocale(locale) {
    const phrases = jsonTranslationsFiles[locale];
    const polyglot2 = new import_node_polyglot2.default({
      locale,
      phrases,
      allowMissing: true
    });
    this.setPolyglot(polyglot2);
    updateGlobalLanguageSettings(polyglot2.locale());
  }
};

// src/front/jup/Application/Recoil/i18n/I18NHelpContext.tsx
function I18NHelpContext(props) {
  const { defaultLanguage } = props;
  const [i18n, setI18n] = (0, import_recoil4.useRecoilState)(polyglotApiAtom);
  (0, import_react6.useEffect)(() => {
    const api = new PolyglotHelpApi();
    api.setup(defaultLanguage).then(setI18n);
  }, []);
  if (i18n) {
    return props.children;
  }
  return null;
}
__name(I18NHelpContext, "I18NHelpContext");

// src/core/tenant/tenant.helper.ts
function isTenantObjectType(objecTypeName) {
  return objecTypeName === tenantInfo.objectType;
}
__name(isTenantObjectType, "isTenantObjectType");

// src/core/metaModel/helper.ts
function entityToString(modelName, e) {
  if (!e) {
    return `${modelName}|?`;
  }
  const eWithName = e;
  if (eWithName.name) {
    return eWithName.name;
  }
  return `${modelName}|${e.id}`;
}
__name(entityToString, "entityToString");

// src/core/api/graph/helper.ts
function getObjectType(singular2) {
  return {
    definition: getObjectTypeDefinitionByName(singular2),
    entityToString: /* @__PURE__ */ __name((i18n, e) => entityToString(singular2, e), "entityToString"),
    entityToStringWithContext: /* @__PURE__ */ __name((i18n, masterData, e) => entityToString(singular2, e), "entityToStringWithContext"),
    key: /* @__PURE__ */ __name((e) => `${singular2}-${e.id}`, "key"),
    // breadcrumb: getDefaultBreadcrumb<TQueryNode>(singular),
    appBarBackgroundColor: /* @__PURE__ */ __name(() => void 0, "appBarBackgroundColor"),
    pathToBuilding: [],
    reports: []
  };
}
__name(getObjectType, "getObjectType");

// src/core/generated/objectTypes.generated.ts
var generatedObjectTypes = [
  getObjectType("occupancyStatus"),
  getObjectType("user"),
  getObjectType("userRefreshToken"),
  getObjectType("companyType"),
  getObjectType("company"),
  getObjectType("campus"),
  getObjectType("roomConnectorType"),
  getObjectType("roomConnector"),
  getObjectType("userCompany"),
  getObjectType("personGender"),
  getObjectType("personCompany"),
  getObjectType("jupUiLayout"),
  getObjectType("buildingType"),
  getObjectType("organization"),
  getObjectType("itemTypeFamily"),
  getObjectType("manufacturer"),
  getObjectType("object3dModel"),
  getObjectType("itemType"),
  getObjectType("building"),
  getObjectType("mapScale"),
  getObjectType("structure"),
  getObjectType("structurePoint"),
  getObjectType("floor"),
  getObjectType("distributionCostType"),
  getObjectType("roomTypeGroup"),
  getObjectType("roomType"),
  getObjectType("roomTypeGroupToRoomType"),
  getObjectType("roomTypeGroupFloor"),
  getObjectType("roomTypeGroupBuilding"),
  getObjectType("costCenter"),
  getObjectType("costCenterBuilding"),
  getObjectType("costCenterFloor"),
  getObjectType("room"),
  getObjectType("roomPoint"),
  getObjectType("roomPointRoom"),
  getObjectType("roomPointSegmentType"),
  getObjectType("roomPointSegment"),
  getObjectType("itemTypePoint"),
  getObjectType("dimensionType"),
  getObjectType("dimension"),
  getObjectType("dimensionRoom"),
  getObjectType("dimensionFloor"),
  getObjectType("dimensionBuilding"),
  getObjectType("factType"),
  getObjectType("fact"),
  getObjectType("personState"),
  getObjectType("personSecurityProfile"),
  getObjectType("person"),
  getObjectType("personToPersonType"),
  getObjectType("personToPerson"),
  getObjectType("roomAffectation"),
  getObjectType("workplaceType"),
  getObjectType("workplaceTypeItemType"),
  getObjectType("workplace"),
  getObjectType("item"),
  getObjectType("workplaceAffectation"),
  getObjectType("organizationFloor"),
  getObjectType("organizationBuilding"),
  getObjectType("roomTypeFloor"),
  getObjectType("roomTypeBuilding"),
  getObjectType("itemToPerson"),
  getObjectType("personToBuilding"),
  getObjectType("dimensionToPerson"),
  getObjectType("dimensionTypeToBuilding"),
  getObjectType("workingLocation"),
  getObjectType("personWorkingLocation"),
  getObjectType("personToWorkplaceBooking"),
  getObjectType("personToRoomBooking"),
  getObjectType("personToDimensionBooking"),
  getObjectType("personCompanyMission"),
  getObjectType("personCompanyToItemType"),
  getObjectType("personCompanyToRoomType"),
  getObjectType("personCompanyToItem"),
  getObjectType("legend"),
  getObjectType("openerPostMessageHost"),
  getObjectType("jupObjectType"),
  getObjectType("jupUiView"),
  getObjectType("jupRole"),
  getObjectType("jupUiOption"),
  getObjectType("jupUiOperation"),
  getObjectType("contentRole"),
  getObjectType("jupUserCompanyToJupRole"),
  getObjectType("jupRoleToJupUiView"),
  getObjectType("jupRoleToJupObjectType"),
  getObjectType("jupRoleToJupUiOption"),
  getObjectType("jupRoleToJupUiOperation"),
  getObjectType("contentRoleToBuilding"),
  getObjectType("contentRoleToUserCompany"),
  getObjectType("contentRoleToFloor"),
  getObjectType("partnerApiCredential"),
  getObjectType("apiUser"),
  getObjectType("apiUserToJupRole"),
  getObjectType("apiUserToContentRole"),
  getObjectType("jupUiTenantOperation"),
  getObjectType("contentRoleToJupUiTenantOperation"),
  getObjectType("authentificationConnection"),
  getObjectType("userRegistrationTenantRule"),
  getObjectType("userRegistrationTenantRuleToJupRole"),
  getObjectType("userRegistrationTenantRuleToContentRole"),
  getObjectType("partnerExportMappingConfiguration"),
  getObjectType("partnerExportMapping"),
  getObjectType("partnerExportMappingToRoomType"),
  getObjectType("partnerExportMappingConfigurationToFloor"),
  getObjectType("jupRoleToJupUiLayout"),
  getObjectType("itemFact"),
  getObjectType("featureFamily"),
  getObjectType("featureGroup"),
  getObjectType("feature")
];

// src/core/api/where/where.ts
function createFilter(operator, column, value) {
  return {
    operator,
    column,
    value
  };
}
__name(createFilter, "createFilter");

// src/front/surfy/Components/Building/Reports/helper.ts
function getAllExportableProperties(objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  const properties = Object.values(otDef.propertiesByName).filter((p) => {
    if (isPropertyTypeId(p) || isPropertyTypeBelongsTo(p) || isPropertyTypeHasMany(p)) {
      return false;
    }
    return true;
  });
  return properties;
}
__name(getAllExportableProperties, "getAllExportableProperties");
function getAllPropertyNamesExportWithoutTechnicals(objectTypeName) {
  const properties = getAllExportableProperties(objectTypeName);
  return properties.filter((p) => !p.options.technical).map((p) => p.name);
}
__name(getAllPropertyNamesExportWithoutTechnicals, "getAllPropertyNamesExportWithoutTechnicals");

// src/front/surfy/Components/Building/Workplaces/building.reports.ts
var exludeFromWorkplaces = [
  "position",
  "textAnchor",
  "rotation",
  "externalId"
];
var workplaceAllProperties = jupDifferenceWith(getAllPropertyNamesExportWithoutTechnicals("workplace"), exludeFromWorkplaces);
var workplacesExportQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => [
  {
    exportType: "hasManyCount",
    objectTypeName: "building",
    queryNode: {
      name: "workplace",
      required: true,
      _: [
        "id",
        ...jupUniq([
          "name",
          ...workplaceAllProperties
        ]),
        roomToBuildingQueryNode(buildingIds, true),
        {
          name: "costCenter",
          _: [
            "name"
          ]
        },
        {
          name: "organization",
          _: [
            "name",
            {
              name: "organization",
              _: [
                "name"
              ]
            }
          ]
        },
        {
          name: "workplaceAffectations",
          _: [
            "id"
          ]
        },
        {
          name: "workplaceType",
          _: [
            "name"
          ]
        }
      ]
    }
  }
], "workplacesExportQueryNode");
function roomToBuildingQueryNode(buildingIds, required, roomProperties) {
  return {
    name: "room",
    required,
    _: [
      "name",
      {
        name: "floor",
        required,
        _: [
          "name",
          {
            name: "building",
            required,
            _: [
              "name"
            ],
            filters: [
              createFilter("in", "id", buildingIds)
            ]
          }
        ]
      },
      ...roomProperties || []
    ]
  };
}
__name(roomToBuildingQueryNode, "roomToBuildingQueryNode");
var personAllProperties = getAllPropertyNamesExportWithoutTechnicals("person");
var personWorkplace = /* @__PURE__ */ __name((personProperties3) => ({
  name: "person",
  _: [
    ...jupUniq([
      "firstname",
      "lastname",
      "code",
      ...personProperties3
    ]),
    {
      name: "organization",
      _: [
        "name",
        {
          name: "organization",
          _: [
            "name"
          ]
        }
      ]
    },
    {
      name: "costCenter",
      _: [
        "name"
      ]
    },
    {
      name: "personSecurityProfile",
      _: [
        "name"
      ]
    },
    {
      name: "personState",
      _: [
        "name"
      ]
    }
  ]
}), "personWorkplace");
var allWorkplacesQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => [
  {
    exportType: "hasManyRec",
    objectTypeName: "building",
    queryNode: {
      name: "workplace",
      _: [
        ...jupUniq([
          "id",
          "name",
          ...workplaceAllProperties
        ]),
        roomToBuildingQueryNode(buildingIds, true),
        {
          name: "organization",
          _: [
            "name",
            {
              name: "organization",
              _: [
                "name"
              ]
            }
          ]
        },
        {
          name: "costCenter",
          _: [
            "name"
          ]
        },
        {
          name: "workplaceType",
          _: [
            "name"
          ]
        },
        {
          name: "workplaceAffectations",
          _: [
            "id",
            personWorkplace(jupDifferenceWith(personAllProperties, [
              "picture"
            ]))
          ]
        }
      ]
    }
  }
], "allWorkplacesQueryNode");
var workplacesAffectationsQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => [
  {
    exportType: "hasManyCount",
    objectTypeName: "building",
    queryNode: {
      name: "workplaceAffectation",
      _: [
        "id",
        {
          name: "workplace",
          required: true,
          _: [
            "id",
            "name",
            roomToBuildingQueryNode(buildingIds, true)
          ]
        },
        {
          name: "person",
          _: [
            ...jupUniq([
              "firstname",
              "lastname",
              "email",
              ...personAllProperties
            ]),
            {
              name: "organization",
              _: [
                "name",
                {
                  name: "organization",
                  _: [
                    "name"
                  ]
                }
              ]
            },
            {
              name: "costCenter",
              _: [
                "name"
              ]
            },
            {
              name: "personSecurityProfile",
              _: [
                "name"
              ]
            },
            {
              name: "personState",
              _: [
                "name"
              ]
            }
          ]
        }
      ]
    }
  }
], "workplacesAffectationsQueryNode");

// src/front/surfy/Components/Building/Workplaces/building.reports.area.ts
var exludeFromRooms = [
  "textAnchor",
  "externalId"
];
var roomAllProperties = jupDifferenceWith(getAllPropertyNamesExportWithoutTechnicals("room"), exludeFromRooms);
var roomStarEntities = [
  {
    name: "costCenter",
    _: [
      "name"
    ]
  },
  {
    name: "organization",
    _: [
      "name",
      {
        name: "organization",
        _: [
          "name"
        ]
      }
    ]
  },
  {
    name: "distributionCostType",
    _: [
      "name"
    ]
  },
  {
    name: "roomType",
    _: [
      "name"
    ]
  }
];
var roomAreaReportProperties = [
  "id",
  ...roomAllProperties,
  ...roomStarEntities
];
var buildingAreaExportQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => [
  {
    exportType: "hasManyCount",
    objectTypeName: "building",
    queryNode: {
      name: "room",
      required: true,
      _: [
        ...roomAreaReportProperties,
        {
          name: "floor",
          required: true,
          _: [
            "name",
            {
              name: "building",
              required: true,
              _: [
                "name"
              ],
              filters: [
                createFilter("in", "id", buildingIds)
              ]
            }
          ]
        }
      ]
    }
  }
], "buildingAreaExportQueryNode");
var buildingAreaReport = {
  name: "area",
  iconObjectTypeName: "room",
  exportQueryNodes: buildingAreaExportQueryNode
};

// src/front/surfy/Components/Building/Workplaces/building.reports.cleaning.ts
var buildingCleaningReportName = "buildingCleaning";
var buildingCleaningQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => [
  {
    exportType: "hasManyRec",
    objectTypeName: "building",
    queryNode: roomToBuildingQueryNode(buildingIds, true, [
      "id",
      "area",
      "info",
      {
        name: "roomType",
        _: [
          "name",
          "cadence"
        ]
      }
    ])
  }
], "buildingCleaningQueryNode");
var buildingCleaningReport = {
  name: buildingCleaningReportName,
  iconObjectTypeName: "room",
  exportQueryNodes: buildingCleaningQueryNode
};

// src/front/surfy/Components/Building/Workplaces/building.reports.dimensions.ts
var buildingDimensionsReportName = "buildingDimensions";
var buildingDimensionsQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => [
  {
    exportType: "hasManyRec",
    objectTypeName: "building",
    queryNode: {
      name: "room",
      _: [
        ...roomAreaReportProperties,
        {
          name: "floor",
          required: true,
          _: [
            "name",
            {
              name: "building",
              required: true,
              _: [
                "name"
              ],
              filters: [
                createFilter("in", "id", buildingIds)
              ]
            }
          ]
        }
      ]
    }
  }
], "buildingDimensionsQueryNode");
var buildingDimensionsReport = {
  name: buildingDimensionsReportName,
  iconObjectTypeName: "room",
  exportQueryNodes: buildingDimensionsQueryNode
};

// src/front/surfy/Components/Building/Workplaces/building.reports.items.ts
var buildingItemsReportName = "buildingItems";
var exludeFromItems = [
  "position",
  "textAnchor",
  "rotation",
  "externalId"
];
var itemsAllProperties = jupDifferenceWith(getAllPropertyNamesExportWithoutTechnicals("item"), exludeFromItems);
var itemsExportQueryNode = /* @__PURE__ */ __name((translation, buildingIds) => {
  const items = {
    exportType: "hasManyCount",
    objectTypeName: "building",
    queryNode: {
      name: "item",
      required: true,
      _: [
        "id",
        roomToBuildingQueryNode(buildingIds, true, [
          "id"
        ]),
        {
          name: "itemType",
          _: [
            "name",
            "seatsCount",
            "carbonFootprint",
            {
              name: "itemTypeFamily",
              _: [
                "name"
              ]
            }
          ]
        },
        ...itemsAllProperties
      ]
    }
  };
  return [
    items
  ];
}, "itemsExportQueryNode");
var buildingItemReport = {
  name: buildingItemsReportName,
  iconObjectTypeName: "item",
  exportQueryNodes: itemsExportQueryNode
};

// src/front/surfy/Components/Building/Workplaces/room.reports.extend.ts
var roomBelongsToProperties = [
  {
    name: "organization",
    _: [
      "name",
      {
        name: "organization",
        _: [
          "name"
        ]
      }
    ]
  },
  {
    name: "costCenter",
    _: [
      "name"
    ]
  }
];

// src/front/surfy/Components/Building/Workplaces/building.reports.people.ts
function personProperties(extraProperties) {
  const exclude = [
    "createdAt",
    "updatedAt"
  ];
  const personProperties3 = jupDifferenceWith(getAllPropertyNamesExportWithoutTechnicals("person"), exclude);
  return [
    "id",
    ...personProperties3,
    ...extraProperties || [],
    {
      name: "organization",
      _: [
        "name",
        {
          name: "organization",
          _: [
            "name"
          ]
        }
      ]
    },
    {
      name: "costCenter",
      _: [
        "name"
      ]
    },
    {
      name: "personSecurityProfile",
      _: [
        "name"
      ]
    },
    {
      name: "personState",
      _: [
        "name"
      ]
    },
    {
      name: "personGender",
      _: [
        "name"
      ]
    }
  ];
}
__name(personProperties, "personProperties");
function peopleDimensionAffectations(translation, buildingIds) {
  return {
    exportType: "hasManyRec",
    objectTypeName: "building",
    worksheetName: objectTypeCapitalizedPluralLabel(translation, "dimensionToPerson"),
    queryNode: {
      name: "person",
      required: true,
      _: [
        ...personProperties(),
        {
          name: "dimensionToPeople",
          required: true,
          _: [
            "id",
            {
              name: "dimension",
              required: true,
              _: [
                "name",
                {
                  name: "dimensionType",
                  required: true,
                  _: [
                    "name",
                    {
                      name: "dimensionTypeToBuildings",
                      _: [],
                      required: true,
                      filters: [
                        createFilter("in", "buildingId", buildingIds)
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  };
}
__name(peopleDimensionAffectations, "peopleDimensionAffectations");
function peopleRoomAffectations(translation, buildingIds) {
  return {
    exportType: "hasManyRec",
    objectTypeName: "building",
    worksheetName: objectTypeCapitalizedPluralLabel(translation, "roomAffectation"),
    queryNode: {
      name: "person",
      required: true,
      _: [
        ...personProperties(),
        {
          name: "roomAffectations",
          required: true,
          _: [
            "id",
            roomToBuildingQueryNode(buildingIds, true, [
              "id",
              ...roomBelongsToProperties
            ])
          ]
        }
      ]
    }
  };
}
__name(peopleRoomAffectations, "peopleRoomAffectations");
function peopleWorkplaceAffectations(translation, buildingIds) {
  return {
    exportType: "hasManyRec",
    objectTypeName: "building",
    worksheetName: objectTypeCapitalizedPluralLabel(translation, "workplaceAffectation"),
    queryNode: {
      name: "person",
      required: true,
      _: [
        ...personProperties(),
        {
          name: "workplaceAffectations",
          required: true,
          _: [
            {
              name: "workplace",
              required: true,
              _: [
                "name",
                roomToBuildingQueryNode(buildingIds, true, [
                  "id",
                  ...roomBelongsToProperties
                ]),
                {
                  name: "costCenter",
                  _: [
                    "name"
                  ]
                }
              ]
            },
            "id"
          ]
        }
      ]
    }
  };
}
__name(peopleWorkplaceAffectations, "peopleWorkplaceAffectations");
var peopleBuildingsExportQueryNodes = /* @__PURE__ */ __name((translation, buildingIds) => [
  peopleRoomAffectations(translation, buildingIds),
  peopleWorkplaceAffectations(translation, buildingIds),
  peopleDimensionAffectations(translation, buildingIds)
], "peopleBuildingsExportQueryNodes");
var buildingPeopleReportName = "buildingPeople";
var buildingPeopleReport = {
  name: buildingPeopleReportName,
  iconObjectTypeName: "person",
  exportQueryNodes: peopleBuildingsExportQueryNodes
};

// src/core/utils/sort.helper.ts
function sortOnNameOptional(a, b) {
  return a.name && b.name ? a.name.localeCompare(b.name) : 0;
}
__name(sortOnNameOptional, "sortOnNameOptional");

// src/core/generated/masterData/building.recoil.generated.ts
var import_recoil6 = require("recoil");

// src/front/jup/Tenant/company.recoil.ts
var import_recoil5 = require("recoil");
var currentCompanyAtom = (0, import_recoil5.atom)({
  key: "currentCompany",
  default: null
});
function useCurrentCompanyOptional() {
  return (0, import_recoil5.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(currentCompanyAtom);
}
__name(useCurrentCompanyOptional, "useCurrentCompanyOptional");
function useCurrentCompany() {
  const company2 = useCurrentCompanyOptional();
  if (!company2) {
    throw new Error("current company is not set");
  }
  return company2;
}
__name(useCurrentCompany, "useCurrentCompany");

// src/core/generated/masterData/building.recoil.generated.ts
var buildingStoreAtom = (0, import_recoil6.atomFamily)({
  key: "buildingStore",
  default: void 0
});
var atom_ = buildingStoreAtom;
function useBuildings() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil6.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_(currentCompany.name));
  if (!store) {
    throw new Error("BuildingStore is not loaded");
  }
  return store;
}
__name(useBuildings, "useBuildings");
function useBuilding(buildingId) {
  const e = useBuildingOptional(buildingId);
  if (!e) {
    throw new Error(`building is missing in store for id : ${buildingId}`);
  }
  return e;
}
__name(useBuilding, "useBuilding");
function useBuildingOptional(buildingId) {
  const store = useBuildings();
  if (buildingId) {
    const e = store.get(buildingId);
    return e;
  }
}
__name(useBuildingOptional, "useBuildingOptional");

// src/core/metaModel/customObjectTypes/building.ts
var buildingBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name",
      "color",
      {
        name: "company",
        _: [
          "name",
          "id"
        ]
      },
      {
        name: "floors",
        _: [
          "level"
        ]
      }
    ],
    name: "building"
  },
  path: [
    "company"
  ],
  useData: /* @__PURE__ */ __name((id) => {
    const building2 = useBuilding(id);
    const company2 = useCurrentCompany();
    return {
      ...building2,
      company: company2
    };
  }, "useData")
};
var building = {
  breadcrumb: buildingBreadcrumb,
  appBarBackgroundColor: /* @__PURE__ */ __name((masterData, e) => e.color, "appBarBackgroundColor"),
  reports: [
    buildingPeopleReport,
    {
      name: "workplaces",
      iconObjectTypeName: "workplace",
      exportQueryNodes: workplacesExportQueryNode
    },
    {
      name: "workplaceAffectations",
      iconObjectTypeName: "workplaceAffectation",
      exportQueryNodes: workplacesAffectationsQueryNode
    },
    {
      name: "allWorkplaces",
      iconObjectTypeName: "workplace",
      exportQueryNodes: allWorkplacesQueryNode
    },
    buildingItemReport,
    // buildingOrganizationReport,
    buildingAreaReport,
    buildingCleaningReport,
    buildingDimensionsReport
  ],
  defaultSortOrder: /* @__PURE__ */ __name(() => sortOnNameOptional, "defaultSortOrder"),
  entityToString: buildingToEntityString,
  entityToStringWithContext: /* @__PURE__ */ __name((i18n, masterData, e) => buildingToEntityString(i18n, e), "entityToStringWithContext")
};
function buildingToEntityString(i18n, e) {
  if (!e) {
    return entityToString("building", e);
  }
  return e.name;
}
__name(buildingToEntityString, "buildingToEntityString");

// src/core/metaModel/customObjectTypes/person.helper.ts
function getPersonFullName(person2) {
  if (person2?.fullname) {
    return person2.fullname;
  }
  return person2 ? `${person2.firstname?.trim()} ${person2.lastname?.trim()}` : entityToString("person", person2);
}
__name(getPersonFullName, "getPersonFullName");

// src/core/metaModel/customObjectTypes/person.ts
var breadcrumb = {
  queryNode: {
    _: [
      "id",
      "firstname",
      "lastname"
    ],
    name: "person"
  },
  path: []
};
var personEntityToString = /* @__PURE__ */ __name((i18n, e) => {
  return getPersonFullName(e);
}, "personEntityToString");
var person = {
  breadcrumb,
  entityToString: personEntityToString
};

// src/front/jup/Components/UserProfile/users.helper.ts
function userDisplayName(u, addEmail) {
  const i = [];
  if (u.firstname) {
    i.push(u.firstname);
  }
  if (u.lastname) {
    i.push(u.lastname);
  }
  if (addEmail && u.email) {
    if (i.length === 0) {
      i.push(u.email);
    } else {
      i.push(`(${u.email})`);
    }
  }
  return i.join(" ");
}
__name(userDisplayName, "userDisplayName");

// src/core/metaModel/customObjectTypes/userCompany.ts
var userCompanyBreadcrumbQueryNode = {
  _: [
    "id",
    {
      name: "user",
      _: [
        "firstname",
        "lastname",
        "id",
        "picture",
        "sub"
      ]
    },
    {
      name: "company",
      _: [
        "name"
      ]
    }
  ],
  name: "userCompany"
};
var userCompanyBreadcrumb = {
  queryNode: userCompanyBreadcrumbQueryNode,
  path: [
    "user"
  ]
};
function userCompanyEntityToString(i18n, r) {
  if (!r) {
    return entityToString("userCompany", r);
  }
  const { user: user2, company: company2 } = r;
  if (user2 && company2) {
    return `${userDisplayName(user2, true)} - ${company2.name}`;
  }
  if (user2) {
    return userDisplayName(user2, true);
  }
  return r.id?.toString();
}
__name(userCompanyEntityToString, "userCompanyEntityToString");
function userCompanyEntityToStringWithContext(i18n, masterData, r) {
  return userCompanyEntityToString(i18n, r);
}
__name(userCompanyEntityToStringWithContext, "userCompanyEntityToStringWithContext");
var userCompany = {
  breadcrumb: userCompanyBreadcrumb,
  entityToStringWithContext: userCompanyEntityToStringWithContext,
  entityToString: userCompanyEntityToString
};

// src/core/metaModel/customObjectTypes/roomAffectation.ts
var roomAffectation = {
  entityToString: /* @__PURE__ */ __name((i18n, ra) => {
    if (ra) {
      const { person: person2, room: room2 } = ra;
      if (person2 && room2) {
        return `${personEntityToString(i18n, person2)} - ${entityToString("room", room2)}`;
      }
    }
    return entityToString("roomAffectation", ra);
  }, "entityToString"),
  pathToBuilding: [
    "room",
    "floor",
    "building"
  ]
};

// src/front/surfy/Components/Floor/floor.sort.ts
var import_thenby = __toESM(require_thenBy_module());
function sortFloorWithMasterData(masterData) {
  return (0, import_thenby.firstBy)((fA, fB) => {
    const bA = masterData.buildings.get(fA?.buildingId || 0);
    const bB = masterData.buildings.get(fB?.buildingId || 0);
    return bA && bB ? sortOnName(bA, bB) : 0;
  }).thenBy((fA, fB) => {
    return fA && fB ? sortOnLevel(fA, fB) : 0;
  });
}
__name(sortFloorWithMasterData, "sortFloorWithMasterData");

// src/core/generated/masterData/floor.recoil.generated.ts
var import_recoil7 = require("recoil");
var floorStoreAtom = (0, import_recoil7.atomFamily)({
  key: "floorStore",
  default: void 0
});
var atom_2 = floorStoreAtom;
function useFloors() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil7.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_2(currentCompany.name));
  if (!store) {
    throw new Error("FloorStore is not loaded");
  }
  return store;
}
__name(useFloors, "useFloors");
function useFloor(floorId) {
  const e = useFloorOptional(floorId);
  if (!e) {
    throw new Error(`floor is missing in store for id : ${floorId}`);
  }
  return e;
}
__name(useFloor, "useFloor");
function useFloorOptional(floorId) {
  const store = useFloors();
  if (floorId) {
    const e = store.get(floorId);
    return e;
  }
}
__name(useFloorOptional, "useFloorOptional");

// src/core/metaModel/customObjectTypes/floor.ts
var breadcrumb2 = {
  queryNode: {
    _: [
      "id",
      "name",
      {
        name: "building",
        _: [
          "name",
          "id",
          "color"
        ]
      }
    ],
    name: "floor"
  },
  path: [
    "building"
  ],
  useData: useFloorBreadcrumbData
};
function appBarBackgroundColor(masterData, e) {
  return e.building?.color;
}
__name(appBarBackgroundColor, "appBarBackgroundColor");
function useFloorBreadcrumbData(floorId) {
  const floor2 = useFloor(floorId);
  const building2 = useBuilding(floor2.buildingId);
  return {
    ...floor2,
    building: building2
  };
}
__name(useFloorBreadcrumbData, "useFloorBreadcrumbData");
function floorEntityToStringWithContext(i18n, masterData, floor2) {
  if (!floor2) {
    return entityToString("floor", floor2);
  }
  const floorMd = masterData.floors.get(floor2.id) ?? floor2;
  const { buildingId } = floorMd;
  const building2 = masterData.buildings.get(buildingId);
  if (building2) {
    return `${floorMd.name ?? floorMd.id} < ${building2.name ?? building2.id}`;
  }
  return floorMd.name || floorMd.id?.toString() || "floor?";
}
__name(floorEntityToStringWithContext, "floorEntityToStringWithContext");
var floor = {
  breadcrumb: breadcrumb2,
  appBarBackgroundColor,
  entityToStringWithContext: floorEntityToStringWithContext,
  pathToBuilding: [
    "building"
  ],
  defaultSortOrder: sortFloorWithMasterData
};

// src/core/metaModel/customObjectTypes/item.ts
var itemBreadcrumbQueryNode = {
  _: [
    "id",
    "reference",
    "code",
    "itemTypeId"
  ],
  name: "item"
};
var itemBreadcrumb = {
  queryNode: itemBreadcrumbQueryNode,
  path: [
    "itemType"
  ]
};
var item = {
  breadcrumb: itemBreadcrumb,
  entityToString: itemEntityToString,
  pathToBuilding: [
    "room",
    "floor",
    "building"
  ]
};
function itemEntityToString(i18n, e) {
  if (e) {
    const { itemType: itemType2 } = e;
    if (itemType2) {
      return `${itemType2.name} (${e.reference || e.id})`;
    } else if (e.reference) {
      return e.reference;
    }
  }
  return e ? `item|${e.id}` : "?";
}
__name(itemEntityToString, "itemEntityToString");

// src/core/generated/masterData/itemType.recoil.generated.ts
var import_recoil8 = require("recoil");
var itemTypeStoreAtom = (0, import_recoil8.atomFamily)({
  key: "itemTypeStore",
  default: void 0
});
var atom_3 = itemTypeStoreAtom;
function useItemTypes() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil8.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_3(currentCompany.name));
  if (!store) {
    throw new Error("ItemTypeStore is not loaded");
  }
  return store;
}
__name(useItemTypes, "useItemTypes");
function useItemType(itemTypeId) {
  const e = useItemTypeOptional(itemTypeId);
  if (!e) {
    throw new Error(`itemType is missing in store for id : ${itemTypeId}`);
  }
  return e;
}
__name(useItemType, "useItemType");
function useItemTypeOptional(itemTypeId) {
  const store = useItemTypes();
  if (itemTypeId) {
    const e = store.get(itemTypeId);
    return e;
  }
}
__name(useItemTypeOptional, "useItemTypeOptional");

// src/core/metaModel/customObjectTypes/itemType.ts
var breadcrumb3 = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "itemType"
  },
  path: [],
  useData: /* @__PURE__ */ __name((id) => useItemType(id), "useData")
};
var itemType = {
  breadcrumb: breadcrumb3,
  entityToString: /* @__PURE__ */ __name((i18n, e) => `${e?.name}` || entityToString("itemType", e), "entityToString")
};

// src/front/jup/Entities/Views/Indexes/Import/excel.importer.helper.ts
function keepStartOfStrings(tokens, maxLength) {
  return tokens.map((t) => t.substring(0, maxLength));
}
__name(keepStartOfStrings, "keepStartOfStrings");
function cleanExcelWorksheetName(title) {
  const removedQuotes = title.replace(/'/g, " ");
  if (removedQuotes.length > 31) {
    return keepStartOfStrings(removedQuotes.split(" "), 5).map((t) => capitalizeFirstLetter(t)).join("").substring(0, 31);
  }
  return removedQuotes;
}
__name(cleanExcelWorksheetName, "cleanExcelWorksheetName");

// src/front/surfy/Components/Room/room.reports.ts
var green = {
  argb: "0080FABC"
};
var personProperties2 = [
  "id",
  "firstname",
  "lastname",
  "code",
  {
    name: "organization",
    _: [
      "name",
      {
        name: "organization",
        _: [
          "name"
        ]
      }
    ]
  }
];
function roomAffectationsByRooms(translation, roomIds) {
  return {
    objectTypeName: "room",
    exportType: "hasManyRec",
    columnNameMappings: {
      "G": {
        label: "Espace (D\xE9part)"
      },
      "H": {
        label: "\xC9tage (D\xE9part)"
      },
      "I": {
        label: "B\xE2timent (D\xE9part)"
      },
      "K": {
        label: "Nom de l espace (workplaceAffectation:workplace:room)",
        fgColor: green
      },
      "L": {
        label: "Nom de l \xE9tage (workplaceAffectation:workplace:room:floor)",
        fgColor: green
      },
      "M": {
        label: "Nom du b\xE2timent (workplaceAffectation:workplace:room:floor:building)",
        fgColor: green
      }
    },
    worksheetName: cleanExcelWorksheetName(objectTypeCapitalizedPluralLabel(translation, "roomAffectation")),
    queryNode: {
      name: "roomAffectation",
      required: true,
      _: [
        {
          name: "person",
          _: personProperties2
        },
        roomToBuildingWithRoomFilterQueryNode(roomIds, true),
        "id"
      ]
    }
  };
}
__name(roomAffectationsByRooms, "roomAffectationsByRooms");
function workplaceAffectationsByRooms(translation, roomIds) {
  return {
    objectTypeName: "room",
    exportType: "hasManyRec",
    columnNameMappings: {
      "G": {
        label: "Poste de travail (D\xE9part)"
      },
      "H": {
        label: "Espace (D\xE9part)"
      },
      "I": {
        label: "\xC9tage (D\xE9part)"
      },
      "J": {
        label: "B\xE2timent (D\xE9part)"
      },
      "L": {
        label: "Nom du poste de travail (workplaceAffectation:workplace)",
        fgColor: green
      },
      "M": {
        label: "Nom de l espace (workplaceAffectation:workplace:room)",
        fgColor: green
      },
      "N": {
        label: "Nom de l \xE9tage (workplaceAffectation:workplace:room:floor)",
        fgColor: green
      },
      "O": {
        label: "Nom du b\xE2timent (workplaceAffectation:workplace:room:floor:building)",
        fgColor: green
      }
    },
    worksheetName: cleanExcelWorksheetName(objectTypeCapitalizedPluralLabel(translation, "workplaceAffectation")),
    queryNode: {
      name: "workplaceAffectation",
      required: true,
      _: [
        {
          name: "person",
          _: personProperties2
        },
        {
          name: "workplace",
          required: true,
          _: [
            "name",
            roomToBuildingWithRoomFilterQueryNode(roomIds, true)
          ]
        },
        "id"
      ]
    }
  };
}
__name(workplaceAffectationsByRooms, "workplaceAffectationsByRooms");
var mouvementMatrixExportQueryNodes = /* @__PURE__ */ __name((translation, roomIds) => [
  workplaceAffectationsByRooms(translation, roomIds),
  roomAffectationsByRooms(translation, roomIds)
], "mouvementMatrixExportQueryNodes");
var mouvementMatrixReport = {
  name: "mouvementMatrix",
  iconObjectTypeName: "workplaceAffectation",
  exportQueryNodes: mouvementMatrixExportQueryNodes
};
function roomToBuildingWithRoomFilterQueryNode(roomIds, required) {
  return {
    name: "room",
    required,
    filters: [
      createFilter("in", "id", roomIds)
    ],
    _: [
      "name",
      {
        name: "floor",
        required,
        _: [
          "name",
          {
            name: "building",
            required,
            _: [
              "name"
            ]
          }
        ]
      }
    ]
  };
}
__name(roomToBuildingWithRoomFilterQueryNode, "roomToBuildingWithRoomFilterQueryNode");

// src/front/surfy/Components/Room/room.sort.ts
var import_thenby2 = __toESM(require_thenBy_module());
var sortRoom = (0, import_thenby2.firstBy)((a, b) => {
  return a.floor && b.floor ? a.floor.buildingId - b.floor.buildingId : 0;
}).thenBy((a, b) => {
  return a.floorId - b.floorId;
}).thenBy((a, b) => {
  return a.name && b.name ? a.name.localeCompare(b.name) : 0;
});
var sortRoomWithMasterData = /* @__PURE__ */ __name((masterData) => {
  return (0, import_thenby2.firstBy)((a, b) => {
    const fA = masterData.floors.get(a.floorId || a.floor?.id || 0);
    const fB = masterData.floors.get(b.floorId || b.floor?.id || 0);
    const bA = masterData.buildings.get(fA?.buildingId || 0);
    const bB = masterData.buildings.get(fB?.buildingId || 0);
    return bA && bB ? sortOnName(bA, bB) : 0;
  }).thenBy((a, b) => {
    const fA = masterData.floors.get(a.floorId || a.floor?.id || 0);
    const fB = masterData.floors.get(b.floorId || b.floor?.id || 0);
    return fA && fB ? sortOnLevel(fA, fB) : 0;
  }).thenBy((a, b) => {
    return a.name && b.name ? sortOnNameOptional(a, b) : 0;
  });
}, "sortRoomWithMasterData");

// src/core/metaModel/customObjectTypes/room.ts
var roomBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name",
      "floorId"
    ],
    name: "room"
  },
  path: [
    "floor",
    "building"
  ]
};
function roomEntityToStringWithContext(i18n, masterData, r) {
  if (!r) {
    return entityToString("room", r);
  }
  const { floor: floor2 } = r;
  if (floor2) {
    return `${floorEntityToStringWithContext(i18n, masterData, floor2)} > ${r.name || r.id}`;
  }
  return `${r.name}` || r.id?.toString() || "room?";
}
__name(roomEntityToStringWithContext, "roomEntityToStringWithContext");
var room = {
  breadcrumb: roomBreadcrumb,
  entityToStringWithContext: roomEntityToStringWithContext,
  appBarBackgroundColor: /* @__PURE__ */ __name((masterData, e) => {
    const floor2 = masterData.floors.get(e.floorId);
    const building2 = masterData.buildings.get(floor2?.buildingId ?? 0);
    return building2?.color;
  }, "appBarBackgroundColor"),
  reports: [
    mouvementMatrixReport
  ],
  defaultSortOrder: sortRoomWithMasterData,
  pathToBuilding: [
    "floor",
    "building"
  ]
};

// src/core/metaModel/customObjectTypes/workplace.ts
var workplaceBreadcrumbQueryNode = {
  _: [
    "id",
    "name",
    {
      name: "room",
      _: [
        "id",
        "name",
        "floorId"
      ]
    }
  ],
  name: "workplace"
};
var workplaceBreadcrumb = {
  queryNode: workplaceBreadcrumbQueryNode,
  path: [
    "room",
    "floor",
    "building"
  ]
};
function workplaceEntityToStringWithContext(i18n, masterData, w) {
  if (!w) {
    return entityToString("workplace", w);
  }
  const { room: room2 } = w;
  if (room2) {
    return `${roomEntityToStringWithContext(i18n, masterData, room2)} > ${w.name || w.id}`;
  }
  return w.name || w.id?.toString();
}
__name(workplaceEntityToStringWithContext, "workplaceEntityToStringWithContext");
var workplace = {
  breadcrumb: workplaceBreadcrumb,
  entityToStringWithContext: workplaceEntityToStringWithContext,
  appBarBackgroundColor: /* @__PURE__ */ __name((masterData, e) => {
    const floor2 = masterData.floors.get(e.room?.floorId ?? 0);
    const building2 = masterData.buildings.get(floor2?.buildingId ?? 0);
    return building2?.color;
  }, "appBarBackgroundColor"),
  pathToBuilding: [
    "room",
    "floor",
    "building"
  ]
};

// src/core/generated/masterData/organization.recoil.generated.ts
var import_recoil9 = require("recoil");
var organizationStoreAtom = (0, import_recoil9.atomFamily)({
  key: "organizationStore",
  default: void 0
});
var atom_4 = organizationStoreAtom;
function useOrganizations() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil9.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_4(currentCompany.name));
  if (!store) {
    throw new Error("OrganizationStore is not loaded");
  }
  return store;
}
__name(useOrganizations, "useOrganizations");
function useOrganization(organizationId) {
  const e = useOrganizationOptional(organizationId);
  if (!e) {
    throw new Error(`organization is missing in store for id : ${organizationId}`);
  }
  return e;
}
__name(useOrganization, "useOrganization");
function useOrganizationOptional(organizationId) {
  const store = useOrganizations();
  if (organizationId) {
    const e = store.get(organizationId);
    return e;
  }
}
__name(useOrganizationOptional, "useOrganizationOptional");

// src/core/metaModel/customObjectTypes/organization.ts
var breadcrumb4 = {
  queryNode: {
    _: [
      "id",
      "name",
      "organizationId"
    ],
    name: "organization"
  },
  path: [
    "organization"
  ],
  useData: /* @__PURE__ */ __name((id) => useOrganization(id), "useData")
};
var organization = {
  entityToString: /* @__PURE__ */ __name((i18n, o) => {
    if (o?.name && o?.organization) {
      return `${o.name} (${o.organization.name})`;
    }
    return o?.name || entityToString("organization", o);
  }, "entityToString"),
  breadcrumb: breadcrumb4
};

// src/core/generated/masterData/workplaceType.recoil.generated.ts
var import_recoil10 = require("recoil");
var workplaceTypeStoreAtom = (0, import_recoil10.atomFamily)({
  key: "workplaceTypeStore",
  default: void 0
});
var atom_5 = workplaceTypeStoreAtom;
function useWorkplaceTypes() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil10.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_5(currentCompany.name));
  if (!store) {
    throw new Error("WorkplaceTypeStore is not loaded");
  }
  return store;
}
__name(useWorkplaceTypes, "useWorkplaceTypes");
function useWorkplaceType(workplaceTypeId) {
  const e = useWorkplaceTypeOptional(workplaceTypeId);
  if (!e) {
    throw new Error(`workplaceType is missing in store for id : ${workplaceTypeId}`);
  }
  return e;
}
__name(useWorkplaceType, "useWorkplaceType");
function useWorkplaceTypeOptional(workplaceTypeId) {
  const store = useWorkplaceTypes();
  if (workplaceTypeId) {
    const e = store.get(workplaceTypeId);
    return e;
  }
}
__name(useWorkplaceTypeOptional, "useWorkplaceTypeOptional");

// src/core/metaModel/customObjectTypes/workplaceType.ts
var workplaceTypeBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "workplaceType"
  },
  path: [],
  useData: /* @__PURE__ */ __name((id) => {
    return useWorkplaceType(id);
  }, "useData")
};
var workplaceType = {
  entityToString: /* @__PURE__ */ __name((i18n, e) => {
    if (e) {
      return e.name;
    }
    return "workplaceType|?";
  }, "entityToString"),
  breadcrumb: workplaceTypeBreadcrumb
};

// src/core/metaModel/customObjectTypes/workplaceAffectation.ts
var breadcrumb5 = {
  queryNode: {
    _: [
      "id",
      workplaceBreadcrumbQueryNode
    ],
    name: "workplaceAffectation"
  },
  path: [
    "workplace",
    "room",
    "floor",
    "building"
  ]
};
function workplaceAffectationEntityToString(i18n, wa) {
  if (wa) {
    const { person: person2, workplace: workplace2 } = wa;
    if (person2 && workplace2) {
      return `${personEntityToString(i18n, person2)} - ${entityToString("workplace", workplace2)}`;
    }
  }
  return entityToString("workplaceAffectation", wa);
}
__name(workplaceAffectationEntityToString, "workplaceAffectationEntityToString");
var workplaceAffectation = {
  breadcrumb: breadcrumb5,
  entityToString: workplaceAffectationEntityToString,
  pathToBuilding: [
    "workplace",
    "room",
    "floor",
    "building"
  ]
};

// src/front/surfy/Components/Company/Reports/company.reports.exportAll.ts
function isExportQueytNode(r) {
  return !!r;
}
__name(isExportQueytNode, "isExportQueytNode");
var companyExportAllQueryNodes = /* @__PURE__ */ __name((translation, companyIds) => {
  const privateObjectTypes = getAllObjectTypeDefinitions().filter((otDef) => otDef.scope === "private");
  const excludeProperties = [];
  const companyObjectTypeDefinition = getObjectTypeDefinitionByName("company");
  return [
    companyObjectTypeDefinition,
    ...privateObjectTypes
  ].map((otDef) => {
    const properties = getObjectTypePropertyTypesWithFilter(otDef.name, [
      isPropertyTypeScalar,
      isPropertyTypeId
    ]);
    const propertyNames = properties.map(({ name }) => name);
    const filters = propertyNames.includes("companyId") ? [
      createFilter("in", "companyId", companyIds)
    ] : void 0;
    const _ = jupDifferenceWith(propertyNames, excludeProperties);
    const r = {
      exportType: "hasManyCount",
      objectTypeName: otDef.name,
      includeForeignKeys: true,
      queryNode: {
        name: otDef.name,
        filters,
        _
      }
    };
    return r;
  }).filter(isExportQueytNode);
}, "companyExportAllQueryNodes");
var companyExportAllReport = {
  name: "export-all",
  iconObjectTypeName: "company",
  exportQueryNodes: companyExportAllQueryNodes
};

// src/core/metaModel/customObjectTypes/company.ts
var breadcrumb6 = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "company"
  },
  path: []
};
var company = {
  breadcrumb: breadcrumb6,
  reports: [
    companyExportAllReport
  ]
};

// src/core/metaModel/customObjectTypes/buildingType.ts
var queryNode = {
  name: "buildingType",
  _: [
    "id",
    "name"
  ]
};
var buildingType = {
  breadcrumb: {
    queryNode,
    path: []
  },
  entityToString: /* @__PURE__ */ __name((i18n, e) => e?.name || entityToString("buildingType", e), "entityToString")
};

// src/core/generated/masterData/personSecurityProfile.recoil.generated.ts
var import_recoil11 = require("recoil");
var personSecurityProfileStoreAtom = (0, import_recoil11.atomFamily)({
  key: "personSecurityProfileStore",
  default: void 0
});
var atom_6 = personSecurityProfileStoreAtom;
function usePersonSecurityProfiles() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil11.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_6(currentCompany.name));
  if (!store) {
    throw new Error("PersonSecurityProfileStore is not loaded");
  }
  return store;
}
__name(usePersonSecurityProfiles, "usePersonSecurityProfiles");
function usePersonSecurityProfile(personSecurityProfileId) {
  const e = usePersonSecurityProfileOptional(personSecurityProfileId);
  if (!e) {
    throw new Error(`personSecurityProfile is missing in store for id : ${personSecurityProfileId}`);
  }
  return e;
}
__name(usePersonSecurityProfile, "usePersonSecurityProfile");
function usePersonSecurityProfileOptional(personSecurityProfileId) {
  const store = usePersonSecurityProfiles();
  if (personSecurityProfileId) {
    const e = store.get(personSecurityProfileId);
    return e;
  }
}
__name(usePersonSecurityProfileOptional, "usePersonSecurityProfileOptional");

// src/core/metaModel/customObjectTypes/personSecurityProfile.ts
var breadcrumb7 = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "personSecurityProfile"
  },
  path: [],
  useData: /* @__PURE__ */ __name((id) => usePersonSecurityProfile(id), "useData")
};
var personSecurityProfile = {
  breadcrumb: breadcrumb7,
  entityToString: /* @__PURE__ */ __name((i18n, e) => e ? e.name : "?", "entityToString")
};

// src/core/generated/masterData/personState.recoil.generated.ts
var import_recoil12 = require("recoil");
var personStateStoreAtom = (0, import_recoil12.atomFamily)({
  key: "personStateStore",
  default: void 0
});
var atom_7 = personStateStoreAtom;
function usePersonStates() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil12.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_7(currentCompany.name));
  if (!store) {
    throw new Error("PersonStateStore is not loaded");
  }
  return store;
}
__name(usePersonStates, "usePersonStates");
function usePersonState(personStateId) {
  const e = usePersonStateOptional(personStateId);
  if (!e) {
    throw new Error(`personState is missing in store for id : ${personStateId}`);
  }
  return e;
}
__name(usePersonState, "usePersonState");
function usePersonStateOptional(personStateId) {
  const store = usePersonStates();
  if (personStateId) {
    const e = store.get(personStateId);
    return e;
  }
}
__name(usePersonStateOptional, "usePersonStateOptional");

// src/core/metaModel/customObjectTypes/personState.ts
var breadcrumb8 = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "personState"
  },
  path: [],
  useData: /* @__PURE__ */ __name((id) => usePersonState(id), "useData")
};
var personState = {
  breadcrumb: breadcrumb8,
  entityToString: /* @__PURE__ */ __name((i18n, e) => e ? e.name : "?", "entityToString")
};

// src/core/generated/masterData/costCenter.recoil.generated.ts
var import_recoil13 = require("recoil");
var costCenterStoreAtom = (0, import_recoil13.atomFamily)({
  key: "costCenterStore",
  default: void 0
});
var atom_8 = costCenterStoreAtom;
function useCostCenters() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil13.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_8(currentCompany.name));
  if (!store) {
    throw new Error("CostCenterStore is not loaded");
  }
  return store;
}
__name(useCostCenters, "useCostCenters");
function useCostCenter(costCenterId) {
  const e = useCostCenterOptional(costCenterId);
  if (!e) {
    throw new Error(`costCenter is missing in store for id : ${costCenterId}`);
  }
  return e;
}
__name(useCostCenter, "useCostCenter");
function useCostCenterOptional(costCenterId) {
  const store = useCostCenters();
  if (costCenterId) {
    const e = store.get(costCenterId);
    return e;
  }
}
__name(useCostCenterOptional, "useCostCenterOptional");

// src/core/metaModel/customObjectTypes/costCenter.ts
var costCenterBreadcrumb = {
  path: [],
  useData: /* @__PURE__ */ __name((id) => useCostCenter(id), "useData")
};
var costCenter = {
  breadcrumb: costCenterBreadcrumb,
  entityToString: /* @__PURE__ */ __name((i18n, e) => e ? e.name : "?", "entityToString")
};

// src/core/metaModel/customObjectTypes/roomType.ts
var queryNode2 = {
  name: "roomType",
  _: [
    "id",
    "name"
  ]
};
var roomType = {
  breadcrumb: {
    queryNode: queryNode2,
    path: []
  },
  entityToString: /* @__PURE__ */ __name((i18n, e) => e?.name || entityToString("roomType", e), "entityToString")
};

// src/core/metaModel/customObjectTypes/user.ts
var userBreadcrumb = {
  queryNode: {
    name: "user",
    _: [
      "id",
      "firstname",
      "lastname",
      "sub",
      "picture"
    ]
  },
  path: []
};
function userEntityToString(i18n, r) {
  if (!r) {
    return entityToString("user", r);
  }
  return userDisplayName(r, true) || r.id?.toString();
}
__name(userEntityToString, "userEntityToString");
var user = {
  breadcrumb: userBreadcrumb,
  entityToString: userEntityToString
};

// src/core/metaModel/customObjectTypes/jupRole.ts
var jupRoleBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name",
      "code"
    ],
    name: "jupRole"
  },
  path: []
};
function jupRoleEntityToString(i18n, r) {
  if (!r) {
    return entityToString("jupRole", r);
  }
  return r.name && r.code ? `${r.name} (${r.code})` : r.name || r.id?.toString();
}
__name(jupRoleEntityToString, "jupRoleEntityToString");
var jupRole = {
  breadcrumb: jupRoleBreadcrumb,
  entityToString: jupRoleEntityToString
};

// src/core/metaModel/customObjectTypes/personToPersonType.ts
var breadcrumb9 = {
  queryNode: {
    _: [
      "id",
      "labelBackward",
      "labelForward"
    ],
    name: "personToPersonType"
  },
  path: []
};
var personToPersonTypeEntityToString = /* @__PURE__ */ __name((i18n, e) => {
  return e ? `${e.labelForward} (${e.labelBackward})` : "?";
}, "personToPersonTypeEntityToString");
var personToPersonType = {
  breadcrumb: breadcrumb9,
  entityToString: personToPersonTypeEntityToString
};

// src/core/metaModel/customObjectTypes/jupUserCompanyToJupRole.ts
var jupUserCompanyToJupRoleBreadcrumb = {
  queryNode: {
    _: [
      "id",
      {
        name: "jupRole",
        _: [
          "name",
          "id"
        ]
      },
      userCompanyBreadcrumbQueryNode
    ],
    name: "jupUserCompanyToJupRole"
  },
  path: [
    "userCompany",
    "user"
  ]
};
function jupUserCompanyToJupRoleEntityToString(i18n, masterData, r) {
  if (!r) {
    return entityToString("jupUserCompanyToJupRole", r);
  }
  const { userCompany: userCompany2 } = r;
  if (userCompany2?.user) {
    return `${userDisplayName(userCompany2?.user, true)} | ${r.jupRole?.name}`;
  }
  return r.jupRole?.name || r.id?.toString();
}
__name(jupUserCompanyToJupRoleEntityToString, "jupUserCompanyToJupRoleEntityToString");
var jupUserCompanyToJupRole = {
  breadcrumb: jupUserCompanyToJupRoleBreadcrumb,
  entityToStringWithContext: jupUserCompanyToJupRoleEntityToString
};

// src/core/metaModel/customObjectTypes/jupRoleToJupObjectType.ts
var jupRoleToJupObjectTypeBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "arCreate",
      "arDelete",
      "arRead",
      "arUpdate",
      {
        name: "jupRole",
        _: [
          "name",
          "id"
        ]
      },
      {
        name: "jupObjectType",
        _: [
          "name",
          "id"
        ]
      }
    ],
    name: "jupRoleToJupObjectType"
  },
  path: []
};
function jupRoleToJupObjectTypeEntityToString(i18n, r) {
  if (!r) {
    return entityToString("jupRoleToJupObjectType", r);
  }
  const ar = [];
  if (r.arCreate) ar.push("C");
  if (r.arRead) ar.push("R");
  if (r.arUpdate) ar.push("U");
  if (r.arDelete) ar.push("D");
  if (r.jupRole?.name && r.jupObjectType?.name && ar.length > 0) {
    return `${r.jupRole?.name} - ${r.jupObjectType?.name} (${ar.join("")})`;
  }
  return r.id?.toString();
}
__name(jupRoleToJupObjectTypeEntityToString, "jupRoleToJupObjectTypeEntityToString");
var jupRoleToJupObjectType = {
  breadcrumb: jupRoleToJupObjectTypeBreadcrumb,
  entityToString: jupRoleToJupObjectTypeEntityToString
};

// src/core/metaModel/customObjectTypes/jupObjectType.ts
var jupObjectTypeBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "jupObjectType"
  },
  path: []
};
function jupObjectTypeEntityToString(i18n, r) {
  if (!r) {
    return entityToString("jupObjectType", r);
  }
  if (!r.name) {
    return entityToString("jupObjectType", r);
  }
  return getObjectTypeCapitalizedSingularLabel(i18n.translate, r.name);
}
__name(jupObjectTypeEntityToString, "jupObjectTypeEntityToString");
var jupObjectType = {
  breadcrumb: jupObjectTypeBreadcrumb,
  entityToString: jupObjectTypeEntityToString
};

// src/core/metaModel/customObjectTypes/jupUiOption.ts
var jupUiOptionBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "jupUiOption"
  },
  path: []
};
var jupUiOption = {
  breadcrumb: jupUiOptionBreadcrumb
};

// src/core/metaModel/customObjectTypes/itemToPerson.ts
var breadcrumb10 = {
  queryNode: {
    _: [
      "id",
      itemBreadcrumbQueryNode
    ],
    name: "itemToPerson"
  },
  path: [
    "item",
    "room",
    "floor",
    "building"
  ]
};
function itemToPersonEntityToString(i18n, wa) {
  if (wa) {
    const { person: person2, item: item2 } = wa;
    if (person2 && item2) {
      return `${personEntityToString(i18n, person2)} - ${itemEntityToString(i18n, item2)}`;
    }
  }
  return entityToString("itemToPerson", wa);
}
__name(itemToPersonEntityToString, "itemToPersonEntityToString");
var itemToPerson = {
  breadcrumb: breadcrumb10,
  entityToString: itemToPersonEntityToString,
  pathToBuilding: [
    "item",
    "room",
    "floor",
    "building"
  ]
};

// src/front/surfy/Components/DimensionType/Translations/dimensionTypes.i18n.ts
function dimensionTypeLabel(i18nApi, dt) {
  const key = `dimensionTypes.${dt.name}.one`;
  if (i18nApi.keyExists(key)) {
    return i18nApi.translate(key);
  }
  return dt.name;
}
__name(dimensionTypeLabel, "dimensionTypeLabel");

// src/core/generated/masterData/dimensionType.recoil.generated.ts
var import_recoil14 = require("recoil");
var dimensionTypeStoreAtom = (0, import_recoil14.atomFamily)({
  key: "dimensionTypeStore",
  default: void 0
});
var atom_9 = dimensionTypeStoreAtom;
function useDimensionTypes() {
  const currentCompany = useCurrentCompany();
  const store = (0, import_recoil14.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE)(atom_9(currentCompany.name));
  if (!store) {
    throw new Error("DimensionTypeStore is not loaded");
  }
  return store;
}
__name(useDimensionTypes, "useDimensionTypes");
function useDimensionType(dimensionTypeId) {
  const e = useDimensionTypeOptional(dimensionTypeId);
  if (!e) {
    throw new Error(`dimensionType is missing in store for id : ${dimensionTypeId}`);
  }
  return e;
}
__name(useDimensionType, "useDimensionType");
function useDimensionTypeOptional(dimensionTypeId) {
  const store = useDimensionTypes();
  if (dimensionTypeId) {
    const e = store.get(dimensionTypeId);
    return e;
  }
}
__name(useDimensionTypeOptional, "useDimensionTypeOptional");

// src/core/metaModel/customObjectTypes/dimensionType.ts
var dtBreadcrumb = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "dimensionType"
  },
  path: [],
  useData: /* @__PURE__ */ __name((id) => useDimensionType(id), "useData")
};
var dimensionType = {
  entityToString: /* @__PURE__ */ __name((i18n, e) => e ? dimensionTypeLabel(i18n, e) : "?", "entityToString"),
  breadcrumb: dtBreadcrumb
};

// src/core/metaModel/customObjectTypes/dimension.ts
function dimensionEntityToString(i18n, e) {
  return e ? e.name : entityToString("dimension", e);
}
__name(dimensionEntityToString, "dimensionEntityToString");
var dimension = {
  entityToString: dimensionEntityToString,
  breadcrumb: {
    queryNode: {
      _: [
        "id",
        "name",
        "dimensionTypeId",
        {
          name: "dimensionType",
          _: [
            "id",
            "name"
          ]
        }
      ],
      name: "dimension"
    },
    path: [
      "dimensionType"
    ]
  }
};

// src/core/metaModel/customObjectTypes/dimensionToPerson.ts
var dimensionToPerson = {
  entityToString: /* @__PURE__ */ __name((i18n, e) => {
    if (!e) {
      return entityToString("dimensionToPerson", e);
    }
    const r = [
      dimensionEntityToString(i18n, e.dimension),
      personEntityToString(i18n, e.person)
    ];
    return r.join(" - ");
  }, "entityToString"),
  pathToBuilding: [
    "dimension",
    "dimensionType"
  ]
};

// src/core/metaModel/customObjectTypes/contentRoleToUserCompany.ts
var contentRoleToUserCompany = {
  entityToString: /* @__PURE__ */ __name((i18n, e) => {
    if (e?.contentRole?.name) {
      return e.contentRole?.name;
    }
    return entityToString("contentRoleToUserCompany", e);
  }, "entityToString")
};

// src/core/metaModel/customObjectTypes/object3dModel.ts
var breadcrumb11 = {
  queryNode: {
    _: [
      "id",
      "name"
    ],
    name: "object3dModel"
  },
  path: []
};
var object3dModel = {
  breadcrumb: breadcrumb11,
  entityToString: /* @__PURE__ */ __name((i18n, e) => `${e?.name}` || entityToString("object3dModel", e), "entityToString")
};

// src/front/surfy/Components/JupUiLayout/JupUiLayout.label.ts
function getJupUiLayoutLabel(translation, jupUiLayout2) {
  return translation(`layoutViewSets.${jupUiLayout2.name}.label`);
}
__name(getJupUiLayoutLabel, "getJupUiLayoutLabel");

// src/core/metaModel/customObjectTypes/jupUiLayout.ts
var jupUiLayout = {
  entityToString: /* @__PURE__ */ __name((i18n, e) => e ? getJupUiLayoutLabel(i18n.translate, e) : entityToString("jupUiLayout", e), "entityToString")
};

// src/core/metaModel/customizedObjectTypes.ts
var customizedObjectTypes = {
  person,
  item,
  company,
  itemType,
  object3dModel,
  personSecurityProfile,
  personState,
  organization,
  buildingType,
  roomAffectation,
  dimensionToPerson,
  building,
  floor,
  dimensionType,
  dimension,
  room,
  workplace,
  workplaceAffectation,
  workplaceType,
  costCenter,
  roomType,
  userCompany,
  user,
  itemToPerson,
  jupUserCompanyToJupRole,
  jupRoleToJupObjectType,
  jupRole,
  jupObjectType,
  jupUiOption,
  personToPersonType,
  contentRoleToUserCompany,
  jupUiLayout,
  dimensionFloor: {
    pathToBuilding: [
      "floor",
      "building"
    ]
  },
  organizationFloor: {
    pathToBuilding: [
      "floor",
      "building"
    ]
  },
  personCompany: {
    breadcrumb: {
      queryNode: {
        name: "personCompany",
        _: [
          "id",
          "name"
        ]
      },
      path: []
    }
  },
  dimensionRoom: {
    pathToBuilding: [
      "room",
      "floor",
      "building"
    ]
  },
  contentRoleToFloor: {
    pathToBuilding: [
      "floor",
      "building"
    ]
  }
};

// src/core/restApi/jupFetch.ts
var import_cheerio = require("cheerio");

// src/front/jup/Tenant/tenant.router.ts
var import_react_router_dom = require("react-router-dom");

// src/front/jup/Components/Error/raiseError.state.ts
var import_recoil16 = require("recoil");

// src/front/jup/Components/Error/raiseSnackbar.recoil.ts
var import_recoil15 = require("recoil");
var raisedSnackbars = (0, import_recoil15.atom)({
  key: "raisedSnackbars",
  default: []
});

// src/front/jup/Components/Error/raiseError.state.ts
var raisedErrors = (0, import_recoil16.atom)({
  key: "raisedErrors",
  default: []
});

// src/core/api/graph/objectType.api.ts
function createCustomizedObjetType(objectType) {
  const customObjectType = customizedObjectTypes[objectType.definition.name];
  if (customObjectType) {
    const { reports, entityToString: entityToString2, entityToStringWithContext, breadcrumb: breadcrumb12, appBarBackgroundColor: useAppBarBackgroundColor, pathToBuilding } = customObjectType;
    if (entityToString2) {
      objectType.entityToString = entityToString2;
    }
    if (entityToStringWithContext) {
      objectType.entityToStringWithContext = entityToStringWithContext;
    }
    if (breadcrumb12) {
      objectType.breadcrumb = breadcrumb12;
    }
    if (useAppBarBackgroundColor) {
      objectType.appBarBackgroundColor = useAppBarBackgroundColor;
    }
    if (reports) {
      objectType.reports = reports;
    }
    if (pathToBuilding && pathToBuilding.length > 0) {
      objectType.pathToBuilding = pathToBuilding;
    }
    if (customObjectType.defaultSortOrder) {
      objectType.defaultSortOrder = customObjectType.defaultSortOrder;
    }
  }
  return objectType;
}
__name(createCustomizedObjetType, "createCustomizedObjetType");

// src/core/api/graph/objectType.store.ts
function getObjectTypes() {
  return generatedObjectTypes.map(createCustomizedObjetType);
}
__name(getObjectTypes, "getObjectTypes");
function getObjectTypesStore() {
  return getObjectTypes().reduce((acc, v) => {
    acc[v.definition.camelized.singular] = v;
    return acc;
  }, {});
}
__name(getObjectTypesStore, "getObjectTypesStore");
var coreObjectTypes = getObjectTypesStore();

// src/core/metaModel/objectTypes.ts
var objectTypes = getObjectTypesStore();

// src/front/jup/Entities/Modules/EntityModule/labels.ts
function getDeterminantByType(polyglotApi, singular2, alternative, type) {
  const definedKey = `models.${singular2}.${type}.defined`;
  const defined = polyglotApi.keyExists(definedKey) ? polyglotApi.translate(definedKey) : alternative;
  const undefinedKey = `models.${singular2}.${type}.undefined`;
  const unDefined = polyglotApi.keyExists(undefinedKey) ? polyglotApi.translate(undefinedKey) : alternative;
  return {
    defined,
    undefined: unDefined
  };
}
__name(getDeterminantByType, "getDeterminantByType");

// src/front/jup/Entities/Modules/EntityModule/EntityModuleLabels.ts
function objectTypeDeterminant(polyglotApi, objectTypeName) {
  const { singular: singular2 } = getObjectTypeDefinitionByName(objectTypeName).capitalized;
  return getDeterminantByType(polyglotApi, singular2, singular2, "determinant");
}
__name(objectTypeDeterminant, "objectTypeDeterminant");
function objectTypeDeterminants(polyglotApi, objectTypeName) {
  const { singular: singular2, plural: plural2 } = getObjectTypeDefinitionByName(objectTypeName).capitalized;
  return getDeterminantByType(polyglotApi, singular2, plural2, "determinants");
}
__name(objectTypeDeterminants, "objectTypeDeterminants");
function useFlattenDeterminants(objectTypeName) {
  const polyglotApi = useI18nApi();
  return getFlattenDeterminants(polyglotApi, objectTypeName);
}
__name(useFlattenDeterminants, "useFlattenDeterminants");
function getFlattenDeterminants(polyglotApi, objectTypeName) {
  const determinant = objectTypeDeterminant(polyglotApi, objectTypeName);
  const determinants = objectTypeDeterminants(polyglotApi, objectTypeName);
  return {
    "determinant.defined": determinant.defined,
    "determinant.undefined": determinant.undefined,
    "determinants.defined": determinants.defined,
    "determinants.undefined": determinants.undefined
  };
}
__name(getFlattenDeterminants, "getFlattenDeterminants");
function objectTypeIndexViewHelp(i18nApi, objectTypeName, viewName, isDefaultView) {
  const { singular: singular2 } = getObjectTypeDefinitionByName(objectTypeName).capitalized;
  const actionKey = isDefaultView === true ? `entity.views.${viewName}.help` : `models.${singular2}.views.${viewName}.help`;
  return i18nApi.translate(actionKey, {
    ...getFlattenDeterminants(i18nApi, objectTypeName)
  });
}
__name(objectTypeIndexViewHelp, "objectTypeIndexViewHelp");

// src/front/jup/Entities/Modules/EntityModule/ObjectTypeIndexViewHelp.tsx
var import_react7 = __toESM(require("react"));
function ObjectTypeIndexViewHelp(props) {
  const { objectTypeName, view } = props;
  const i18nApi = useI18nApi();
  return /* @__PURE__ */ import_react7.default.createElement("span", null, objectTypeIndexViewHelp(i18nApi, objectTypeName, view.name, view.isDefaultView));
}
__name(ObjectTypeIndexViewHelp, "ObjectTypeIndexViewHelp");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  I18NHelpContext,
  ObjectTypeIndexViewHelp,
  PropertyTypeLabel,
  PropertyTypeMandatoryLabel,
  SetupRecoilContext,
  appVersion,
  getObjectTypeDefinitionByName,
  getPropertyTypeByCode,
  getPropertyTypeByName,
  isTenantObjectType,
  useFlattenDeterminants,
  useTranslation,
  versionCookieKeyName
});
