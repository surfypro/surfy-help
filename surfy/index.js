var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
import * as React from "react";
import React__default, { useEffect, forwardRef, useContext } from "react";
import { atom, useRecoilValue_TRANSITION_SUPPORT_UNSTABLE, RecoilRoot, useRecoilState } from "recoil";
const occupancyStatusObjectTypeDefintion = {
  "name": "occupancyStatus",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "occupancyStatus",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "occupancyStatus",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "occupancyStatus",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "occupancyStatus",
      "type": "color",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "occupancyStatus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "occupancyStatus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "occupancyStatus",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "occupancyStatus",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "occupancyStatusId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "occupancyStatuses",
  "camelized": {
    "singular": "occupancyStatus",
    "plural": "occupancyStatuses",
    "id": "occupancyStatusId"
  },
  "capitalized": {
    "singular": "OccupancyStatus",
    "plural": "OccupancyStatuses",
    "id": "OccupancyStatusId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "room"
    ],
    "belongsTo": []
  }
};
const userObjectTypeDefintion = {
  "name": "user",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "user",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "email": {
      "name": "email",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "firstname": {
      "name": "firstname",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "lastname": {
      "name": "lastname",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "user",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "sub": {
      "name": "sub",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "user",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "user",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "user",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanies": {
      "name": "userCompanies",
      "objectTypeName": "user",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanies",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "users",
  "camelized": {
    "singular": "user",
    "plural": "users",
    "id": "userId"
  },
  "capitalized": {
    "singular": "User",
    "plural": "Users",
    "id": "UserId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userCompany"
    ],
    "belongsTo": []
  }
};
const userRefreshTokenObjectTypeDefintion = {
  "name": "userRefreshToken",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRefreshToken",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "refreshToken": {
      "name": "refreshToken",
      "objectTypeName": "userRefreshToken",
      "type": "password",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRefreshToken",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRefreshToken",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRefreshToken",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userId": {
      "name": "userId",
      "objectTypeName": "userRefreshToken",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    },
    "user": {
      "name": "user",
      "objectTypeName": "userRefreshToken",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "userRefreshTokens",
  "camelized": {
    "singular": "userRefreshToken",
    "plural": "userRefreshTokens",
    "id": "userRefreshTokenId"
  },
  "capitalized": {
    "singular": "UserRefreshToken",
    "plural": "UserRefreshTokens",
    "id": "UserRefreshTokenId"
  },
  "hidden": true,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};
const companyTypeObjectTypeDefintion = {
  "name": "companyType",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "companyType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "companyType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "billable": {
      "name": "billable",
      "objectTypeName": "companyType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "companyType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "companyType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "companyType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companies": {
      "name": "companies",
      "objectTypeName": "companyType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyTypeId",
        "targetModelName": "company",
        "propertyTypeName": "companies",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "companyTypes",
  "camelized": {
    "singular": "companyType",
    "plural": "companyTypes",
    "id": "companyTypeId"
  },
  "capitalized": {
    "singular": "CompanyType",
    "plural": "CompanyTypes",
    "id": "CompanyTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "company"
    ],
    "belongsTo": []
  }
};
const companyObjectTypeDefintion = {
  "name": "company",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "company",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "company",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "logoPath": {
      "name": "logoPath",
      "objectTypeName": "company",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "iconPath": {
      "name": "iconPath",
      "objectTypeName": "company",
      "type": "square-image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "proxyImages": {
      "name": "proxyImages",
      "objectTypeName": "company",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "workingDaysCount": {
      "name": "workingDaysCount",
      "objectTypeName": "company",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "enablePathfinding": {
      "name": "enablePathfinding",
      "objectTypeName": "company",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "planningNumberOfDays": {
      "name": "planningNumberOfDays",
      "objectTypeName": "company",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 14
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "company",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "company",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "company",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companyTypeId": {
      "name": "companyTypeId",
      "objectTypeName": "company",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyTypeId",
        "targetModelName": "companyType",
        "propertyTypeName": "companyType",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyType": {
      "name": "companyType",
      "objectTypeName": "company",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyTypeId",
        "targetModelName": "companyType",
        "propertyTypeName": "companyType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanies": {
      "name": "userCompanies",
      "objectTypeName": "company",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingTypes": {
      "name": "buildingTypes",
      "objectTypeName": "company",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "company",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "companies",
  "camelized": {
    "singular": "company",
    "plural": "companies",
    "id": "companyId"
  },
  "capitalized": {
    "singular": "Company",
    "plural": "Companies",
    "id": "CompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userCompany",
      "buildingType",
      "building"
    ],
    "belongsTo": []
  }
};
const campusObjectTypeDefintion = {
  "name": "campus",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "campus",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "campus",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "campus",
      "type": "color",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "address": {
      "name": "address",
      "objectTypeName": "campus",
      "type": "address",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "campus",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "campus",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "campus",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "campus",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "campus",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "campus",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "campus",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "campus",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "campus",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "campus",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "campus",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "campus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "campus",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "campus",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "campus",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "campus",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "campus",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "campus",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "campus",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "campusId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "campus",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "campus",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "campuses",
  "camelized": {
    "singular": "campus",
    "plural": "campuses",
    "id": "campusId"
  },
  "capitalized": {
    "singular": "Campus",
    "plural": "Campuses",
    "id": "CampusId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const roomConnectorTypeObjectTypeDefintion = {
  "name": "roomConnectorType",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomConnectorType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomConnectorType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomConnectorType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomConnectorType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomConnectorType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomConnectors": {
      "name": "roomConnectors",
      "objectTypeName": "roomConnectorType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorTypeId",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnectors",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "roomConnectorTypes",
  "camelized": {
    "singular": "roomConnectorType",
    "plural": "roomConnectorTypes",
    "id": "roomConnectorTypeId"
  },
  "capitalized": {
    "singular": "RoomConnectorType",
    "plural": "RoomConnectorTypes",
    "id": "RoomConnectorTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomConnector"
    ],
    "belongsTo": []
  }
};
const roomConnectorObjectTypeDefintion = {
  "name": "roomConnector",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomConnector",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomConnector",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "waitTime": {
      "name": "waitTime",
      "objectTypeName": "roomConnector",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "timePerFloor": {
      "name": "timePerFloor",
      "objectTypeName": "roomConnector",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomConnector",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomConnector",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomConnector",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomConnectorTypeId": {
      "name": "roomConnectorTypeId",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomConnectorTypeId",
        "targetModelName": "roomConnectorType",
        "propertyTypeName": "roomConnectorType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomConnectorType": {
      "name": "roomConnectorType",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorTypeId",
        "targetModelName": "roomConnectorType",
        "propertyTypeName": "roomConnectorType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "roomConnector",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomConnector",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomConnector",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomConnectors",
  "camelized": {
    "singular": "roomConnector",
    "plural": "roomConnectors",
    "id": "roomConnectorId"
  },
  "capitalized": {
    "singular": "RoomConnector",
    "plural": "RoomConnectors",
    "id": "RoomConnectorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "room"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const userCompanyObjectTypeDefintion = {
  "name": "userCompany",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userCompany",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userCompany",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "campusCreatedBies": {
      "name": "campusCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "campus",
        "propertyTypeName": "campusCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "campusUpdatedBies": {
      "name": "campusUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "campus",
        "propertyTypeName": "campusUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomConnectorCreatedBies": {
      "name": "roomConnectorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnectorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomConnectorUpdatedBies": {
      "name": "roomConnectorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnectorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userId": {
      "name": "userId",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    },
    "user": {
      "name": "user",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userId",
        "targetModelName": "user",
        "propertyTypeName": "user",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBies": {
      "name": "userCompanyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBies": {
      "name": "userCompanyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyCreatedBies": {
      "name": "personCompanyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompanyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyUpdatedBies": {
      "name": "personCompanyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompanyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingTypeCreatedBies": {
      "name": "buildingTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingTypeUpdatedBies": {
      "name": "buildingTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationCreatedBies": {
      "name": "organizationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "organization",
        "propertyTypeName": "organizationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationUpdatedBies": {
      "name": "organizationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "organization",
        "propertyTypeName": "organizationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeFamilyCreatedBies": {
      "name": "itemTypeFamilyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamilyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeFamilyUpdatedBies": {
      "name": "itemTypeFamilyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamilyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "manufacturerCreatedBies": {
      "name": "manufacturerCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturerCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "manufacturerUpdatedBies": {
      "name": "manufacturerUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturerUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeCreatedBies": {
      "name": "itemTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypeUpdatedBies": {
      "name": "itemTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingOwners": {
      "name": "buildingOwners",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyOwnerId",
        "targetModelName": "building",
        "propertyTypeName": "buildingOwners",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingCreatedBies": {
      "name": "buildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "building",
        "propertyTypeName": "buildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildingUpdatedBies": {
      "name": "buildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "building",
        "propertyTypeName": "buildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "mapScaleCreatedBies": {
      "name": "mapScaleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScaleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "mapScaleUpdatedBies": {
      "name": "mapScaleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScaleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structureCreatedBies": {
      "name": "structureCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "structure",
        "propertyTypeName": "structureCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structureUpdatedBies": {
      "name": "structureUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "structure",
        "propertyTypeName": "structureUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structurePointCreatedBies": {
      "name": "structurePointCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "structurePoint",
        "propertyTypeName": "structurePointCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "structurePointUpdatedBies": {
      "name": "structurePointUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "structurePoint",
        "propertyTypeName": "structurePointUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "floorCreatedBies": {
      "name": "floorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "floor",
        "propertyTypeName": "floorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "floorUpdatedBies": {
      "name": "floorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "floor",
        "propertyTypeName": "floorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "distributionCostTypeCreatedBies": {
      "name": "distributionCostTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "distributionCostTypeUpdatedBies": {
      "name": "distributionCostTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeCreatedBies": {
      "name": "roomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomType",
        "propertyTypeName": "roomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeUpdatedBies": {
      "name": "roomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomType",
        "propertyTypeName": "roomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupToRoomTypeCreatedBies": {
      "name": "roomTypeGroupToRoomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupToRoomTypeUpdatedBies": {
      "name": "roomTypeGroupToRoomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupFloorCreatedBies": {
      "name": "roomTypeGroupFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupFloorUpdatedBies": {
      "name": "roomTypeGroupFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupBuildingCreatedBies": {
      "name": "roomTypeGroupBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupBuildingUpdatedBies": {
      "name": "roomTypeGroupBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterCreatedBies": {
      "name": "costCenterCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenterCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterUpdatedBies": {
      "name": "costCenterUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenterUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterBuildingCreatedBies": {
      "name": "costCenterBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterBuildingUpdatedBies": {
      "name": "costCenterBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterFloorCreatedBies": {
      "name": "costCenterFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterFloorUpdatedBies": {
      "name": "costCenterFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomCreatedBies": {
      "name": "roomCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "room",
        "propertyTypeName": "roomCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomUpdatedBies": {
      "name": "roomUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "room",
        "propertyTypeName": "roomUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointCreatedBies": {
      "name": "roomPointCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointUpdatedBies": {
      "name": "roomPointUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRoomCreatedBies": {
      "name": "roomPointRoomCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRoomCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRoomUpdatedBies": {
      "name": "roomPointRoomUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRoomUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointSegmentCreatedBies": {
      "name": "roomPointSegmentCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointSegmentUpdatedBies": {
      "name": "roomPointSegmentUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypePointCreatedBies": {
      "name": "itemTypePointCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemTypePoint",
        "propertyTypeName": "itemTypePointCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypePointUpdatedBies": {
      "name": "itemTypePointUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemTypePoint",
        "propertyTypeName": "itemTypePointUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeCreatedBies": {
      "name": "dimensionTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeUpdatedBies": {
      "name": "dimensionTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionCreatedBies": {
      "name": "dimensionCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimension",
        "propertyTypeName": "dimensionCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionUpdatedBies": {
      "name": "dimensionUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimension",
        "propertyTypeName": "dimensionUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionRoomCreatedBies": {
      "name": "dimensionRoomCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRoomCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionRoomUpdatedBies": {
      "name": "dimensionRoomUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRoomUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionFloorCreatedBies": {
      "name": "dimensionFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionFloorUpdatedBies": {
      "name": "dimensionFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionBuildingCreatedBies": {
      "name": "dimensionBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionBuildingUpdatedBies": {
      "name": "dimensionBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factTypeCreatedBies": {
      "name": "factTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "factType",
        "propertyTypeName": "factTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factTypeUpdatedBies": {
      "name": "factTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "factType",
        "propertyTypeName": "factTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factCreatedBies": {
      "name": "factCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "fact",
        "propertyTypeName": "factCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "factUpdatedBies": {
      "name": "factUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "fact",
        "propertyTypeName": "factUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personStateCreatedBies": {
      "name": "personStateCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personState",
        "propertyTypeName": "personStateCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personStateUpdatedBies": {
      "name": "personStateUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personState",
        "propertyTypeName": "personStateUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personSecurityProfileCreatedBies": {
      "name": "personSecurityProfileCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfileCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personSecurityProfileUpdatedBies": {
      "name": "personSecurityProfileUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfileUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCreatedBies": {
      "name": "personCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "person",
        "propertyTypeName": "personCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personUpdatedBies": {
      "name": "personUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "person",
        "propertyTypeName": "personUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonTypeCreatedBies": {
      "name": "personToPersonTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonTypeUpdatedBies": {
      "name": "personToPersonTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonCreatedBies": {
      "name": "personToPersonCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonUpdatedBies": {
      "name": "personToPersonUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomAffectationCreatedBies": {
      "name": "roomAffectationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomAffectationUpdatedBies": {
      "name": "roomAffectationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeCreatedBies": {
      "name": "workplaceTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeUpdatedBies": {
      "name": "workplaceTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeItemTypeCreatedBies": {
      "name": "workplaceTypeItemTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeItemTypeUpdatedBies": {
      "name": "workplaceTypeItemTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceCreatedBies": {
      "name": "workplaceCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaceCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceUpdatedBies": {
      "name": "workplaceUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaceUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemCreatedBies": {
      "name": "itemCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "item",
        "propertyTypeName": "itemCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemUpdatedBies": {
      "name": "itemUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "item",
        "propertyTypeName": "itemUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceAffectationCreatedBies": {
      "name": "workplaceAffectationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceAffectationUpdatedBies": {
      "name": "workplaceAffectationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationFloorCreatedBies": {
      "name": "organizationFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationFloorUpdatedBies": {
      "name": "organizationFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationBuildingCreatedBies": {
      "name": "organizationBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "organizationBuildingUpdatedBies": {
      "name": "organizationBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeFloorCreatedBies": {
      "name": "roomTypeFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeFloorUpdatedBies": {
      "name": "roomTypeFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeBuildingCreatedBies": {
      "name": "roomTypeBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeBuildingUpdatedBies": {
      "name": "roomTypeBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemToPersonCreatedBies": {
      "name": "itemToPersonCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPersonCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemToPersonUpdatedBies": {
      "name": "itemToPersonUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPersonUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToBuildingCreatedBies": {
      "name": "personToBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToBuildingUpdatedBies": {
      "name": "personToBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionToPersonCreatedBies": {
      "name": "dimensionToPersonCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPersonCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionToPersonUpdatedBies": {
      "name": "dimensionToPersonUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPersonUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeToBuildingCreatedBies": {
      "name": "dimensionTypeToBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionTypeToBuildingUpdatedBies": {
      "name": "dimensionTypeToBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personWorkingLocationCreatedBies": {
      "name": "personWorkingLocationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personWorkingLocationUpdatedBies": {
      "name": "personWorkingLocationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToWorkplaceBookingCreatedBies": {
      "name": "personToWorkplaceBookingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToWorkplaceBookingUpdatedBies": {
      "name": "personToWorkplaceBookingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToRoomBookingCreatedBies": {
      "name": "personToRoomBookingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToRoomBookingUpdatedBies": {
      "name": "personToRoomBookingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToDimensionBookingCreatedBies": {
      "name": "personToDimensionBookingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToDimensionBookingUpdatedBies": {
      "name": "personToDimensionBookingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemTypeCreatedBies": {
      "name": "personCompanyToItemTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemTypeUpdatedBies": {
      "name": "personCompanyToItemTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToRoomTypeCreatedBies": {
      "name": "personCompanyToRoomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToRoomTypeUpdatedBies": {
      "name": "personCompanyToRoomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemCreatedBies": {
      "name": "personCompanyToItemCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItemCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "personCompanyToItemUpdatedBies": {
      "name": "personCompanyToItemUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItemUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "legendCreatedBies": {
      "name": "legendCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "legend",
        "propertyTypeName": "legendCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "legendUpdatedBies": {
      "name": "legendUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "legend",
        "propertyTypeName": "legendUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "openerPostMessageHostCreatedBies": {
      "name": "openerPostMessageHostCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "openerPostMessageHost",
        "propertyTypeName": "openerPostMessageHostCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "openerPostMessageHostUpdatedBies": {
      "name": "openerPostMessageHostUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "openerPostMessageHost",
        "propertyTypeName": "openerPostMessageHostUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleCreatedBies": {
      "name": "contentRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleUpdatedBies": {
      "name": "contentRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUserCompanyToJupRoles": {
      "name": "jupUserCompanyToJupRoles",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUserCompanyToJupRoleCreatedBies": {
      "name": "jupUserCompanyToJupRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUserCompanyToJupRoleUpdatedBies": {
      "name": "jupUserCompanyToJupRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToBuildingCreatedBies": {
      "name": "contentRoleToBuildingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToBuildingUpdatedBies": {
      "name": "contentRoleToBuildingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToUserCompanies": {
      "name": "contentRoleToUserCompanies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToUserCompanyCreatedBies": {
      "name": "contentRoleToUserCompanyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToUserCompanyUpdatedBies": {
      "name": "contentRoleToUserCompanyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToFloorCreatedBies": {
      "name": "contentRoleToFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToFloorUpdatedBies": {
      "name": "contentRoleToFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerApiCredentialCreatedBies": {
      "name": "partnerApiCredentialCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerApiCredential",
        "propertyTypeName": "partnerApiCredentialCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerApiCredentialUpdatedBies": {
      "name": "partnerApiCredentialUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerApiCredential",
        "propertyTypeName": "partnerApiCredentialUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserCreatedBies": {
      "name": "apiUserCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUserCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserUpdatedBies": {
      "name": "apiUserUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUserUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToJupRoleCreatedBies": {
      "name": "apiUserToJupRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToJupRoleUpdatedBies": {
      "name": "apiUserToJupRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToContentRoleCreatedBies": {
      "name": "apiUserToContentRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToContentRoleUpdatedBies": {
      "name": "apiUserToContentRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUiTenantOperationCreatedBies": {
      "name": "jupUiTenantOperationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "jupUiTenantOperationUpdatedBies": {
      "name": "jupUiTenantOperationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToJupUiTenantOperationCreatedBies": {
      "name": "contentRoleToJupUiTenantOperationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToJupUiTenantOperationUpdatedBies": {
      "name": "contentRoleToJupUiTenantOperationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleCreatedBies": {
      "name": "userRegistrationTenantRuleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRuleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleUpdatedBies": {
      "name": "userRegistrationTenantRuleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRuleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToJupRoleCreatedBies": {
      "name": "userRegistrationTenantRuleToJupRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToJupRoleUpdatedBies": {
      "name": "userRegistrationTenantRuleToJupRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToContentRoleCreatedBies": {
      "name": "userRegistrationTenantRuleToContentRoleCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoleCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToContentRoleUpdatedBies": {
      "name": "userRegistrationTenantRuleToContentRoleUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoleUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationCreatedBies": {
      "name": "partnerExportMappingConfigurationCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfigurationCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationUpdatedBies": {
      "name": "partnerExportMappingConfigurationUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfigurationUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingCreatedBies": {
      "name": "partnerExportMappingCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMappingCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingUpdatedBies": {
      "name": "partnerExportMappingUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMappingUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingToRoomTypeCreatedBies": {
      "name": "partnerExportMappingToRoomTypeCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypeCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingToRoomTypeUpdatedBies": {
      "name": "partnerExportMappingToRoomTypeUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypeUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationToFloorCreatedBies": {
      "name": "partnerExportMappingConfigurationToFloorCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloorCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingConfigurationToFloorUpdatedBies": {
      "name": "partnerExportMappingConfigurationToFloorUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloorUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemFactCreatedBies": {
      "name": "itemFactCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "itemFact",
        "propertyTypeName": "itemFactCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemFactUpdatedBies": {
      "name": "itemFactUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "itemFact",
        "propertyTypeName": "itemFactUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureFamilyCreatedBies": {
      "name": "featureFamilyCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamilyCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureFamilyUpdatedBies": {
      "name": "featureFamilyUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamilyUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureGroupCreatedBies": {
      "name": "featureGroupCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroupCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureGroupUpdatedBies": {
      "name": "featureGroupUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroupUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureCreatedBies": {
      "name": "featureCreatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "feature",
        "propertyTypeName": "featureCreatedBies",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureUpdatedBies": {
      "name": "featureUpdatedBies",
      "objectTypeName": "userCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "feature",
        "propertyTypeName": "featureUpdatedBies",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userCompanies",
  "camelized": {
    "singular": "userCompany",
    "plural": "userCompanies",
    "id": "userCompanyId"
  },
  "capitalized": {
    "singular": "UserCompany",
    "plural": "UserCompanies",
    "id": "UserCompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "campus",
      "roomConnector",
      "userCompany",
      "personCompany",
      "buildingType",
      "organization",
      "itemTypeFamily",
      "manufacturer",
      "itemType",
      "building",
      "mapScale",
      "structure",
      "structurePoint",
      "floor",
      "distributionCostType",
      "roomType",
      "roomTypeGroupToRoomType",
      "roomTypeGroupFloor",
      "roomTypeGroupBuilding",
      "costCenter",
      "costCenterBuilding",
      "costCenterFloor",
      "room",
      "roomPoint",
      "roomPointRoom",
      "roomPointSegment",
      "itemTypePoint",
      "dimensionType",
      "dimension",
      "dimensionRoom",
      "dimensionFloor",
      "dimensionBuilding",
      "factType",
      "fact",
      "personState",
      "personSecurityProfile",
      "person",
      "personToPersonType",
      "personToPerson",
      "roomAffectation",
      "workplaceType",
      "workplaceTypeItemType",
      "workplace",
      "item",
      "workplaceAffectation",
      "organizationFloor",
      "organizationBuilding",
      "roomTypeFloor",
      "roomTypeBuilding",
      "itemToPerson",
      "personToBuilding",
      "dimensionToPerson",
      "dimensionTypeToBuilding",
      "personWorkingLocation",
      "personToWorkplaceBooking",
      "personToRoomBooking",
      "personToDimensionBooking",
      "personCompanyToItemType",
      "personCompanyToRoomType",
      "personCompanyToItem",
      "legend",
      "openerPostMessageHost",
      "contentRole",
      "jupUserCompanyToJupRole",
      "contentRoleToBuilding",
      "contentRoleToUserCompany",
      "contentRoleToFloor",
      "partnerApiCredential",
      "apiUser",
      "apiUserToJupRole",
      "apiUserToContentRole",
      "jupUiTenantOperation",
      "contentRoleToJupUiTenantOperation",
      "userRegistrationTenantRule",
      "userRegistrationTenantRuleToJupRole",
      "userRegistrationTenantRuleToContentRole",
      "partnerExportMappingConfiguration",
      "partnerExportMapping",
      "partnerExportMappingToRoomType",
      "partnerExportMappingConfigurationToFloor",
      "itemFact",
      "featureFamily",
      "featureGroup",
      "feature"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const personGenderObjectTypeDefintion = {
  "name": "personGender",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personGender",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personGender",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personGender",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personGender",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personGender",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personGender",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personGenderId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "personGenders",
  "camelized": {
    "singular": "personGender",
    "plural": "personGenders",
    "id": "personGenderId"
  },
  "capitalized": {
    "singular": "PersonGender",
    "plural": "PersonGenders",
    "id": "PersonGenderId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person"
    ],
    "belongsTo": []
  }
};
const personCompanyObjectTypeDefintion = {
  "name": "personCompany",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompany",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personCompany",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "comment": {
      "name": "comment",
      "objectTypeName": "personCompany",
      "type": "text-md",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "contact": {
      "name": "contact",
      "objectTypeName": "personCompany",
      "type": "text-md",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "documents": {
      "name": "documents",
      "objectTypeName": "personCompany",
      "type": "url",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompany",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItemTypes": {
      "name": "personCompanyToItemTypes",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToRoomTypes": {
      "name": "personCompanyToRoomTypes",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItems": {
      "name": "personCompanyToItems",
      "objectTypeName": "personCompany",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItems",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanies",
  "camelized": {
    "singular": "personCompany",
    "plural": "personCompanies",
    "id": "personCompanyId"
  },
  "capitalized": {
    "singular": "PersonCompany",
    "plural": "PersonCompanies",
    "id": "PersonCompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person",
      "personCompanyToItemType",
      "personCompanyToRoomType",
      "personCompanyToItem"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const jupUiLayoutObjectTypeDefintion = {
  "name": "jupUiLayout",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiLayout",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiLayout",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiLayout",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "jupUiLayout",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiLayouts": {
      "name": "jupRoleToJupUiLayouts",
      "objectTypeName": "jupUiLayout",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupRoleToJupUiLayout",
        "propertyTypeName": "jupRoleToJupUiLayouts",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiLayouts",
  "camelized": {
    "singular": "jupUiLayout",
    "plural": "jupUiLayouts",
    "id": "jupUiLayoutId"
  },
  "capitalized": {
    "singular": "JupUiLayout",
    "plural": "JupUiLayouts",
    "id": "JupUiLayoutId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building",
      "jupRoleToJupUiLayout"
    ],
    "belongsTo": []
  }
};
const buildingTypeObjectTypeDefintion = {
  "name": "buildingType",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "buildingType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "buildingType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "buildingType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "buildingType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "buildingType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "buildingType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "buildingType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "buildingType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "buildingType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "buildingType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "buildingType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "buildingType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "buildingType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "buildingType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingTypeId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "buildingTypes",
  "camelized": {
    "singular": "buildingType",
    "plural": "buildingTypes",
    "id": "buildingTypeId"
  },
  "capitalized": {
    "singular": "BuildingType",
    "plural": "BuildingTypes",
    "id": "BuildingTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const organizationObjectTypeDefintion = {
  "name": "organization",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "organization",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "organization",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "organization",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "organization",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "organization",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "organization",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "organization",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizations": {
      "name": "organizations",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organizations",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationFloors": {
      "name": "organizationFloors",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationBuildings": {
      "name": "organizationBuildings",
      "objectTypeName": "organization",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "organization",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "organization",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "organizations",
  "camelized": {
    "singular": "organization",
    "plural": "organizations",
    "id": "organizationId"
  },
  "capitalized": {
    "singular": "Organization",
    "plural": "Organizations",
    "id": "OrganizationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "organization",
      "room",
      "person",
      "workplace",
      "organizationFloor",
      "organizationBuilding"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const itemTypeFamilyObjectTypeDefintion = {
  "name": "itemTypeFamily",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemTypeFamily",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "itemTypeFamily",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "itemTypeFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemTypeFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemTypeFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemTypeFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemTypeFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemTypeFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemTypeFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemTypeFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypes": {
      "name": "itemTypes",
      "objectTypeName": "itemTypeFamily",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeFamilyId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemTypeFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemTypeFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemTypeFamilies",
  "camelized": {
    "singular": "itemTypeFamily",
    "plural": "itemTypeFamilies",
    "id": "itemTypeFamilyId"
  },
  "capitalized": {
    "singular": "ItemTypeFamily",
    "plural": "ItemTypeFamilies",
    "id": "ItemTypeFamilyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const manufacturerObjectTypeDefintion = {
  "name": "manufacturer",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "manufacturer",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "manufacturer",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "website": {
      "name": "website",
      "objectTypeName": "manufacturer",
      "type": "url",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "manufacturer",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "manufacturer",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "manufacturer",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "manufacturer",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "manufacturer",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "manufacturer",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "manufacturer",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypes": {
      "name": "itemTypes",
      "objectTypeName": "manufacturer",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "manufacturerId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "manufacturer",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "manufacturer",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "manufacturers",
  "camelized": {
    "singular": "manufacturer",
    "plural": "manufacturers",
    "id": "manufacturerId"
  },
  "capitalized": {
    "singular": "Manufacturer",
    "plural": "Manufacturers",
    "id": "ManufacturerId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const object3dModelObjectTypeDefintion = {
  "name": "object3dModel",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "object3dModel",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "type": {
      "name": "type",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "obj"
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "object3dModel",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "origin": {
      "name": "origin",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "X"
      }
    },
    "model": {
      "name": "model",
      "objectTypeName": "object3dModel",
      "type": "model3d",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "object3dModel",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "object3dModel",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "object3dModel",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypes": {
      "name": "itemTypes",
      "objectTypeName": "object3dModel",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "object3dModelId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemTypes",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "object3dModels",
  "camelized": {
    "singular": "object3dModel",
    "plural": "object3dModels",
    "id": "object3dModelId"
  },
  "capitalized": {
    "singular": "Object3dModel",
    "plural": "Object3dModels",
    "id": "Object3dModelId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemType"
    ],
    "belongsTo": []
  }
};
const itemTypeObjectTypeDefintion = {
  "name": "itemType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "itemType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "itemType",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "displayItemReferenceInMap": {
      "name": "displayItemReferenceInMap",
      "objectTypeName": "itemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "itemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "icon": {
      "name": "icon",
      "objectTypeName": "itemType",
      "type": "icon",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "itemType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "#FFFFFF"
      }
    },
    "height": {
      "name": "height",
      "objectTypeName": "itemType",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "centimeter"
        },
        "defaultValue": 0
      }
    },
    "zIndex": {
      "name": "zIndex",
      "objectTypeName": "itemType",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "description": {
      "name": "description",
      "objectTypeName": "itemType",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "price": {
      "name": "price",
      "objectTypeName": "itemType",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "itemType",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "itemType",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "iconShape": {
      "name": "iconShape",
      "objectTypeName": "itemType",
      "type": "icon-shape",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "circle"
      }
    },
    "iconBackgroundColor": {
      "name": "iconBackgroundColor",
      "objectTypeName": "itemType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "#000000"
      }
    },
    "iconBorderColor": {
      "name": "iconBorderColor",
      "objectTypeName": "itemType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isAffectable": {
      "name": "isAffectable",
      "objectTypeName": "itemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "excludeFromPathfinding": {
      "name": "excludeFromPathfinding",
      "objectTypeName": "itemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypeFamilyId": {
      "name": "itemTypeFamilyId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeFamilyId",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemTypeFamily": {
      "name": "itemTypeFamily",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeFamilyId",
        "targetModelName": "itemTypeFamily",
        "propertyTypeName": "itemTypeFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "manufacturerId": {
      "name": "manufacturerId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "manufacturerId",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturer",
        "options": {
          "readOnly": false
        }
      }
    },
    "manufacturer": {
      "name": "manufacturer",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "manufacturerId",
        "targetModelName": "manufacturer",
        "propertyTypeName": "manufacturer",
        "options": {
          "readOnly": false
        }
      }
    },
    "object3dModelId": {
      "name": "object3dModelId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "object3dModelId",
        "targetModelName": "object3dModel",
        "propertyTypeName": "object3dModel",
        "options": {
          "readOnly": false
        }
      }
    },
    "object3dModel": {
      "name": "object3dModel",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "object3dModelId",
        "targetModelName": "object3dModel",
        "propertyTypeName": "object3dModel",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemTypePoints": {
      "name": "itemTypePoints",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemTypePoint",
        "propertyTypeName": "itemTypePoints",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceTypeItemTypes": {
      "name": "workplaceTypeItemTypes",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "items": {
      "name": "items",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "item",
        "propertyTypeName": "items",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItemTypes": {
      "name": "personCompanyToItemTypes",
      "objectTypeName": "itemType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemTypes",
  "camelized": {
    "singular": "itemType",
    "plural": "itemTypes",
    "id": "itemTypeId"
  },
  "capitalized": {
    "singular": "ItemType",
    "plural": "ItemTypes",
    "id": "ItemTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemTypePoint",
      "workplaceTypeItemType",
      "item",
      "personCompanyToItemType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const buildingObjectTypeDefintion = {
  "name": "building",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "building",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "building",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "building",
      "type": "color",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "surface": {
      "name": "surface",
      "objectTypeName": "building",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "leaseStartDate": {
      "name": "leaseStartDate",
      "objectTypeName": "building",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "leaseEndDate": {
      "name": "leaseEndDate",
      "objectTypeName": "building",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "purchaseDate": {
      "name": "purchaseDate",
      "objectTypeName": "building",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "documents": {
      "name": "documents",
      "objectTypeName": "building",
      "type": "url",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "building",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "regulatoryCapacity": {
      "name": "regulatoryCapacity",
      "objectTypeName": "building",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "parkingSpaceCount": {
      "name": "parkingSpaceCount",
      "objectTypeName": "building",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "constructionYear": {
      "name": "constructionYear",
      "objectTypeName": "building",
      "type": "year",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyCondominiumFees": {
      "name": "yearlyCondominiumFees",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyRent": {
      "name": "yearlyRent",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyParkingRent": {
      "name": "yearlyParkingRent",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyTaxFees": {
      "name": "yearlyTaxFees",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "yearlyExploitationFees": {
      "name": "yearlyExploitationFees",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "rentReferenceIndex": {
      "name": "rentReferenceIndex",
      "objectTypeName": "building",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "securityDeposit": {
      "name": "securityDeposit",
      "objectTypeName": "building",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "building",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "building",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "building",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "building",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "building",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "building",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "building",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "building",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "building",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "building",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "building",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "dimensionPeopleCount": {
      "name": "dimensionPeopleCount",
      "objectTypeName": "building",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "address": {
      "name": "address",
      "objectTypeName": "building",
      "type": "address",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "building",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "building",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "building",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingTypeId": {
      "name": "buildingTypeId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingTypeId",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingType": {
      "name": "buildingType",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingTypeId",
        "targetModelName": "buildingType",
        "propertyTypeName": "buildingType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyOwnerId": {
      "name": "userCompanyOwnerId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyOwnerId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyOwner",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyOwner": {
      "name": "userCompanyOwner",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyOwnerId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyOwner",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiLayoutId": {
      "name": "jupUiLayoutId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiLayout": {
      "name": "jupUiLayout",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "campusId": {
      "name": "campusId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "campusId",
        "targetModelName": "campus",
        "propertyTypeName": "campus",
        "options": {
          "readOnly": false
        }
      }
    },
    "campus": {
      "name": "campus",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "campusId",
        "targetModelName": "campus",
        "propertyTypeName": "campus",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildings": {
      "name": "buildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "buildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "building",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "building",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "floors": {
      "name": "floors",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "floor",
        "propertyTypeName": "floors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroupBuildings": {
      "name": "roomTypeGroupBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterBuildings": {
      "name": "costCenterBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionBuildings": {
      "name": "dimensionBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "facts": {
      "name": "facts",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "fact",
        "propertyTypeName": "facts",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationBuildings": {
      "name": "organizationBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "organizationBuilding",
        "propertyTypeName": "organizationBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeBuildings": {
      "name": "roomTypeBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToBuildings": {
      "name": "personToBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeToBuildings": {
      "name": "dimensionTypeToBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToBuildings": {
      "name": "contentRoleToBuildings",
      "objectTypeName": "building",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "buildings",
  "camelized": {
    "singular": "building",
    "plural": "buildings",
    "id": "buildingId"
  },
  "capitalized": {
    "singular": "Building",
    "plural": "Buildings",
    "id": "BuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "building",
      "floor",
      "roomTypeGroupBuilding",
      "costCenterBuilding",
      "dimensionBuilding",
      "fact",
      "organizationBuilding",
      "roomTypeBuilding",
      "personToBuilding",
      "dimensionTypeToBuilding",
      "contentRoleToBuilding"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const mapScaleObjectTypeDefintion = {
  "name": "mapScale",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "mapScale",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "mapScale",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "p1": {
      "name": "p1",
      "objectTypeName": "mapScale",
      "type": "point2d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": {
          "x": 0,
          "y": 0
        }
      }
    },
    "p2": {
      "name": "p2",
      "objectTypeName": "mapScale",
      "type": "point2d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": {
          "x": 0,
          "y": 0
        }
      }
    },
    "length": {
      "name": "length",
      "objectTypeName": "mapScale",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "meter"
        },
        "defaultValue": 0
      }
    },
    "ratio": {
      "name": "ratio",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "strokeWidth": {
      "name": "strokeWidth",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "roomTextSize": {
      "name": "roomTextSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 18
      }
    },
    "workplaceTextSize": {
      "name": "workplaceTextSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 12
      }
    },
    "segmentDistanceTextSize": {
      "name": "segmentDistanceTextSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 6
      }
    },
    "itemTypeIconSize": {
      "name": "itemTypeIconSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 12
      }
    },
    "roomIconSize": {
      "name": "roomIconSize",
      "objectTypeName": "mapScale",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 64
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "mapScale",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "mapScale",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "mapScale",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "mapScale",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "mapScale",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "mapScale",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "mapScale",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "floors": {
      "name": "floors",
      "objectTypeName": "mapScale",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "mapScaleId",
        "targetModelName": "floor",
        "propertyTypeName": "floors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "mapScale",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "mapScale",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "mapScales",
  "camelized": {
    "singular": "mapScale",
    "plural": "mapScales",
    "id": "mapScaleId"
  },
  "capitalized": {
    "singular": "MapScale",
    "plural": "MapScales",
    "id": "MapScaleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "floor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const structureObjectTypeDefintion = {
  "name": "structure",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "structure",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "structure",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "transform": {
      "name": "transform",
      "objectTypeName": "structure",
      "type": "transform",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "structure",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "structure",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "structure",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "structure",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "structure",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "structure",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "structure",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "structurePoints": {
      "name": "structurePoints",
      "objectTypeName": "structure",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structurePoint",
        "propertyTypeName": "structurePoints",
        "options": {
          "readOnly": false
        }
      }
    },
    "floors": {
      "name": "floors",
      "objectTypeName": "structure",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "floor",
        "propertyTypeName": "floors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "structure",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "structure",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "structures",
  "camelized": {
    "singular": "structure",
    "plural": "structures",
    "id": "structureId"
  },
  "capitalized": {
    "singular": "Structure",
    "plural": "Structures",
    "id": "StructureId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "structurePoint",
      "floor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const structurePointObjectTypeDefintion = {
  "name": "structurePoint",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "structurePoint",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "x": {
      "name": "x",
      "objectTypeName": "structurePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "y": {
      "name": "y",
      "objectTypeName": "structurePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "sortIndex": {
      "name": "sortIndex",
      "objectTypeName": "structurePoint",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "structurePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "structurePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "structurePoint",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "structureId": {
      "name": "structureId",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "structure": {
      "name": "structure",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "structurePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "structurePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "structurePoints",
  "camelized": {
    "singular": "structurePoint",
    "plural": "structurePoints",
    "id": "structurePointId"
  },
  "capitalized": {
    "singular": "StructurePoint",
    "plural": "StructurePoints",
    "id": "StructurePointId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const floorObjectTypeDefintion = {
  "name": "floor",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "floor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "floor",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "level": {
      "name": "level",
      "objectTypeName": "floor",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "height": {
      "name": "height",
      "objectTypeName": "floor",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "centimeter"
        },
        "defaultValue": 240
      }
    },
    "regulatoryCapacity": {
      "name": "regulatoryCapacity",
      "objectTypeName": "floor",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "floor",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "floor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "floor",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "floor",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "floor",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "floor",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "floor",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "floor",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "backgroundLayout": {
      "name": "backgroundLayout",
      "objectTypeName": "floor",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "backgroundLayoutOpacity": {
      "name": "backgroundLayoutOpacity",
      "objectTypeName": "floor",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "pathfindingGraph": {
      "name": "pathfindingGraph",
      "objectTypeName": "floor",
      "type": "floor-navigation-graph",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "floor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "floor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "floor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "mapScaleId": {
      "name": "mapScaleId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "mapScaleId",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScale",
        "options": {
          "readOnly": false
        }
      }
    },
    "mapScale": {
      "name": "mapScale",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "mapScaleId",
        "targetModelName": "mapScale",
        "propertyTypeName": "mapScale",
        "options": {
          "readOnly": false
        }
      }
    },
    "structureId": {
      "name": "structureId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "structure": {
      "name": "structure",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "structureId",
        "targetModelName": "structure",
        "propertyTypeName": "structure",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupFloors": {
      "name": "roomTypeGroupFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterFloors": {
      "name": "costCenterFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPoints": {
      "name": "roomPoints",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPoints",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionFloors": {
      "name": "dimensionFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationFloors": {
      "name": "organizationFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "organizationFloor",
        "propertyTypeName": "organizationFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeFloors": {
      "name": "roomTypeFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToFloors": {
      "name": "contentRoleToFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfigurationToFloors": {
      "name": "partnerExportMappingConfigurationToFloors",
      "objectTypeName": "floor",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "floor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "floor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "floors",
  "camelized": {
    "singular": "floor",
    "plural": "floors",
    "id": "floorId"
  },
  "capitalized": {
    "singular": "Floor",
    "plural": "Floors",
    "id": "FloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomTypeGroupFloor",
      "costCenterFloor",
      "room",
      "roomPoint",
      "dimensionFloor",
      "organizationFloor",
      "roomTypeFloor",
      "contentRoleToFloor",
      "partnerExportMappingConfigurationToFloor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const distributionCostTypeObjectTypeDefintion = {
  "name": "distributionCostType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "distributionCostType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "distributionCostType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "distributionCostType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "distributionCostType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "distributionCostType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "distributionCostType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "distributionCostType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "distributionCostType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "distributionCostType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "distributionCostType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypes": {
      "name": "roomTypes",
      "objectTypeName": "distributionCostType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "distributionCostType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "distributionCostType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "distributionCostType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "distributionCostTypes",
  "camelized": {
    "singular": "distributionCostType",
    "plural": "distributionCostTypes",
    "id": "distributionCostTypeId"
  },
  "capitalized": {
    "singular": "DistributionCostType",
    "plural": "DistributionCostTypes",
    "id": "DistributionCostTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomType",
      "room"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const roomTypeGroupObjectTypeDefintion = {
  "name": "roomTypeGroup",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroup",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomTypeGroup",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "roomTypeGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "roomTypeGroup",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "exclude": {
      "name": "exclude",
      "objectTypeName": "roomTypeGroup",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupToRoomTypes": {
      "name": "roomTypeGroupToRoomTypes",
      "objectTypeName": "roomTypeGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroupFloors": {
      "name": "roomTypeGroupFloors",
      "objectTypeName": "roomTypeGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroupFloor",
        "propertyTypeName": "roomTypeGroupFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroupBuildings": {
      "name": "roomTypeGroupBuildings",
      "objectTypeName": "roomTypeGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroupBuilding",
        "propertyTypeName": "roomTypeGroupBuildings",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "roomTypeGroups",
  "camelized": {
    "singular": "roomTypeGroup",
    "plural": "roomTypeGroups",
    "id": "roomTypeGroupId"
  },
  "capitalized": {
    "singular": "RoomTypeGroup",
    "plural": "RoomTypeGroups",
    "id": "RoomTypeGroupId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomTypeGroupToRoomType",
      "roomTypeGroupFloor",
      "roomTypeGroupBuilding"
    ],
    "belongsTo": []
  }
};
const roomTypeObjectTypeDefintion = {
  "name": "roomType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "roomType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "icon": {
      "name": "icon",
      "objectTypeName": "roomType",
      "type": "icon",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color3d": {
      "name": "color3d",
      "objectTypeName": "roomType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "roomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "displayWallsOn3d": {
      "name": "displayWallsOn3d",
      "objectTypeName": "roomType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": true
      }
    },
    "cadence": {
      "name": "cadence",
      "objectTypeName": "roomType",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isBookable": {
      "name": "isBookable",
      "objectTypeName": "roomType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "distributionCostTypeId": {
      "name": "distributionCostTypeId",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "distributionCostType": {
      "name": "distributionCostType",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomTypeGroupToRoomTypes": {
      "name": "roomTypeGroupToRoomTypes",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomTypeGroupToRoomType",
        "propertyTypeName": "roomTypeGroupToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeFloors": {
      "name": "roomTypeFloors",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomTypeFloor",
        "propertyTypeName": "roomTypeFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeBuildings": {
      "name": "roomTypeBuildings",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomTypeBuilding",
        "propertyTypeName": "roomTypeBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToRoomTypes": {
      "name": "personCompanyToRoomTypes",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingToRoomTypes": {
      "name": "partnerExportMappingToRoomTypes",
      "objectTypeName": "roomType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypes",
  "camelized": {
    "singular": "roomType",
    "plural": "roomTypes",
    "id": "roomTypeId"
  },
  "capitalized": {
    "singular": "RoomType",
    "plural": "RoomTypes",
    "id": "RoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomTypeGroupToRoomType",
      "room",
      "roomTypeFloor",
      "roomTypeBuilding",
      "personCompanyToRoomType",
      "partnerExportMappingToRoomType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const roomTypeGroupToRoomTypeObjectTypeDefintion = {
  "name": "roomTypeGroupToRoomType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupId": {
      "name": "roomTypeGroupId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroup": {
      "name": "roomTypeGroup",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeGroupToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeGroupToRoomTypes",
  "camelized": {
    "singular": "roomTypeGroupToRoomType",
    "plural": "roomTypeGroupToRoomTypes",
    "id": "roomTypeGroupToRoomTypeId"
  },
  "capitalized": {
    "singular": "RoomTypeGroupToRoomType",
    "plural": "RoomTypeGroupToRoomTypes",
    "id": "RoomTypeGroupToRoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomTypeGroupFloorObjectTypeDefintion = {
  "name": "roomTypeGroupFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupId": {
      "name": "roomTypeGroupId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroup": {
      "name": "roomTypeGroup",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeGroupFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeGroupFloors",
  "camelized": {
    "singular": "roomTypeGroupFloor",
    "plural": "roomTypeGroupFloors",
    "id": "roomTypeGroupFloorId"
  },
  "capitalized": {
    "singular": "RoomTypeGroupFloor",
    "plural": "RoomTypeGroupFloors",
    "id": "RoomTypeGroupFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomTypeGroupBuildingObjectTypeDefintion = {
  "name": "roomTypeGroupBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeGroupId": {
      "name": "roomTypeGroupId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeGroup": {
      "name": "roomTypeGroup",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeGroupId",
        "targetModelName": "roomTypeGroup",
        "propertyTypeName": "roomTypeGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeGroupBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeGroupBuildings",
  "camelized": {
    "singular": "roomTypeGroupBuilding",
    "plural": "roomTypeGroupBuildings",
    "id": "roomTypeGroupBuildingId"
  },
  "capitalized": {
    "singular": "RoomTypeGroupBuilding",
    "plural": "RoomTypeGroupBuildings",
    "id": "RoomTypeGroupBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const costCenterObjectTypeDefintion = {
  "name": "costCenter",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "costCenter",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "costCenter",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "costCenter",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "info": {
      "name": "info",
      "objectTypeName": "costCenter",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "distributeByFloor": {
      "name": "distributeByFloor",
      "objectTypeName": "costCenter",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "distributeByBuilding": {
      "name": "distributeByBuilding",
      "objectTypeName": "costCenter",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "costCenter",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "costCenter",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "costCenter",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "costCenter",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "costCenter",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "costCenter",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "costCenter",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "costCenter",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "costCenterBuildings": {
      "name": "costCenterBuildings",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenterBuilding",
        "propertyTypeName": "costCenterBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterFloors": {
      "name": "costCenterFloors",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenterFloor",
        "propertyTypeName": "costCenterFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "rooms": {
      "name": "rooms",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "room",
        "propertyTypeName": "rooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "costCenter",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "costCenter",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "costCenter",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "costCenters",
  "camelized": {
    "singular": "costCenter",
    "plural": "costCenters",
    "id": "costCenterId"
  },
  "capitalized": {
    "singular": "CostCenter",
    "plural": "CostCenters",
    "id": "CostCenterId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "costCenterBuilding",
      "costCenterFloor",
      "room",
      "person",
      "workplace"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const costCenterBuildingObjectTypeDefintion = {
  "name": "costCenterBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "costCenterBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "costCenterBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "costCenterBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "costCenterBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "costCenterBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "costCenterBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "costCenterBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "costCenterBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "costCenterBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "costCenterBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "costCenterBuildings",
  "camelized": {
    "singular": "costCenterBuilding",
    "plural": "costCenterBuildings",
    "id": "costCenterBuildingId"
  },
  "capitalized": {
    "singular": "CostCenterBuilding",
    "plural": "CostCenterBuildings",
    "id": "CostCenterBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const costCenterFloorObjectTypeDefintion = {
  "name": "costCenterFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "costCenterFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "costCenterFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "costCenterFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "costCenterFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "costCenterFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "costCenterFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "costCenterFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "costCenterFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "costCenterFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "costCenterFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "costCenterFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "costCenterFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "costCenterFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "costCenterFloors",
  "camelized": {
    "singular": "costCenterFloor",
    "plural": "costCenterFloors",
    "id": "costCenterFloorId"
  },
  "capitalized": {
    "singular": "CostCenterFloor",
    "plural": "CostCenterFloors",
    "id": "CostCenterFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomObjectTypeDefintion = {
  "name": "room",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "room",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "prettyName": {
      "name": "prettyName",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "area": {
      "name": "area",
      "objectTypeName": "room",
      "type": "surface",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false
      }
    },
    "perimeter": {
      "name": "perimeter",
      "objectTypeName": "room",
      "type": "distance",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "distance",
          "value": "meter"
        },
        "defaultValue": 0
      }
    },
    "textAnchor": {
      "name": "textAnchor",
      "objectTypeName": "room",
      "type": "textAnchor",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "capacity": {
      "name": "capacity",
      "objectTypeName": "room",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "room",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "room",
      "type": "surface-by-people",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "room",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "room",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "room",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "room",
      "type": "percentage",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "room",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "room",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "room",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "room",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "info": {
      "name": "info",
      "objectTypeName": "room",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "bookingEmail": {
      "name": "bookingEmail",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "externalId2": {
      "name": "externalId2",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "room",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "keyCylinderCode": {
      "name": "keyCylinderCode",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "livePeopleCount": {
      "name": "livePeopleCount",
      "objectTypeName": "room",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "room",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "room",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "room",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "occupancyStatusId": {
      "name": "occupancyStatusId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "occupancyStatusId",
        "targetModelName": "occupancyStatus",
        "propertyTypeName": "occupancyStatus",
        "options": {
          "readOnly": false
        }
      }
    },
    "occupancyStatus": {
      "name": "occupancyStatus",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "occupancyStatusId",
        "targetModelName": "occupancyStatus",
        "propertyTypeName": "occupancyStatus",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "distributionCostTypeId": {
      "name": "distributionCostTypeId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "distributionCostType": {
      "name": "distributionCostType",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "distributionCostTypeId",
        "targetModelName": "distributionCostType",
        "propertyTypeName": "distributionCostType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomConnectorId": {
      "name": "roomConnectorId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomConnectorId",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnector",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomConnector": {
      "name": "roomConnector",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomConnectorId",
        "targetModelName": "roomConnector",
        "propertyTypeName": "roomConnector",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRooms": {
      "name": "roomPointRooms",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionRooms": {
      "name": "dimensionRooms",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomAffectations": {
      "name": "roomAffectations",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "items": {
      "name": "items",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "item",
        "propertyTypeName": "items",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToRoomBookings": {
      "name": "personToRoomBookings",
      "objectTypeName": "room",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "room",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "room",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "rooms",
  "camelized": {
    "singular": "room",
    "plural": "rooms",
    "id": "roomId"
  },
  "capitalized": {
    "singular": "Room",
    "plural": "Rooms",
    "id": "RoomId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomPointRoom",
      "dimensionRoom",
      "roomAffectation",
      "workplace",
      "item",
      "personToRoomBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const roomPointObjectTypeDefintion = {
  "name": "roomPoint",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPoint",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "x": {
      "name": "x",
      "objectTypeName": "roomPoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "y": {
      "name": "y",
      "objectTypeName": "roomPoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPoint",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "roomPointRooms": {
      "name": "roomPointRooms",
      "objectTypeName": "roomPoint",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointId",
        "targetModelName": "roomPointRoom",
        "propertyTypeName": "roomPointRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointSegmentStarts": {
      "name": "roomPointSegmentStarts",
      "objectTypeName": "roomPoint",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointStartId",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentStarts",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointSegmentEnds": {
      "name": "roomPointSegmentEnds",
      "objectTypeName": "roomPoint",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointEndId",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegmentEnds",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomPoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomPoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomPoints",
  "camelized": {
    "singular": "roomPoint",
    "plural": "roomPoints",
    "id": "roomPointId"
  },
  "capitalized": {
    "singular": "RoomPoint",
    "plural": "RoomPoints",
    "id": "RoomPointId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomPointRoom",
      "roomPointSegment"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const roomPointRoomObjectTypeDefintion = {
  "name": "roomPointRoom",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPointRoom",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "sortIndex": {
      "name": "sortIndex",
      "objectTypeName": "roomPointRoom",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPointRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPointRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPointRoom",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointId": {
      "name": "roomPointId",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPoint",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPoint": {
      "name": "roomPoint",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPoint",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomPointRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomPointRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomPointRooms",
  "camelized": {
    "singular": "roomPointRoom",
    "plural": "roomPointRooms",
    "id": "roomPointRoomId"
  },
  "capitalized": {
    "singular": "RoomPointRoom",
    "plural": "RoomPointRooms",
    "id": "RoomPointRoomId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomPointSegmentTypeObjectTypeDefintion = {
  "name": "roomPointSegmentType",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPointSegmentType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "roomPointSegmentType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "roomPointSegmentType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPointSegmentType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPointSegmentType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPointSegmentType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomPointSegments": {
      "name": "roomPointSegments",
      "objectTypeName": "roomPointSegmentType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointSegmentTypeId",
        "targetModelName": "roomPointSegment",
        "propertyTypeName": "roomPointSegments",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "roomPointSegmentTypes",
  "camelized": {
    "singular": "roomPointSegmentType",
    "plural": "roomPointSegmentTypes",
    "id": "roomPointSegmentTypeId"
  },
  "capitalized": {
    "singular": "RoomPointSegmentType",
    "plural": "RoomPointSegmentTypes",
    "id": "RoomPointSegmentTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "roomPointSegment"
    ],
    "belongsTo": []
  }
};
const roomPointSegmentObjectTypeDefintion = {
  "name": "roomPointSegment",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomPointSegment",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "reversePoints": {
      "name": "reversePoints",
      "objectTypeName": "roomPointSegment",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "displayBothSides": {
      "name": "displayBothSides",
      "objectTypeName": "roomPointSegment",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomPointSegment",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomPointSegment",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomPointSegment",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomPointSegmentTypeId": {
      "name": "roomPointSegmentTypeId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointSegmentTypeId",
        "targetModelName": "roomPointSegmentType",
        "propertyTypeName": "roomPointSegmentType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointSegmentType": {
      "name": "roomPointSegmentType",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointSegmentTypeId",
        "targetModelName": "roomPointSegmentType",
        "propertyTypeName": "roomPointSegmentType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointStartId": {
      "name": "roomPointStartId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointStartId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointStart",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointStart": {
      "name": "roomPointStart",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointStartId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointStart",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointEndId": {
      "name": "roomPointEndId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomPointEndId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointEnd",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomPointEnd": {
      "name": "roomPointEnd",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomPointEndId",
        "targetModelName": "roomPoint",
        "propertyTypeName": "roomPointEnd",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomPointSegment",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomPointSegment",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomPointSegments",
  "camelized": {
    "singular": "roomPointSegment",
    "plural": "roomPointSegments",
    "id": "roomPointSegmentId"
  },
  "capitalized": {
    "singular": "RoomPointSegment",
    "plural": "RoomPointSegments",
    "id": "RoomPointSegmentId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const itemTypePointObjectTypeDefintion = {
  "name": "itemTypePoint",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemTypePoint",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "x": {
      "name": "x",
      "objectTypeName": "itemTypePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "y": {
      "name": "y",
      "objectTypeName": "itemTypePoint",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "sortIndex": {
      "name": "sortIndex",
      "objectTypeName": "itemTypePoint",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemTypePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemTypePoint",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemTypePoint",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemTypePoint",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemTypePoint",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemTypePoints",
  "camelized": {
    "singular": "itemTypePoint",
    "plural": "itemTypePoints",
    "id": "itemTypePointId"
  },
  "capitalized": {
    "singular": "ItemTypePoint",
    "plural": "ItemTypePoints",
    "id": "ItemTypePointId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionTypeObjectTypeDefintion = {
  "name": "dimensionType",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "dimensionType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "dimensionType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "order": {
      "name": "order",
      "objectTypeName": "dimensionType",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "description": {
      "name": "description",
      "objectTypeName": "dimensionType",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensions": {
      "name": "dimensions",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimensions",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionRooms": {
      "name": "dimensionRooms",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionFloors": {
      "name": "dimensionFloors",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionBuildings": {
      "name": "dimensionBuildings",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeToBuildings": {
      "name": "dimensionTypeToBuildings",
      "objectTypeName": "dimensionType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionTypeToBuilding",
        "propertyTypeName": "dimensionTypeToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionTypes",
  "camelized": {
    "singular": "dimensionType",
    "plural": "dimensionTypes",
    "id": "dimensionTypeId"
  },
  "capitalized": {
    "singular": "DimensionType",
    "plural": "DimensionTypes",
    "id": "DimensionTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "dimension",
      "dimensionRoom",
      "dimensionFloor",
      "dimensionBuilding",
      "dimensionTypeToBuilding"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionObjectTypeDefintion = {
  "name": "dimension",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimension",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "dimension",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "dimension",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "value": {
      "name": "value",
      "objectTypeName": "dimension",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "dimension",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "dimension",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "manualPeopleCount": {
      "name": "manualPeopleCount",
      "objectTypeName": "dimension",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprintPerMeter": {
      "name": "carbonFootprintPerMeter",
      "objectTypeName": "dimension",
      "type": "weight",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimension",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimension",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimension",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "dimensionRooms": {
      "name": "dimensionRooms",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionRoom",
        "propertyTypeName": "dimensionRooms",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionFloors": {
      "name": "dimensionFloors",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionFloor",
        "propertyTypeName": "dimensionFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionBuildings": {
      "name": "dimensionBuildings",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionBuilding",
        "propertyTypeName": "dimensionBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionToPeople": {
      "name": "dimensionToPeople",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToDimensionBookings": {
      "name": "personToDimensionBookings",
      "objectTypeName": "dimension",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimension",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimension",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensions",
  "camelized": {
    "singular": "dimension",
    "plural": "dimensions",
    "id": "dimensionId"
  },
  "capitalized": {
    "singular": "Dimension",
    "plural": "Dimensions",
    "id": "DimensionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "dimensionRoom",
      "dimensionFloor",
      "dimensionBuilding",
      "dimensionToPerson",
      "personToDimensionBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionRoomObjectTypeDefintion = {
  "name": "dimensionRoom",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionRoom",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionRoom",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionRoom",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionRoom",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionRoom",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionRooms",
  "camelized": {
    "singular": "dimensionRoom",
    "plural": "dimensionRooms",
    "id": "dimensionRoomId"
  },
  "capitalized": {
    "singular": "DimensionRoom",
    "plural": "DimensionRooms",
    "id": "DimensionRoomId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionFloorObjectTypeDefintion = {
  "name": "dimensionFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "dimensionFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "dimensionFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "dimensionFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "dimensionFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "dimensionFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "dimensionFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "dimensionFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionFloors",
  "camelized": {
    "singular": "dimensionFloor",
    "plural": "dimensionFloors",
    "id": "dimensionFloorId"
  },
  "capitalized": {
    "singular": "DimensionFloor",
    "plural": "DimensionFloors",
    "id": "DimensionFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionBuildingObjectTypeDefintion = {
  "name": "dimensionBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionPeopleCount": {
      "name": "dimensionPeopleCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "dimensionBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "dimensionBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "dimensionBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "dimensionBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionBuildings",
  "camelized": {
    "singular": "dimensionBuilding",
    "plural": "dimensionBuildings",
    "id": "dimensionBuildingId"
  },
  "capitalized": {
    "singular": "DimensionBuilding",
    "plural": "DimensionBuildings",
    "id": "DimensionBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const factTypeObjectTypeDefintion = {
  "name": "factType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "factType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "factType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "factType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "factType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "factType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "factType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "factType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "factType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "factType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "factType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "facts": {
      "name": "facts",
      "objectTypeName": "factType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "factTypeId",
        "targetModelName": "fact",
        "propertyTypeName": "facts",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "factType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "factType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "factTypes",
  "camelized": {
    "singular": "factType",
    "plural": "factTypes",
    "id": "factTypeId"
  },
  "capitalized": {
    "singular": "FactType",
    "plural": "FactTypes",
    "id": "FactTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "fact"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const factObjectTypeDefintion = {
  "name": "fact",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "fact",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "value": {
      "name": "value",
      "objectTypeName": "fact",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "date": {
      "name": "date",
      "objectTypeName": "fact",
      "type": "date",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "fact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "fact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "fact",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "factTypeId": {
      "name": "factTypeId",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "factTypeId",
        "targetModelName": "factType",
        "propertyTypeName": "factType",
        "options": {
          "readOnly": false
        }
      }
    },
    "factType": {
      "name": "factType",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "factTypeId",
        "targetModelName": "factType",
        "propertyTypeName": "factType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "fact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "fact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "facts",
  "camelized": {
    "singular": "fact",
    "plural": "facts",
    "id": "factId"
  },
  "capitalized": {
    "singular": "Fact",
    "plural": "Facts",
    "id": "FactId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personStateObjectTypeDefintion = {
  "name": "personState",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personState",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personState",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personState",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personState",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personState",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personState",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personState",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personState",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personState",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personState",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personStateId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personState",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personState",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personStates",
  "camelized": {
    "singular": "personState",
    "plural": "personStates",
    "id": "personStateId"
  },
  "capitalized": {
    "singular": "PersonState",
    "plural": "PersonStates",
    "id": "PersonStateId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const personSecurityProfileObjectTypeDefintion = {
  "name": "personSecurityProfile",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personSecurityProfile",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personSecurityProfile",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "personSecurityProfile",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "icon": {
      "name": "icon",
      "objectTypeName": "personSecurityProfile",
      "type": "icon",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personSecurityProfile",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personSecurityProfile",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personSecurityProfile",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personSecurityProfile",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personSecurityProfile",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personSecurityProfile",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personSecurityProfile",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "people": {
      "name": "people",
      "objectTypeName": "personSecurityProfile",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSecurityProfileId",
        "targetModelName": "person",
        "propertyTypeName": "people",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personSecurityProfile",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personSecurityProfile",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personSecurityProfiles",
  "camelized": {
    "singular": "personSecurityProfile",
    "plural": "personSecurityProfiles",
    "id": "personSecurityProfileId"
  },
  "capitalized": {
    "singular": "PersonSecurityProfile",
    "plural": "PersonSecurityProfiles",
    "id": "PersonSecurityProfileId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "person"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const personObjectTypeDefintion = {
  "name": "person",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "person",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "firstname": {
      "name": "firstname",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "lastname": {
      "name": "lastname",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "fullname": {
      "name": "fullname",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false
      }
    },
    "email": {
      "name": "email",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "picture": {
      "name": "picture",
      "objectTypeName": "person",
      "type": "image",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "title": {
      "name": "title",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "monitorReference": {
      "name": "monitorReference",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "computerReference": {
      "name": "computerReference",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "telephone": {
      "name": "telephone",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "cellphone": {
      "name": "cellphone",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "badgeNumber": {
      "name": "badgeNumber",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "badgeRestaurant": {
      "name": "badgeRestaurant",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "boxNumber": {
      "name": "boxNumber",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "registrationNumber": {
      "name": "registrationNumber",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "startDate": {
      "name": "startDate",
      "objectTypeName": "person",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDate": {
      "name": "endDate",
      "objectTypeName": "person",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "info": {
      "name": "info",
      "objectTypeName": "person",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "notAffectable": {
      "name": "notAffectable",
      "objectTypeName": "person",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "person",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "person",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "person",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanies": {
      "name": "userCompanies",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "personStateId": {
      "name": "personStateId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personStateId",
        "targetModelName": "personState",
        "propertyTypeName": "personState",
        "options": {
          "readOnly": false
        }
      }
    },
    "personState": {
      "name": "personState",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personStateId",
        "targetModelName": "personState",
        "propertyTypeName": "personState",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSecurityProfileId": {
      "name": "personSecurityProfileId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personSecurityProfileId",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfile",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSecurityProfile": {
      "name": "personSecurityProfile",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSecurityProfileId",
        "targetModelName": "personSecurityProfile",
        "propertyTypeName": "personSecurityProfile",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personGenderId": {
      "name": "personGenderId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personGenderId",
        "targetModelName": "personGender",
        "propertyTypeName": "personGender",
        "options": {
          "readOnly": false
        }
      }
    },
    "personGender": {
      "name": "personGender",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personGenderId",
        "targetModelName": "personGender",
        "propertyTypeName": "personGender",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPersonSources": {
      "name": "personToPersonSources",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSourceId",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonSources",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToPersonTargets": {
      "name": "personToPersonTargets",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personTargetId",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPersonTargets",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomAffectations": {
      "name": "roomAffectations",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "roomAffectation",
        "propertyTypeName": "roomAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceAffectations": {
      "name": "workplaceAffectations",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemToPeople": {
      "name": "itemToPeople",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToBuildings": {
      "name": "personToBuildings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToBuilding",
        "propertyTypeName": "personToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionToPeople": {
      "name": "dimensionToPeople",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "dimensionToPerson",
        "propertyTypeName": "dimensionToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocations": {
      "name": "personWorkingLocations",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocations",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToWorkplaceBookings": {
      "name": "personToWorkplaceBookings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToRoomBookings": {
      "name": "personToRoomBookings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToDimensionBookings": {
      "name": "personToDimensionBookings",
      "objectTypeName": "person",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "person",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "person",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "people",
  "camelized": {
    "singular": "person",
    "plural": "people",
    "id": "personId"
  },
  "capitalized": {
    "singular": "Person",
    "plural": "People",
    "id": "PersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userCompany",
      "personToPerson",
      "roomAffectation",
      "workplaceAffectation",
      "itemToPerson",
      "personToBuilding",
      "dimensionToPerson",
      "personWorkingLocation",
      "personToWorkplaceBooking",
      "personToRoomBooking",
      "personToDimensionBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const personToPersonTypeObjectTypeDefintion = {
  "name": "personToPersonType",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToPersonType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "labelForward": {
      "name": "labelForward",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "labelBackward": {
      "name": "labelBackward",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToPersonType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToPersonType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToPersonType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToPersonType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToPersonType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToPersonType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToPersonType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToPeople": {
      "name": "personToPeople",
      "objectTypeName": "personToPersonType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personToPersonTypeId",
        "targetModelName": "personToPerson",
        "propertyTypeName": "personToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToPersonType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToPersonType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToPersonTypes",
  "camelized": {
    "singular": "personToPersonType",
    "plural": "personToPersonTypes",
    "id": "personToPersonTypeId"
  },
  "capitalized": {
    "singular": "PersonToPersonType",
    "plural": "PersonToPersonTypes",
    "id": "PersonToPersonTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personToPerson"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const personToPersonObjectTypeDefintion = {
  "name": "personToPerson",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToPerson",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToPerson",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personToPersonTypeId": {
      "name": "personToPersonTypeId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personToPersonTypeId",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToPersonType": {
      "name": "personToPersonType",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personToPersonTypeId",
        "targetModelName": "personToPersonType",
        "propertyTypeName": "personToPersonType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSourceId": {
      "name": "personSourceId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personSourceId",
        "targetModelName": "person",
        "propertyTypeName": "personSource",
        "options": {
          "readOnly": false
        }
      }
    },
    "personSource": {
      "name": "personSource",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personSourceId",
        "targetModelName": "person",
        "propertyTypeName": "personSource",
        "options": {
          "readOnly": false
        }
      }
    },
    "personTargetId": {
      "name": "personTargetId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personTargetId",
        "targetModelName": "person",
        "propertyTypeName": "personTarget",
        "options": {
          "readOnly": false
        }
      }
    },
    "personTarget": {
      "name": "personTarget",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personTargetId",
        "targetModelName": "person",
        "propertyTypeName": "personTarget",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToPeople",
  "camelized": {
    "singular": "personToPerson",
    "plural": "personToPeople",
    "id": "personToPersonId"
  },
  "capitalized": {
    "singular": "PersonToPerson",
    "plural": "PersonToPeople",
    "id": "PersonToPersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomAffectationObjectTypeDefintion = {
  "name": "roomAffectation",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomAffectation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomAffectation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomAffectations",
  "camelized": {
    "singular": "roomAffectation",
    "plural": "roomAffectations",
    "id": "roomAffectationId"
  },
  "capitalized": {
    "singular": "RoomAffectation",
    "plural": "RoomAffectations",
    "id": "RoomAffectationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const workplaceTypeObjectTypeDefintion = {
  "name": "workplaceType",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplaceType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "workplaceType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "zIndex": {
      "name": "zIndex",
      "objectTypeName": "workplaceType",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "color": {
      "name": "color",
      "objectTypeName": "workplaceType",
      "type": "color",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "#FFFFFF"
      }
    },
    "center": {
      "name": "center",
      "objectTypeName": "workplaceType",
      "type": "point3d",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "size": {
      "name": "size",
      "objectTypeName": "workplaceType",
      "type": "size",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplaceType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplaceType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplaceType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplaceType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplaceType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplaceType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplaceType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "workplaceTypeItemTypes": {
      "name": "workplaceTypeItemTypes",
      "objectTypeName": "workplaceType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceTypeItemType",
        "propertyTypeName": "workplaceTypeItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaces": {
      "name": "workplaces",
      "objectTypeName": "workplaceType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplaces",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplaceType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplaceType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaceTypes",
  "camelized": {
    "singular": "workplaceType",
    "plural": "workplaceTypes",
    "id": "workplaceTypeId"
  },
  "capitalized": {
    "singular": "WorkplaceType",
    "plural": "WorkplaceTypes",
    "id": "WorkplaceTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "workplaceTypeItemType",
      "workplace"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const workplaceTypeItemTypeObjectTypeDefintion = {
  "name": "workplaceTypeItemType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplaceTypeItemType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "position": {
      "name": "position",
      "objectTypeName": "workplaceTypeItemType",
      "type": "point3d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "physicalInventory": {
      "name": "physicalInventory",
      "objectTypeName": "workplaceTypeItemType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "workplaceTypeItemType",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "zIndex": {
      "name": "zIndex",
      "objectTypeName": "workplaceTypeItemType",
      "type": "integer",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "workplaceTypeItemType",
      "type": "integer-count",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplaceTypeItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplaceTypeItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "workplaceTypeId": {
      "name": "workplaceTypeId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceType": {
      "name": "workplaceType",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplaceTypeItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplaceTypeItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaceTypeItemTypes",
  "camelized": {
    "singular": "workplaceTypeItemType",
    "plural": "workplaceTypeItemTypes",
    "id": "workplaceTypeItemTypeId"
  },
  "capitalized": {
    "singular": "WorkplaceTypeItemType",
    "plural": "WorkplaceTypeItemTypes",
    "id": "WorkplaceTypeItemTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const workplaceObjectTypeDefintion = {
  "name": "workplace",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplace",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "position": {
      "name": "position",
      "objectTypeName": "workplace",
      "type": "point3d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": {
          "x": 0,
          "y": 0,
          "z": 0
        }
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "workplace",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "isFlex": {
      "name": "isFlex",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "isTransit": {
      "name": "isTransit",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "isShared": {
      "name": "isShared",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "textAnchor": {
      "name": "textAnchor",
      "objectTypeName": "workplace",
      "type": "textAnchor",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "workplace",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "workplaceAffectationsCalculatedRateSum": {
      "name": "workplaceAffectationsCalculatedRateSum",
      "objectTypeName": "workplace",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplaceAffectationsCount": {
      "name": "workplaceAffectationsCount",
      "objectTypeName": "workplace",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "comment": {
      "name": "comment",
      "objectTypeName": "workplace",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isBookable": {
      "name": "isBookable",
      "objectTypeName": "workplace",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplace",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplace",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplace",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "workplaceTypeId": {
      "name": "workplaceTypeId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceType": {
      "name": "workplaceType",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceTypeId",
        "targetModelName": "workplaceType",
        "propertyTypeName": "workplaceType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenterId": {
      "name": "costCenterId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "costCenter": {
      "name": "costCenter",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "costCenterId",
        "targetModelName": "costCenter",
        "propertyTypeName": "costCenter",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "items": {
      "name": "items",
      "objectTypeName": "workplace",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "item",
        "propertyTypeName": "items",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceAffectations": {
      "name": "workplaceAffectations",
      "objectTypeName": "workplace",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplaceAffectation",
        "propertyTypeName": "workplaceAffectations",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToWorkplaceBookings": {
      "name": "personToWorkplaceBookings",
      "objectTypeName": "workplace",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplace",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplace",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaces",
  "camelized": {
    "singular": "workplace",
    "plural": "workplaces",
    "id": "workplaceId"
  },
  "capitalized": {
    "singular": "Workplace",
    "plural": "Workplaces",
    "id": "WorkplaceId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "item",
      "workplaceAffectation",
      "personToWorkplaceBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const itemObjectTypeDefintion = {
  "name": "item",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "item",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "item",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "reference": {
      "name": "reference",
      "objectTypeName": "item",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "purchaseDate": {
      "name": "purchaseDate",
      "objectTypeName": "item",
      "type": "date",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "position": {
      "name": "position",
      "objectTypeName": "item",
      "type": "point3d",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "rotation": {
      "name": "rotation",
      "objectTypeName": "item",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "textAnchor": {
      "name": "textAnchor",
      "objectTypeName": "item",
      "type": "textAnchor",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": false
      }
    },
    "price": {
      "name": "price",
      "objectTypeName": "item",
      "type": "currency",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "itemAffectationsCount": {
      "name": "itemAffectationsCount",
      "objectTypeName": "item",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "item",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "item",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "item",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceId": {
      "name": "workplaceId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplace": {
      "name": "workplace",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "itemToPeople": {
      "name": "itemToPeople",
      "objectTypeName": "item",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "itemToPerson",
        "propertyTypeName": "itemToPeople",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToItems": {
      "name": "personCompanyToItems",
      "objectTypeName": "item",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "personCompanyToItem",
        "propertyTypeName": "personCompanyToItems",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemFacts": {
      "name": "itemFacts",
      "objectTypeName": "item",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "itemFact",
        "propertyTypeName": "itemFacts",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "item",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "item",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "items",
  "camelized": {
    "singular": "item",
    "plural": "items",
    "id": "itemId"
  },
  "capitalized": {
    "singular": "Item",
    "plural": "Items",
    "id": "ItemId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "itemToPerson",
      "personCompanyToItem",
      "itemFact"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const workplaceAffectationObjectTypeDefintion = {
  "name": "workplaceAffectation",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workplaceAffectation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "rate": {
      "name": "rate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "calculatedRate": {
      "name": "calculatedRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 1
      }
    },
    "mondayRate": {
      "name": "mondayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "tuesdayRate": {
      "name": "tuesdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "wednesdayRate": {
      "name": "wednesdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "thursdayRate": {
      "name": "thursdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "fridayRate": {
      "name": "fridayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 1
      }
    },
    "saturdayRate": {
      "name": "saturdayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sundayRate": {
      "name": "sundayRate",
      "objectTypeName": "workplaceAffectation",
      "type": "percentage0-1",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workplaceAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workplaceAffectation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workplaceAffectation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceId": {
      "name": "workplaceId",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplace": {
      "name": "workplace",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "workplaceAffectation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "workplaceAffectation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "workplaceAffectations",
  "camelized": {
    "singular": "workplaceAffectation",
    "plural": "workplaceAffectations",
    "id": "workplaceAffectationId"
  },
  "capitalized": {
    "singular": "WorkplaceAffectation",
    "plural": "WorkplaceAffectations",
    "id": "WorkplaceAffectationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const organizationFloorObjectTypeDefintion = {
  "name": "organizationFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "organizationFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "organizationFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "organizationFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "organizationFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "organizationFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "organizationFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "organizationFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "organizationFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "organizationFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "organizationFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "organizationFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "organizationFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "organizationFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "organizationFloors",
  "camelized": {
    "singular": "organizationFloor",
    "plural": "organizationFloors",
    "id": "organizationFloorId"
  },
  "capitalized": {
    "singular": "OrganizationFloor",
    "plural": "OrganizationFloors",
    "id": "OrganizationFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const organizationBuildingObjectTypeDefintion = {
  "name": "organizationBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "organizationBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "organizationBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "organizationBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "organizationBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "organizationBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "organizationBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "organizationBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "organizationBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "organizationBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "organizationBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "organizationBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "organizationId": {
      "name": "organizationId",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "organization": {
      "name": "organization",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "organizationId",
        "targetModelName": "organization",
        "propertyTypeName": "organization",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "organizationBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "organizationBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "organizationBuildings",
  "camelized": {
    "singular": "organizationBuilding",
    "plural": "organizationBuildings",
    "id": "organizationBuildingId"
  },
  "capitalized": {
    "singular": "OrganizationBuilding",
    "plural": "OrganizationBuildings",
    "id": "OrganizationBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomTypeFloorObjectTypeDefintion = {
  "name": "roomTypeFloor",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeFloor",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeFloor",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeFloor",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeFloor",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeFloors",
  "camelized": {
    "singular": "roomTypeFloor",
    "plural": "roomTypeFloors",
    "id": "roomTypeFloorId"
  },
  "capitalized": {
    "singular": "RoomTypeFloor",
    "plural": "RoomTypeFloors",
    "id": "RoomTypeFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const roomTypeBuildingObjectTypeDefintion = {
  "name": "roomTypeBuilding",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": true,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "roomTypeBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomsArea": {
      "name": "roomsArea",
      "objectTypeName": "roomTypeBuilding",
      "type": "surface",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "roomsCount": {
      "name": "roomsCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesCount": {
      "name": "workplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "workplacesRatio": {
      "name": "workplacesRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "surface-by-workplace",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleCount": {
      "name": "peopleCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsCount": {
      "name": "seatsCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "peopleRatio": {
      "name": "peopleRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "surface-by-people",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "occupancyRate": {
      "name": "occupancyRate",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "expansionRatio": {
      "name": "expansionRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "freeWorkplacesCount": {
      "name": "freeWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexWorkplacesCount": {
      "name": "flexWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesCount": {
      "name": "sharedWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "sharedWorkplacesRatio": {
      "name": "sharedWorkplacesRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "transitWorkplacesCount": {
      "name": "transitWorkplacesCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "flexRatio": {
      "name": "flexRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "seatsPeopleRatio": {
      "name": "seatsPeopleRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalPeopleCount": {
      "name": "totalPeopleCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "carbonFootprint": {
      "name": "carbonFootprint",
      "objectTypeName": "roomTypeBuilding",
      "type": "weight",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "unit": {
          "type": "weight",
          "value": "kilogram"
        },
        "defaultValue": 0
      }
    },
    "totalCapacityCount": {
      "name": "totalCapacityCount",
      "objectTypeName": "roomTypeBuilding",
      "type": "integer-count",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "totalCapacityWorkplaceCountRatio": {
      "name": "totalCapacityWorkplaceCountRatio",
      "objectTypeName": "roomTypeBuilding",
      "type": "percentage0-1",
      "options": {
        "mandatory": true,
        "readOnly": true,
        "calculated": true,
        "technical": false,
        "defaultValue": 0
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "roomTypeBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "roomTypeBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "roomTypeBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "roomTypeBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "roomTypeBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "roomTypeBuildings",
  "camelized": {
    "singular": "roomTypeBuilding",
    "plural": "roomTypeBuildings",
    "id": "roomTypeBuildingId"
  },
  "capitalized": {
    "singular": "RoomTypeBuilding",
    "plural": "RoomTypeBuildings",
    "id": "RoomTypeBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const itemToPersonObjectTypeDefintion = {
  "name": "itemToPerson",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemToPerson",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemToPerson",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemId": {
      "name": "itemId",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "item": {
      "name": "item",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemToPeople",
  "camelized": {
    "singular": "itemToPerson",
    "plural": "itemToPeople",
    "id": "itemToPersonId"
  },
  "capitalized": {
    "singular": "ItemToPerson",
    "plural": "ItemToPeople",
    "id": "ItemToPersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personToBuildingObjectTypeDefintion = {
  "name": "personToBuilding",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "addToPeopleCount": {
      "name": "addToPeopleCount",
      "objectTypeName": "personToBuilding",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToBuildings",
  "camelized": {
    "singular": "personToBuilding",
    "plural": "personToBuildings",
    "id": "personToBuildingId"
  },
  "capitalized": {
    "singular": "PersonToBuilding",
    "plural": "PersonToBuildings",
    "id": "PersonToBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionToPersonObjectTypeDefintion = {
  "name": "dimensionToPerson",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionToPerson",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionToPerson",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionToPerson",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionToPerson",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionToPerson",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionToPeople",
  "camelized": {
    "singular": "dimensionToPerson",
    "plural": "dimensionToPeople",
    "id": "dimensionToPersonId"
  },
  "capitalized": {
    "singular": "DimensionToPerson",
    "plural": "DimensionToPeople",
    "id": "DimensionToPersonId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const dimensionTypeToBuildingObjectTypeDefintion = {
  "name": "dimensionTypeToBuilding",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "dimensionTypeId": {
      "name": "dimensionTypeId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionType": {
      "name": "dimensionType",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionTypeId",
        "targetModelName": "dimensionType",
        "propertyTypeName": "dimensionType",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "dimensionTypeToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "dimensionTypeToBuildings",
  "camelized": {
    "singular": "dimensionTypeToBuilding",
    "plural": "dimensionTypeToBuildings",
    "id": "dimensionTypeToBuildingId"
  },
  "capitalized": {
    "singular": "DimensionTypeToBuilding",
    "plural": "DimensionTypeToBuildings",
    "id": "DimensionTypeToBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const workingLocationObjectTypeDefintion = {
  "name": "workingLocation",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "workingLocation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "workingLocation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "workingLocation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "workingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "workingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "workingLocation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personWorkingLocations": {
      "name": "personWorkingLocations",
      "objectTypeName": "workingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocations",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "workingLocations",
  "camelized": {
    "singular": "workingLocation",
    "plural": "workingLocations",
    "id": "workingLocationId"
  },
  "capitalized": {
    "singular": "WorkingLocation",
    "plural": "WorkingLocations",
    "id": "WorkingLocationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personWorkingLocation"
    ],
    "belongsTo": []
  }
};
const personWorkingLocationObjectTypeDefintion = {
  "name": "personWorkingLocation",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personWorkingLocation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "date": {
      "name": "date",
      "objectTypeName": "personWorkingLocation",
      "type": "date",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "daySlotType": {
      "name": "daySlotType",
      "objectTypeName": "personWorkingLocation",
      "type": "day-slot",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": null
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personWorkingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personWorkingLocation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personWorkingLocation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "workingLocationId": {
      "name": "workingLocationId",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workingLocationId",
        "targetModelName": "workingLocation",
        "propertyTypeName": "workingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "workingLocation": {
      "name": "workingLocation",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workingLocationId",
        "targetModelName": "workingLocation",
        "propertyTypeName": "workingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "personToWorkplaceBookings": {
      "name": "personToWorkplaceBookings",
      "objectTypeName": "personWorkingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personToWorkplaceBooking",
        "propertyTypeName": "personToWorkplaceBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToRoomBookings": {
      "name": "personToRoomBookings",
      "objectTypeName": "personWorkingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personToRoomBooking",
        "propertyTypeName": "personToRoomBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "personToDimensionBookings": {
      "name": "personToDimensionBookings",
      "objectTypeName": "personWorkingLocation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personToDimensionBooking",
        "propertyTypeName": "personToDimensionBookings",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personWorkingLocation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personWorkingLocation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personWorkingLocations",
  "camelized": {
    "singular": "personWorkingLocation",
    "plural": "personWorkingLocations",
    "id": "personWorkingLocationId"
  },
  "capitalized": {
    "singular": "PersonWorkingLocation",
    "plural": "PersonWorkingLocations",
    "id": "PersonWorkingLocationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personToWorkplaceBooking",
      "personToRoomBooking",
      "personToDimensionBooking"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const personToWorkplaceBookingObjectTypeDefintion = {
  "name": "personToWorkplaceBooking",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "startDatetime": {
      "name": "startDatetime",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDatetime": {
      "name": "endDatetime",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplaceId": {
      "name": "workplaceId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "workplace": {
      "name": "workplace",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "workplaceId",
        "targetModelName": "workplace",
        "propertyTypeName": "workplace",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocationId": {
      "name": "personWorkingLocationId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocation": {
      "name": "personWorkingLocation",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToWorkplaceBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToWorkplaceBookings",
  "camelized": {
    "singular": "personToWorkplaceBooking",
    "plural": "personToWorkplaceBookings",
    "id": "personToWorkplaceBookingId"
  },
  "capitalized": {
    "singular": "PersonToWorkplaceBooking",
    "plural": "PersonToWorkplaceBookings",
    "id": "PersonToWorkplaceBookingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personToRoomBookingObjectTypeDefintion = {
  "name": "personToRoomBooking",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToRoomBooking",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "startDatetime": {
      "name": "startDatetime",
      "objectTypeName": "personToRoomBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDatetime": {
      "name": "endDatetime",
      "objectTypeName": "personToRoomBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToRoomBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToRoomBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToRoomBooking",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomId": {
      "name": "roomId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "room": {
      "name": "room",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomId",
        "targetModelName": "room",
        "propertyTypeName": "room",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocationId": {
      "name": "personWorkingLocationId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocation": {
      "name": "personWorkingLocation",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToRoomBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToRoomBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToRoomBookings",
  "camelized": {
    "singular": "personToRoomBooking",
    "plural": "personToRoomBookings",
    "id": "personToRoomBookingId"
  },
  "capitalized": {
    "singular": "PersonToRoomBooking",
    "plural": "PersonToRoomBookings",
    "id": "PersonToRoomBookingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personToDimensionBookingObjectTypeDefintion = {
  "name": "personToDimensionBooking",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personToDimensionBooking",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "startDatetime": {
      "name": "startDatetime",
      "objectTypeName": "personToDimensionBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "endDatetime": {
      "name": "endDatetime",
      "objectTypeName": "personToDimensionBooking",
      "type": "datetime",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personToDimensionBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personToDimensionBooking",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personToDimensionBooking",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personId": {
      "name": "personId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "person": {
      "name": "person",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personId",
        "targetModelName": "person",
        "propertyTypeName": "person",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimensionId": {
      "name": "dimensionId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "dimension": {
      "name": "dimension",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "dimensionId",
        "targetModelName": "dimension",
        "propertyTypeName": "dimension",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocationId": {
      "name": "personWorkingLocationId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "personWorkingLocation": {
      "name": "personWorkingLocation",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personWorkingLocationId",
        "targetModelName": "personWorkingLocation",
        "propertyTypeName": "personWorkingLocation",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personToDimensionBooking",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personToDimensionBooking",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personToDimensionBookings",
  "camelized": {
    "singular": "personToDimensionBooking",
    "plural": "personToDimensionBookings",
    "id": "personToDimensionBookingId"
  },
  "capitalized": {
    "singular": "PersonToDimensionBooking",
    "plural": "PersonToDimensionBookings",
    "id": "PersonToDimensionBookingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personCompanyMissionObjectTypeDefintion = {
  "name": "personCompanyMission",
  "type": "table",
  "scope": "public",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyMission",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "personCompanyMission",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyMission",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyMission",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyMission",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyToItemTypes": {
      "name": "personCompanyToItemTypes",
      "objectTypeName": "personCompanyMission",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyToItemType",
        "propertyTypeName": "personCompanyToItemTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyToRoomTypes": {
      "name": "personCompanyToRoomTypes",
      "objectTypeName": "personCompanyMission",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyToRoomType",
        "propertyTypeName": "personCompanyToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "personCompanyMissions",
  "camelized": {
    "singular": "personCompanyMission",
    "plural": "personCompanyMissions",
    "id": "personCompanyMissionId"
  },
  "capitalized": {
    "singular": "PersonCompanyMission",
    "plural": "PersonCompanyMissions",
    "id": "PersonCompanyMissionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "personCompanyToItemType",
      "personCompanyToRoomType"
    ],
    "belongsTo": []
  }
};
const personCompanyToItemTypeObjectTypeDefintion = {
  "name": "personCompanyToItemType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyToItemType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyToItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyToItemType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyToItemType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemTypeId": {
      "name": "itemTypeId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemType": {
      "name": "itemType",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemTypeId",
        "targetModelName": "itemType",
        "propertyTypeName": "itemType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMissionId": {
      "name": "personCompanyMissionId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMission": {
      "name": "personCompanyMission",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompanyToItemType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompanyToItemType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanyToItemTypes",
  "camelized": {
    "singular": "personCompanyToItemType",
    "plural": "personCompanyToItemTypes",
    "id": "personCompanyToItemTypeId"
  },
  "capitalized": {
    "singular": "PersonCompanyToItemType",
    "plural": "PersonCompanyToItemTypes",
    "id": "PersonCompanyToItemTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personCompanyToRoomTypeObjectTypeDefintion = {
  "name": "personCompanyToRoomType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyToRoomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMissionId": {
      "name": "personCompanyMissionId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompanyMission": {
      "name": "personCompanyMission",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyMissionId",
        "targetModelName": "personCompanyMission",
        "propertyTypeName": "personCompanyMission",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompanyToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompanyToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanyToRoomTypes",
  "camelized": {
    "singular": "personCompanyToRoomType",
    "plural": "personCompanyToRoomTypes",
    "id": "personCompanyToRoomTypeId"
  },
  "capitalized": {
    "singular": "PersonCompanyToRoomType",
    "plural": "PersonCompanyToRoomTypes",
    "id": "PersonCompanyToRoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const personCompanyToItemObjectTypeDefintion = {
  "name": "personCompanyToItem",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "personCompanyToItem",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "datetime": {
      "name": "datetime",
      "objectTypeName": "personCompanyToItem",
      "type": "datetime",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "comment": {
      "name": "comment",
      "objectTypeName": "personCompanyToItem",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "personCompanyToItem",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "personCompanyToItem",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "personCompanyToItem",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "personCompanyId": {
      "name": "personCompanyId",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "personCompany": {
      "name": "personCompany",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "personCompanyId",
        "targetModelName": "personCompany",
        "propertyTypeName": "personCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "itemId": {
      "name": "itemId",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "item": {
      "name": "item",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "personCompanyToItem",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "personCompanyToItem",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "personCompanyToItems",
  "camelized": {
    "singular": "personCompanyToItem",
    "plural": "personCompanyToItems",
    "id": "personCompanyToItemId"
  },
  "capitalized": {
    "singular": "PersonCompanyToItem",
    "plural": "PersonCompanyToItems",
    "id": "PersonCompanyToItemId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const legendObjectTypeDefintion = {
  "name": "legend",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "legend",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "legend",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "configuration": {
      "name": "configuration",
      "objectTypeName": "legend",
      "type": "legend-configuration",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "legend",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "legend",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "legend",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "legend",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "legend",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "legend",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "legend",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "legend",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "legend",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "legends",
  "camelized": {
    "singular": "legend",
    "plural": "legends",
    "id": "legendId"
  },
  "capitalized": {
    "singular": "Legend",
    "plural": "Legends",
    "id": "LegendId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const openerPostMessageHostObjectTypeDefintion = {
  "name": "openerPostMessageHost",
  "type": "table",
  "scope": "private",
  "isMasterData": true,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "openerPostMessageHost",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "host": {
      "name": "host",
      "objectTypeName": "openerPostMessageHost",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "description": {
      "name": "description",
      "objectTypeName": "openerPostMessageHost",
      "type": "text",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "openerPostMessageHost",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "openerPostMessageHost",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "openerPostMessageHost",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "openerPostMessageHost",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "openerPostMessageHost",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "openerPostMessageHost",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "openerPostMessageHost",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "openerPostMessageHost",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "openerPostMessageHost",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "openerPostMessageHosts",
  "camelized": {
    "singular": "openerPostMessageHost",
    "plural": "openerPostMessageHosts",
    "id": "openerPostMessageHostId"
  },
  "capitalized": {
    "singular": "OpenerPostMessageHost",
    "plural": "OpenerPostMessageHosts",
    "id": "OpenerPostMessageHostId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const jupObjectTypeObjectTypeDefintion = {
  "name": "jupObjectType",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupObjectType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupObjectType",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupObjectType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiViews": {
      "name": "jupUiViews",
      "objectTypeName": "jupObjectType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupUiView",
        "propertyTypeName": "jupUiViews",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupObjectTypes": {
      "name": "jupRoleToJupObjectTypes",
      "objectTypeName": "jupObjectType",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupRoleToJupObjectType",
        "propertyTypeName": "jupRoleToJupObjectTypes",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupObjectTypes",
  "camelized": {
    "singular": "jupObjectType",
    "plural": "jupObjectTypes",
    "id": "jupObjectTypeId"
  },
  "capitalized": {
    "singular": "JupObjectType",
    "plural": "JupObjectTypes",
    "id": "JupObjectTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupUiView",
      "jupRoleToJupObjectType"
    ],
    "belongsTo": []
  }
};
const jupUiViewObjectTypeDefintion = {
  "name": "jupUiView",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiView",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiView",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "isDefaultView": {
      "name": "isDefaultView",
      "objectTypeName": "jupUiView",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": "false"
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiView",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupObjectTypeId": {
      "name": "jupObjectTypeId",
      "objectTypeName": "jupUiView",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupObjectType": {
      "name": "jupObjectType",
      "objectTypeName": "jupUiView",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiViews": {
      "name": "jupRoleToJupUiViews",
      "objectTypeName": "jupUiView",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiViewId",
        "targetModelName": "jupRoleToJupUiView",
        "propertyTypeName": "jupRoleToJupUiViews",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiViews",
  "camelized": {
    "singular": "jupUiView",
    "plural": "jupUiViews",
    "id": "jupUiViewId"
  },
  "capitalized": {
    "singular": "JupUiView",
    "plural": "JupUiViews",
    "id": "JupUiViewId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupRoleToJupUiView"
    ],
    "belongsTo": []
  }
};
const jupRoleObjectTypeDefintion = {
  "name": "jupRole",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "jupRole",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUserCompanyToJupRoles": {
      "name": "jupUserCompanyToJupRoles",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupUserCompanyToJupRole",
        "propertyTypeName": "jupUserCompanyToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiViews": {
      "name": "jupRoleToJupUiViews",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiView",
        "propertyTypeName": "jupRoleToJupUiViews",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupObjectTypes": {
      "name": "jupRoleToJupObjectTypes",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupObjectType",
        "propertyTypeName": "jupRoleToJupObjectTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiOptions": {
      "name": "jupRoleToJupUiOptions",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiOption",
        "propertyTypeName": "jupRoleToJupUiOptions",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiOperations": {
      "name": "jupRoleToJupUiOperations",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiOperation",
        "propertyTypeName": "jupRoleToJupUiOperations",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUserToJupRoles": {
      "name": "apiUserToJupRoles",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRuleToJupRoles": {
      "name": "userRegistrationTenantRuleToJupRoles",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleToJupUiLayouts": {
      "name": "jupRoleToJupUiLayouts",
      "objectTypeName": "jupRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRoleToJupUiLayout",
        "propertyTypeName": "jupRoleToJupUiLayouts",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoles",
  "camelized": {
    "singular": "jupRole",
    "plural": "jupRoles",
    "id": "jupRoleId"
  },
  "capitalized": {
    "singular": "JupRole",
    "plural": "JupRoles",
    "id": "JupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupUserCompanyToJupRole",
      "jupRoleToJupUiView",
      "jupRoleToJupObjectType",
      "jupRoleToJupUiOption",
      "jupRoleToJupUiOperation",
      "apiUserToJupRole",
      "userRegistrationTenantRuleToJupRole",
      "jupRoleToJupUiLayout"
    ],
    "belongsTo": []
  }
};
const jupUiOptionObjectTypeDefintion = {
  "name": "jupUiOption",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiOption",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiOption",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "scope": {
      "name": "scope",
      "objectTypeName": "jupUiOption",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiOption",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupRoleToJupUiOptions": {
      "name": "jupRoleToJupUiOptions",
      "objectTypeName": "jupUiOption",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOptionId",
        "targetModelName": "jupRoleToJupUiOption",
        "propertyTypeName": "jupRoleToJupUiOptions",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiOptions",
  "camelized": {
    "singular": "jupUiOption",
    "plural": "jupUiOptions",
    "id": "jupUiOptionId"
  },
  "capitalized": {
    "singular": "JupUiOption",
    "plural": "JupUiOptions",
    "id": "JupUiOptionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupRoleToJupUiOption"
    ],
    "belongsTo": []
  }
};
const jupUiOperationObjectTypeDefintion = {
  "name": "jupUiOperation",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiOperation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupRoleToJupUiOperations": {
      "name": "jupRoleToJupUiOperations",
      "objectTypeName": "jupUiOperation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOperationId",
        "targetModelName": "jupRoleToJupUiOperation",
        "propertyTypeName": "jupRoleToJupUiOperations",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupUiOperations",
  "camelized": {
    "singular": "jupUiOperation",
    "plural": "jupUiOperations",
    "id": "jupUiOperationId"
  },
  "capitalized": {
    "singular": "JupUiOperation",
    "plural": "JupUiOperations",
    "id": "JupUiOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "jupRoleToJupUiOperation"
    ],
    "belongsTo": []
  }
};
const contentRoleObjectTypeDefintion = {
  "name": "contentRole",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "contentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToBuildings": {
      "name": "contentRoleToBuildings",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToBuilding",
        "propertyTypeName": "contentRoleToBuildings",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToUserCompanies": {
      "name": "contentRoleToUserCompanies",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToUserCompany",
        "propertyTypeName": "contentRoleToUserCompanies",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToFloors": {
      "name": "contentRoleToFloors",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToFloor",
        "propertyTypeName": "contentRoleToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUserToContentRoles": {
      "name": "apiUserToContentRoles",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleToJupUiTenantOperations": {
      "name": "contentRoleToJupUiTenantOperations",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperations",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRuleToContentRoles": {
      "name": "userRegistrationTenantRuleToContentRoles",
      "objectTypeName": "contentRole",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoles",
  "camelized": {
    "singular": "contentRole",
    "plural": "contentRoles",
    "id": "contentRoleId"
  },
  "capitalized": {
    "singular": "ContentRole",
    "plural": "ContentRoles",
    "id": "ContentRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "contentRoleToBuilding",
      "contentRoleToUserCompany",
      "contentRoleToFloor",
      "apiUserToContentRole",
      "contentRoleToJupUiTenantOperation",
      "userRegistrationTenantRuleToContentRole"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const jupUserCompanyToJupRoleObjectTypeDefintion = {
  "name": "jupUserCompanyToJupRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyId": {
      "name": "userCompanyId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompany": {
      "name": "userCompany",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "jupUserCompanyToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "jupUserCompanyToJupRoles",
  "camelized": {
    "singular": "jupUserCompanyToJupRole",
    "plural": "jupUserCompanyToJupRoles",
    "id": "jupUserCompanyToJupRoleId"
  },
  "capitalized": {
    "singular": "JupUserCompanyToJupRole",
    "plural": "JupUserCompanyToJupRoles",
    "id": "JupUserCompanyToJupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const jupRoleToJupUiViewObjectTypeDefintion = {
  "name": "jupRoleToJupUiView",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiViewId": {
      "name": "jupUiViewId",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiViewId",
        "targetModelName": "jupUiView",
        "propertyTypeName": "jupUiView",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiView": {
      "name": "jupUiView",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiViewId",
        "targetModelName": "jupUiView",
        "propertyTypeName": "jupUiView",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiView",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiViews",
  "camelized": {
    "singular": "jupRoleToJupUiView",
    "plural": "jupRoleToJupUiViews",
    "id": "jupRoleToJupUiViewId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiView",
    "plural": "JupRoleToJupUiViews",
    "id": "JupRoleToJupUiViewId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};
const jupRoleToJupObjectTypeObjectTypeDefintion = {
  "name": "jupRoleToJupObjectType",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "arCreate": {
      "name": "arCreate",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "arRead": {
      "name": "arRead",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "arUpdate": {
      "name": "arUpdate",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "arDelete": {
      "name": "arDelete",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupObjectTypeId": {
      "name": "jupObjectTypeId",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupObjectType": {
      "name": "jupObjectType",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupObjectTypeId",
        "targetModelName": "jupObjectType",
        "propertyTypeName": "jupObjectType",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupObjectType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupObjectTypes",
  "camelized": {
    "singular": "jupRoleToJupObjectType",
    "plural": "jupRoleToJupObjectTypes",
    "id": "jupRoleToJupObjectTypeId"
  },
  "capitalized": {
    "singular": "JupRoleToJupObjectType",
    "plural": "JupRoleToJupObjectTypes",
    "id": "JupRoleToJupObjectTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};
const jupRoleToJupUiOptionObjectTypeDefintion = {
  "name": "jupRoleToJupUiOption",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiOptionId": {
      "name": "jupUiOptionId",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiOptionId",
        "targetModelName": "jupUiOption",
        "propertyTypeName": "jupUiOption",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiOption": {
      "name": "jupUiOption",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOptionId",
        "targetModelName": "jupUiOption",
        "propertyTypeName": "jupUiOption",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiOption",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiOptions",
  "camelized": {
    "singular": "jupRoleToJupUiOption",
    "plural": "jupRoleToJupUiOptions",
    "id": "jupRoleToJupUiOptionId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiOption",
    "plural": "JupRoleToJupUiOptions",
    "id": "JupRoleToJupUiOptionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};
const jupRoleToJupUiOperationObjectTypeDefintion = {
  "name": "jupRoleToJupUiOperation",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiOperationId": {
      "name": "jupUiOperationId",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiOperationId",
        "targetModelName": "jupUiOperation",
        "propertyTypeName": "jupUiOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiOperation": {
      "name": "jupUiOperation",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiOperationId",
        "targetModelName": "jupUiOperation",
        "propertyTypeName": "jupUiOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiOperations",
  "camelized": {
    "singular": "jupRoleToJupUiOperation",
    "plural": "jupRoleToJupUiOperations",
    "id": "jupRoleToJupUiOperationId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiOperation",
    "plural": "JupRoleToJupUiOperations",
    "id": "JupRoleToJupUiOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};
const contentRoleToBuildingObjectTypeDefintion = {
  "name": "contentRoleToBuilding",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToBuilding",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToBuilding",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "buildingId": {
      "name": "buildingId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "building": {
      "name": "building",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "buildingId",
        "targetModelName": "building",
        "propertyTypeName": "building",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToBuilding",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToBuilding",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToBuildings",
  "camelized": {
    "singular": "contentRoleToBuilding",
    "plural": "contentRoleToBuildings",
    "id": "contentRoleToBuildingId"
  },
  "capitalized": {
    "singular": "ContentRoleToBuilding",
    "plural": "ContentRoleToBuildings",
    "id": "ContentRoleToBuildingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const contentRoleToUserCompanyObjectTypeDefintion = {
  "name": "contentRoleToUserCompany",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyId": {
      "name": "userCompanyId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompany": {
      "name": "userCompany",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userCompanyId",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompany",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToUserCompany",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToUserCompanies",
  "camelized": {
    "singular": "contentRoleToUserCompany",
    "plural": "contentRoleToUserCompanies",
    "id": "contentRoleToUserCompanyId"
  },
  "capitalized": {
    "singular": "ContentRoleToUserCompany",
    "plural": "ContentRoleToUserCompanies",
    "id": "ContentRoleToUserCompanyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const contentRoleToFloorObjectTypeDefintion = {
  "name": "contentRoleToFloor",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToFloors",
  "camelized": {
    "singular": "contentRoleToFloor",
    "plural": "contentRoleToFloors",
    "id": "contentRoleToFloorId"
  },
  "capitalized": {
    "singular": "ContentRoleToFloor",
    "plural": "ContentRoleToFloors",
    "id": "ContentRoleToFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const partnerApiCredentialObjectTypeDefintion = {
  "name": "partnerApiCredential",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerApiCredential",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "label": {
      "name": "label",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "host": {
      "name": "host",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "clientId": {
      "name": "clientId",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "clientSecret": {
      "name": "clientSecret",
      "objectTypeName": "partnerApiCredential",
      "type": "password",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "enable": {
      "name": "enable",
      "objectTypeName": "partnerApiCredential",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerApiCredential",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerApiCredential",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerApiCredential",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerApiCredential",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerApiCredential",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerApiCredential",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerApiCredential",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerApiCredential",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerApiCredential",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerApiCredentials",
  "camelized": {
    "singular": "partnerApiCredential",
    "plural": "partnerApiCredentials",
    "id": "partnerApiCredentialId"
  },
  "capitalized": {
    "singular": "PartnerApiCredential",
    "plural": "PartnerApiCredentials",
    "id": "PartnerApiCredentialId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const apiUserObjectTypeDefintion = {
  "name": "apiUser",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "apiUser",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "clientSecret": {
      "name": "clientSecret",
      "objectTypeName": "apiUser",
      "type": "password",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "apiUser",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "apiUser",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "apiUser",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "apiUser",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "apiUser",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "apiUser",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "apiUser",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "apiUser",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "apiUserToJupRoles": {
      "name": "apiUserToJupRoles",
      "objectTypeName": "apiUser",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUserToJupRole",
        "propertyTypeName": "apiUserToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUserToContentRoles": {
      "name": "apiUserToContentRoles",
      "objectTypeName": "apiUser",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUserToContentRole",
        "propertyTypeName": "apiUserToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "apiUser",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "apiUser",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "apiUsers",
  "camelized": {
    "singular": "apiUser",
    "plural": "apiUsers",
    "id": "apiUserId"
  },
  "capitalized": {
    "singular": "ApiUser",
    "plural": "ApiUsers",
    "id": "ApiUserId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "apiUserToJupRole",
      "apiUserToContentRole"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const apiUserToJupRoleObjectTypeDefintion = {
  "name": "apiUserToJupRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "apiUserToJupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "apiUserToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "apiUserToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "apiUserToJupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "apiUserId": {
      "name": "apiUserId",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUser": {
      "name": "apiUser",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "apiUserToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "apiUserToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "apiUserToJupRoles",
  "camelized": {
    "singular": "apiUserToJupRole",
    "plural": "apiUserToJupRoles",
    "id": "apiUserToJupRoleId"
  },
  "capitalized": {
    "singular": "ApiUserToJupRole",
    "plural": "ApiUserToJupRoles",
    "id": "ApiUserToJupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const apiUserToContentRoleObjectTypeDefintion = {
  "name": "apiUserToContentRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "apiUserToContentRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "apiUserToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "apiUserToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "apiUserToContentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "apiUserId": {
      "name": "apiUserId",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "apiUser": {
      "name": "apiUser",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "apiUserId",
        "targetModelName": "apiUser",
        "propertyTypeName": "apiUser",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "apiUserToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "apiUserToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "apiUserToContentRoles",
  "camelized": {
    "singular": "apiUserToContentRole",
    "plural": "apiUserToContentRoles",
    "id": "apiUserToContentRoleId"
  },
  "capitalized": {
    "singular": "ApiUserToContentRole",
    "plural": "ApiUserToContentRoles",
    "id": "ApiUserToContentRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const jupUiTenantOperationObjectTypeDefintion = {
  "name": "jupUiTenantOperation",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupUiTenantOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "jupUiTenantOperation",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupUiTenantOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "jupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "jupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "jupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "jupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "contentRoleToJupUiTenantOperations": {
      "name": "contentRoleToJupUiTenantOperations",
      "objectTypeName": "jupUiTenantOperation",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiTenantOperationId",
        "targetModelName": "contentRoleToJupUiTenantOperation",
        "propertyTypeName": "contentRoleToJupUiTenantOperations",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "jupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "jupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "jupUiTenantOperations",
  "camelized": {
    "singular": "jupUiTenantOperation",
    "plural": "jupUiTenantOperations",
    "id": "jupUiTenantOperationId"
  },
  "capitalized": {
    "singular": "JupUiTenantOperation",
    "plural": "JupUiTenantOperations",
    "id": "JupUiTenantOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "contentRoleToJupUiTenantOperation"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const contentRoleToJupUiTenantOperationObjectTypeDefintion = {
  "name": "contentRoleToJupUiTenantOperation",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiTenantOperationId": {
      "name": "jupUiTenantOperationId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiTenantOperationId",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiTenantOperation": {
      "name": "jupUiTenantOperation",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiTenantOperationId",
        "targetModelName": "jupUiTenantOperation",
        "propertyTypeName": "jupUiTenantOperation",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "contentRoleToJupUiTenantOperation",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "contentRoleToJupUiTenantOperations",
  "camelized": {
    "singular": "contentRoleToJupUiTenantOperation",
    "plural": "contentRoleToJupUiTenantOperations",
    "id": "contentRoleToJupUiTenantOperationId"
  },
  "capitalized": {
    "singular": "ContentRoleToJupUiTenantOperation",
    "plural": "ContentRoleToJupUiTenantOperations",
    "id": "ContentRoleToJupUiTenantOperationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const authentificationConnectionObjectTypeDefintion = {
  "name": "authentificationConnection",
  "type": "table",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "authentificationConnection",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "authentificationConnection",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "authentificationConnection",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "authentificationConnection",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "authentificationConnection",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userRegistrationTenantRules": {
      "name": "userRegistrationTenantRules",
      "objectTypeName": "authentificationConnection",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "authentificationConnectionId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRules",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "authentificationConnections",
  "camelized": {
    "singular": "authentificationConnection",
    "plural": "authentificationConnections",
    "id": "authentificationConnectionId"
  },
  "capitalized": {
    "singular": "AuthentificationConnection",
    "plural": "AuthentificationConnections",
    "id": "AuthentificationConnectionId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userRegistrationTenantRule"
    ],
    "belongsTo": []
  }
};
const userRegistrationTenantRuleObjectTypeDefintion = {
  "name": "userRegistrationTenantRule",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "domains": {
      "name": "domains",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "automaticUserToRoleMapping": {
      "name": "automaticUserToRoleMapping",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "authentificationConnectionId": {
      "name": "authentificationConnectionId",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "authentificationConnectionId",
        "targetModelName": "authentificationConnection",
        "propertyTypeName": "authentificationConnection",
        "options": {
          "readOnly": false
        }
      }
    },
    "authentificationConnection": {
      "name": "authentificationConnection",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "authentificationConnectionId",
        "targetModelName": "authentificationConnection",
        "propertyTypeName": "authentificationConnection",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userRegistrationTenantRuleToJupRoles": {
      "name": "userRegistrationTenantRuleToJupRoles",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRuleToJupRole",
        "propertyTypeName": "userRegistrationTenantRuleToJupRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRuleToContentRoles": {
      "name": "userRegistrationTenantRuleToContentRoles",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRuleToContentRole",
        "propertyTypeName": "userRegistrationTenantRuleToContentRoles",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userRegistrationTenantRule",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userRegistrationTenantRules",
  "camelized": {
    "singular": "userRegistrationTenantRule",
    "plural": "userRegistrationTenantRules",
    "id": "userRegistrationTenantRuleId"
  },
  "capitalized": {
    "singular": "UserRegistrationTenantRule",
    "plural": "UserRegistrationTenantRules",
    "id": "UserRegistrationTenantRuleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "userRegistrationTenantRuleToJupRole",
      "userRegistrationTenantRuleToContentRole"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const userRegistrationTenantRuleToJupRoleObjectTypeDefintion = {
  "name": "userRegistrationTenantRuleToJupRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userRegistrationTenantRuleId": {
      "name": "userRegistrationTenantRuleId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRule": {
      "name": "userRegistrationTenantRule",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userRegistrationTenantRuleToJupRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userRegistrationTenantRuleToJupRoles",
  "camelized": {
    "singular": "userRegistrationTenantRuleToJupRole",
    "plural": "userRegistrationTenantRuleToJupRoles",
    "id": "userRegistrationTenantRuleToJupRoleId"
  },
  "capitalized": {
    "singular": "UserRegistrationTenantRuleToJupRole",
    "plural": "UserRegistrationTenantRuleToJupRoles",
    "id": "UserRegistrationTenantRuleToJupRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const userRegistrationTenantRuleToContentRoleObjectTypeDefintion = {
  "name": "userRegistrationTenantRuleToContentRole",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userRegistrationTenantRuleId": {
      "name": "userRegistrationTenantRuleId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "userRegistrationTenantRule": {
      "name": "userRegistrationTenantRule",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "userRegistrationTenantRuleId",
        "targetModelName": "userRegistrationTenantRule",
        "propertyTypeName": "userRegistrationTenantRule",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRoleId": {
      "name": "contentRoleId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "contentRole": {
      "name": "contentRole",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "contentRoleId",
        "targetModelName": "contentRole",
        "propertyTypeName": "contentRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "userRegistrationTenantRuleToContentRole",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "userRegistrationTenantRuleToContentRoles",
  "camelized": {
    "singular": "userRegistrationTenantRuleToContentRole",
    "plural": "userRegistrationTenantRuleToContentRoles",
    "id": "userRegistrationTenantRuleToContentRoleId"
  },
  "capitalized": {
    "singular": "UserRegistrationTenantRuleToContentRole",
    "plural": "UserRegistrationTenantRuleToContentRoles",
    "id": "UserRegistrationTenantRuleToContentRoleId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const partnerExportMappingConfigurationObjectTypeDefintion = {
  "name": "partnerExportMappingConfiguration",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "code": {
      "name": "code",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappings": {
      "name": "partnerExportMappings",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMappings",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfigurationToFloors": {
      "name": "partnerExportMappingConfigurationToFloors",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfigurationToFloor",
        "propertyTypeName": "partnerExportMappingConfigurationToFloors",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMappingConfiguration",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappingConfigurations",
  "camelized": {
    "singular": "partnerExportMappingConfiguration",
    "plural": "partnerExportMappingConfigurations",
    "id": "partnerExportMappingConfigurationId"
  },
  "capitalized": {
    "singular": "PartnerExportMappingConfiguration",
    "plural": "PartnerExportMappingConfigurations",
    "id": "PartnerExportMappingConfigurationId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "partnerExportMapping",
      "partnerExportMappingConfigurationToFloor"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const partnerExportMappingObjectTypeDefintion = {
  "name": "partnerExportMapping",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMapping",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerCode": {
      "name": "partnerCode",
      "objectTypeName": "partnerExportMapping",
      "type": "string",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "label": {
      "name": "label",
      "objectTypeName": "partnerExportMapping",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMapping",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMapping",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMapping",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerExportMappingConfigurationId": {
      "name": "partnerExportMappingConfigurationId",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfiguration": {
      "name": "partnerExportMappingConfiguration",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "partnerExportMappingToRoomTypes": {
      "name": "partnerExportMappingToRoomTypes",
      "objectTypeName": "partnerExportMapping",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingId",
        "targetModelName": "partnerExportMappingToRoomType",
        "propertyTypeName": "partnerExportMappingToRoomTypes",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMapping",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMapping",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappings",
  "camelized": {
    "singular": "partnerExportMapping",
    "plural": "partnerExportMappings",
    "id": "partnerExportMappingId"
  },
  "capitalized": {
    "singular": "PartnerExportMapping",
    "plural": "PartnerExportMappings",
    "id": "PartnerExportMappingId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "partnerExportMappingToRoomType"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const partnerExportMappingToRoomTypeObjectTypeDefintion = {
  "name": "partnerExportMappingToRoomType",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerExportMappingId": {
      "name": "partnerExportMappingId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "partnerExportMappingId",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMapping",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMapping": {
      "name": "partnerExportMapping",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingId",
        "targetModelName": "partnerExportMapping",
        "propertyTypeName": "partnerExportMapping",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomTypeId": {
      "name": "roomTypeId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "roomType": {
      "name": "roomType",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "roomTypeId",
        "targetModelName": "roomType",
        "propertyTypeName": "roomType",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMappingToRoomType",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappingToRoomTypes",
  "camelized": {
    "singular": "partnerExportMappingToRoomType",
    "plural": "partnerExportMappingToRoomTypes",
    "id": "partnerExportMappingToRoomTypeId"
  },
  "capitalized": {
    "singular": "PartnerExportMappingToRoomType",
    "plural": "PartnerExportMappingToRoomTypes",
    "id": "PartnerExportMappingToRoomTypeId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const partnerExportMappingConfigurationToFloorObjectTypeDefintion = {
  "name": "partnerExportMappingConfigurationToFloor",
  "type": "many-to-many",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "partnerExportMappingConfigurationId": {
      "name": "partnerExportMappingConfigurationId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "partnerExportMappingConfiguration": {
      "name": "partnerExportMappingConfiguration",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "partnerExportMappingConfigurationId",
        "targetModelName": "partnerExportMappingConfiguration",
        "propertyTypeName": "partnerExportMappingConfiguration",
        "options": {
          "readOnly": false
        }
      }
    },
    "floorId": {
      "name": "floorId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "floor": {
      "name": "floor",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "floorId",
        "targetModelName": "floor",
        "propertyTypeName": "floor",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "partnerExportMappingConfigurationToFloor",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "partnerExportMappingConfigurationToFloors",
  "camelized": {
    "singular": "partnerExportMappingConfigurationToFloor",
    "plural": "partnerExportMappingConfigurationToFloors",
    "id": "partnerExportMappingConfigurationToFloorId"
  },
  "capitalized": {
    "singular": "PartnerExportMappingConfigurationToFloor",
    "plural": "PartnerExportMappingConfigurationToFloors",
    "id": "PartnerExportMappingConfigurationToFloorId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const jupRoleToJupUiLayoutObjectTypeDefintion = {
  "name": "jupRoleToJupUiLayout",
  "type": "many-to-many",
  "scope": "public",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": true,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "canSee": {
      "name": "canSee",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "boolean",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false,
        "defaultValue": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "jupUiLayoutId": {
      "name": "jupUiLayoutId",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupUiLayout": {
      "name": "jupUiLayout",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupUiLayoutId",
        "targetModelName": "jupUiLayout",
        "propertyTypeName": "jupUiLayout",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRoleId": {
      "name": "jupRoleId",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    },
    "jupRole": {
      "name": "jupRole",
      "objectTypeName": "jupRoleToJupUiLayout",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "jupRoleId",
        "targetModelName": "jupRole",
        "propertyTypeName": "jupRole",
        "options": {
          "readOnly": false
        }
      }
    }
  },
  "plural": "jupRoleToJupUiLayouts",
  "camelized": {
    "singular": "jupRoleToJupUiLayout",
    "plural": "jupRoleToJupUiLayouts",
    "id": "jupRoleToJupUiLayoutId"
  },
  "capitalized": {
    "singular": "JupRoleToJupUiLayout",
    "plural": "JupRoleToJupUiLayouts",
    "id": "JupRoleToJupUiLayoutId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": []
  }
};
const itemFactObjectTypeDefintion = {
  "name": "itemFact",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "itemFact",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "measure": {
      "name": "measure",
      "objectTypeName": "itemFact",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "value": {
      "name": "value",
      "objectTypeName": "itemFact",
      "type": "float",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "voltage": {
      "name": "voltage",
      "objectTypeName": "itemFact",
      "type": "float",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "time": {
      "name": "time",
      "objectTypeName": "itemFact",
      "type": "datetime",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "itemFact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "itemFact",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "itemFact",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "itemId": {
      "name": "itemId",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "item": {
      "name": "item",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "itemId",
        "targetModelName": "item",
        "propertyTypeName": "item",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "itemFact",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "itemFact",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "itemFacts",
  "camelized": {
    "singular": "itemFact",
    "plural": "itemFacts",
    "id": "itemFactId"
  },
  "capitalized": {
    "singular": "ItemFact",
    "plural": "ItemFacts",
    "id": "ItemFactId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
const featureFamilyObjectTypeDefintion = {
  "name": "featureFamily",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "featureFamily",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "featureFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "featureFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "featureFamily",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "featureFamily",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "featureFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "featureFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "featureFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "featureFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "featureGroups": {
      "name": "featureGroups",
      "objectTypeName": "featureFamily",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureFamilyId",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroups",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "featureFamily",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "featureFamily",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "featureFamilies",
  "camelized": {
    "singular": "featureFamily",
    "plural": "featureFamilies",
    "id": "featureFamilyId"
  },
  "capitalized": {
    "singular": "FeatureFamily",
    "plural": "FeatureFamilies",
    "id": "FeatureFamilyId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "featureGroup"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const featureGroupObjectTypeDefintion = {
  "name": "featureGroup",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "featureGroup",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "featureGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "sortOrder": {
      "name": "sortOrder",
      "objectTypeName": "featureGroup",
      "type": "integer",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "featureGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "featureGroup",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "featureGroup",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "featureFamilyId": {
      "name": "featureFamilyId",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "featureFamilyId",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "featureFamily": {
      "name": "featureFamily",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureFamilyId",
        "targetModelName": "featureFamily",
        "propertyTypeName": "featureFamily",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "features": {
      "name": "features",
      "objectTypeName": "featureGroup",
      "type": "has-many-paginated",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureGroupId",
        "targetModelName": "feature",
        "propertyTypeName": "features",
        "options": {
          "readOnly": false
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "featureGroup",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "featureGroup",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "featureGroups",
  "camelized": {
    "singular": "featureGroup",
    "plural": "featureGroups",
    "id": "featureGroupId"
  },
  "capitalized": {
    "singular": "FeatureGroup",
    "plural": "FeatureGroups",
    "id": "FeatureGroupId"
  },
  "hidden": false,
  "context": {
    "hasMany": [
      "feature"
    ],
    "belongsTo": [
      "company"
    ]
  }
};
const featureObjectTypeDefintion = {
  "name": "feature",
  "type": "table",
  "scope": "private",
  "isMasterData": false,
  "isReportingData": false,
  "isSecurityData": false,
  "propertiesByName": {
    "id": {
      "name": "id",
      "objectTypeName": "feature",
      "type": "primary-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "name": {
      "name": "name",
      "objectTypeName": "feature",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": false
      }
    },
    "createdAt": {
      "name": "createdAt",
      "objectTypeName": "feature",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "updatedAt": {
      "name": "updatedAt",
      "objectTypeName": "feature",
      "type": "timestamp",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      }
    },
    "externalId": {
      "name": "externalId",
      "objectTypeName": "feature",
      "type": "string",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      }
    },
    "featureGroupId": {
      "name": "featureGroupId",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "featureGroupId",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "featureGroup": {
      "name": "featureGroup",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "featureGroupId",
        "targetModelName": "featureGroup",
        "propertyTypeName": "featureGroup",
        "options": {
          "readOnly": false
        }
      }
    },
    "userCompanyCreatedById": {
      "name": "userCompanyCreatedById",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyCreatedBy": {
      "name": "userCompanyCreatedBy",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyCreatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyCreatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedById": {
      "name": "userCompanyUpdatedById",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": true,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "userCompanyUpdatedBy": {
      "name": "userCompanyUpdatedBy",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "userCompanyUpdatedById",
        "targetModelName": "userCompany",
        "propertyTypeName": "userCompanyUpdatedBy",
        "options": {
          "readOnly": true
        }
      }
    },
    "companyId": {
      "name": "companyId",
      "objectTypeName": "feature",
      "type": "foreign-key",
      "options": {
        "mandatory": false,
        "readOnly": false,
        "calculated": false,
        "technical": true
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    },
    "company": {
      "name": "company",
      "objectTypeName": "feature",
      "type": "belongs-to",
      "options": {
        "mandatory": true,
        "readOnly": false,
        "calculated": false,
        "technical": false
      },
      "association": {
        "foreignKey": "companyId",
        "targetModelName": "company",
        "propertyTypeName": "company",
        "options": {
          "readOnly": true
        }
      }
    }
  },
  "plural": "features",
  "camelized": {
    "singular": "feature",
    "plural": "features",
    "id": "featureId"
  },
  "capitalized": {
    "singular": "Feature",
    "plural": "Features",
    "id": "FeatureId"
  },
  "hidden": false,
  "context": {
    "hasMany": [],
    "belongsTo": [
      "company"
    ]
  }
};
var JupSchema;
((JupSchema2) => {
  JupSchema2.occupancyStatus = occupancyStatusObjectTypeDefintion;
  JupSchema2.user = userObjectTypeDefintion;
  JupSchema2.userRefreshToken = userRefreshTokenObjectTypeDefintion;
  JupSchema2.companyType = companyTypeObjectTypeDefintion;
  JupSchema2.company = companyObjectTypeDefintion;
  JupSchema2.campus = campusObjectTypeDefintion;
  JupSchema2.roomConnectorType = roomConnectorTypeObjectTypeDefintion;
  JupSchema2.roomConnector = roomConnectorObjectTypeDefintion;
  JupSchema2.userCompany = userCompanyObjectTypeDefintion;
  JupSchema2.personGender = personGenderObjectTypeDefintion;
  JupSchema2.personCompany = personCompanyObjectTypeDefintion;
  JupSchema2.jupUiLayout = jupUiLayoutObjectTypeDefintion;
  JupSchema2.buildingType = buildingTypeObjectTypeDefintion;
  JupSchema2.organization = organizationObjectTypeDefintion;
  JupSchema2.itemTypeFamily = itemTypeFamilyObjectTypeDefintion;
  JupSchema2.manufacturer = manufacturerObjectTypeDefintion;
  JupSchema2.object3dModel = object3dModelObjectTypeDefintion;
  JupSchema2.itemType = itemTypeObjectTypeDefintion;
  JupSchema2.building = buildingObjectTypeDefintion;
  JupSchema2.mapScale = mapScaleObjectTypeDefintion;
  JupSchema2.structure = structureObjectTypeDefintion;
  JupSchema2.structurePoint = structurePointObjectTypeDefintion;
  JupSchema2.floor = floorObjectTypeDefintion;
  JupSchema2.distributionCostType = distributionCostTypeObjectTypeDefintion;
  JupSchema2.roomTypeGroup = roomTypeGroupObjectTypeDefintion;
  JupSchema2.roomType = roomTypeObjectTypeDefintion;
  JupSchema2.roomTypeGroupToRoomType = roomTypeGroupToRoomTypeObjectTypeDefintion;
  JupSchema2.roomTypeGroupFloor = roomTypeGroupFloorObjectTypeDefintion;
  JupSchema2.roomTypeGroupBuilding = roomTypeGroupBuildingObjectTypeDefintion;
  JupSchema2.costCenter = costCenterObjectTypeDefintion;
  JupSchema2.costCenterBuilding = costCenterBuildingObjectTypeDefintion;
  JupSchema2.costCenterFloor = costCenterFloorObjectTypeDefintion;
  JupSchema2.room = roomObjectTypeDefintion;
  JupSchema2.roomPoint = roomPointObjectTypeDefintion;
  JupSchema2.roomPointRoom = roomPointRoomObjectTypeDefintion;
  JupSchema2.roomPointSegmentType = roomPointSegmentTypeObjectTypeDefintion;
  JupSchema2.roomPointSegment = roomPointSegmentObjectTypeDefintion;
  JupSchema2.itemTypePoint = itemTypePointObjectTypeDefintion;
  JupSchema2.dimensionType = dimensionTypeObjectTypeDefintion;
  JupSchema2.dimension = dimensionObjectTypeDefintion;
  JupSchema2.dimensionRoom = dimensionRoomObjectTypeDefintion;
  JupSchema2.dimensionFloor = dimensionFloorObjectTypeDefintion;
  JupSchema2.dimensionBuilding = dimensionBuildingObjectTypeDefintion;
  JupSchema2.factType = factTypeObjectTypeDefintion;
  JupSchema2.fact = factObjectTypeDefintion;
  JupSchema2.personState = personStateObjectTypeDefintion;
  JupSchema2.personSecurityProfile = personSecurityProfileObjectTypeDefintion;
  JupSchema2.person = personObjectTypeDefintion;
  JupSchema2.personToPersonType = personToPersonTypeObjectTypeDefintion;
  JupSchema2.personToPerson = personToPersonObjectTypeDefintion;
  JupSchema2.roomAffectation = roomAffectationObjectTypeDefintion;
  JupSchema2.workplaceType = workplaceTypeObjectTypeDefintion;
  JupSchema2.workplaceTypeItemType = workplaceTypeItemTypeObjectTypeDefintion;
  JupSchema2.workplace = workplaceObjectTypeDefintion;
  JupSchema2.item = itemObjectTypeDefintion;
  JupSchema2.workplaceAffectation = workplaceAffectationObjectTypeDefintion;
  JupSchema2.organizationFloor = organizationFloorObjectTypeDefintion;
  JupSchema2.organizationBuilding = organizationBuildingObjectTypeDefintion;
  JupSchema2.roomTypeFloor = roomTypeFloorObjectTypeDefintion;
  JupSchema2.roomTypeBuilding = roomTypeBuildingObjectTypeDefintion;
  JupSchema2.itemToPerson = itemToPersonObjectTypeDefintion;
  JupSchema2.personToBuilding = personToBuildingObjectTypeDefintion;
  JupSchema2.dimensionToPerson = dimensionToPersonObjectTypeDefintion;
  JupSchema2.dimensionTypeToBuilding = dimensionTypeToBuildingObjectTypeDefintion;
  JupSchema2.workingLocation = workingLocationObjectTypeDefintion;
  JupSchema2.personWorkingLocation = personWorkingLocationObjectTypeDefintion;
  JupSchema2.personToWorkplaceBooking = personToWorkplaceBookingObjectTypeDefintion;
  JupSchema2.personToRoomBooking = personToRoomBookingObjectTypeDefintion;
  JupSchema2.personToDimensionBooking = personToDimensionBookingObjectTypeDefintion;
  JupSchema2.personCompanyMission = personCompanyMissionObjectTypeDefintion;
  JupSchema2.personCompanyToItemType = personCompanyToItemTypeObjectTypeDefintion;
  JupSchema2.personCompanyToRoomType = personCompanyToRoomTypeObjectTypeDefintion;
  JupSchema2.personCompanyToItem = personCompanyToItemObjectTypeDefintion;
  JupSchema2.legend = legendObjectTypeDefintion;
  JupSchema2.openerPostMessageHost = openerPostMessageHostObjectTypeDefintion;
  JupSchema2.jupObjectType = jupObjectTypeObjectTypeDefintion;
  JupSchema2.jupUiView = jupUiViewObjectTypeDefintion;
  JupSchema2.jupRole = jupRoleObjectTypeDefintion;
  JupSchema2.jupUiOption = jupUiOptionObjectTypeDefintion;
  JupSchema2.jupUiOperation = jupUiOperationObjectTypeDefintion;
  JupSchema2.contentRole = contentRoleObjectTypeDefintion;
  JupSchema2.jupUserCompanyToJupRole = jupUserCompanyToJupRoleObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiView = jupRoleToJupUiViewObjectTypeDefintion;
  JupSchema2.jupRoleToJupObjectType = jupRoleToJupObjectTypeObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiOption = jupRoleToJupUiOptionObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiOperation = jupRoleToJupUiOperationObjectTypeDefintion;
  JupSchema2.contentRoleToBuilding = contentRoleToBuildingObjectTypeDefintion;
  JupSchema2.contentRoleToUserCompany = contentRoleToUserCompanyObjectTypeDefintion;
  JupSchema2.contentRoleToFloor = contentRoleToFloorObjectTypeDefintion;
  JupSchema2.partnerApiCredential = partnerApiCredentialObjectTypeDefintion;
  JupSchema2.apiUser = apiUserObjectTypeDefintion;
  JupSchema2.apiUserToJupRole = apiUserToJupRoleObjectTypeDefintion;
  JupSchema2.apiUserToContentRole = apiUserToContentRoleObjectTypeDefintion;
  JupSchema2.jupUiTenantOperation = jupUiTenantOperationObjectTypeDefintion;
  JupSchema2.contentRoleToJupUiTenantOperation = contentRoleToJupUiTenantOperationObjectTypeDefintion;
  JupSchema2.authentificationConnection = authentificationConnectionObjectTypeDefintion;
  JupSchema2.userRegistrationTenantRule = userRegistrationTenantRuleObjectTypeDefintion;
  JupSchema2.userRegistrationTenantRuleToJupRole = userRegistrationTenantRuleToJupRoleObjectTypeDefintion;
  JupSchema2.userRegistrationTenantRuleToContentRole = userRegistrationTenantRuleToContentRoleObjectTypeDefintion;
  JupSchema2.partnerExportMappingConfiguration = partnerExportMappingConfigurationObjectTypeDefintion;
  JupSchema2.partnerExportMapping = partnerExportMappingObjectTypeDefintion;
  JupSchema2.partnerExportMappingToRoomType = partnerExportMappingToRoomTypeObjectTypeDefintion;
  JupSchema2.partnerExportMappingConfigurationToFloor = partnerExportMappingConfigurationToFloorObjectTypeDefintion;
  JupSchema2.jupRoleToJupUiLayout = jupRoleToJupUiLayoutObjectTypeDefintion;
  JupSchema2.itemFact = itemFactObjectTypeDefintion;
  JupSchema2.featureFamily = featureFamilyObjectTypeDefintion;
  JupSchema2.featureGroup = featureGroupObjectTypeDefintion;
  JupSchema2.feature = featureObjectTypeDefintion;
  JupSchema2.objectTypes = [JupSchema2.occupancyStatus, JupSchema2.user, JupSchema2.userRefreshToken, JupSchema2.companyType, JupSchema2.company, JupSchema2.campus, JupSchema2.roomConnectorType, JupSchema2.roomConnector, JupSchema2.userCompany, JupSchema2.personGender, JupSchema2.personCompany, JupSchema2.jupUiLayout, JupSchema2.buildingType, JupSchema2.organization, JupSchema2.itemTypeFamily, JupSchema2.manufacturer, JupSchema2.object3dModel, JupSchema2.itemType, JupSchema2.building, JupSchema2.mapScale, JupSchema2.structure, JupSchema2.structurePoint, JupSchema2.floor, JupSchema2.distributionCostType, JupSchema2.roomTypeGroup, JupSchema2.roomType, JupSchema2.roomTypeGroupToRoomType, JupSchema2.roomTypeGroupFloor, JupSchema2.roomTypeGroupBuilding, JupSchema2.costCenter, JupSchema2.costCenterBuilding, JupSchema2.costCenterFloor, JupSchema2.room, JupSchema2.roomPoint, JupSchema2.roomPointRoom, JupSchema2.roomPointSegmentType, JupSchema2.roomPointSegment, JupSchema2.itemTypePoint, JupSchema2.dimensionType, JupSchema2.dimension, JupSchema2.dimensionRoom, JupSchema2.dimensionFloor, JupSchema2.dimensionBuilding, JupSchema2.factType, JupSchema2.fact, JupSchema2.personState, JupSchema2.personSecurityProfile, JupSchema2.person, JupSchema2.personToPersonType, JupSchema2.personToPerson, JupSchema2.roomAffectation, JupSchema2.workplaceType, JupSchema2.workplaceTypeItemType, JupSchema2.workplace, JupSchema2.item, JupSchema2.workplaceAffectation, JupSchema2.organizationFloor, JupSchema2.organizationBuilding, JupSchema2.roomTypeFloor, JupSchema2.roomTypeBuilding, JupSchema2.itemToPerson, JupSchema2.personToBuilding, JupSchema2.dimensionToPerson, JupSchema2.dimensionTypeToBuilding, JupSchema2.workingLocation, JupSchema2.personWorkingLocation, JupSchema2.personToWorkplaceBooking, JupSchema2.personToRoomBooking, JupSchema2.personToDimensionBooking, JupSchema2.personCompanyMission, JupSchema2.personCompanyToItemType, JupSchema2.personCompanyToRoomType, JupSchema2.personCompanyToItem, JupSchema2.legend, JupSchema2.openerPostMessageHost, JupSchema2.jupObjectType, JupSchema2.jupUiView, JupSchema2.jupRole, JupSchema2.jupUiOption, JupSchema2.jupUiOperation, JupSchema2.contentRole, JupSchema2.jupUserCompanyToJupRole, JupSchema2.jupRoleToJupUiView, JupSchema2.jupRoleToJupObjectType, JupSchema2.jupRoleToJupUiOption, JupSchema2.jupRoleToJupUiOperation, JupSchema2.contentRoleToBuilding, JupSchema2.contentRoleToUserCompany, JupSchema2.contentRoleToFloor, JupSchema2.partnerApiCredential, JupSchema2.apiUser, JupSchema2.apiUserToJupRole, JupSchema2.apiUserToContentRole, JupSchema2.jupUiTenantOperation, JupSchema2.contentRoleToJupUiTenantOperation, JupSchema2.authentificationConnection, JupSchema2.userRegistrationTenantRule, JupSchema2.userRegistrationTenantRuleToJupRole, JupSchema2.userRegistrationTenantRuleToContentRole, JupSchema2.partnerExportMappingConfiguration, JupSchema2.partnerExportMapping, JupSchema2.partnerExportMappingToRoomType, JupSchema2.partnerExportMappingConfigurationToFloor, JupSchema2.jupRoleToJupUiLayout, JupSchema2.itemFact, JupSchema2.featureFamily, JupSchema2.featureGroup, JupSchema2.feature];
  JupSchema2.objectTypesBySingular = {
    occupancyStatus: JupSchema2.occupancyStatus,
    user: JupSchema2.user,
    userRefreshToken: JupSchema2.userRefreshToken,
    companyType: JupSchema2.companyType,
    company: JupSchema2.company,
    campus: JupSchema2.campus,
    roomConnectorType: JupSchema2.roomConnectorType,
    roomConnector: JupSchema2.roomConnector,
    userCompany: JupSchema2.userCompany,
    personGender: JupSchema2.personGender,
    personCompany: JupSchema2.personCompany,
    jupUiLayout: JupSchema2.jupUiLayout,
    buildingType: JupSchema2.buildingType,
    organization: JupSchema2.organization,
    itemTypeFamily: JupSchema2.itemTypeFamily,
    manufacturer: JupSchema2.manufacturer,
    object3dModel: JupSchema2.object3dModel,
    itemType: JupSchema2.itemType,
    building: JupSchema2.building,
    mapScale: JupSchema2.mapScale,
    structure: JupSchema2.structure,
    structurePoint: JupSchema2.structurePoint,
    floor: JupSchema2.floor,
    distributionCostType: JupSchema2.distributionCostType,
    roomTypeGroup: JupSchema2.roomTypeGroup,
    roomType: JupSchema2.roomType,
    roomTypeGroupToRoomType: JupSchema2.roomTypeGroupToRoomType,
    roomTypeGroupFloor: JupSchema2.roomTypeGroupFloor,
    roomTypeGroupBuilding: JupSchema2.roomTypeGroupBuilding,
    costCenter: JupSchema2.costCenter,
    costCenterBuilding: JupSchema2.costCenterBuilding,
    costCenterFloor: JupSchema2.costCenterFloor,
    room: JupSchema2.room,
    roomPoint: JupSchema2.roomPoint,
    roomPointRoom: JupSchema2.roomPointRoom,
    roomPointSegmentType: JupSchema2.roomPointSegmentType,
    roomPointSegment: JupSchema2.roomPointSegment,
    itemTypePoint: JupSchema2.itemTypePoint,
    dimensionType: JupSchema2.dimensionType,
    dimension: JupSchema2.dimension,
    dimensionRoom: JupSchema2.dimensionRoom,
    dimensionFloor: JupSchema2.dimensionFloor,
    dimensionBuilding: JupSchema2.dimensionBuilding,
    factType: JupSchema2.factType,
    fact: JupSchema2.fact,
    personState: JupSchema2.personState,
    personSecurityProfile: JupSchema2.personSecurityProfile,
    person: JupSchema2.person,
    personToPersonType: JupSchema2.personToPersonType,
    personToPerson: JupSchema2.personToPerson,
    roomAffectation: JupSchema2.roomAffectation,
    workplaceType: JupSchema2.workplaceType,
    workplaceTypeItemType: JupSchema2.workplaceTypeItemType,
    workplace: JupSchema2.workplace,
    item: JupSchema2.item,
    workplaceAffectation: JupSchema2.workplaceAffectation,
    organizationFloor: JupSchema2.organizationFloor,
    organizationBuilding: JupSchema2.organizationBuilding,
    roomTypeFloor: JupSchema2.roomTypeFloor,
    roomTypeBuilding: JupSchema2.roomTypeBuilding,
    itemToPerson: JupSchema2.itemToPerson,
    personToBuilding: JupSchema2.personToBuilding,
    dimensionToPerson: JupSchema2.dimensionToPerson,
    dimensionTypeToBuilding: JupSchema2.dimensionTypeToBuilding,
    workingLocation: JupSchema2.workingLocation,
    personWorkingLocation: JupSchema2.personWorkingLocation,
    personToWorkplaceBooking: JupSchema2.personToWorkplaceBooking,
    personToRoomBooking: JupSchema2.personToRoomBooking,
    personToDimensionBooking: JupSchema2.personToDimensionBooking,
    personCompanyMission: JupSchema2.personCompanyMission,
    personCompanyToItemType: JupSchema2.personCompanyToItemType,
    personCompanyToRoomType: JupSchema2.personCompanyToRoomType,
    personCompanyToItem: JupSchema2.personCompanyToItem,
    legend: JupSchema2.legend,
    openerPostMessageHost: JupSchema2.openerPostMessageHost,
    jupObjectType: JupSchema2.jupObjectType,
    jupUiView: JupSchema2.jupUiView,
    jupRole: JupSchema2.jupRole,
    jupUiOption: JupSchema2.jupUiOption,
    jupUiOperation: JupSchema2.jupUiOperation,
    contentRole: JupSchema2.contentRole,
    jupUserCompanyToJupRole: JupSchema2.jupUserCompanyToJupRole,
    jupRoleToJupUiView: JupSchema2.jupRoleToJupUiView,
    jupRoleToJupObjectType: JupSchema2.jupRoleToJupObjectType,
    jupRoleToJupUiOption: JupSchema2.jupRoleToJupUiOption,
    jupRoleToJupUiOperation: JupSchema2.jupRoleToJupUiOperation,
    contentRoleToBuilding: JupSchema2.contentRoleToBuilding,
    contentRoleToUserCompany: JupSchema2.contentRoleToUserCompany,
    contentRoleToFloor: JupSchema2.contentRoleToFloor,
    partnerApiCredential: JupSchema2.partnerApiCredential,
    apiUser: JupSchema2.apiUser,
    apiUserToJupRole: JupSchema2.apiUserToJupRole,
    apiUserToContentRole: JupSchema2.apiUserToContentRole,
    jupUiTenantOperation: JupSchema2.jupUiTenantOperation,
    contentRoleToJupUiTenantOperation: JupSchema2.contentRoleToJupUiTenantOperation,
    authentificationConnection: JupSchema2.authentificationConnection,
    userRegistrationTenantRule: JupSchema2.userRegistrationTenantRule,
    userRegistrationTenantRuleToJupRole: JupSchema2.userRegistrationTenantRuleToJupRole,
    userRegistrationTenantRuleToContentRole: JupSchema2.userRegistrationTenantRuleToContentRole,
    partnerExportMappingConfiguration: JupSchema2.partnerExportMappingConfiguration,
    partnerExportMapping: JupSchema2.partnerExportMapping,
    partnerExportMappingToRoomType: JupSchema2.partnerExportMappingToRoomType,
    partnerExportMappingConfigurationToFloor: JupSchema2.partnerExportMappingConfigurationToFloor,
    jupRoleToJupUiLayout: JupSchema2.jupRoleToJupUiLayout,
    itemFact: JupSchema2.itemFact,
    featureFamily: JupSchema2.featureFamily,
    featureGroup: JupSchema2.featureGroup,
    feature: JupSchema2.feature
  };
})(JupSchema || (JupSchema = {}));
function getObjectTypeDefinitionByName(objetTypeName) {
  return JupSchema[objetTypeName];
}
function getObjectTypeDefintionFromCamelizedName(objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  if (!otDef) {
    throw new Error(`impossible to find object type with camedlized name <${objectTypeName}>`);
  }
  return otDef;
}
function getPropertyTypeByName(objectTypeName, propertyTypeName) {
  const objectTypeDefinition = getObjectTypeDefinitionByName(objectTypeName);
  const pt = objectTypeDefinition.propertiesByName[propertyTypeName];
  if (pt) {
    return pt;
  }
  throw new Error(`property type name not found (${propertyTypeName}) for object type (${objectTypeDefinition.camelized.singular})`);
}
function getPropertyTypeByCode(code) {
  const [objectTypeName, propertyName] = code.split(":");
  const otDef = getObjectTypeDefintionFromCamelizedName(objectTypeName);
  const propertyType = getPropertyTypeByName(otDef.name, propertyName);
  return propertyType;
}
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
  if (typeof f == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f, arguments, this.constructor);
      }
      return f.apply(this, arguments);
    };
    a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f = React__default, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
  function q(c, a, g) {
    var b, d = {}, e = null, h = null;
    void 0 !== g && (e = "" + g);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (h = a.ref);
    for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
    return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
  }
  reactJsxRuntime_production_min.Fragment = l;
  reactJsxRuntime_production_min.jsx = q;
  reactJsxRuntime_production_min.jsxs = q;
  return reactJsxRuntime_production_min;
}
var reactJsxRuntime_development = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_development;
function requireReactJsxRuntime_development() {
  if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
  hasRequiredReactJsxRuntime_development = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var React2 = React__default;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type2) {
        if (typeof type2 === "string" || typeof type2 === "function") {
          return true;
        }
        if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type2 === "object" && type2 !== null) {
          if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName2(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null) {
          return null;
        }
        {
          if (typeof type2.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type2 === "function") {
          return type2.displayName || type2.name || null;
        }
        if (typeof type2 === "string") {
          return type2;
        }
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 === "object") {
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName2(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return getComponentNameFromType(init2(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign2 = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null) {
          return "";
        }
        if (typeof type2 === "function") {
          {
            return describeNativeComponentFrame(type2, shouldConstruct(type2));
          }
        }
        if (typeof type2 === "string") {
          return describeBuiltInComponentFrame(type2);
        }
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 === "object") {
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2;
              var payload = lazyComponent._payload;
              var init2 = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values2, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type2, key, ref2, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type: type2,
          key,
          ref: ref2,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type2, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref2 = null;
          if (maybeKey !== void 0) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref2 = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref2) {
            var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref2) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type2, key, ref2, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray(node2)) {
            for (var i = 0; i < node2.length; i++) {
              var child = node2[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type2 = element.type;
          if (type2 === null || type2 === void 0 || typeof type2 === "string") {
            return;
          }
          var propTypes2;
          if (typeof type2 === "function") {
            propTypes2 = type2.propTypes;
          } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type2.$$typeof === REACT_MEMO_TYPE)) {
            propTypes2 = type2.propTypes;
          } else {
            return;
          }
          if (propTypes2) {
            var name = getComponentNameFromType(type2);
            checkPropTypes(propTypes2, element.props, "prop", name, element);
          } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type2);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      var didWarnAboutKeySpread = {};
      function jsxWithValidation(type2, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum();
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type2 === null) {
              typeString = "null";
            } else if (isArray(type2)) {
              typeString = "array";
            } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type2;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type2, props, key, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    validateChildKeys(children[i], type2);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type2);
              }
            }
          }
          {
            if (hasOwnProperty.call(props, "key")) {
              var componentName = getComponentNameFromType(type2);
              var keys = Object.keys(props).filter(function(k) {
                return k !== "key";
              });
              var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
              if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
              }
            }
          }
          if (type2 === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      function jsxWithValidationStatic(type2, props, key) {
        {
          return jsxWithValidation(type2, props, key, true);
        }
      }
      function jsxWithValidationDynamic(type2, props, key) {
        {
          return jsxWithValidation(type2, props, key, false);
        }
      }
      var jsx = jsxWithValidationDynamic;
      var jsxs = jsxWithValidationStatic;
      reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxRuntime_development.jsx = jsx;
      reactJsxRuntime_development.jsxs = jsxs;
    })();
  }
  return reactJsxRuntime_development;
}
var hasRequiredJsxRuntime;
function requireJsxRuntime() {
  if (hasRequiredJsxRuntime) return jsxRuntime.exports;
  hasRequiredJsxRuntime = 1;
  if (process.env.NODE_ENV === "production") {
    jsxRuntime.exports = requireReactJsxRuntime_production_min();
  } else {
    jsxRuntime.exports = requireReactJsxRuntime_development();
  }
  return jsxRuntime.exports;
}
var jsxRuntimeExports = requireJsxRuntime();
const polyglotApiAtom = atom({
  key: "polyglotApiAtom",
  default: void 0
});
const enUS$1 = {
  /*
  components: {
    MuiBreadcrumbs: { defaultProps: {
      expandText: 'Show path',
    }},
    MuiTablePagination: { defaultProps: {
      getItemAriaLabel: (type) => {
        if (type === 'first') {
          return 'Go to first page';
        }
        if (type === 'last') {
          return 'Go to last page';
        }
        if (type === 'next') {
          return 'Go to next page';
        }
        // if (type === 'previous') {
        return 'Go to previous page';
      },
      labelRowsPerPage: 'Rows per page:',
      labelDisplayedRows: ({ from, to, count }) =>
  `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`, 
    }},
    MuiRating: { defaultProps: {
      getLabelText: value => `${value} Star${value !== 1 ? 's' : ''}`,
      emptyLabelText: 'Empty',
    }},
    MuiAutocomplete: { defaultProps: {
      clearText: 'Clear',
      closeText: 'Close',
      loadingText: 'Loading…',
      noOptionsText: 'No options',
      openText: 'Open',
    }},
    MuiAlert: { defaultProps: {
      closeText: 'Close',
    }},
    MuiPagination: {  defaultProps: {
      'aria-label': 'Pagination navigation',
      getItemAriaLabel: (type, page, selected) => {
        if (type === 'page') {
          return `${selected ? '' : 'Go to '}page ${page}`;
        }
        if (type === 'first') {
          return 'Go to first page';
        }
        if (type === 'last') {
          return 'Go to last page';
        }
        if (type === 'next') {
          return 'Go to next page';
        }
        // if (type === 'previous') {
        return 'Go to previous page';
      },
    }},
  },
  */
};
const esES$1 = {
  components: {
    MuiBreadcrumbs: {
      defaultProps: {
        expandText: "Mostrar ruta"
      }
    },
    MuiTablePagination: {
      defaultProps: {
        getItemAriaLabel: (type2) => {
          if (type2 === "first") {
            return "Ir a la primera página";
          }
          if (type2 === "last") {
            return "Ir a la última página";
          }
          if (type2 === "next") {
            return "Ir a la página siguiente";
          }
          return "Ir a la página anterior";
        },
        labelRowsPerPage: "Filas por página:",
        labelDisplayedRows: ({
          from: from2,
          to,
          count
        }) => `${from2}–${to} de ${count !== -1 ? count : `más de ${to}`}`
      }
    },
    MuiRating: {
      defaultProps: {
        getLabelText: (value) => `${value} Estrella${value !== 1 ? "s" : ""}`,
        emptyLabelText: "Vacío"
      }
    },
    MuiAutocomplete: {
      defaultProps: {
        clearText: "Limpiar",
        closeText: "Cerrar",
        loadingText: "Cargando…",
        noOptionsText: "Sin opciones",
        openText: "Abierto"
      }
    },
    MuiAlert: {
      defaultProps: {
        closeText: "Cerrar"
      }
    },
    MuiPagination: {
      defaultProps: {
        "aria-label": "Paginador",
        getItemAriaLabel: (type2, page, selected) => {
          if (type2 === "page") {
            return `${selected ? "" : "Ir a la "}página ${page}`;
          }
          if (type2 === "first") {
            return "Ir a la primera página";
          }
          if (type2 === "last") {
            return "Ir a la última página";
          }
          if (type2 === "next") {
            return "Ir a la página siguiente";
          }
          return "Ir a la página anterior";
        }
      }
    }
  }
};
const frFR$1 = {
  components: {
    MuiBreadcrumbs: {
      defaultProps: {
        expandText: "Montrer le chemin"
      }
    },
    MuiTablePagination: {
      defaultProps: {
        getItemAriaLabel: (type2) => {
          if (type2 === "first") {
            return "Aller à la première page";
          }
          if (type2 === "last") {
            return "Aller à la dernière page";
          }
          if (type2 === "next") {
            return "Aller à la page suivante";
          }
          return "Aller à la page précédente";
        },
        labelRowsPerPage: "Lignes par page :",
        labelDisplayedRows: ({
          from: from2,
          to,
          count
        }) => `${from2}–${to} sur ${count !== -1 ? count : `plus que ${to}`}`
      }
    },
    MuiRating: {
      defaultProps: {
        getLabelText: (value) => `${value} Etoile${value !== 1 ? "s" : ""}`,
        emptyLabelText: "Vide"
      }
    },
    MuiAutocomplete: {
      defaultProps: {
        clearText: "Vider",
        closeText: "Fermer",
        loadingText: "Chargement…",
        noOptionsText: "Pas de résultats",
        openText: "Ouvrir"
      }
    },
    MuiAlert: {
      defaultProps: {
        closeText: "Fermer"
      }
    },
    MuiPagination: {
      defaultProps: {
        "aria-label": "navigation de pagination",
        getItemAriaLabel: (type2, page, selected) => {
          if (type2 === "page") {
            return `${selected ? "" : "Aller à la "}page ${page}`;
          }
          if (type2 === "first") {
            return "Aller à la première page";
          }
          if (type2 === "last") {
            return "Aller à la dernière page";
          }
          if (type2 === "next") {
            return "Aller à la page suivante";
          }
          return "Aller à la page précédente";
        }
      }
    }
  }
};
const itIT$1 = {
  components: {
    MuiBreadcrumbs: {
      defaultProps: {
        expandText: "Visualizza percorso"
      }
    },
    MuiTablePagination: {
      defaultProps: {
        getItemAriaLabel: (type2) => {
          if (type2 === "first") {
            return "Vai alla prima pagina";
          }
          if (type2 === "last") {
            return "Vai all'ultima pagina";
          }
          if (type2 === "next") {
            return "Vai alla pagina successiva";
          }
          return "Vai alla pagina precedente";
        },
        labelRowsPerPage: "Righe per pagina:",
        labelDisplayedRows: ({
          from: from2,
          to,
          count
        }) => `${from2}–${to} di ${count !== -1 ? count : `più di ${to}`}`
      }
    },
    MuiRating: {
      defaultProps: {
        getLabelText: (value) => `${value} Stell${value !== 1 ? "e" : "a"}`,
        emptyLabelText: "Vuoto"
      }
    },
    MuiAutocomplete: {
      defaultProps: {
        clearText: "Svuota",
        closeText: "Chiudi",
        loadingText: "Caricamento in corso…",
        noOptionsText: "Nessuna opzione",
        openText: "Apri"
      }
    },
    MuiAlert: {
      defaultProps: {
        closeText: "Chiudi"
      }
    },
    MuiPagination: {
      defaultProps: {
        "aria-label": "Navigazione impaginata",
        getItemAriaLabel: (type2, page, selected) => {
          if (type2 === "page") {
            return `${selected ? "" : "Vai alla "}pagina ${page}`;
          }
          if (type2 === "first") {
            return "Vai alla prima pagina";
          }
          if (type2 === "last") {
            return "Vai all'ultima pagina";
          }
          if (type2 === "next") {
            return "Vai alla pagina successiva";
          }
          return "Vai alla pagina precedente";
        }
      }
    }
  }
};
const nlNL$1 = {
  components: {
    MuiBreadcrumbs: {
      defaultProps: {
        expandText: "Pad tonen"
      }
    },
    MuiTablePagination: {
      defaultProps: {
        getItemAriaLabel: (type2) => {
          if (type2 === "first") {
            return "Ga naar eerste pagina";
          }
          if (type2 === "last") {
            return "Ga naar laatste pagina";
          }
          if (type2 === "next") {
            return "Ga naar volgende pagina";
          }
          return "Ga naar vorige pagina";
        },
        labelRowsPerPage: "Regels per pagina:",
        labelDisplayedRows: ({
          from: from2,
          to,
          count
        }) => `${from2}–${to} van ${count !== -1 ? count : `meer dan ${to}`}`
      }
    },
    MuiRating: {
      defaultProps: {
        getLabelText: (value) => `${value} Ster${value !== 1 ? "ren" : ""}`,
        emptyLabelText: "Leeg"
      }
    },
    MuiAutocomplete: {
      defaultProps: {
        clearText: "Wissen",
        closeText: "Sluiten",
        loadingText: "Laden…",
        noOptionsText: "Geen opties",
        openText: "Openen"
      }
    },
    MuiAlert: {
      defaultProps: {
        closeText: "Sluiten"
      }
    },
    MuiPagination: {
      defaultProps: {
        "aria-label": "Navigatie via paginering",
        getItemAriaLabel: (type2, page, selected) => {
          if (type2 === "page") {
            return `${selected ? "" : "Ga naar "}pagina ${page}`;
          }
          if (type2 === "first") {
            return "Ga naar eerste pagina";
          }
          if (type2 === "last") {
            return "Ga naar laatste pagina";
          }
          if (type2 === "next") {
            return "Ga naar volgende pagina";
          }
          return "Ga naar vorige pagina";
        }
      }
    }
  }
};
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
const getPickersLocalization = (pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
};
const enUSPickers = {
  // Calendar navigation
  previousMonth: "Previous month",
  nextMonth: "Next month",
  // View navigation
  openPreviousView: "Open previous view",
  openNextView: "Open next view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  // DateRange labels
  start: "Start",
  end: "End",
  startDate: "Start date",
  startTime: "Start time",
  endDate: "End date",
  endTime: "End time",
  // Action bar
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  // Toolbar titles
  datePickerToolbarTitle: "Select date",
  dateTimePickerToolbarTitle: "Select date & time",
  timePickerToolbarTitle: "Select time",
  dateRangePickerToolbarTitle: "Select date range",
  // Clock labels
  clockLabelText: (view, time, utils, formattedTime) => `Select ${view}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "No time selected" : `Selected time is ${formattedTime ?? utils.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} hours`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} seconds`,
  // Digital clock labels
  selectViewText: (view) => `Select ${view}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Week number",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Week ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  // Open picker labels
  openDatePickerDialogue: (value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Choose date, selected date is ${formattedDate ?? utils.format(value, "fullDate")}` : "Choose date",
  openTimePickerDialogue: (value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Choose time, selected time is ${formattedTime ?? utils.format(value, "fullTime")}` : "Choose time",
  fieldClearLabel: "Clear",
  // Table labels
  timeTableLabel: "pick time",
  dateTableLabel: "pick date",
  // Field section placeholders
  fieldYearPlaceholder: (params) => "Y".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Year",
  month: "Month",
  day: "Day",
  weekDay: "Week day",
  hours: "Hours",
  minutes: "Minutes",
  seconds: "Seconds",
  meridiem: "Meridiem",
  // Common
  empty: "Empty"
};
const enUS = getPickersLocalization(enUSPickers);
const views$2 = {
  hours: "Horas",
  minutes: "Minutos",
  seconds: "Segundos",
  meridiem: "Meridiano"
};
const esESPickers = {
  // Calendar navigation
  previousMonth: "Mes anterior",
  nextMonth: "Mes siguiente",
  // View navigation
  openPreviousView: "Abrir la última vista",
  openNextView: "Abrir la siguiente vista",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista anual está abierta, cambie a la vista de calendario" : "la vista de calendario está abierta, cambie a la vista anual",
  // DateRange labels
  start: "Empezar",
  end: "Terminar",
  startDate: "Fecha inicio",
  startTime: "Hora inicio",
  endDate: "Fecha final",
  endTime: "Hora final",
  // Action bar
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpiar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoy",
  // Toolbar titles
  datePickerToolbarTitle: "Seleccionar fecha",
  dateTimePickerToolbarTitle: "Seleccionar fecha y hora",
  timePickerToolbarTitle: "Seleccionar hora",
  dateRangePickerToolbarTitle: "Seleccionar rango de fecha",
  // Clock labels
  clockLabelText: (view, time, utils, formattedTime) => `Seleccione ${views$2[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "No hay hora seleccionada" : `La hora seleccionada es ${formattedTime ?? utils.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  // Digital clock labels
  selectViewText: (view) => `Seleccionar ${views$2[view]}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Número de semana",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Semana ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  // Open picker labels
  openDatePickerDialogue: (value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Elige fecha, la fecha elegida es ${formattedDate ?? utils.format(value, "fullDate")}` : "Elige fecha",
  openTimePickerDialogue: (value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Elige hora, la hora elegida es ${formattedTime ?? utils.format(value, "fullTime")}` : "Elige hora",
  fieldClearLabel: "Limpiar valor",
  // Table labels
  timeTableLabel: "elige hora",
  dateTableLabel: "elige fecha",
  // Field section placeholders
  fieldYearPlaceholder: (params) => "A".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Año",
  month: "Mes",
  day: "Dia",
  weekDay: "Dia de la semana",
  hours: "Horas",
  minutes: "Minutos",
  seconds: "Segundos",
  meridiem: "Meridiano",
  // Common
  empty: "Vacío"
};
const esES = getPickersLocalization(esESPickers);
const views$1 = {
  hours: "heures",
  minutes: "minutes",
  seconds: "secondes",
  meridiem: "méridien"
};
const frFRPickers = {
  // Calendar navigation
  previousMonth: "Mois précédent",
  nextMonth: "Mois suivant",
  // View navigation
  openPreviousView: "Ouvrir la vue précédente",
  openNextView: "Ouvrir la vue suivante",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "La vue année est ouverte, ouvrir la vue calendrier" : "La vue calendrier est ouverte, ouvrir la vue année",
  // DateRange labels
  start: "Début",
  end: "Fin",
  startDate: "Date de début",
  startTime: "Heure de début",
  endDate: "Date de fin",
  endTime: "Heure de fin",
  // Action bar
  cancelButtonLabel: "Annuler",
  clearButtonLabel: "Vider",
  okButtonLabel: "OK",
  todayButtonLabel: "Aujourd'hui",
  // Toolbar titles
  datePickerToolbarTitle: "Choisir une date",
  dateTimePickerToolbarTitle: "Choisir la date et l'heure",
  timePickerToolbarTitle: "Choisir l'heure",
  dateRangePickerToolbarTitle: "Choisir la plage de dates",
  // Clock labels
  clockLabelText: (view, time, utils, formattedTime) => `Choix des ${views$1[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "Aucune heure choisie" : `L'heure choisie est ${formattedTime ?? utils.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} heures`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} secondes`,
  // Digital clock labels
  selectViewText: (view) => `Choisir ${views$1[view]}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Semaine",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Semaine ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  // Open picker labels
  openDatePickerDialogue: (value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Choisir la date, la date sélectionnée est ${formattedDate ?? utils.format(value, "fullDate")}` : "Choisir la date",
  openTimePickerDialogue: (value, utils, formattedTime) => formattedTime ? `Choisir l'heure, l'heure sélectionnée est ${formattedTime ?? utils.format(value, "fullTime")}` : "Choisir l'heure",
  fieldClearLabel: "Effacer la valeur",
  // Table labels
  timeTableLabel: "choix de l'heure",
  dateTableLabel: "choix de la date",
  // Field section placeholders
  fieldYearPlaceholder: (params) => "A".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "JJ",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Année",
  month: "Mois",
  day: "Jour",
  weekDay: "Jour de la semaine",
  hours: "Heures",
  minutes: "Minutes",
  seconds: "Secondes",
  meridiem: "Méridien",
  // Common
  empty: "Vider"
};
const frFR = getPickersLocalization(frFRPickers);
const views = {
  hours: "le ore",
  minutes: "i minuti",
  seconds: "i secondi",
  meridiem: "il meridiano"
};
const itITPickers = {
  // Calendar navigation
  previousMonth: "Mese precedente",
  nextMonth: "Mese successivo",
  // View navigation
  openPreviousView: "Apri la vista precedente",
  openNextView: "Apri la vista successiva",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista dell'anno è aperta, passare alla vista del calendario" : "la vista dell'calendario è aperta, passare alla vista dell'anno",
  // DateRange labels
  start: "Inizio",
  end: "Fine",
  startDate: "Data di inizio",
  startTime: "Ora di inizio",
  endDate: "Data di fine",
  endTime: "Ora di fine",
  // Action bar
  cancelButtonLabel: "Cancellare",
  clearButtonLabel: "Sgomberare",
  okButtonLabel: "OK",
  todayButtonLabel: "Oggi",
  // Toolbar titles
  datePickerToolbarTitle: "Seleziona data",
  dateTimePickerToolbarTitle: "Seleziona data e orario",
  timePickerToolbarTitle: "Seleziona orario",
  dateRangePickerToolbarTitle: "Seleziona intervallo di date",
  // Clock labels
  clockLabelText: (view, time, utils, formattedTime) => `Seleziona ${views[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "Nessun orario selezionato" : `L'ora selezionata è ${formattedTime ?? utils.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} ore`,
  minutesClockNumberText: (minutes) => `${minutes} minuti`,
  secondsClockNumberText: (seconds) => `${seconds} secondi`,
  // Digital clock labels
  selectViewText: (view) => `Seleziona ${views[view]}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Numero settimana",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Settimana ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  // Open picker labels
  openDatePickerDialogue: (value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Scegli la data, la data selezionata è ${formattedDate ?? utils.format(value, "fullDate")}` : "Scegli la data",
  openTimePickerDialogue: (value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Scegli l'ora, l'ora selezionata è ${formattedTime ?? utils.format(value, "fullTime")}` : "Scegli l'ora",
  fieldClearLabel: "Cancella valore",
  // Table labels
  timeTableLabel: "scegli un'ora",
  dateTableLabel: "scegli una data",
  // Field section placeholders
  fieldYearPlaceholder: (params) => "A".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "GG",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "GGGG" : "GG",
  fieldHoursPlaceholder: () => "hh",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Anno",
  month: "Mese",
  day: "Giorno",
  weekDay: "Giorno della settimana",
  hours: "Ore",
  minutes: "Minuti",
  seconds: "Secondi",
  meridiem: "Meridiano",
  // Common
  empty: "Vuoto"
};
const itIT = getPickersLocalization(itITPickers);
const timeViews = {
  hours: "uren",
  minutes: "minuten",
  seconds: "seconden",
  meridiem: "meridium"
};
const nlNLPickers = {
  // Calendar navigation
  previousMonth: "Vorige maand",
  nextMonth: "Volgende maand",
  // View navigation
  openPreviousView: "Open vorige view",
  openNextView: "Open volgende view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "jaarweergave is geopend, schakel over naar kalenderweergave" : "kalenderweergave is geopend, switch naar jaarweergave",
  // DateRange labels
  start: "Start",
  end: "Einde",
  startDate: "Startdatum",
  startTime: "Starttijd",
  endDate: "Einddatum",
  endTime: "Eindtijd",
  // Action bar
  cancelButtonLabel: "Annuleren",
  clearButtonLabel: "Resetten",
  okButtonLabel: "OK",
  todayButtonLabel: "Vandaag",
  // Toolbar titles
  datePickerToolbarTitle: "Selecteer datum",
  dateTimePickerToolbarTitle: "Selecteer datum & tijd",
  timePickerToolbarTitle: "Selecteer tijd",
  dateRangePickerToolbarTitle: "Selecteer datumbereik",
  // Clock labels
  clockLabelText: (view, time, utils, formattedTime) => `Selecteer ${timeViews[view]}. ${!formattedTime && (time === null || !utils.isValid(time)) ? "Geen tijd geselecteerd" : `Geselecteerde tijd is ${formattedTime ?? utils.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} uren`,
  minutesClockNumberText: (minutes) => `${minutes} minuten`,
  secondsClockNumberText: (seconds) => `${seconds} seconden`,
  // Digital clock labels
  selectViewText: (view) => `Selecteer ${timeViews[view]}`,
  // Calendar labels
  calendarWeekNumberHeaderLabel: "Weeknummer",
  calendarWeekNumberHeaderText: "#",
  calendarWeekNumberAriaLabelText: (weekNumber) => `Week ${weekNumber}`,
  calendarWeekNumberText: (weekNumber) => `${weekNumber}`,
  // Open picker labels
  openDatePickerDialogue: (value, utils, formattedDate) => formattedDate || value !== null && utils.isValid(value) ? `Kies datum, geselecteerde datum is ${formattedDate ?? utils.format(value, "fullDate")}` : "Kies datum",
  openTimePickerDialogue: (value, utils, formattedTime) => formattedTime || value !== null && utils.isValid(value) ? `Kies tijd, geselecteerde tijd is ${formattedTime ?? utils.format(value, "fullTime")}` : "Kies tijd",
  fieldClearLabel: "Wissen",
  // Table labels
  timeTableLabel: "kies tijd",
  dateTableLabel: "kies datum",
  // Field section placeholders
  fieldYearPlaceholder: (params) => "J".repeat(params.digitAmount),
  fieldMonthPlaceholder: (params) => params.contentType === "letter" ? "MMMM" : "MM",
  fieldDayPlaceholder: () => "DD",
  fieldWeekDayPlaceholder: (params) => params.contentType === "letter" ? "EEEE" : "EE",
  fieldHoursPlaceholder: () => "uu",
  fieldMinutesPlaceholder: () => "mm",
  fieldSecondsPlaceholder: () => "ss",
  fieldMeridiemPlaceholder: () => "aa",
  // View names
  year: "Jaar",
  month: "Maand",
  day: "Dag",
  weekDay: "Weekdag",
  hours: "Uren",
  minutes: "Minuten",
  seconds: "Seconden",
  meridiem: "Middag",
  // Common
  empty: "Leeg"
};
const nlNL = getPickersLocalization(nlNLPickers);
var isArguments;
var hasRequiredIsArguments$1;
function requireIsArguments$1() {
  if (hasRequiredIsArguments$1) return isArguments;
  hasRequiredIsArguments$1 = 1;
  var toStr = Object.prototype.toString;
  isArguments = function isArguments2(value) {
    var str = toStr.call(value);
    var isArgs = str === "[object Arguments]";
    if (!isArgs) {
      isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
    }
    return isArgs;
  };
  return isArguments;
}
var implementation$2;
var hasRequiredImplementation$2;
function requireImplementation$2() {
  if (hasRequiredImplementation$2) return implementation$2;
  hasRequiredImplementation$2 = 1;
  var keysShim;
  if (!Object.keys) {
    var has2 = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var isArgs = requireIsArguments$1();
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
    var hasProtoEnumBug = isEnumerable.call(function() {
    }, "prototype");
    var dontEnums = [
      "toString",
      "toLocaleString",
      "valueOf",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "constructor"
    ];
    var equalsConstructorPrototype = function(o) {
      var ctor = o.constructor;
      return ctor && ctor.prototype === o;
    };
    var excludedKeys = {
      $applicationCache: true,
      $console: true,
      $external: true,
      $frame: true,
      $frameElement: true,
      $frames: true,
      $innerHeight: true,
      $innerWidth: true,
      $onmozfullscreenchange: true,
      $onmozfullscreenerror: true,
      $outerHeight: true,
      $outerWidth: true,
      $pageXOffset: true,
      $pageYOffset: true,
      $parent: true,
      $scrollLeft: true,
      $scrollTop: true,
      $scrollX: true,
      $scrollY: true,
      $self: true,
      $webkitIndexedDB: true,
      $webkitStorageInfo: true,
      $window: true
    };
    var hasAutomationEqualityBug = function() {
      if (typeof window === "undefined") {
        return false;
      }
      for (var k in window) {
        try {
          if (!excludedKeys["$" + k] && has2.call(window, k) && window[k] !== null && typeof window[k] === "object") {
            try {
              equalsConstructorPrototype(window[k]);
            } catch (e) {
              return true;
            }
          }
        } catch (e) {
          return true;
        }
      }
      return false;
    }();
    var equalsConstructorPrototypeIfNotBuggy = function(o) {
      if (typeof window === "undefined" || !hasAutomationEqualityBug) {
        return equalsConstructorPrototype(o);
      }
      try {
        return equalsConstructorPrototype(o);
      } catch (e) {
        return false;
      }
    };
    keysShim = function keys(object) {
      var isObject = object !== null && typeof object === "object";
      var isFunction = toStr.call(object) === "[object Function]";
      var isArguments2 = isArgs(object);
      var isString = isObject && toStr.call(object) === "[object String]";
      var theKeys = [];
      if (!isObject && !isFunction && !isArguments2) {
        throw new TypeError("Object.keys called on a non-object");
      }
      var skipProto = hasProtoEnumBug && isFunction;
      if (isString && object.length > 0 && !has2.call(object, 0)) {
        for (var i = 0; i < object.length; ++i) {
          theKeys.push(String(i));
        }
      }
      if (isArguments2 && object.length > 0) {
        for (var j = 0; j < object.length; ++j) {
          theKeys.push(String(j));
        }
      } else {
        for (var name in object) {
          if (!(skipProto && name === "prototype") && has2.call(object, name)) {
            theKeys.push(String(name));
          }
        }
      }
      if (hasDontEnumBug) {
        var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
        for (var k = 0; k < dontEnums.length; ++k) {
          if (!(skipConstructor && dontEnums[k] === "constructor") && has2.call(object, dontEnums[k])) {
            theKeys.push(dontEnums[k]);
          }
        }
      }
      return theKeys;
    };
  }
  implementation$2 = keysShim;
  return implementation$2;
}
var objectKeys;
var hasRequiredObjectKeys;
function requireObjectKeys() {
  if (hasRequiredObjectKeys) return objectKeys;
  hasRequiredObjectKeys = 1;
  var slice2 = Array.prototype.slice;
  var isArgs = requireIsArguments$1();
  var origKeys = Object.keys;
  var keysShim = origKeys ? function keys(o) {
    return origKeys(o);
  } : requireImplementation$2();
  var originalKeys = Object.keys;
  keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
      var keysWorksWithArguments = function() {
        var args = Object.keys(arguments);
        return args && args.length === arguments.length;
      }(1, 2);
      if (!keysWorksWithArguments) {
        Object.keys = function keys(object) {
          if (isArgs(object)) {
            return originalKeys(slice2.call(object));
          }
          return originalKeys(object);
        };
      }
    } else {
      Object.keys = keysShim;
    }
    return Object.keys || keysShim;
  };
  objectKeys = keysShim;
  return objectKeys;
}
var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty) return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var $defineProperty = Object.defineProperty || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = false;
    }
  }
  esDefineProperty = $defineProperty;
  return esDefineProperty;
}
var syntax;
var hasRequiredSyntax;
function requireSyntax() {
  if (hasRequiredSyntax) return syntax;
  hasRequiredSyntax = 1;
  syntax = SyntaxError;
  return syntax;
}
var type;
var hasRequiredType;
function requireType() {
  if (hasRequiredType) return type;
  hasRequiredType = 1;
  type = TypeError;
  return type;
}
var gOPD;
var hasRequiredGOPD;
function requireGOPD() {
  if (hasRequiredGOPD) return gOPD;
  hasRequiredGOPD = 1;
  gOPD = Object.getOwnPropertyDescriptor;
  return gOPD;
}
var gopd;
var hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd) return gopd;
  hasRequiredGopd = 1;
  var $gOPD = /* @__PURE__ */ requireGOPD();
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  gopd = $gOPD;
  return gopd;
}
var defineDataProperty;
var hasRequiredDefineDataProperty;
function requireDefineDataProperty() {
  if (hasRequiredDefineDataProperty) return defineDataProperty;
  hasRequiredDefineDataProperty = 1;
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var $SyntaxError = /* @__PURE__ */ requireSyntax();
  var $TypeError = /* @__PURE__ */ requireType();
  var gopd2 = /* @__PURE__ */ requireGopd();
  defineDataProperty = function defineDataProperty2(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd2 && gopd2(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
  return defineDataProperty;
}
var hasPropertyDescriptors_1;
var hasRequiredHasPropertyDescriptors;
function requireHasPropertyDescriptors() {
  if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
  hasRequiredHasPropertyDescriptors = 1;
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e) {
      return true;
    }
  };
  hasPropertyDescriptors_1 = hasPropertyDescriptors;
  return hasPropertyDescriptors_1;
}
var defineProperties_1;
var hasRequiredDefineProperties;
function requireDefineProperties() {
  if (hasRequiredDefineProperties) return defineProperties_1;
  hasRequiredDefineProperties = 1;
  var keys = requireObjectKeys();
  var hasSymbols2 = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
  var toStr = Object.prototype.toString;
  var concat = Array.prototype.concat;
  var defineDataProperty2 = /* @__PURE__ */ requireDefineDataProperty();
  var isFunction = function(fn) {
    return typeof fn === "function" && toStr.call(fn) === "[object Function]";
  };
  var supportsDescriptors = /* @__PURE__ */ requireHasPropertyDescriptors()();
  var defineProperty = function(object, name, value, predicate) {
    if (name in object) {
      if (predicate === true) {
        if (object[name] === value) {
          return;
        }
      } else if (!isFunction(predicate) || !predicate()) {
        return;
      }
    }
    if (supportsDescriptors) {
      defineDataProperty2(object, name, value, true);
    } else {
      defineDataProperty2(object, name, value);
    }
  };
  var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map);
    if (hasSymbols2) {
      props = concat.call(props, Object.getOwnPropertySymbols(map));
    }
    for (var i = 0; i < props.length; i += 1) {
      defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
    }
  };
  defineProperties.supportsDescriptors = !!supportsDescriptors;
  defineProperties_1 = defineProperties;
  return defineProperties_1;
}
var callBind = { exports: {} };
var esObjectAtoms;
var hasRequiredEsObjectAtoms;
function requireEsObjectAtoms() {
  if (hasRequiredEsObjectAtoms) return esObjectAtoms;
  hasRequiredEsObjectAtoms = 1;
  esObjectAtoms = Object;
  return esObjectAtoms;
}
var esErrors;
var hasRequiredEsErrors;
function requireEsErrors() {
  if (hasRequiredEsErrors) return esErrors;
  hasRequiredEsErrors = 1;
  esErrors = Error;
  return esErrors;
}
var _eval;
var hasRequired_eval;
function require_eval() {
  if (hasRequired_eval) return _eval;
  hasRequired_eval = 1;
  _eval = EvalError;
  return _eval;
}
var range;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange) return range;
  hasRequiredRange = 1;
  range = RangeError;
  return range;
}
var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef) return ref;
  hasRequiredRef = 1;
  ref = ReferenceError;
  return ref;
}
var uri;
var hasRequiredUri;
function requireUri() {
  if (hasRequiredUri) return uri;
  hasRequiredUri = 1;
  uri = URIError;
  return uri;
}
var abs$1;
var hasRequiredAbs;
function requireAbs() {
  if (hasRequiredAbs) return abs$1;
  hasRequiredAbs = 1;
  abs$1 = Math.abs;
  return abs$1;
}
var floor;
var hasRequiredFloor;
function requireFloor() {
  if (hasRequiredFloor) return floor;
  hasRequiredFloor = 1;
  floor = Math.floor;
  return floor;
}
var max;
var hasRequiredMax;
function requireMax() {
  if (hasRequiredMax) return max;
  hasRequiredMax = 1;
  max = Math.max;
  return max;
}
var min;
var hasRequiredMin;
function requireMin() {
  if (hasRequiredMin) return min;
  hasRequiredMin = 1;
  min = Math.min;
  return min;
}
var pow;
var hasRequiredPow;
function requirePow() {
  if (hasRequiredPow) return pow;
  hasRequiredPow = 1;
  pow = Math.pow;
  return pow;
}
var shams;
var hasRequiredShams;
function requireShams() {
  if (hasRequiredShams) return shams;
  hasRequiredShams = 1;
  shams = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (var _ in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = (
        /** @type {PropertyDescriptor} */
        Object.getOwnPropertyDescriptor(obj, sym)
      );
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return shams;
}
var hasSymbols;
var hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols) return hasSymbols;
  hasRequiredHasSymbols = 1;
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = requireShams();
  hasSymbols = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  return hasSymbols;
}
var implementation$1;
var hasRequiredImplementation$1;
function requireImplementation$1() {
  if (hasRequiredImplementation$1) return implementation$1;
  hasRequiredImplementation$1 = 1;
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max2 = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a, b) {
    var arr = [];
    for (var i = 0; i < a.length; i += 1) {
      arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset) {
    var arr = [];
    for (var i = offset, j = 0; i < arrLike.length; i += 1, j += 1) {
      arr[j] = arrLike[i];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i = 0; i < arr.length; i += 1) {
      str += arr[i];
      if (i + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  implementation$1 = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(
          this,
          concatty(args, arguments)
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(
        that,
        concatty(args, arguments)
      );
    };
    var boundLength = max2(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs[i] = "$" + i;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return implementation$1;
}
var functionBind;
var hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind) return functionBind;
  hasRequiredFunctionBind = 1;
  var implementation2 = requireImplementation$1();
  functionBind = Function.prototype.bind || implementation2;
  return functionBind;
}
var functionCall;
var hasRequiredFunctionCall;
function requireFunctionCall() {
  if (hasRequiredFunctionCall) return functionCall;
  hasRequiredFunctionCall = 1;
  functionCall = Function.prototype.call;
  return functionCall;
}
var functionApply;
var hasRequiredFunctionApply;
function requireFunctionApply() {
  if (hasRequiredFunctionApply) return functionApply;
  hasRequiredFunctionApply = 1;
  functionApply = Function.prototype.apply;
  return functionApply;
}
var reflectApply;
var hasRequiredReflectApply;
function requireReflectApply() {
  if (hasRequiredReflectApply) return reflectApply;
  hasRequiredReflectApply = 1;
  reflectApply = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
  return reflectApply;
}
var actualApply;
var hasRequiredActualApply;
function requireActualApply() {
  if (hasRequiredActualApply) return actualApply;
  hasRequiredActualApply = 1;
  var bind = requireFunctionBind();
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var $reflectApply = requireReflectApply();
  actualApply = $reflectApply || bind.call($call, $apply);
  return actualApply;
}
var callBindApplyHelpers;
var hasRequiredCallBindApplyHelpers;
function requireCallBindApplyHelpers() {
  if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;
  hasRequiredCallBindApplyHelpers = 1;
  var bind = requireFunctionBind();
  var $TypeError = /* @__PURE__ */ requireType();
  var $call = requireFunctionCall();
  var $actualApply = requireActualApply();
  callBindApplyHelpers = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== "function") {
      throw new $TypeError("a function is required");
    }
    return $actualApply(bind, $call, args);
  };
  return callBindApplyHelpers;
}
var get;
var hasRequiredGet$1;
function requireGet$1() {
  if (hasRequiredGet$1) return get;
  hasRequiredGet$1 = 1;
  var callBind2 = requireCallBindApplyHelpers();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var hasProtoAccessor;
  try {
    hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */
    [].__proto__ === Array.prototype;
  } catch (e) {
    if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
      throw e;
    }
  }
  var desc = !!hasProtoAccessor && gOPD2 && gOPD2(
    Object.prototype,
    /** @type {keyof typeof Object.prototype} */
    "__proto__"
  );
  var $Object = Object;
  var $getPrototypeOf = $Object.getPrototypeOf;
  get = desc && typeof desc.get === "function" ? callBind2([desc.get]) : typeof $getPrototypeOf === "function" ? (
    /** @type {import('./get')} */
    function getDunder(value) {
      return $getPrototypeOf(value == null ? value : $Object(value));
    }
  ) : false;
  return get;
}
var hasown;
var hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown) return hasown;
  hasRequiredHasown = 1;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = requireFunctionBind();
  hasown = bind.call(call, $hasOwn);
  return hasown;
}
var getIntrinsic;
var hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic) return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var undefined$1;
  var $Object = /* @__PURE__ */ requireEsObjectAtoms();
  var $Error = /* @__PURE__ */ requireEsErrors();
  var $EvalError = /* @__PURE__ */ require_eval();
  var $RangeError = /* @__PURE__ */ requireRange();
  var $ReferenceError = /* @__PURE__ */ requireRef();
  var $SyntaxError = /* @__PURE__ */ requireSyntax();
  var $TypeError = /* @__PURE__ */ requireType();
  var $URIError = /* @__PURE__ */ requireUri();
  var abs2 = /* @__PURE__ */ requireAbs();
  var floor2 = /* @__PURE__ */ requireFloor();
  var max2 = /* @__PURE__ */ requireMax();
  var min2 = /* @__PURE__ */ requireMin();
  var pow2 = /* @__PURE__ */ requirePow();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = /* @__PURE__ */ requireGopd();
  var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols2 = requireHasSymbols()();
  var getDunderProto = /* @__PURE__ */ requireGet$1();
  var getProto = typeof Reflect === "function" && Reflect.getPrototypeOf || $Object.getPrototypeOf || getDunderProto;
  var $apply = requireFunctionApply();
  var $call = requireFunctionCall();
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols2 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols2 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": $Object,
    "%Object.getOwnPropertyDescriptor%": $gOPD,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols2 && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet,
    "%Function.prototype.call%": $call,
    "%Function.prototype.apply%": $apply,
    "%Object.defineProperty%": $defineProperty,
    "%Math.abs%": abs2,
    "%Math.floor%": floor2,
    "%Math.max%": max2,
    "%Math.min%": min2,
    "%Math.pow%": pow2
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      var errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = requireFunctionBind();
  var hasOwn = /* @__PURE__ */ requireHasown();
  var $concat = bind.call($call, Array.prototype.concat);
  var $spliceApply = bind.call($apply, Array.prototype.splice);
  var $replace = bind.call($call, String.prototype.replace);
  var $strSlice = bind.call($call, String.prototype.slice);
  var $exec = bind.call($call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match2, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match2;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  getIntrinsic = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  return getIntrinsic;
}
var setFunctionLength;
var hasRequiredSetFunctionLength;
function requireSetFunctionLength() {
  if (hasRequiredSetFunctionLength) return setFunctionLength;
  hasRequiredSetFunctionLength = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var define = /* @__PURE__ */ requireDefineDataProperty();
  var hasDescriptors = /* @__PURE__ */ requireHasPropertyDescriptors()();
  var gOPD2 = /* @__PURE__ */ requireGopd();
  var $TypeError = /* @__PURE__ */ requireType();
  var $floor = GetIntrinsic("%Math.floor%");
  setFunctionLength = function setFunctionLength2(fn, length2) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length2 !== "number" || length2 < 0 || length2 > 4294967295 || $floor(length2) !== length2) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD2) {
      var desc = gOPD2(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length2,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length2
        );
      }
    }
    return fn;
  };
  return setFunctionLength;
}
var applyBind;
var hasRequiredApplyBind;
function requireApplyBind() {
  if (hasRequiredApplyBind) return applyBind;
  hasRequiredApplyBind = 1;
  var bind = requireFunctionBind();
  var $apply = requireFunctionApply();
  var actualApply2 = requireActualApply();
  applyBind = function applyBind2() {
    return actualApply2(bind, $apply, arguments);
  };
  return applyBind;
}
var hasRequiredCallBind;
function requireCallBind() {
  if (hasRequiredCallBind) return callBind.exports;
  hasRequiredCallBind = 1;
  (function(module) {
    var setFunctionLength2 = /* @__PURE__ */ requireSetFunctionLength();
    var $defineProperty = /* @__PURE__ */ requireEsDefineProperty();
    var callBindBasic = requireCallBindApplyHelpers();
    var applyBind2 = requireApplyBind();
    module.exports = function callBind2(originalFunction) {
      var func = callBindBasic(arguments);
      var adjustedLength = originalFunction.length - (arguments.length - 1);
      return setFunctionLength2(
        func,
        1 + (adjustedLength > 0 ? adjustedLength : 0),
        true
      );
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind2 });
    } else {
      module.exports.apply = applyBind2;
    }
  })(callBind);
  return callBind.exports;
}
var RequireObjectCoercible;
var hasRequiredRequireObjectCoercible;
function requireRequireObjectCoercible() {
  if (hasRequiredRequireObjectCoercible) return RequireObjectCoercible;
  hasRequiredRequireObjectCoercible = 1;
  var $TypeError = /* @__PURE__ */ requireType();
  RequireObjectCoercible = function RequireObjectCoercible2(value) {
    if (value == null) {
      throw new $TypeError(arguments.length > 0 && arguments[1] || "Cannot call method on " + value);
    }
    return value;
  };
  return RequireObjectCoercible;
}
var callBound;
var hasRequiredCallBound;
function requireCallBound() {
  if (hasRequiredCallBound) return callBound;
  hasRequiredCallBound = 1;
  var GetIntrinsic = /* @__PURE__ */ requireGetIntrinsic();
  var callBind2 = requireCallBind();
  var $indexOf = callBind2(GetIntrinsic("String.prototype.indexOf"));
  callBound = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind2(intrinsic);
    }
    return intrinsic;
  };
  return callBound;
}
var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;
  var RequireObjectCoercible2 = /* @__PURE__ */ requireRequireObjectCoercible();
  var callBound2 = requireCallBound();
  var $isEnumerable = callBound2("Object.prototype.propertyIsEnumerable");
  var $push = callBound2("Array.prototype.push");
  implementation = function entries(O) {
    var obj = RequireObjectCoercible2(O);
    var entrys = [];
    for (var key in obj) {
      if ($isEnumerable(obj, key)) {
        $push(entrys, [key, obj[key]]);
      }
    }
    return entrys;
  };
  return implementation;
}
var polyfill;
var hasRequiredPolyfill;
function requirePolyfill() {
  if (hasRequiredPolyfill) return polyfill;
  hasRequiredPolyfill = 1;
  var implementation2 = requireImplementation();
  polyfill = function getPolyfill() {
    return typeof Object.entries === "function" ? Object.entries : implementation2;
  };
  return polyfill;
}
var shim;
var hasRequiredShim;
function requireShim() {
  if (hasRequiredShim) return shim;
  hasRequiredShim = 1;
  var getPolyfill = requirePolyfill();
  var define = requireDefineProperties();
  shim = function shimEntries() {
    var polyfill2 = getPolyfill();
    define(Object, { entries: polyfill2 }, {
      entries: function testEntries() {
        return Object.entries !== polyfill2;
      }
    });
    return polyfill2;
  };
  return shim;
}
var object_entries;
var hasRequiredObject_entries;
function requireObject_entries() {
  if (hasRequiredObject_entries) return object_entries;
  hasRequiredObject_entries = 1;
  var define = requireDefineProperties();
  var callBind2 = requireCallBind();
  var implementation2 = requireImplementation();
  var getPolyfill = requirePolyfill();
  var shim2 = requireShim();
  var polyfill2 = callBind2(getPolyfill(), Object);
  define(polyfill2, {
    getPolyfill,
    implementation: implementation2,
    shim: shim2
  });
  object_entries = polyfill2;
  return object_entries;
}
var warning_1;
var hasRequiredWarning;
function requireWarning() {
  if (hasRequiredWarning) return warning_1;
  hasRequiredWarning = 1;
  var __DEV__ = process.env.NODE_ENV !== "production";
  var warning = function() {
  };
  if (__DEV__) {
    var printWarning = function printWarning2(format, args) {
      var len = arguments.length;
      args = new Array(len > 1 ? len - 1 : 0);
      for (var key = 1; key < len; key++) {
        args[key - 1] = arguments[key];
      }
      var argIndex = 0;
      var message = "Warning: " + format.replace(/%s/g, function() {
        return args[argIndex++];
      });
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
    warning = function(condition, format, args) {
      var len = arguments.length;
      args = new Array(len > 2 ? len - 2 : 0);
      for (var key = 2; key < len; key++) {
        args[key - 2] = arguments[key];
      }
      if (format === void 0) {
        throw new Error(
          "`warning(condition, format, ...args)` requires a warning message argument"
        );
      }
      if (!condition) {
        printWarning.apply(null, [format].concat(args));
      }
    };
  }
  warning_1 = warning;
  return warning_1;
}
var nodePolyglot;
var hasRequiredNodePolyglot;
function requireNodePolyglot() {
  if (hasRequiredNodePolyglot) return nodePolyglot;
  hasRequiredNodePolyglot = 1;
  var entries = requireObject_entries();
  var warning = requireWarning();
  var has2 = /* @__PURE__ */ requireHasown();
  var warn = function warn2(message) {
    warning(false, message);
  };
  var defaultReplace = String.prototype.replace;
  var split = String.prototype.split;
  var delimiter2 = "||||";
  var russianPluralGroups = function(n) {
    var lastTwo = n % 100;
    var end = lastTwo % 10;
    if (lastTwo !== 11 && end === 1) {
      return 0;
    }
    if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {
      return 1;
    }
    return 2;
  };
  var defaultPluralRules = {
    // Mapping from pluralization group plural logic.
    pluralTypes: {
      arabic: function(n) {
        if (n < 3) {
          return n;
        }
        var lastTwo = n % 100;
        if (lastTwo >= 3 && lastTwo <= 10) return 3;
        return lastTwo >= 11 ? 4 : 5;
      },
      bosnian_serbian: russianPluralGroups,
      chinese: function() {
        return 0;
      },
      croatian: russianPluralGroups,
      french: function(n) {
        return n >= 2 ? 1 : 0;
      },
      german: function(n) {
        return n !== 1 ? 1 : 0;
      },
      russian: russianPluralGroups,
      lithuanian: function(n) {
        if (n % 10 === 1 && n % 100 !== 11) {
          return 0;
        }
        return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;
      },
      czech: function(n) {
        if (n === 1) {
          return 0;
        }
        return n >= 2 && n <= 4 ? 1 : 2;
      },
      polish: function(n) {
        if (n === 1) {
          return 0;
        }
        var end = n % 10;
        return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
      },
      icelandic: function(n) {
        return n % 10 !== 1 || n % 100 === 11 ? 1 : 0;
      },
      slovenian: function(n) {
        var lastTwo = n % 100;
        if (lastTwo === 1) {
          return 0;
        }
        if (lastTwo === 2) {
          return 1;
        }
        if (lastTwo === 3 || lastTwo === 4) {
          return 2;
        }
        return 3;
      },
      romanian: function(n) {
        if (n === 1) {
          return 0;
        }
        var lastTwo = n % 100;
        if (n === 0 || lastTwo >= 2 && lastTwo <= 19) {
          return 1;
        }
        return 2;
      },
      ukrainian: russianPluralGroups
    },
    // Mapping from pluralization group to individual language codes/locales.
    // Will look up based on exact match, if not found and it's a locale will parse the locale
    // for language code, and if that does not exist will default to 'en'
    pluralTypeToLanguages: {
      arabic: ["ar"],
      bosnian_serbian: ["bs-Latn-BA", "bs-Cyrl-BA", "srl-RS", "sr-RS"],
      chinese: ["id", "id-ID", "ja", "ko", "ko-KR", "lo", "ms", "th", "th-TH", "zh"],
      croatian: ["hr", "hr-HR"],
      german: ["fa", "da", "de", "en", "es", "fi", "el", "he", "hi-IN", "hu", "hu-HU", "it", "nl", "no", "pt", "sv", "tr"],
      french: ["fr", "tl", "pt-br"],
      russian: ["ru", "ru-RU"],
      lithuanian: ["lt"],
      czech: ["cs", "cs-CZ", "sk"],
      polish: ["pl"],
      icelandic: ["is", "mk"],
      slovenian: ["sl-SL"],
      romanian: ["ro"],
      ukrainian: ["uk", "ua"]
    }
  };
  function langToTypeMap(mapping) {
    var ret = {};
    var mappingEntries = entries(mapping);
    for (var i = 0; i < mappingEntries.length; i += 1) {
      var type2 = mappingEntries[i][0];
      var langs = mappingEntries[i][1];
      for (var j = 0; j < langs.length; j += 1) {
        ret[langs[j]] = type2;
      }
    }
    return ret;
  }
  function pluralTypeName(pluralRules, locale) {
    var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);
    return langToPluralType[locale] || langToPluralType[split.call(locale, /-/, 1)[0]] || langToPluralType.en;
  }
  function pluralTypeIndex(pluralRules, pluralType, count) {
    return pluralRules.pluralTypes[pluralType](count);
  }
  function createMemoizedPluralTypeNameSelector() {
    var localePluralTypeStorage = {};
    return function(pluralRules, locale) {
      var pluralType = localePluralTypeStorage[locale];
      if (pluralType && !pluralRules.pluralTypes[pluralType]) {
        pluralType = null;
        localePluralTypeStorage[locale] = pluralType;
      }
      if (!pluralType) {
        pluralType = pluralTypeName(pluralRules, locale);
        if (pluralType) {
          localePluralTypeStorage[locale] = pluralType;
        }
      }
      return pluralType;
    };
  }
  function escape2(token2) {
    return token2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  function constructTokenRegex(opts) {
    var prefix2 = opts && opts.prefix || "%{";
    var suffix = opts && opts.suffix || "}";
    if (prefix2 === delimiter2 || suffix === delimiter2) {
      throw new RangeError('"' + delimiter2 + '" token is reserved for pluralization');
    }
    return new RegExp(escape2(prefix2) + "(.*?)" + escape2(suffix), "g");
  }
  var memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();
  var defaultTokenRegex = /%\{(.*?)\}/g;
  function transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules, replaceImplementation) {
    if (typeof phrase !== "string") {
      throw new TypeError("Polyglot.transformPhrase expects argument #1 to be string");
    }
    if (substitutions == null) {
      return phrase;
    }
    var result = phrase;
    var interpolationRegex = tokenRegex || defaultTokenRegex;
    var replace2 = replaceImplementation || defaultReplace;
    var options = typeof substitutions === "number" ? { smart_count: substitutions } : substitutions;
    if (options.smart_count != null && phrase) {
      var pluralRulesOrDefault = pluralRules || defaultPluralRules;
      var texts = split.call(phrase, delimiter2);
      var bestLocale = locale || "en";
      var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);
      var pluralTypeWithCount = pluralTypeIndex(
        pluralRulesOrDefault,
        pluralType,
        options.smart_count
      );
      result = defaultReplace.call(texts[pluralTypeWithCount] || texts[0], /^[^\S]*|[^\S]*$/g, "");
    }
    result = replace2.call(result, interpolationRegex, function(expression, argument) {
      if (!has2(options, argument) || options[argument] == null) {
        return expression;
      }
      return options[argument];
    });
    return result;
  }
  function Polyglot2(options) {
    var opts = options || {};
    this.phrases = {};
    this.extend(opts.phrases || {});
    this.currentLocale = opts.locale || "en";
    var allowMissing = opts.allowMissing ? transformPhrase : null;
    this.onMissingKey = typeof opts.onMissingKey === "function" ? opts.onMissingKey : allowMissing;
    this.warn = opts.warn || warn;
    this.replaceImplementation = opts.replace || defaultReplace;
    this.tokenRegex = constructTokenRegex(opts.interpolation);
    this.pluralRules = opts.pluralRules || defaultPluralRules;
  }
  Polyglot2.prototype.locale = function(newLocale) {
    if (newLocale) this.currentLocale = newLocale;
    return this.currentLocale;
  };
  Polyglot2.prototype.extend = function(morePhrases, prefix2) {
    var phraseEntries = entries(morePhrases || {});
    for (var i = 0; i < phraseEntries.length; i += 1) {
      var key = phraseEntries[i][0];
      var phrase = phraseEntries[i][1];
      var prefixedKey = prefix2 ? prefix2 + "." + key : key;
      if (typeof phrase === "object") {
        this.extend(phrase, prefixedKey);
      } else {
        this.phrases[prefixedKey] = phrase;
      }
    }
  };
  Polyglot2.prototype.unset = function(morePhrases, prefix2) {
    if (typeof morePhrases === "string") {
      delete this.phrases[morePhrases];
    } else {
      var phraseEntries = entries(morePhrases || {});
      for (var i = 0; i < phraseEntries.length; i += 1) {
        var key = phraseEntries[i][0];
        var phrase = phraseEntries[i][1];
        var prefixedKey = prefix2 ? prefix2 + "." + key : key;
        if (typeof phrase === "object") {
          this.unset(phrase, prefixedKey);
        } else {
          delete this.phrases[prefixedKey];
        }
      }
    }
  };
  Polyglot2.prototype.clear = function() {
    this.phrases = {};
  };
  Polyglot2.prototype.replace = function(newPhrases) {
    this.clear();
    this.extend(newPhrases);
  };
  Polyglot2.prototype.t = function(key, options) {
    var phrase, result;
    var opts = options == null ? {} : options;
    if (typeof this.phrases[key] === "string") {
      phrase = this.phrases[key];
    } else if (typeof opts._ === "string") {
      phrase = opts._;
    } else if (this.onMissingKey) {
      var onMissingKey = this.onMissingKey;
      result = onMissingKey(
        key,
        opts,
        this.currentLocale,
        this.tokenRegex,
        this.pluralRules,
        this.replaceImplementation
      );
    } else {
      this.warn('Missing translation for key: "' + key + '"');
      result = key;
    }
    if (typeof phrase === "string") {
      result = transformPhrase(
        phrase,
        opts,
        this.currentLocale,
        this.tokenRegex,
        this.pluralRules,
        this.replaceImplementation
      );
    }
    return result;
  };
  Polyglot2.prototype.has = function(key) {
    return has2(this.phrases, key);
  };
  Polyglot2.transformPhrase = function transform(phrase, substitutions, locale) {
    return transformPhrase(phrase, substitutions, locale);
  };
  nodePolyglot = Polyglot2;
  return nodePolyglot;
}
var nodePolyglotExports = requireNodePolyglot();
const Polyglot = /* @__PURE__ */ getDefaultExportFromCjs(nodePolyglotExports);
const prefix$1 = "gqlb";
class LocalMemory {
  constructor(props, key, defaultValue) {
    __publicField(this, "memoryKey");
    __publicField(this, "props");
    __publicField(this, "defaultValue");
    this.memoryKey = key !== void 0 ? `${prefix$1}-${key}` : prefix$1;
    this.props = props;
    this.defaultValue = defaultValue;
  }
  getKey(k) {
    return `${this.memoryKey}-${k}`;
  }
  get memory() {
    const { localStorage } = this.props;
    if (localStorage) {
      const memory = localStorage.getItem(this.memoryKey);
      if (memory === null) {
        return this.defaultValue;
      }
      const m = JSON.parse(memory);
      return m;
    }
  }
  set(m) {
    const memory = { ...this.memory, ...m };
    const { localStorage } = this.props;
    return localStorage && localStorage.setItem(this.memoryKey, JSON.stringify(memory));
  }
  seta(key, o) {
    const { localStorage } = this.props;
    if (localStorage) {
      if (o === void 0) {
        localStorage.removeItem(this.getKey(`${key}`));
      } else {
        localStorage.setItem(this.getKey(`${key}`), JSON.stringify(o));
      }
    }
  }
  geta(key) {
    const { localStorage } = this.props;
    if (localStorage) {
      const memory = localStorage.getItem(this.getKey(`${key}`));
      return memory ? JSON.parse(memory) : void 0;
    }
  }
}
var window_1;
var hasRequiredWindow;
function requireWindow() {
  if (hasRequiredWindow) return window_1;
  hasRequiredWindow = 1;
  var win;
  if (typeof window !== "undefined") {
    win = window;
  } else if (typeof window !== "undefined") {
    win = window;
  } else if (typeof self !== "undefined") {
    win = self;
  } else {
    win = {};
  }
  window_1 = win;
  return window_1;
}
var windowExports = requireWindow();
const window$1 = /* @__PURE__ */ getDefaultExportFromCjs(windowExports);
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var document_1;
var hasRequiredDocument;
function requireDocument() {
  if (hasRequiredDocument) return document_1;
  hasRequiredDocument = 1;
  var topLevel = typeof window !== "undefined" ? window : typeof window !== "undefined" ? window : {};
  var minDoc = require$$0;
  var doccy;
  if (typeof document !== "undefined") {
    doccy = document;
  } else {
    doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
    if (!doccy) {
      doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc;
    }
  }
  document_1 = doccy;
  return document_1;
}
var documentExports = requireDocument();
const document$1 = /* @__PURE__ */ getDefaultExportFromCjs(documentExports);
function getNavigator() {
  if (typeof navigator !== "undefined") {
    return navigator;
  }
}
function getLocalStorage() {
  const window2 = getWindow();
  if (window2 == null ? void 0 : window2.localStorage) {
    return window2.localStorage;
  }
}
function getWindow() {
  return window$1;
}
function getDocument() {
  return document$1;
}
function getDocumentLocation() {
  var _a;
  return (_a = getDocument()) == null ? void 0 : _a.location;
}
class GQLBMemory extends LocalMemory {
  set language(ln) {
    this.seta("language", ln);
  }
  get language() {
    return this.geta("language");
  }
}
const gqlbMemory = new GQLBMemory({ localStorage: getLocalStorage() }, "gqlb", {});
function useI18nApiOptional() {
  return useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(polyglotApiAtom);
}
function useI18nApi() {
  const i18n = useI18nApiOptional();
  if (!i18n) {
    throw new Error("i18n not initialized in state");
  }
  return i18n;
}
const supportedLanguages = [
  addLanguage("fr", "Français", frFR$1, "fr", frFR),
  addLanguage("en", "English", enUS$1, "en-gb", enUS, "gb"),
  addLanguage("it", "Italiano", itIT$1, "it", itIT),
  addLanguage("es", "Español", esES$1, "es", esES),
  addLanguage("nl", "Nederlands", nlNL$1, "nl", nlNL)
  // addLanguage('pt', 'Português'),
  // addLanguage('de', 'Deutsche'),
  // addLanguage('iw', 'עברית'),
  // addLanguage('ga', 'Gaeilge', 'IE'),
  // addLanguage('vi', 'Tiếng Việt'),
  // addLanguage('ar', 'عربى'),
  // addLanguage('ja', '日本語'),
  // addLanguage('fa', 'فارسی'),
  // addLanguage('zh', '‎简体中文‎'),
  // addLanguage('ru', '‎Pу́сский‎'),
  // addLanguage('sv', 'Svenska'),
  // addLanguage('ko', '한국어'),
  // addLanguage('fi', 'Suomi'),
  // addLanguage('da', 'Dansk')
];
function addLanguage(code, name, mui, momentCode, muiDatePicker, flagCode) {
  const language = {
    name,
    code,
    mui,
    momentCode,
    muiDatePicker,
    flagCode: flagCode ?? code
  };
  return language;
}
function getBrowserLocal() {
  const navigator2 = getNavigator();
  if (navigator2) {
    const locale = navigator2.language;
    const regexp = new RegExp(/(.*)-(.*)/);
    const match2 = locale.match(regexp);
    if (match2) {
      return match2[1];
    }
  }
  return "fr";
}
const origins$2 = ["https://localhost", "http://127.0.0.1:8080/"];
const endpoints$2 = { "backend": "https://localhost" };
const authentication$2 = { "google": { "clientId": "562537270489-apu3gn8jqr0aa2tj2mp80g2pi5clge7u.apps.googleusercontent.com" }, "auth0": { "clientId": "KnVZnc63CCohWDHsRLSdVp1uZz3lD9Lq" }, "msal": { "clientId": "a7f08378-a689-494c-b77c-c49fa1aa19cb" }, "okta-sephora": { "clientId": "0oa3pgmpbk6xfNYjc0x7" }, "te-digital-pass": { "clientId": "app-surfy-prod" }, "azure-vca": { "clientId": "0271aec8-d6fa-4328-82d5-93463001184a" }, "azure-te": { "clientId": "5792f57f-cf0d-4cf3-965c-7adcfa883fa3" } };
const google$2 = { "maps": "AIzaSyBRiwPWbrCraxyv6aAv-AuLSCpLy34FC0M" };
const dev = {
  origins: origins$2,
  endpoints: endpoints$2,
  authentication: authentication$2,
  google: google$2
};
const logRocket$1 = { "appId": "surfy/surfy-alpha" };
const authentication$1 = { "auth0": { "clientId": "gxqMWyQ1p4YAyi0sG7TS4VETVhHOPYjI" }, "msal": { "clientId": "d37902ef-290e-4b1f-b97d-c456e3a3f424" }, "google": { "clientId": "66899640159-4o5e9mbti0sap7md07vfaoplppbr9h3p.apps.googleusercontent.com" }, "okta-sephora": { "clientId": "0oa3pgmpbk6xfNYjc0x7" }, "te-digital-pass": { "clientId": "app-surfy-prod" }, "azure-vca": { "clientId": "0271aec8-d6fa-4328-82d5-93463001184a" }, "azure-te": { "clientId": "5792f57f-cf0d-4cf3-965c-7adcfa883fa3" } };
const origins$1 = ["https://app-alpha.surfy.pro"];
const endpoints$1 = { "backend": "https://app-alpha.surfy.pro" };
const google$1 = { "maps": "AIzaSyDLqHjb5Taeglcv5kfIeWM6pEwzCwMMjFU" };
const alpha$1 = {
  logRocket: logRocket$1,
  authentication: authentication$1,
  origins: origins$1,
  endpoints: endpoints$1,
  google: google$1
};
const logRocket = { "appId": "surfy/surfy-production-9rwgq" };
const origins = ["https://app.surfy.pro", "https://help.surfy.pro"];
const endpoints = { "backend": "https://app.surfy.pro" };
const google = { "maps": "AIzaSyDLqHjb5Taeglcv5kfIeWM6pEwzCwMMjFU" };
const authentication = { "auth0": { "clientId": "pqF4xIJxyikS5FD7t11QUT6VH51JtXDS" }, "msal": { "clientId": "194145f8-c6dd-4fff-9162-4069cbd0c0b1" }, "google": { "clientId": "905042472880-rv5v9r3a45c02dp3nht2klqhdrqmlo6b.apps.googleusercontent.com" }, "okta-sephora": { "clientId": "0oa7exckjf7mnoM7c0i7" }, "te-digital-pass": { "clientId": "app-surfy-prod" }, "azure-vca": { "clientId": "0271aec8-d6fa-4328-82d5-93463001184a" }, "azure-te": { "clientId": "52c5380a-833f-422a-ad56-3d4a98842353" } };
const p2 = {
  logRocket,
  origins,
  endpoints,
  google,
  authentication
};
const providers = ["AzureADv2", "google-oauth2", "linkedin", "windowslive"];
const cloudinary = { "name": "app-surfy-pro", "presets": { "signed": "signed-upload", "unsigned": "by79qv6c" } };
const profile = { "logo": { "square": "https://res.cloudinary.com/app-surfy-pro/image/upload/v1515245191/app/surfy/logo-surfy-square.png", "normal": "https://res.cloudinary.com/app-surfy-pro/image/upload/v1660809543/app/surfy/logo-surfy.png" } };
const base = {
  providers,
  cloudinary,
  profile
};
var _freeGlobal;
var hasRequired_freeGlobal;
function require_freeGlobal() {
  if (hasRequired_freeGlobal) return _freeGlobal;
  hasRequired_freeGlobal = 1;
  var freeGlobal = typeof window == "object" && window && window.Object === Object && window;
  _freeGlobal = freeGlobal;
  return _freeGlobal;
}
var _root;
var hasRequired_root;
function require_root() {
  if (hasRequired_root) return _root;
  hasRequired_root = 1;
  var freeGlobal = require_freeGlobal();
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  _root = root;
  return _root;
}
var _Symbol;
var hasRequired_Symbol;
function require_Symbol() {
  if (hasRequired_Symbol) return _Symbol;
  hasRequired_Symbol = 1;
  var root = require_root();
  var Symbol2 = root.Symbol;
  _Symbol = Symbol2;
  return _Symbol;
}
var _getRawTag;
var hasRequired_getRawTag;
function require_getRawTag() {
  if (hasRequired_getRawTag) return _getRawTag;
  hasRequired_getRawTag = 1;
  var Symbol2 = require_Symbol();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  _getRawTag = getRawTag;
  return _getRawTag;
}
var _objectToString;
var hasRequired_objectToString;
function require_objectToString() {
  if (hasRequired_objectToString) return _objectToString;
  hasRequired_objectToString = 1;
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  _objectToString = objectToString;
  return _objectToString;
}
var _baseGetTag;
var hasRequired_baseGetTag;
function require_baseGetTag() {
  if (hasRequired_baseGetTag) return _baseGetTag;
  hasRequired_baseGetTag = 1;
  var Symbol2 = require_Symbol(), getRawTag = require_getRawTag(), objectToString = require_objectToString();
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  _baseGetTag = baseGetTag;
  return _baseGetTag;
}
var isObject_1;
var hasRequiredIsObject;
function requireIsObject() {
  if (hasRequiredIsObject) return isObject_1;
  hasRequiredIsObject = 1;
  function isObject(value) {
    var type2 = typeof value;
    return value != null && (type2 == "object" || type2 == "function");
  }
  isObject_1 = isObject;
  return isObject_1;
}
var isFunction_1;
var hasRequiredIsFunction;
function requireIsFunction() {
  if (hasRequiredIsFunction) return isFunction_1;
  hasRequiredIsFunction = 1;
  var baseGetTag = require_baseGetTag(), isObject = requireIsObject();
  var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  isFunction_1 = isFunction;
  return isFunction_1;
}
var _coreJsData;
var hasRequired_coreJsData;
function require_coreJsData() {
  if (hasRequired_coreJsData) return _coreJsData;
  hasRequired_coreJsData = 1;
  var root = require_root();
  var coreJsData = root["__core-js_shared__"];
  _coreJsData = coreJsData;
  return _coreJsData;
}
var _isMasked;
var hasRequired_isMasked;
function require_isMasked() {
  if (hasRequired_isMasked) return _isMasked;
  hasRequired_isMasked = 1;
  var coreJsData = require_coreJsData();
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  _isMasked = isMasked;
  return _isMasked;
}
var _toSource;
var hasRequired_toSource;
function require_toSource() {
  if (hasRequired_toSource) return _toSource;
  hasRequired_toSource = 1;
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  _toSource = toSource;
  return _toSource;
}
var _baseIsNative;
var hasRequired_baseIsNative;
function require_baseIsNative() {
  if (hasRequired_baseIsNative) return _baseIsNative;
  hasRequired_baseIsNative = 1;
  var isFunction = requireIsFunction(), isMasked = require_isMasked(), isObject = requireIsObject(), toSource = require_toSource();
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype, objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  _baseIsNative = baseIsNative;
  return _baseIsNative;
}
var _getValue;
var hasRequired_getValue;
function require_getValue() {
  if (hasRequired_getValue) return _getValue;
  hasRequired_getValue = 1;
  function getValue2(object, key) {
    return object == null ? void 0 : object[key];
  }
  _getValue = getValue2;
  return _getValue;
}
var _getNative;
var hasRequired_getNative;
function require_getNative() {
  if (hasRequired_getNative) return _getNative;
  hasRequired_getNative = 1;
  var baseIsNative = require_baseIsNative(), getValue2 = require_getValue();
  function getNative(object, key) {
    var value = getValue2(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  _getNative = getNative;
  return _getNative;
}
var _nativeCreate;
var hasRequired_nativeCreate;
function require_nativeCreate() {
  if (hasRequired_nativeCreate) return _nativeCreate;
  hasRequired_nativeCreate = 1;
  var getNative = require_getNative();
  var nativeCreate = getNative(Object, "create");
  _nativeCreate = nativeCreate;
  return _nativeCreate;
}
var _hashClear;
var hasRequired_hashClear;
function require_hashClear() {
  if (hasRequired_hashClear) return _hashClear;
  hasRequired_hashClear = 1;
  var nativeCreate = require_nativeCreate();
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  _hashClear = hashClear;
  return _hashClear;
}
var _hashDelete;
var hasRequired_hashDelete;
function require_hashDelete() {
  if (hasRequired_hashDelete) return _hashDelete;
  hasRequired_hashDelete = 1;
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  _hashDelete = hashDelete;
  return _hashDelete;
}
var _hashGet;
var hasRequired_hashGet;
function require_hashGet() {
  if (hasRequired_hashGet) return _hashGet;
  hasRequired_hashGet = 1;
  var nativeCreate = require_nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : void 0;
  }
  _hashGet = hashGet;
  return _hashGet;
}
var _hashHas;
var hasRequired_hashHas;
function require_hashHas() {
  if (hasRequired_hashHas) return _hashHas;
  hasRequired_hashHas = 1;
  var nativeCreate = require_nativeCreate();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
  }
  _hashHas = hashHas;
  return _hashHas;
}
var _hashSet;
var hasRequired_hashSet;
function require_hashSet() {
  if (hasRequired_hashSet) return _hashSet;
  hasRequired_hashSet = 1;
  var nativeCreate = require_nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  _hashSet = hashSet;
  return _hashSet;
}
var _Hash;
var hasRequired_Hash;
function require_Hash() {
  if (hasRequired_Hash) return _Hash;
  hasRequired_Hash = 1;
  var hashClear = require_hashClear(), hashDelete = require_hashDelete(), hashGet = require_hashGet(), hashHas = require_hashHas(), hashSet = require_hashSet();
  function Hash(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  _Hash = Hash;
  return _Hash;
}
var _listCacheClear;
var hasRequired_listCacheClear;
function require_listCacheClear() {
  if (hasRequired_listCacheClear) return _listCacheClear;
  hasRequired_listCacheClear = 1;
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  _listCacheClear = listCacheClear;
  return _listCacheClear;
}
var eq_1;
var hasRequiredEq;
function requireEq() {
  if (hasRequiredEq) return eq_1;
  hasRequiredEq = 1;
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  eq_1 = eq;
  return eq_1;
}
var _assocIndexOf;
var hasRequired_assocIndexOf;
function require_assocIndexOf() {
  if (hasRequired_assocIndexOf) return _assocIndexOf;
  hasRequired_assocIndexOf = 1;
  var eq = requireEq();
  function assocIndexOf(array, key) {
    var length2 = array.length;
    while (length2--) {
      if (eq(array[length2][0], key)) {
        return length2;
      }
    }
    return -1;
  }
  _assocIndexOf = assocIndexOf;
  return _assocIndexOf;
}
var _listCacheDelete;
var hasRequired_listCacheDelete;
function require_listCacheDelete() {
  if (hasRequired_listCacheDelete) return _listCacheDelete;
  hasRequired_listCacheDelete = 1;
  var assocIndexOf = require_assocIndexOf();
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  _listCacheDelete = listCacheDelete;
  return _listCacheDelete;
}
var _listCacheGet;
var hasRequired_listCacheGet;
function require_listCacheGet() {
  if (hasRequired_listCacheGet) return _listCacheGet;
  hasRequired_listCacheGet = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  _listCacheGet = listCacheGet;
  return _listCacheGet;
}
var _listCacheHas;
var hasRequired_listCacheHas;
function require_listCacheHas() {
  if (hasRequired_listCacheHas) return _listCacheHas;
  hasRequired_listCacheHas = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  _listCacheHas = listCacheHas;
  return _listCacheHas;
}
var _listCacheSet;
var hasRequired_listCacheSet;
function require_listCacheSet() {
  if (hasRequired_listCacheSet) return _listCacheSet;
  hasRequired_listCacheSet = 1;
  var assocIndexOf = require_assocIndexOf();
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  _listCacheSet = listCacheSet;
  return _listCacheSet;
}
var _ListCache;
var hasRequired_ListCache;
function require_ListCache() {
  if (hasRequired_ListCache) return _ListCache;
  hasRequired_ListCache = 1;
  var listCacheClear = require_listCacheClear(), listCacheDelete = require_listCacheDelete(), listCacheGet = require_listCacheGet(), listCacheHas = require_listCacheHas(), listCacheSet = require_listCacheSet();
  function ListCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  _ListCache = ListCache;
  return _ListCache;
}
var _Map;
var hasRequired_Map;
function require_Map() {
  if (hasRequired_Map) return _Map;
  hasRequired_Map = 1;
  var getNative = require_getNative(), root = require_root();
  var Map2 = getNative(root, "Map");
  _Map = Map2;
  return _Map;
}
var _mapCacheClear;
var hasRequired_mapCacheClear;
function require_mapCacheClear() {
  if (hasRequired_mapCacheClear) return _mapCacheClear;
  hasRequired_mapCacheClear = 1;
  var Hash = require_Hash(), ListCache = require_ListCache(), Map2 = require_Map();
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  _mapCacheClear = mapCacheClear;
  return _mapCacheClear;
}
var _isKeyable;
var hasRequired_isKeyable;
function require_isKeyable() {
  if (hasRequired_isKeyable) return _isKeyable;
  hasRequired_isKeyable = 1;
  function isKeyable(value) {
    var type2 = typeof value;
    return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
  }
  _isKeyable = isKeyable;
  return _isKeyable;
}
var _getMapData;
var hasRequired_getMapData;
function require_getMapData() {
  if (hasRequired_getMapData) return _getMapData;
  hasRequired_getMapData = 1;
  var isKeyable = require_isKeyable();
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  _getMapData = getMapData;
  return _getMapData;
}
var _mapCacheDelete;
var hasRequired_mapCacheDelete;
function require_mapCacheDelete() {
  if (hasRequired_mapCacheDelete) return _mapCacheDelete;
  hasRequired_mapCacheDelete = 1;
  var getMapData = require_getMapData();
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  _mapCacheDelete = mapCacheDelete;
  return _mapCacheDelete;
}
var _mapCacheGet;
var hasRequired_mapCacheGet;
function require_mapCacheGet() {
  if (hasRequired_mapCacheGet) return _mapCacheGet;
  hasRequired_mapCacheGet = 1;
  var getMapData = require_getMapData();
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  _mapCacheGet = mapCacheGet;
  return _mapCacheGet;
}
var _mapCacheHas;
var hasRequired_mapCacheHas;
function require_mapCacheHas() {
  if (hasRequired_mapCacheHas) return _mapCacheHas;
  hasRequired_mapCacheHas = 1;
  var getMapData = require_getMapData();
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  _mapCacheHas = mapCacheHas;
  return _mapCacheHas;
}
var _mapCacheSet;
var hasRequired_mapCacheSet;
function require_mapCacheSet() {
  if (hasRequired_mapCacheSet) return _mapCacheSet;
  hasRequired_mapCacheSet = 1;
  var getMapData = require_getMapData();
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  _mapCacheSet = mapCacheSet;
  return _mapCacheSet;
}
var _MapCache;
var hasRequired_MapCache;
function require_MapCache() {
  if (hasRequired_MapCache) return _MapCache;
  hasRequired_MapCache = 1;
  var mapCacheClear = require_mapCacheClear(), mapCacheDelete = require_mapCacheDelete(), mapCacheGet = require_mapCacheGet(), mapCacheHas = require_mapCacheHas(), mapCacheSet = require_mapCacheSet();
  function MapCache(entries) {
    var index = -1, length2 = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length2) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  _MapCache = MapCache;
  return _MapCache;
}
var _setCacheAdd;
var hasRequired_setCacheAdd;
function require_setCacheAdd() {
  if (hasRequired_setCacheAdd) return _setCacheAdd;
  hasRequired_setCacheAdd = 1;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  _setCacheAdd = setCacheAdd;
  return _setCacheAdd;
}
var _setCacheHas;
var hasRequired_setCacheHas;
function require_setCacheHas() {
  if (hasRequired_setCacheHas) return _setCacheHas;
  hasRequired_setCacheHas = 1;
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  _setCacheHas = setCacheHas;
  return _setCacheHas;
}
var _SetCache;
var hasRequired_SetCache;
function require_SetCache() {
  if (hasRequired_SetCache) return _SetCache;
  hasRequired_SetCache = 1;
  var MapCache = require_MapCache(), setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
  function SetCache(values2) {
    var index = -1, length2 = values2 == null ? 0 : values2.length;
    this.__data__ = new MapCache();
    while (++index < length2) {
      this.add(values2[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  _SetCache = SetCache;
  return _SetCache;
}
var _baseFindIndex;
var hasRequired_baseFindIndex;
function require_baseFindIndex() {
  if (hasRequired_baseFindIndex) return _baseFindIndex;
  hasRequired_baseFindIndex = 1;
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length2 = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length2) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  _baseFindIndex = baseFindIndex;
  return _baseFindIndex;
}
var _baseIsNaN;
var hasRequired_baseIsNaN;
function require_baseIsNaN() {
  if (hasRequired_baseIsNaN) return _baseIsNaN;
  hasRequired_baseIsNaN = 1;
  function baseIsNaN(value) {
    return value !== value;
  }
  _baseIsNaN = baseIsNaN;
  return _baseIsNaN;
}
var _strictIndexOf;
var hasRequired_strictIndexOf;
function require_strictIndexOf() {
  if (hasRequired_strictIndexOf) return _strictIndexOf;
  hasRequired_strictIndexOf = 1;
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length2 = array.length;
    while (++index < length2) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  _strictIndexOf = strictIndexOf;
  return _strictIndexOf;
}
var _baseIndexOf;
var hasRequired_baseIndexOf;
function require_baseIndexOf() {
  if (hasRequired_baseIndexOf) return _baseIndexOf;
  hasRequired_baseIndexOf = 1;
  var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  _baseIndexOf = baseIndexOf;
  return _baseIndexOf;
}
var _arrayIncludes;
var hasRequired_arrayIncludes;
function require_arrayIncludes() {
  if (hasRequired_arrayIncludes) return _arrayIncludes;
  hasRequired_arrayIncludes = 1;
  var baseIndexOf = require_baseIndexOf();
  function arrayIncludes(array, value) {
    var length2 = array == null ? 0 : array.length;
    return !!length2 && baseIndexOf(array, value, 0) > -1;
  }
  _arrayIncludes = arrayIncludes;
  return _arrayIncludes;
}
var _arrayIncludesWith;
var hasRequired_arrayIncludesWith;
function require_arrayIncludesWith() {
  if (hasRequired_arrayIncludesWith) return _arrayIncludesWith;
  hasRequired_arrayIncludesWith = 1;
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  _arrayIncludesWith = arrayIncludesWith;
  return _arrayIncludesWith;
}
var _cacheHas;
var hasRequired_cacheHas;
function require_cacheHas() {
  if (hasRequired_cacheHas) return _cacheHas;
  hasRequired_cacheHas = 1;
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  _cacheHas = cacheHas;
  return _cacheHas;
}
var _Set;
var hasRequired_Set;
function require_Set() {
  if (hasRequired_Set) return _Set;
  hasRequired_Set = 1;
  var getNative = require_getNative(), root = require_root();
  var Set2 = getNative(root, "Set");
  _Set = Set2;
  return _Set;
}
var noop_1;
var hasRequiredNoop;
function requireNoop() {
  if (hasRequiredNoop) return noop_1;
  hasRequiredNoop = 1;
  function noop() {
  }
  noop_1 = noop;
  return noop_1;
}
var _setToArray;
var hasRequired_setToArray;
function require_setToArray() {
  if (hasRequired_setToArray) return _setToArray;
  hasRequired_setToArray = 1;
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  _setToArray = setToArray;
  return _setToArray;
}
var _createSet;
var hasRequired_createSet;
function require_createSet() {
  if (hasRequired_createSet) return _createSet;
  hasRequired_createSet = 1;
  var Set2 = require_Set(), noop = requireNoop(), setToArray = require_setToArray();
  var INFINITY = 1 / 0;
  var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
    return new Set2(values2);
  };
  _createSet = createSet;
  return _createSet;
}
var _baseUniq;
var hasRequired_baseUniq;
function require_baseUniq() {
  if (hasRequired_baseUniq) return _baseUniq;
  hasRequired_baseUniq = 1;
  var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), cacheHas = require_cacheHas(), createSet = require_createSet(), setToArray = require_setToArray();
  var LARGE_ARRAY_SIZE = 200;
  function baseUniq(array, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, length2 = array.length, isCommon = true, result = [], seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length2 >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }
    outer:
      while (++index < length2) {
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
    return result;
  }
  _baseUniq = baseUniq;
  return _baseUniq;
}
var uniq_1;
var hasRequiredUniq;
function requireUniq() {
  if (hasRequiredUniq) return uniq_1;
  hasRequiredUniq = 1;
  var baseUniq = require_baseUniq();
  function uniq(array) {
    return array && array.length ? baseUniq(array) : [];
  }
  uniq_1 = uniq;
  return uniq_1;
}
requireUniq();
var _stackClear;
var hasRequired_stackClear;
function require_stackClear() {
  if (hasRequired_stackClear) return _stackClear;
  hasRequired_stackClear = 1;
  var ListCache = require_ListCache();
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  _stackClear = stackClear;
  return _stackClear;
}
var _stackDelete;
var hasRequired_stackDelete;
function require_stackDelete() {
  if (hasRequired_stackDelete) return _stackDelete;
  hasRequired_stackDelete = 1;
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  _stackDelete = stackDelete;
  return _stackDelete;
}
var _stackGet;
var hasRequired_stackGet;
function require_stackGet() {
  if (hasRequired_stackGet) return _stackGet;
  hasRequired_stackGet = 1;
  function stackGet(key) {
    return this.__data__.get(key);
  }
  _stackGet = stackGet;
  return _stackGet;
}
var _stackHas;
var hasRequired_stackHas;
function require_stackHas() {
  if (hasRequired_stackHas) return _stackHas;
  hasRequired_stackHas = 1;
  function stackHas(key) {
    return this.__data__.has(key);
  }
  _stackHas = stackHas;
  return _stackHas;
}
var _stackSet;
var hasRequired_stackSet;
function require_stackSet() {
  if (hasRequired_stackSet) return _stackSet;
  hasRequired_stackSet = 1;
  var ListCache = require_ListCache(), Map2 = require_Map(), MapCache = require_MapCache();
  var LARGE_ARRAY_SIZE = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  _stackSet = stackSet;
  return _stackSet;
}
var _Stack;
var hasRequired_Stack;
function require_Stack() {
  if (hasRequired_Stack) return _Stack;
  hasRequired_Stack = 1;
  var ListCache = require_ListCache(), stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  _Stack = Stack;
  return _Stack;
}
var _arraySome;
var hasRequired_arraySome;
function require_arraySome() {
  if (hasRequired_arraySome) return _arraySome;
  hasRequired_arraySome = 1;
  function arraySome(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length;
    while (++index < length2) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  _arraySome = arraySome;
  return _arraySome;
}
var _equalArrays;
var hasRequired_equalArrays;
function require_equalArrays() {
  if (hasRequired_equalArrays) return _equalArrays;
  hasRequired_equalArrays = 1;
  var SetCache = require_SetCache(), arraySome = require_arraySome(), cacheHas = require_cacheHas();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  _equalArrays = equalArrays;
  return _equalArrays;
}
var _Uint8Array;
var hasRequired_Uint8Array;
function require_Uint8Array() {
  if (hasRequired_Uint8Array) return _Uint8Array;
  hasRequired_Uint8Array = 1;
  var root = require_root();
  var Uint8Array2 = root.Uint8Array;
  _Uint8Array = Uint8Array2;
  return _Uint8Array;
}
var _mapToArray;
var hasRequired_mapToArray;
function require_mapToArray() {
  if (hasRequired_mapToArray) return _mapToArray;
  hasRequired_mapToArray = 1;
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  _mapToArray = mapToArray;
  return _mapToArray;
}
var _equalByTag;
var hasRequired_equalByTag;
function require_equalByTag() {
  if (hasRequired_equalByTag) return _equalByTag;
  hasRequired_equalByTag = 1;
  var Symbol2 = require_Symbol(), Uint8Array2 = require_Uint8Array(), eq = requireEq(), equalArrays = require_equalArrays(), mapToArray = require_mapToArray(), setToArray = require_setToArray();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  _equalByTag = equalByTag;
  return _equalByTag;
}
var _arrayPush;
var hasRequired_arrayPush;
function require_arrayPush() {
  if (hasRequired_arrayPush) return _arrayPush;
  hasRequired_arrayPush = 1;
  function arrayPush(array, values2) {
    var index = -1, length2 = values2.length, offset = array.length;
    while (++index < length2) {
      array[offset + index] = values2[index];
    }
    return array;
  }
  _arrayPush = arrayPush;
  return _arrayPush;
}
var isArray_1;
var hasRequiredIsArray;
function requireIsArray() {
  if (hasRequiredIsArray) return isArray_1;
  hasRequiredIsArray = 1;
  var isArray = Array.isArray;
  isArray_1 = isArray;
  return isArray_1;
}
var _baseGetAllKeys;
var hasRequired_baseGetAllKeys;
function require_baseGetAllKeys() {
  if (hasRequired_baseGetAllKeys) return _baseGetAllKeys;
  hasRequired_baseGetAllKeys = 1;
  var arrayPush = require_arrayPush(), isArray = requireIsArray();
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  _baseGetAllKeys = baseGetAllKeys;
  return _baseGetAllKeys;
}
var _arrayFilter;
var hasRequired_arrayFilter;
function require_arrayFilter() {
  if (hasRequired_arrayFilter) return _arrayFilter;
  hasRequired_arrayFilter = 1;
  function arrayFilter(array, predicate) {
    var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length2) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  _arrayFilter = arrayFilter;
  return _arrayFilter;
}
var stubArray_1;
var hasRequiredStubArray;
function requireStubArray() {
  if (hasRequiredStubArray) return stubArray_1;
  hasRequiredStubArray = 1;
  function stubArray() {
    return [];
  }
  stubArray_1 = stubArray;
  return stubArray_1;
}
var _getSymbols;
var hasRequired_getSymbols;
function require_getSymbols() {
  if (hasRequired_getSymbols) return _getSymbols;
  hasRequired_getSymbols = 1;
  var arrayFilter = require_arrayFilter(), stubArray = requireStubArray();
  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  _getSymbols = getSymbols;
  return _getSymbols;
}
var _baseTimes;
var hasRequired_baseTimes;
function require_baseTimes() {
  if (hasRequired_baseTimes) return _baseTimes;
  hasRequired_baseTimes = 1;
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  _baseTimes = baseTimes;
  return _baseTimes;
}
var isObjectLike_1;
var hasRequiredIsObjectLike;
function requireIsObjectLike() {
  if (hasRequiredIsObjectLike) return isObjectLike_1;
  hasRequiredIsObjectLike = 1;
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  isObjectLike_1 = isObjectLike;
  return isObjectLike_1;
}
var _baseIsArguments;
var hasRequired_baseIsArguments;
function require_baseIsArguments() {
  if (hasRequired_baseIsArguments) return _baseIsArguments;
  hasRequired_baseIsArguments = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var argsTag = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  _baseIsArguments = baseIsArguments;
  return _baseIsArguments;
}
var isArguments_1;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments) return isArguments_1;
  hasRequiredIsArguments = 1;
  var baseIsArguments = require_baseIsArguments(), isObjectLike = requireIsObjectLike();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var isArguments2 = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  isArguments_1 = isArguments2;
  return isArguments_1;
}
var isBuffer = { exports: {} };
var stubFalse_1;
var hasRequiredStubFalse;
function requireStubFalse() {
  if (hasRequiredStubFalse) return stubFalse_1;
  hasRequiredStubFalse = 1;
  function stubFalse() {
    return false;
  }
  stubFalse_1 = stubFalse;
  return stubFalse_1;
}
isBuffer.exports;
var hasRequiredIsBuffer;
function requireIsBuffer() {
  if (hasRequiredIsBuffer) return isBuffer.exports;
  hasRequiredIsBuffer = 1;
  (function(module, exports) {
    var root = require_root(), stubFalse = requireStubFalse();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer2 = nativeIsBuffer || stubFalse;
    module.exports = isBuffer2;
  })(isBuffer, isBuffer.exports);
  return isBuffer.exports;
}
var _isIndex;
var hasRequired_isIndex;
function require_isIndex() {
  if (hasRequired_isIndex) return _isIndex;
  hasRequired_isIndex = 1;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length2) {
    var type2 = typeof value;
    length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
    return !!length2 && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
  }
  _isIndex = isIndex;
  return _isIndex;
}
var isLength_1;
var hasRequiredIsLength;
function requireIsLength() {
  if (hasRequiredIsLength) return isLength_1;
  hasRequiredIsLength = 1;
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  isLength_1 = isLength;
  return isLength_1;
}
var _baseIsTypedArray;
var hasRequired_baseIsTypedArray;
function require_baseIsTypedArray() {
  if (hasRequired_baseIsTypedArray) return _baseIsTypedArray;
  hasRequired_baseIsTypedArray = 1;
  var baseGetTag = require_baseGetTag(), isLength = requireIsLength(), isObjectLike = requireIsObjectLike();
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  _baseIsTypedArray = baseIsTypedArray;
  return _baseIsTypedArray;
}
var _baseUnary;
var hasRequired_baseUnary;
function require_baseUnary() {
  if (hasRequired_baseUnary) return _baseUnary;
  hasRequired_baseUnary = 1;
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  _baseUnary = baseUnary;
  return _baseUnary;
}
var _nodeUtil = { exports: {} };
_nodeUtil.exports;
var hasRequired_nodeUtil;
function require_nodeUtil() {
  if (hasRequired_nodeUtil) return _nodeUtil.exports;
  hasRequired_nodeUtil = 1;
  (function(module, exports) {
    var freeGlobal = require_freeGlobal();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);
  return _nodeUtil.exports;
}
var isTypedArray_1;
var hasRequiredIsTypedArray;
function requireIsTypedArray() {
  if (hasRequiredIsTypedArray) return isTypedArray_1;
  hasRequiredIsTypedArray = 1;
  var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  isTypedArray_1 = isTypedArray;
  return isTypedArray_1;
}
var _arrayLikeKeys;
var hasRequired_arrayLikeKeys;
function require_arrayLikeKeys() {
  if (hasRequired_arrayLikeKeys) return _arrayLikeKeys;
  hasRequired_arrayLikeKeys = 1;
  var baseTimes = require_baseTimes(), isArguments2 = requireIsArguments(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isIndex = require_isIndex(), isTypedArray = requireIsTypedArray();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length2 = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex(key, length2)))) {
        result.push(key);
      }
    }
    return result;
  }
  _arrayLikeKeys = arrayLikeKeys;
  return _arrayLikeKeys;
}
var _isPrototype;
var hasRequired_isPrototype;
function require_isPrototype() {
  if (hasRequired_isPrototype) return _isPrototype;
  hasRequired_isPrototype = 1;
  var objectProto = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  _isPrototype = isPrototype;
  return _isPrototype;
}
var _overArg;
var hasRequired_overArg;
function require_overArg() {
  if (hasRequired_overArg) return _overArg;
  hasRequired_overArg = 1;
  function overArg(func, transform) {
    return function(arg2) {
      return func(transform(arg2));
    };
  }
  _overArg = overArg;
  return _overArg;
}
var _nativeKeys;
var hasRequired_nativeKeys;
function require_nativeKeys() {
  if (hasRequired_nativeKeys) return _nativeKeys;
  hasRequired_nativeKeys = 1;
  var overArg = require_overArg();
  var nativeKeys = overArg(Object.keys, Object);
  _nativeKeys = nativeKeys;
  return _nativeKeys;
}
var _baseKeys;
var hasRequired_baseKeys;
function require_baseKeys() {
  if (hasRequired_baseKeys) return _baseKeys;
  hasRequired_baseKeys = 1;
  var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  _baseKeys = baseKeys;
  return _baseKeys;
}
var isArrayLike_1;
var hasRequiredIsArrayLike;
function requireIsArrayLike() {
  if (hasRequiredIsArrayLike) return isArrayLike_1;
  hasRequiredIsArrayLike = 1;
  var isFunction = requireIsFunction(), isLength = requireIsLength();
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  isArrayLike_1 = isArrayLike;
  return isArrayLike_1;
}
var keys_1;
var hasRequiredKeys;
function requireKeys() {
  if (hasRequiredKeys) return keys_1;
  hasRequiredKeys = 1;
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = requireIsArrayLike();
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  keys_1 = keys;
  return keys_1;
}
var _getAllKeys;
var hasRequired_getAllKeys;
function require_getAllKeys() {
  if (hasRequired_getAllKeys) return _getAllKeys;
  hasRequired_getAllKeys = 1;
  var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys = requireKeys();
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }
  _getAllKeys = getAllKeys;
  return _getAllKeys;
}
var _equalObjects;
var hasRequired_equalObjects;
function require_equalObjects() {
  if (hasRequired_equalObjects) return _equalObjects;
  hasRequired_equalObjects = 1;
  var getAllKeys = require_getAllKeys();
  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  _equalObjects = equalObjects;
  return _equalObjects;
}
var _DataView;
var hasRequired_DataView;
function require_DataView() {
  if (hasRequired_DataView) return _DataView;
  hasRequired_DataView = 1;
  var getNative = require_getNative(), root = require_root();
  var DataView2 = getNative(root, "DataView");
  _DataView = DataView2;
  return _DataView;
}
var _Promise;
var hasRequired_Promise;
function require_Promise() {
  if (hasRequired_Promise) return _Promise;
  hasRequired_Promise = 1;
  var getNative = require_getNative(), root = require_root();
  var Promise2 = getNative(root, "Promise");
  _Promise = Promise2;
  return _Promise;
}
var _WeakMap;
var hasRequired_WeakMap;
function require_WeakMap() {
  if (hasRequired_WeakMap) return _WeakMap;
  hasRequired_WeakMap = 1;
  var getNative = require_getNative(), root = require_root();
  var WeakMap2 = getNative(root, "WeakMap");
  _WeakMap = WeakMap2;
  return _WeakMap;
}
var _getTag;
var hasRequired_getTag;
function require_getTag() {
  if (hasRequired_getTag) return _getTag;
  hasRequired_getTag = 1;
  var DataView2 = require_DataView(), Map2 = require_Map(), Promise2 = require_Promise(), Set2 = require_Set(), WeakMap2 = require_WeakMap(), baseGetTag = require_baseGetTag(), toSource = require_toSource();
  var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
  var dataViewTag = "[object DataView]";
  var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
    getTag = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  _getTag = getTag;
  return _getTag;
}
var _baseIsEqualDeep;
var hasRequired_baseIsEqualDeep;
function require_baseIsEqualDeep() {
  if (hasRequired_baseIsEqualDeep) return _baseIsEqualDeep;
  hasRequired_baseIsEqualDeep = 1;
  var Stack = require_Stack(), equalArrays = require_equalArrays(), equalByTag = require_equalByTag(), equalObjects = require_equalObjects(), getTag = require_getTag(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isTypedArray = requireIsTypedArray();
  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer2(object)) {
      if (!isBuffer2(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  _baseIsEqualDeep = baseIsEqualDeep;
  return _baseIsEqualDeep;
}
var _baseIsEqual;
var hasRequired_baseIsEqual;
function require_baseIsEqual() {
  if (hasRequired_baseIsEqual) return _baseIsEqual;
  hasRequired_baseIsEqual = 1;
  var baseIsEqualDeep = require_baseIsEqualDeep(), isObjectLike = requireIsObjectLike();
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  _baseIsEqual = baseIsEqual;
  return _baseIsEqual;
}
var _baseIsMatch;
var hasRequired_baseIsMatch;
function require_baseIsMatch() {
  if (hasRequired_baseIsMatch) return _baseIsMatch;
  hasRequired_baseIsMatch = 1;
  var Stack = require_Stack(), baseIsEqual = require_baseIsEqual();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length2 = index, noCustomizer = !customizer;
    if (object == null) {
      return !length2;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length2) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  _baseIsMatch = baseIsMatch;
  return _baseIsMatch;
}
var _isStrictComparable;
var hasRequired_isStrictComparable;
function require_isStrictComparable() {
  if (hasRequired_isStrictComparable) return _isStrictComparable;
  hasRequired_isStrictComparable = 1;
  var isObject = requireIsObject();
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }
  _isStrictComparable = isStrictComparable;
  return _isStrictComparable;
}
var _getMatchData;
var hasRequired_getMatchData;
function require_getMatchData() {
  if (hasRequired_getMatchData) return _getMatchData;
  hasRequired_getMatchData = 1;
  var isStrictComparable = require_isStrictComparable(), keys = requireKeys();
  function getMatchData(object) {
    var result = keys(object), length2 = result.length;
    while (length2--) {
      var key = result[length2], value = object[key];
      result[length2] = [key, value, isStrictComparable(value)];
    }
    return result;
  }
  _getMatchData = getMatchData;
  return _getMatchData;
}
var _matchesStrictComparable;
var hasRequired_matchesStrictComparable;
function require_matchesStrictComparable() {
  if (hasRequired_matchesStrictComparable) return _matchesStrictComparable;
  hasRequired_matchesStrictComparable = 1;
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  _matchesStrictComparable = matchesStrictComparable;
  return _matchesStrictComparable;
}
var _baseMatches;
var hasRequired_baseMatches;
function require_baseMatches() {
  if (hasRequired_baseMatches) return _baseMatches;
  hasRequired_baseMatches = 1;
  var baseIsMatch = require_baseIsMatch(), getMatchData = require_getMatchData(), matchesStrictComparable = require_matchesStrictComparable();
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }
  _baseMatches = baseMatches;
  return _baseMatches;
}
var isSymbol_1;
var hasRequiredIsSymbol;
function requireIsSymbol() {
  if (hasRequiredIsSymbol) return isSymbol_1;
  hasRequiredIsSymbol = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var symbolTag = "[object Symbol]";
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }
  isSymbol_1 = isSymbol;
  return isSymbol_1;
}
var _isKey;
var hasRequired_isKey;
function require_isKey() {
  if (hasRequired_isKey) return _isKey;
  hasRequired_isKey = 1;
  var isArray = requireIsArray(), isSymbol = requireIsSymbol();
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type2 = typeof value;
    if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  _isKey = isKey;
  return _isKey;
}
var memoize_1;
var hasRequiredMemoize;
function requireMemoize() {
  if (hasRequiredMemoize) return memoize_1;
  hasRequiredMemoize = 1;
  var MapCache = require_MapCache();
  var FUNC_ERROR_TEXT = "Expected a function";
  function memoize2(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize2.Cache || MapCache)();
    return memoized;
  }
  memoize2.Cache = MapCache;
  memoize_1 = memoize2;
  return memoize_1;
}
var _memoizeCapped;
var hasRequired_memoizeCapped;
function require_memoizeCapped() {
  if (hasRequired_memoizeCapped) return _memoizeCapped;
  hasRequired_memoizeCapped = 1;
  var memoize2 = requireMemoize();
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize2(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });
    var cache = result.cache;
    return result;
  }
  _memoizeCapped = memoizeCapped;
  return _memoizeCapped;
}
var _stringToPath;
var hasRequired_stringToPath;
function require_stringToPath() {
  if (hasRequired_stringToPath) return _stringToPath;
  hasRequired_stringToPath = 1;
  var memoizeCapped = require_memoizeCapped();
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46) {
      result.push("");
    }
    string.replace(rePropName, function(match2, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
    });
    return result;
  });
  _stringToPath = stringToPath;
  return _stringToPath;
}
var _arrayMap;
var hasRequired_arrayMap;
function require_arrayMap() {
  if (hasRequired_arrayMap) return _arrayMap;
  hasRequired_arrayMap = 1;
  function arrayMap(array, iteratee) {
    var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
    while (++index < length2) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  _arrayMap = arrayMap;
  return _arrayMap;
}
var _baseToString;
var hasRequired_baseToString;
function require_baseToString() {
  if (hasRequired_baseToString) return _baseToString;
  hasRequired_baseToString = 1;
  var Symbol2 = require_Symbol(), arrayMap = require_arrayMap(), isArray = requireIsArray(), isSymbol = requireIsSymbol();
  var INFINITY = 1 / 0;
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray(value)) {
      return arrayMap(value, baseToString) + "";
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  _baseToString = baseToString;
  return _baseToString;
}
var toString_1;
var hasRequiredToString;
function requireToString() {
  if (hasRequiredToString) return toString_1;
  hasRequiredToString = 1;
  var baseToString = require_baseToString();
  function toString(value) {
    return value == null ? "" : baseToString(value);
  }
  toString_1 = toString;
  return toString_1;
}
var _castPath;
var hasRequired_castPath;
function require_castPath() {
  if (hasRequired_castPath) return _castPath;
  hasRequired_castPath = 1;
  var isArray = requireIsArray(), isKey = require_isKey(), stringToPath = require_stringToPath(), toString = requireToString();
  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }
  _castPath = castPath;
  return _castPath;
}
var _toKey;
var hasRequired_toKey;
function require_toKey() {
  if (hasRequired_toKey) return _toKey;
  hasRequired_toKey = 1;
  var isSymbol = requireIsSymbol();
  var INFINITY = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  _toKey = toKey;
  return _toKey;
}
var _baseGet;
var hasRequired_baseGet;
function require_baseGet() {
  if (hasRequired_baseGet) return _baseGet;
  hasRequired_baseGet = 1;
  var castPath = require_castPath(), toKey = require_toKey();
  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length2 = path.length;
    while (object != null && index < length2) {
      object = object[toKey(path[index++])];
    }
    return index && index == length2 ? object : void 0;
  }
  _baseGet = baseGet;
  return _baseGet;
}
var get_1;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get_1;
  hasRequiredGet = 1;
  var baseGet = require_baseGet();
  function get2(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet(object, path);
    return result === void 0 ? defaultValue : result;
  }
  get_1 = get2;
  return get_1;
}
var _baseHasIn;
var hasRequired_baseHasIn;
function require_baseHasIn() {
  if (hasRequired_baseHasIn) return _baseHasIn;
  hasRequired_baseHasIn = 1;
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  _baseHasIn = baseHasIn;
  return _baseHasIn;
}
var _hasPath;
var hasRequired_hasPath;
function require_hasPath() {
  if (hasRequired_hasPath) return _hasPath;
  hasRequired_hasPath = 1;
  var castPath = require_castPath(), isArguments2 = requireIsArguments(), isArray = requireIsArray(), isIndex = require_isIndex(), isLength = requireIsLength(), toKey = require_toKey();
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length2 = path.length, result = false;
    while (++index < length2) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length2) {
      return result;
    }
    length2 = object == null ? 0 : object.length;
    return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray(object) || isArguments2(object));
  }
  _hasPath = hasPath;
  return _hasPath;
}
var hasIn_1;
var hasRequiredHasIn;
function requireHasIn() {
  if (hasRequiredHasIn) return hasIn_1;
  hasRequiredHasIn = 1;
  var baseHasIn = require_baseHasIn(), hasPath = require_hasPath();
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }
  hasIn_1 = hasIn;
  return hasIn_1;
}
var _baseMatchesProperty;
var hasRequired_baseMatchesProperty;
function require_baseMatchesProperty() {
  if (hasRequired_baseMatchesProperty) return _baseMatchesProperty;
  hasRequired_baseMatchesProperty = 1;
  var baseIsEqual = require_baseIsEqual(), get2 = requireGet(), hasIn = requireHasIn(), isKey = require_isKey(), isStrictComparable = require_isStrictComparable(), matchesStrictComparable = require_matchesStrictComparable(), toKey = require_toKey();
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get2(object, path);
      return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }
  _baseMatchesProperty = baseMatchesProperty;
  return _baseMatchesProperty;
}
var identity_1;
var hasRequiredIdentity;
function requireIdentity() {
  if (hasRequiredIdentity) return identity_1;
  hasRequiredIdentity = 1;
  function identity(value) {
    return value;
  }
  identity_1 = identity;
  return identity_1;
}
var _baseProperty;
var hasRequired_baseProperty;
function require_baseProperty() {
  if (hasRequired_baseProperty) return _baseProperty;
  hasRequired_baseProperty = 1;
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  _baseProperty = baseProperty;
  return _baseProperty;
}
var _basePropertyDeep;
var hasRequired_basePropertyDeep;
function require_basePropertyDeep() {
  if (hasRequired_basePropertyDeep) return _basePropertyDeep;
  hasRequired_basePropertyDeep = 1;
  var baseGet = require_baseGet();
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }
  _basePropertyDeep = basePropertyDeep;
  return _basePropertyDeep;
}
var property_1;
var hasRequiredProperty;
function requireProperty() {
  if (hasRequiredProperty) return property_1;
  hasRequiredProperty = 1;
  var baseProperty = require_baseProperty(), basePropertyDeep = require_basePropertyDeep(), isKey = require_isKey(), toKey = require_toKey();
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }
  property_1 = property;
  return property_1;
}
var _baseIteratee;
var hasRequired_baseIteratee;
function require_baseIteratee() {
  if (hasRequired_baseIteratee) return _baseIteratee;
  hasRequired_baseIteratee = 1;
  var baseMatches = require_baseMatches(), baseMatchesProperty = require_baseMatchesProperty(), identity = requireIdentity(), isArray = requireIsArray(), property = requireProperty();
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == "object") {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }
  _baseIteratee = baseIteratee;
  return _baseIteratee;
}
var uniqBy_1;
var hasRequiredUniqBy;
function requireUniqBy() {
  if (hasRequiredUniqBy) return uniqBy_1;
  hasRequiredUniqBy = 1;
  var baseIteratee = require_baseIteratee(), baseUniq = require_baseUniq();
  function uniqBy(array, iteratee) {
    return array && array.length ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
  }
  uniqBy_1 = uniqBy;
  return uniqBy_1;
}
requireUniqBy();
var _baseDifference;
var hasRequired_baseDifference;
function require_baseDifference() {
  if (hasRequired_baseDifference) return _baseDifference;
  hasRequired_baseDifference = 1;
  var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), arrayMap = require_arrayMap(), baseUnary = require_baseUnary(), cacheHas = require_cacheHas();
  var LARGE_ARRAY_SIZE = 200;
  function baseDifference(array, values2, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length2 = array.length, result = [], valuesLength = values2.length;
    if (!length2) {
      return result;
    }
    if (iteratee) {
      values2 = arrayMap(values2, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values2.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values2 = new SetCache(values2);
    }
    outer:
      while (++index < length2) {
        var value = array[index], computed = iteratee == null ? value : iteratee(value);
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values2[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values2, computed, comparator)) {
          result.push(value);
        }
      }
    return result;
  }
  _baseDifference = baseDifference;
  return _baseDifference;
}
var _isFlattenable;
var hasRequired_isFlattenable;
function require_isFlattenable() {
  if (hasRequired_isFlattenable) return _isFlattenable;
  hasRequired_isFlattenable = 1;
  var Symbol2 = require_Symbol(), isArguments2 = requireIsArguments(), isArray = requireIsArray();
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  function isFlattenable(value) {
    return isArray(value) || isArguments2(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  _isFlattenable = isFlattenable;
  return _isFlattenable;
}
var _baseFlatten;
var hasRequired_baseFlatten;
function require_baseFlatten() {
  if (hasRequired_baseFlatten) return _baseFlatten;
  hasRequired_baseFlatten = 1;
  var arrayPush = require_arrayPush(), isFlattenable = require_isFlattenable();
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length2 = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length2) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  _baseFlatten = baseFlatten;
  return _baseFlatten;
}
var _apply;
var hasRequired_apply;
function require_apply() {
  if (hasRequired_apply) return _apply;
  hasRequired_apply = 1;
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  _apply = apply;
  return _apply;
}
var _overRest;
var hasRequired_overRest;
function require_overRest() {
  if (hasRequired_overRest) return _overRest;
  hasRequired_overRest = 1;
  var apply = require_apply();
  var nativeMax = Math.max;
  function overRest(func, start, transform) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length2 = nativeMax(args.length - start, 0), array = Array(length2);
      while (++index < length2) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }
  _overRest = overRest;
  return _overRest;
}
var constant_1;
var hasRequiredConstant;
function requireConstant() {
  if (hasRequiredConstant) return constant_1;
  hasRequiredConstant = 1;
  function constant(value) {
    return function() {
      return value;
    };
  }
  constant_1 = constant;
  return constant_1;
}
var _defineProperty;
var hasRequired_defineProperty;
function require_defineProperty() {
  if (hasRequired_defineProperty) return _defineProperty;
  hasRequired_defineProperty = 1;
  var getNative = require_getNative();
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  _defineProperty = defineProperty;
  return _defineProperty;
}
var _baseSetToString;
var hasRequired_baseSetToString;
function require_baseSetToString() {
  if (hasRequired_baseSetToString) return _baseSetToString;
  hasRequired_baseSetToString = 1;
  var constant = requireConstant(), defineProperty = require_defineProperty(), identity = requireIdentity();
  var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string),
      "writable": true
    });
  };
  _baseSetToString = baseSetToString;
  return _baseSetToString;
}
var _shortOut;
var hasRequired_shortOut;
function require_shortOut() {
  if (hasRequired_shortOut) return _shortOut;
  hasRequired_shortOut = 1;
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  _shortOut = shortOut;
  return _shortOut;
}
var _setToString;
var hasRequired_setToString;
function require_setToString() {
  if (hasRequired_setToString) return _setToString;
  hasRequired_setToString = 1;
  var baseSetToString = require_baseSetToString(), shortOut = require_shortOut();
  var setToString = shortOut(baseSetToString);
  _setToString = setToString;
  return _setToString;
}
var _baseRest;
var hasRequired_baseRest;
function require_baseRest() {
  if (hasRequired_baseRest) return _baseRest;
  hasRequired_baseRest = 1;
  var identity = requireIdentity(), overRest = require_overRest(), setToString = require_setToString();
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  _baseRest = baseRest;
  return _baseRest;
}
var isArrayLikeObject_1;
var hasRequiredIsArrayLikeObject;
function requireIsArrayLikeObject() {
  if (hasRequiredIsArrayLikeObject) return isArrayLikeObject_1;
  hasRequiredIsArrayLikeObject = 1;
  var isArrayLike = requireIsArrayLike(), isObjectLike = requireIsObjectLike();
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  isArrayLikeObject_1 = isArrayLikeObject;
  return isArrayLikeObject_1;
}
var last_1;
var hasRequiredLast;
function requireLast() {
  if (hasRequiredLast) return last_1;
  hasRequiredLast = 1;
  function last(array) {
    var length2 = array == null ? 0 : array.length;
    return length2 ? array[length2 - 1] : void 0;
  }
  last_1 = last;
  return last_1;
}
var differenceWith_1;
var hasRequiredDifferenceWith;
function requireDifferenceWith() {
  if (hasRequiredDifferenceWith) return differenceWith_1;
  hasRequiredDifferenceWith = 1;
  var baseDifference = require_baseDifference(), baseFlatten = require_baseFlatten(), baseRest = require_baseRest(), isArrayLikeObject = requireIsArrayLikeObject(), last = requireLast();
  var differenceWith = baseRest(function(array, values2) {
    var comparator = last(values2);
    if (isArrayLikeObject(comparator)) {
      comparator = void 0;
    }
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), void 0, comparator) : [];
  });
  differenceWith_1 = differenceWith;
  return differenceWith_1;
}
requireDifferenceWith();
var _baseAssignValue;
var hasRequired_baseAssignValue;
function require_baseAssignValue() {
  if (hasRequired_baseAssignValue) return _baseAssignValue;
  hasRequired_baseAssignValue = 1;
  var defineProperty = require_defineProperty();
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty) {
      defineProperty(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  _baseAssignValue = baseAssignValue;
  return _baseAssignValue;
}
var _assignMergeValue;
var hasRequired_assignMergeValue;
function require_assignMergeValue() {
  if (hasRequired_assignMergeValue) return _assignMergeValue;
  hasRequired_assignMergeValue = 1;
  var baseAssignValue = require_baseAssignValue(), eq = requireEq();
  function assignMergeValue(object, key, value) {
    if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  _assignMergeValue = assignMergeValue;
  return _assignMergeValue;
}
var _createBaseFor;
var hasRequired_createBaseFor;
function require_createBaseFor() {
  if (hasRequired_createBaseFor) return _createBaseFor;
  hasRequired_createBaseFor = 1;
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
      while (length2--) {
        var key = props[fromRight ? length2 : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  _createBaseFor = createBaseFor;
  return _createBaseFor;
}
var _baseFor;
var hasRequired_baseFor;
function require_baseFor() {
  if (hasRequired_baseFor) return _baseFor;
  hasRequired_baseFor = 1;
  var createBaseFor = require_createBaseFor();
  var baseFor = createBaseFor();
  _baseFor = baseFor;
  return _baseFor;
}
var _cloneBuffer = { exports: {} };
_cloneBuffer.exports;
var hasRequired_cloneBuffer;
function require_cloneBuffer() {
  if (hasRequired_cloneBuffer) return _cloneBuffer.exports;
  hasRequired_cloneBuffer = 1;
  (function(module, exports) {
    var root = require_root();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);
  return _cloneBuffer.exports;
}
var _cloneArrayBuffer;
var hasRequired_cloneArrayBuffer;
function require_cloneArrayBuffer() {
  if (hasRequired_cloneArrayBuffer) return _cloneArrayBuffer;
  hasRequired_cloneArrayBuffer = 1;
  var Uint8Array2 = require_Uint8Array();
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  _cloneArrayBuffer = cloneArrayBuffer;
  return _cloneArrayBuffer;
}
var _cloneTypedArray;
var hasRequired_cloneTypedArray;
function require_cloneTypedArray() {
  if (hasRequired_cloneTypedArray) return _cloneTypedArray;
  hasRequired_cloneTypedArray = 1;
  var cloneArrayBuffer = require_cloneArrayBuffer();
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  _cloneTypedArray = cloneTypedArray;
  return _cloneTypedArray;
}
var _copyArray;
var hasRequired_copyArray;
function require_copyArray() {
  if (hasRequired_copyArray) return _copyArray;
  hasRequired_copyArray = 1;
  function copyArray(source, array) {
    var index = -1, length2 = source.length;
    array || (array = Array(length2));
    while (++index < length2) {
      array[index] = source[index];
    }
    return array;
  }
  _copyArray = copyArray;
  return _copyArray;
}
var _baseCreate;
var hasRequired_baseCreate;
function require_baseCreate() {
  if (hasRequired_baseCreate) return _baseCreate;
  hasRequired_baseCreate = 1;
  var isObject = requireIsObject();
  var objectCreate = Object.create;
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  _baseCreate = baseCreate;
  return _baseCreate;
}
var _getPrototype;
var hasRequired_getPrototype;
function require_getPrototype() {
  if (hasRequired_getPrototype) return _getPrototype;
  hasRequired_getPrototype = 1;
  var overArg = require_overArg();
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  _getPrototype = getPrototype;
  return _getPrototype;
}
var _initCloneObject;
var hasRequired_initCloneObject;
function require_initCloneObject() {
  if (hasRequired_initCloneObject) return _initCloneObject;
  hasRequired_initCloneObject = 1;
  var baseCreate = require_baseCreate(), getPrototype = require_getPrototype(), isPrototype = require_isPrototype();
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  _initCloneObject = initCloneObject;
  return _initCloneObject;
}
var isPlainObject_1;
var hasRequiredIsPlainObject;
function requireIsPlainObject() {
  if (hasRequiredIsPlainObject) return isPlainObject_1;
  hasRequiredIsPlainObject = 1;
  var baseGetTag = require_baseGetTag(), getPrototype = require_getPrototype(), isObjectLike = requireIsObjectLike();
  var objectTag = "[object Object]";
  var funcProto = Function.prototype, objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  function isPlainObject2(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  isPlainObject_1 = isPlainObject2;
  return isPlainObject_1;
}
var _safeGet;
var hasRequired_safeGet;
function require_safeGet() {
  if (hasRequired_safeGet) return _safeGet;
  hasRequired_safeGet = 1;
  function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  _safeGet = safeGet;
  return _safeGet;
}
var _assignValue;
var hasRequired_assignValue;
function require_assignValue() {
  if (hasRequired_assignValue) return _assignValue;
  hasRequired_assignValue = 1;
  var baseAssignValue = require_baseAssignValue(), eq = requireEq();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  _assignValue = assignValue;
  return _assignValue;
}
var _copyObject;
var hasRequired_copyObject;
function require_copyObject() {
  if (hasRequired_copyObject) return _copyObject;
  hasRequired_copyObject = 1;
  var assignValue = require_assignValue(), baseAssignValue = require_baseAssignValue();
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length2 = props.length;
    while (++index < length2) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }
  _copyObject = copyObject;
  return _copyObject;
}
var _nativeKeysIn;
var hasRequired_nativeKeysIn;
function require_nativeKeysIn() {
  if (hasRequired_nativeKeysIn) return _nativeKeysIn;
  hasRequired_nativeKeysIn = 1;
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  _nativeKeysIn = nativeKeysIn;
  return _nativeKeysIn;
}
var _baseKeysIn;
var hasRequired_baseKeysIn;
function require_baseKeysIn() {
  if (hasRequired_baseKeysIn) return _baseKeysIn;
  hasRequired_baseKeysIn = 1;
  var isObject = requireIsObject(), isPrototype = require_isPrototype(), nativeKeysIn = require_nativeKeysIn();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  _baseKeysIn = baseKeysIn;
  return _baseKeysIn;
}
var keysIn_1;
var hasRequiredKeysIn;
function requireKeysIn() {
  if (hasRequiredKeysIn) return keysIn_1;
  hasRequiredKeysIn = 1;
  var arrayLikeKeys = require_arrayLikeKeys(), baseKeysIn = require_baseKeysIn(), isArrayLike = requireIsArrayLike();
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  keysIn_1 = keysIn;
  return keysIn_1;
}
var toPlainObject_1;
var hasRequiredToPlainObject;
function requireToPlainObject() {
  if (hasRequiredToPlainObject) return toPlainObject_1;
  hasRequiredToPlainObject = 1;
  var copyObject = require_copyObject(), keysIn = requireKeysIn();
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }
  toPlainObject_1 = toPlainObject;
  return toPlainObject_1;
}
var _baseMergeDeep;
var hasRequired_baseMergeDeep;
function require_baseMergeDeep() {
  if (hasRequired_baseMergeDeep) return _baseMergeDeep;
  hasRequired_baseMergeDeep = 1;
  var assignMergeValue = require_assignMergeValue(), cloneBuffer = require_cloneBuffer(), cloneTypedArray = require_cloneTypedArray(), copyArray = require_copyArray(), initCloneObject = require_initCloneObject(), isArguments2 = requireIsArguments(), isArray = requireIsArray(), isArrayLikeObject = requireIsArrayLikeObject(), isBuffer2 = requireIsBuffer(), isFunction = requireIsFunction(), isObject = requireIsObject(), isPlainObject2 = requireIsPlainObject(), isTypedArray = requireIsTypedArray(), safeGet = require_safeGet(), toPlainObject = requireToPlainObject();
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject2(srcValue) || isArguments2(srcValue)) {
        newValue = objValue;
        if (isArguments2(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }
  _baseMergeDeep = baseMergeDeep;
  return _baseMergeDeep;
}
var _baseMerge;
var hasRequired_baseMerge;
function require_baseMerge() {
  if (hasRequired_baseMerge) return _baseMerge;
  hasRequired_baseMerge = 1;
  var Stack = require_Stack(), assignMergeValue = require_assignMergeValue(), baseFor = require_baseFor(), baseMergeDeep = require_baseMergeDeep(), isObject = requireIsObject(), keysIn = requireKeysIn(), safeGet = require_safeGet();
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack());
      if (isObject(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }
  _baseMerge = baseMerge;
  return _baseMerge;
}
var _isIterateeCall;
var hasRequired_isIterateeCall;
function require_isIterateeCall() {
  if (hasRequired_isIterateeCall) return _isIterateeCall;
  hasRequired_isIterateeCall = 1;
  var eq = requireEq(), isArrayLike = requireIsArrayLike(), isIndex = require_isIndex(), isObject = requireIsObject();
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type2 = typeof index;
    if (type2 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type2 == "string" && index in object) {
      return eq(object[index], value);
    }
    return false;
  }
  _isIterateeCall = isIterateeCall;
  return _isIterateeCall;
}
var _createAssigner;
var hasRequired_createAssigner;
function require_createAssigner() {
  if (hasRequired_createAssigner) return _createAssigner;
  hasRequired_createAssigner = 1;
  var baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length2 < 3 ? void 0 : customizer;
        length2 = 1;
      }
      object = Object(object);
      while (++index < length2) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  _createAssigner = createAssigner;
  return _createAssigner;
}
var merge_1;
var hasRequiredMerge;
function requireMerge() {
  if (hasRequiredMerge) return merge_1;
  hasRequiredMerge = 1;
  var baseMerge = require_baseMerge(), createAssigner = require_createAssigner();
  var merge2 = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  merge_1 = merge2;
  return merge_1;
}
var mergeExports = requireMerge();
const merge$1 = /* @__PURE__ */ getDefaultExportFromCjs(mergeExports);
var _baseSlice;
var hasRequired_baseSlice;
function require_baseSlice() {
  if (hasRequired_baseSlice) return _baseSlice;
  hasRequired_baseSlice = 1;
  function baseSlice(array, start, end) {
    var index = -1, length2 = array.length;
    if (start < 0) {
      start = -start > length2 ? 0 : length2 + start;
    }
    end = end > length2 ? length2 : end;
    if (end < 0) {
      end += length2;
    }
    length2 = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length2);
    while (++index < length2) {
      result[index] = array[index + start];
    }
    return result;
  }
  _baseSlice = baseSlice;
  return _baseSlice;
}
var _parent;
var hasRequired_parent;
function require_parent() {
  if (hasRequired_parent) return _parent;
  hasRequired_parent = 1;
  var baseGet = require_baseGet(), baseSlice = require_baseSlice();
  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }
  _parent = parent;
  return _parent;
}
var _baseUnset;
var hasRequired_baseUnset;
function require_baseUnset() {
  if (hasRequired_baseUnset) return _baseUnset;
  hasRequired_baseUnset = 1;
  var castPath = require_castPath(), last = requireLast(), parent = require_parent(), toKey = require_toKey();
  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }
  _baseUnset = baseUnset;
  return _baseUnset;
}
var _basePullAt;
var hasRequired_basePullAt;
function require_basePullAt() {
  if (hasRequired_basePullAt) return _basePullAt;
  hasRequired_basePullAt = 1;
  var baseUnset = require_baseUnset(), isIndex = require_isIndex();
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function basePullAt(array, indexes) {
    var length2 = array ? indexes.length : 0, lastIndex = length2 - 1;
    while (length2--) {
      var index = indexes[length2];
      if (length2 == lastIndex || index !== previous) {
        var previous = index;
        if (isIndex(index)) {
          splice.call(array, index, 1);
        } else {
          baseUnset(array, index);
        }
      }
    }
    return array;
  }
  _basePullAt = basePullAt;
  return _basePullAt;
}
var remove_1;
var hasRequiredRemove;
function requireRemove() {
  if (hasRequiredRemove) return remove_1;
  hasRequiredRemove = 1;
  var baseIteratee = require_baseIteratee(), basePullAt = require_basePullAt();
  function remove(array, predicate) {
    var result = [];
    if (!(array && array.length)) {
      return result;
    }
    var index = -1, indexes = [], length2 = array.length;
    predicate = baseIteratee(predicate, 3);
    while (++index < length2) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result.push(value);
        indexes.push(index);
      }
    }
    basePullAt(array, indexes);
    return result;
  }
  remove_1 = remove;
  return remove_1;
}
requireRemove();
var _baseSum;
var hasRequired_baseSum;
function require_baseSum() {
  if (hasRequired_baseSum) return _baseSum;
  hasRequired_baseSum = 1;
  function baseSum(array, iteratee) {
    var result, index = -1, length2 = array.length;
    while (++index < length2) {
      var current = iteratee(array[index]);
      if (current !== void 0) {
        result = result === void 0 ? current : result + current;
      }
    }
    return result;
  }
  _baseSum = baseSum;
  return _baseSum;
}
var sum_1;
var hasRequiredSum;
function requireSum() {
  if (hasRequiredSum) return sum_1;
  hasRequiredSum = 1;
  var baseSum = require_baseSum(), identity = requireIdentity();
  function sum(array) {
    return array && array.length ? baseSum(array, identity) : 0;
  }
  sum_1 = sum;
  return sum_1;
}
requireSum();
var _trimmedEndIndex;
var hasRequired_trimmedEndIndex;
function require_trimmedEndIndex() {
  if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
  hasRequired_trimmedEndIndex = 1;
  var reWhitespace = /\s/;
  function trimmedEndIndex(string) {
    var index = string.length;
    while (index-- && reWhitespace.test(string.charAt(index))) {
    }
    return index;
  }
  _trimmedEndIndex = trimmedEndIndex;
  return _trimmedEndIndex;
}
var _baseTrim;
var hasRequired_baseTrim;
function require_baseTrim() {
  if (hasRequired_baseTrim) return _baseTrim;
  hasRequired_baseTrim = 1;
  var trimmedEndIndex = require_trimmedEndIndex();
  var reTrimStart = /^\s+/;
  function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
  }
  _baseTrim = baseTrim;
  return _baseTrim;
}
var toNumber_1;
var hasRequiredToNumber;
function requireToNumber() {
  if (hasRequiredToNumber) return toNumber_1;
  hasRequiredToNumber = 1;
  var baseTrim = require_baseTrim(), isObject = requireIsObject(), isSymbol = requireIsSymbol();
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  toNumber_1 = toNumber;
  return toNumber_1;
}
var toFinite_1;
var hasRequiredToFinite;
function requireToFinite() {
  if (hasRequiredToFinite) return toFinite_1;
  hasRequiredToFinite = 1;
  var toNumber = requireToNumber();
  var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  toFinite_1 = toFinite;
  return toFinite_1;
}
var toInteger_1;
var hasRequiredToInteger;
function requireToInteger() {
  if (hasRequiredToInteger) return toInteger_1;
  hasRequiredToInteger = 1;
  var toFinite = requireToFinite();
  function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  toInteger_1 = toInteger;
  return toInteger_1;
}
var chunk_1;
var hasRequiredChunk;
function requireChunk() {
  if (hasRequiredChunk) return chunk_1;
  hasRequiredChunk = 1;
  var baseSlice = require_baseSlice(), isIterateeCall = require_isIterateeCall(), toInteger = requireToInteger();
  var nativeCeil = Math.ceil, nativeMax = Math.max;
  function chunk(array, size, guard) {
    if (guard ? isIterateeCall(array, size, guard) : size === void 0) {
      size = 1;
    } else {
      size = nativeMax(toInteger(size), 0);
    }
    var length2 = array == null ? 0 : array.length;
    if (!length2 || size < 1) {
      return [];
    }
    var index = 0, resIndex = 0, result = Array(nativeCeil(length2 / size));
    while (index < length2) {
      result[resIndex++] = baseSlice(array, index, index += size);
    }
    return result;
  }
  chunk_1 = chunk;
  return chunk_1;
}
requireChunk();
var isEmpty_1;
var hasRequiredIsEmpty;
function requireIsEmpty() {
  if (hasRequiredIsEmpty) return isEmpty_1;
  hasRequiredIsEmpty = 1;
  var baseKeys = require_baseKeys(), getTag = require_getTag(), isArguments2 = requireIsArguments(), isArray = requireIsArray(), isArrayLike = requireIsArrayLike(), isBuffer2 = requireIsBuffer(), isPrototype = require_isPrototype(), isTypedArray = requireIsTypedArray();
  var mapTag = "[object Map]", setTag = "[object Set]";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments2(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty.call(value, key)) {
        return false;
      }
    }
    return true;
  }
  isEmpty_1 = isEmpty;
  return isEmpty_1;
}
requireIsEmpty();
requireIsObject();
requireIsArray();
var difference_1;
var hasRequiredDifference;
function requireDifference() {
  if (hasRequiredDifference) return difference_1;
  hasRequiredDifference = 1;
  var baseDifference = require_baseDifference(), baseFlatten = require_baseFlatten(), baseRest = require_baseRest(), isArrayLikeObject = requireIsArrayLikeObject();
  var difference = baseRest(function(array, values2) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
  });
  difference_1 = difference;
  return difference_1;
}
requireDifference();
var isNumber_1;
var hasRequiredIsNumber;
function requireIsNumber() {
  if (hasRequiredIsNumber) return isNumber_1;
  hasRequiredIsNumber = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var numberTag = "[object Number]";
  function isNumber(value) {
    return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
  }
  isNumber_1 = isNumber;
  return isNumber_1;
}
requireIsNumber();
var _castSlice;
var hasRequired_castSlice;
function require_castSlice() {
  if (hasRequired_castSlice) return _castSlice;
  hasRequired_castSlice = 1;
  var baseSlice = require_baseSlice();
  function castSlice(array, start, end) {
    var length2 = array.length;
    end = end === void 0 ? length2 : end;
    return !start && end >= length2 ? array : baseSlice(array, start, end);
  }
  _castSlice = castSlice;
  return _castSlice;
}
var _charsEndIndex;
var hasRequired_charsEndIndex;
function require_charsEndIndex() {
  if (hasRequired_charsEndIndex) return _charsEndIndex;
  hasRequired_charsEndIndex = 1;
  var baseIndexOf = require_baseIndexOf();
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
    }
    return index;
  }
  _charsEndIndex = charsEndIndex;
  return _charsEndIndex;
}
var _charsStartIndex;
var hasRequired_charsStartIndex;
function require_charsStartIndex() {
  if (hasRequired_charsStartIndex) return _charsStartIndex;
  hasRequired_charsStartIndex = 1;
  var baseIndexOf = require_baseIndexOf();
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1, length2 = strSymbols.length;
    while (++index < length2 && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
    }
    return index;
  }
  _charsStartIndex = charsStartIndex;
  return _charsStartIndex;
}
var _asciiToArray;
var hasRequired_asciiToArray;
function require_asciiToArray() {
  if (hasRequired_asciiToArray) return _asciiToArray;
  hasRequired_asciiToArray = 1;
  function asciiToArray(string) {
    return string.split("");
  }
  _asciiToArray = asciiToArray;
  return _asciiToArray;
}
var _hasUnicode;
var hasRequired_hasUnicode;
function require_hasUnicode() {
  if (hasRequired_hasUnicode) return _hasUnicode;
  hasRequired_hasUnicode = 1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsZWJ = "\\u200d";
  var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }
  _hasUnicode = hasUnicode;
  return _hasUnicode;
}
var _unicodeToArray;
var hasRequired_unicodeToArray;
function require_unicodeToArray() {
  if (hasRequired_unicodeToArray) return _unicodeToArray;
  hasRequired_unicodeToArray = 1;
  var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
  var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
  var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
  var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }
  _unicodeToArray = unicodeToArray;
  return _unicodeToArray;
}
var _stringToArray;
var hasRequired_stringToArray;
function require_stringToArray() {
  if (hasRequired_stringToArray) return _stringToArray;
  hasRequired_stringToArray = 1;
  var asciiToArray = require_asciiToArray(), hasUnicode = require_hasUnicode(), unicodeToArray = require_unicodeToArray();
  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }
  _stringToArray = stringToArray;
  return _stringToArray;
}
var trim_1;
var hasRequiredTrim;
function requireTrim() {
  if (hasRequiredTrim) return trim_1;
  hasRequiredTrim = 1;
  var baseToString = require_baseToString(), baseTrim = require_baseTrim(), castSlice = require_castSlice(), charsEndIndex = require_charsEndIndex(), charsStartIndex = require_charsStartIndex(), stringToArray = require_stringToArray(), toString = requireToString();
  function trim2(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === void 0)) {
      return baseTrim(string);
    }
    if (!string || !(chars = baseToString(chars))) {
      return string;
    }
    var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
    return castSlice(strSymbols, start, end).join("");
  }
  trim_1 = trim2;
  return trim_1;
}
requireTrim();
var _baseIsDate;
var hasRequired_baseIsDate;
function require_baseIsDate() {
  if (hasRequired_baseIsDate) return _baseIsDate;
  hasRequired_baseIsDate = 1;
  var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
  var dateTag = "[object Date]";
  function baseIsDate(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag;
  }
  _baseIsDate = baseIsDate;
  return _baseIsDate;
}
var isDate_1;
var hasRequiredIsDate;
function requireIsDate() {
  if (hasRequiredIsDate) return isDate_1;
  hasRequiredIsDate = 1;
  var baseIsDate = require_baseIsDate(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
  var nodeIsDate = nodeUtil && nodeUtil.isDate;
  var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
  isDate_1 = isDate;
  return isDate_1;
}
requireIsDate();
var _createFind;
var hasRequired_createFind;
function require_createFind() {
  if (hasRequired_createFind) return _createFind;
  hasRequired_createFind = 1;
  var baseIteratee = require_baseIteratee(), isArrayLike = requireIsArrayLike(), keys = requireKeys();
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys(collection);
        predicate = function(key) {
          return iteratee(iterable[key], key, iterable);
        };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
    };
  }
  _createFind = createFind;
  return _createFind;
}
var findIndex_1;
var hasRequiredFindIndex;
function requireFindIndex() {
  if (hasRequiredFindIndex) return findIndex_1;
  hasRequiredFindIndex = 1;
  var baseFindIndex = require_baseFindIndex(), baseIteratee = require_baseIteratee(), toInteger = requireToInteger();
  var nativeMax = Math.max;
  function findIndex(array, predicate, fromIndex) {
    var length2 = array == null ? 0 : array.length;
    if (!length2) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length2 + index, 0);
    }
    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }
  findIndex_1 = findIndex;
  return findIndex_1;
}
var find_1;
var hasRequiredFind;
function requireFind() {
  if (hasRequiredFind) return find_1;
  hasRequiredFind = 1;
  var createFind = require_createFind(), findIndex = requireFindIndex();
  var find = createFind(findIndex);
  find_1 = find;
  return find_1;
}
requireFind();
var indexOf_1;
var hasRequiredIndexOf;
function requireIndexOf() {
  if (hasRequiredIndexOf) return indexOf_1;
  hasRequiredIndexOf = 1;
  var baseIndexOf = require_baseIndexOf(), toInteger = requireToInteger();
  var nativeMax = Math.max;
  function indexOf(array, value, fromIndex) {
    var length2 = array == null ? 0 : array.length;
    if (!length2) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length2 + index, 0);
    }
    return baseIndexOf(array, value, index);
  }
  indexOf_1 = indexOf;
  return indexOf_1;
}
requireIndexOf();
const jupMerge = merge$1;
function getPublicConfiguration(jupEnv) {
  switch (jupEnv) {
    case "p2":
      return jupMerge(base, p2);
    case "alpha":
      return jupMerge(base, alpha$1);
    case "development":
    default:
      return jupMerge(base, dev);
  }
}
function getJupEnvFromLocationOrigin(origin) {
  const o = `${origin}`;
  if (p2.origins.includes(o)) {
    return "p2";
  }
  if (dev.origins.includes(o)) {
    return "development";
  }
  if (alpha$1.origins.includes(o)) {
    return "alpha";
  }
}
function getPublicConfigurationFront() {
  const jupEnv = getJupEnvFront();
  return getPublicConfiguration(jupEnv);
}
function getJupEnvFront() {
  const d = getDocumentLocation();
  if (d) {
    const env = getJupEnvFromLocationOrigin(d.origin);
    if (env) {
      return env;
    }
  }
  return "not-set";
}
/*! js-cookie v3.0.5 | MIT */
function assign$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init(converter, defaultAttributes) {
  function set(name, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign$1({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = name + "=" + converter.write(value, name) + stringifiedAttributes;
  }
  function get2(name) {
    if (typeof document === "undefined" || arguments.length && !name) {
      return;
    }
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split("=");
      var value = parts.slice(1).join("=");
      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);
        if (name === found) {
          break;
        }
      } catch (e) {
      }
    }
    return name ? jar[name] : jar;
  }
  return Object.create(
    {
      set,
      get: get2,
      remove: function(name, attributes) {
        set(
          name,
          "",
          assign$1({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init(this.converter, assign$1({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init(assign$1({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api = init(defaultConverter, { path: "/" });
const versionCookieKeyName = "x-version";
function getPublicAppVersion() {
  return api.get(versionCookieKeyName) ?? "0.0.0";
}
function commonjsRequire(path) {
  throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var pluralize$1 = { exports: {} };
var pluralize = pluralize$1.exports;
var hasRequiredPluralize;
function requirePluralize() {
  if (hasRequiredPluralize) return pluralize$1.exports;
  hasRequiredPluralize = 1;
  (function(module, exports) {
    (function(root, pluralize2) {
      if (typeof commonjsRequire === "function" && true && true) {
        module.exports = pluralize2();
      } else {
        root.pluralize = pluralize2();
      }
    })(pluralize, function() {
      var pluralRules = [];
      var singularRules = [];
      var uncountables = {};
      var irregularPlurals = {};
      var irregularSingles = {};
      function sanitizeRule(rule) {
        if (typeof rule === "string") {
          return new RegExp("^" + rule + "$", "i");
        }
        return rule;
      }
      function restoreCase(word, token2) {
        if (word === token2) return token2;
        if (word === word.toLowerCase()) return token2.toLowerCase();
        if (word === word.toUpperCase()) return token2.toUpperCase();
        if (word[0] === word[0].toUpperCase()) {
          return token2.charAt(0).toUpperCase() + token2.substr(1).toLowerCase();
        }
        return token2.toLowerCase();
      }
      function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function(match2, index) {
          return args[index] || "";
        });
      }
      function replace2(word, rule) {
        return word.replace(rule[0], function(match2, index) {
          var result = interpolate(rule[1], arguments);
          if (match2 === "") {
            return restoreCase(word[index - 1], result);
          }
          return restoreCase(match2, result);
        });
      }
      function sanitizeWord(token2, word, rules) {
        if (!token2.length || uncountables.hasOwnProperty(token2)) {
          return word;
        }
        var len = rules.length;
        while (len--) {
          var rule = rules[len];
          if (rule[0].test(word)) return replace2(word, rule);
        }
        return word;
      }
      function replaceWord(replaceMap, keepMap, rules) {
        return function(word) {
          var token2 = word.toLowerCase();
          if (keepMap.hasOwnProperty(token2)) {
            return restoreCase(word, token2);
          }
          if (replaceMap.hasOwnProperty(token2)) {
            return restoreCase(word, replaceMap[token2]);
          }
          return sanitizeWord(token2, word, rules);
        };
      }
      function checkWord(replaceMap, keepMap, rules, bool) {
        return function(word) {
          var token2 = word.toLowerCase();
          if (keepMap.hasOwnProperty(token2)) return true;
          if (replaceMap.hasOwnProperty(token2)) return false;
          return sanitizeWord(token2, token2, rules) === token2;
        };
      }
      function pluralize2(word, count, inclusive) {
        var pluralized = count === 1 ? pluralize2.singular(word) : pluralize2.plural(word);
        return (inclusive ? count + " " : "") + pluralized;
      }
      pluralize2.plural = replaceWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.isPlural = checkWord(
        irregularSingles,
        irregularPlurals,
        pluralRules
      );
      pluralize2.singular = replaceWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.isSingular = checkWord(
        irregularPlurals,
        irregularSingles,
        singularRules
      );
      pluralize2.addPluralRule = function(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addSingularRule = function(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
      };
      pluralize2.addUncountableRule = function(word) {
        if (typeof word === "string") {
          uncountables[word.toLowerCase()] = true;
          return;
        }
        pluralize2.addPluralRule(word, "$0");
        pluralize2.addSingularRule(word, "$0");
      };
      pluralize2.addIrregularRule = function(single, plural) {
        plural = plural.toLowerCase();
        single = single.toLowerCase();
        irregularSingles[single] = plural;
        irregularPlurals[plural] = single;
      };
      [
        // Pronouns.
        ["I", "we"],
        ["me", "us"],
        ["he", "they"],
        ["she", "they"],
        ["them", "them"],
        ["myself", "ourselves"],
        ["yourself", "yourselves"],
        ["itself", "themselves"],
        ["herself", "themselves"],
        ["himself", "themselves"],
        ["themself", "themselves"],
        ["is", "are"],
        ["was", "were"],
        ["has", "have"],
        ["this", "these"],
        ["that", "those"],
        // Words ending in with a consonant and `o`.
        ["echo", "echoes"],
        ["dingo", "dingoes"],
        ["volcano", "volcanoes"],
        ["tornado", "tornadoes"],
        ["torpedo", "torpedoes"],
        // Ends with `us`.
        ["genus", "genera"],
        ["viscus", "viscera"],
        // Ends with `ma`.
        ["stigma", "stigmata"],
        ["stoma", "stomata"],
        ["dogma", "dogmata"],
        ["lemma", "lemmata"],
        ["schema", "schemata"],
        ["anathema", "anathemata"],
        // Other irregular rules.
        ["ox", "oxen"],
        ["axe", "axes"],
        ["die", "dice"],
        ["yes", "yeses"],
        ["foot", "feet"],
        ["eave", "eaves"],
        ["goose", "geese"],
        ["tooth", "teeth"],
        ["quiz", "quizzes"],
        ["human", "humans"],
        ["proof", "proofs"],
        ["carve", "carves"],
        ["valve", "valves"],
        ["looey", "looies"],
        ["thief", "thieves"],
        ["groove", "grooves"],
        ["pickaxe", "pickaxes"],
        ["passerby", "passersby"]
      ].forEach(function(rule) {
        return pluralize2.addIrregularRule(rule[0], rule[1]);
      });
      [
        [/s?$/i, "s"],
        [/[^\u0000-\u007F]$/i, "$0"],
        [/([^aeiou]ese)$/i, "$1"],
        [/(ax|test)is$/i, "$1es"],
        [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, "$1es"],
        [/(e[mn]u)s?$/i, "$1s"],
        [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, "$1"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
        [/(seraph|cherub)(?:im)?$/i, "$1im"],
        [/(her|at|gr)o$/i, "$1oes"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
        [/sis$/i, "ses"],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
        [/([^aeiouy]|qu)y$/i, "$1ies"],
        [/([^ch][ieo][ln])ey$/i, "$1ies"],
        [/(x|ch|ss|sh|zz)$/i, "$1es"],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
        [/\b((?:tit)?m|l)(?:ice|ouse)$/i, "$1ice"],
        [/(pe)(?:rson|ople)$/i, "$1ople"],
        [/(child)(?:ren)?$/i, "$1ren"],
        [/eaux$/i, "$0"],
        [/m[ae]n$/i, "men"],
        ["thou", "you"]
      ].forEach(function(rule) {
        return pluralize2.addPluralRule(rule[0], rule[1]);
      });
      [
        [/s$/i, ""],
        [/(ss)$/i, "$1"],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
        [/ies$/i, "y"],
        [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
        [/\b(mon|smil)ies$/i, "$1ey"],
        [/\b((?:tit)?m|l)ice$/i, "$1ouse"],
        [/(seraph|cherub)im$/i, "$1"],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, "$1"],
        [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, "$1sis"],
        [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
        [/(test)(?:is|es)$/i, "$1is"],
        [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
        [/(alumn|alg|vertebr)ae$/i, "$1a"],
        [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
        [/(matr|append)ices$/i, "$1ix"],
        [/(pe)(rson|ople)$/i, "$1rson"],
        [/(child)ren$/i, "$1"],
        [/(eau)x?$/i, "$1"],
        [/men$/i, "man"]
      ].forEach(function(rule) {
        return pluralize2.addSingularRule(rule[0], rule[1]);
      });
      [
        // Singular words with no plurals.
        "adulthood",
        "advice",
        "agenda",
        "aid",
        "aircraft",
        "alcohol",
        "ammo",
        "analytics",
        "anime",
        "athletics",
        "audio",
        "bison",
        "blood",
        "bream",
        "buffalo",
        "butter",
        "carp",
        "cash",
        "chassis",
        "chess",
        "clothing",
        "cod",
        "commerce",
        "cooperation",
        "corps",
        "debris",
        "diabetes",
        "digestion",
        "elk",
        "energy",
        "equipment",
        "excretion",
        "expertise",
        "firmware",
        "flounder",
        "fun",
        "gallows",
        "garbage",
        "graffiti",
        "hardware",
        "headquarters",
        "health",
        "herpes",
        "highjinks",
        "homework",
        "housework",
        "information",
        "jeans",
        "justice",
        "kudos",
        "labour",
        "literature",
        "machinery",
        "mackerel",
        "mail",
        "media",
        "mews",
        "moose",
        "music",
        "mud",
        "manga",
        "news",
        "only",
        "personnel",
        "pike",
        "plankton",
        "pliers",
        "police",
        "pollution",
        "premises",
        "rain",
        "research",
        "rice",
        "salmon",
        "scissors",
        "series",
        "sewage",
        "shambles",
        "shrimp",
        "software",
        "species",
        "staff",
        "swine",
        "tennis",
        "traffic",
        "transportation",
        "trout",
        "tuna",
        "wealth",
        "welfare",
        "whiting",
        "wildebeest",
        "wildlife",
        "you",
        /pok[eé]mon$/i,
        // Regexes.
        /[^aeiou]ese$/i,
        // "chinese", "japanese"
        /deer$/i,
        // "deer", "reindeer"
        /fish$/i,
        // "fish", "blowfish", "angelfish"
        /measles$/i,
        /o[iu]s$/i,
        // "carnivorous"
        /pox$/i,
        // "chickpox", "smallpox"
        /sheep$/i
      ].forEach(pluralize2.addUncountableRule);
      return pluralize2;
    });
  })(pluralize$1);
  return pluralize$1.exports;
}
var pluralizeExports = requirePluralize();
const toUnderscore = (input) => {
  return input.replace(/([A-Z])/g, ($1) => "_" + $1.toLowerCase());
};
const toPlural = (s) => {
  return pluralizeExports.plural(s);
};
const singularize = (s) => {
  return pluralizeExports.singular(s);
};
function capitalizeFirstLetter(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
}
function cleanUpGuess(word) {
  return toUnderscore(word).split("_").map(capitalizeFirstLetter).join(" ");
}
function guessI18nMissingKey(key) {
  const words = key.split(".").slice(-2);
  const first = words[0];
  const last = words[1];
  if (["label", "singular"].indexOf(last) !== -1) {
    return cleanUpGuess(first);
  }
  if (["views"].indexOf(first) !== -1) {
    return cleanUpGuess(last);
  }
  if (last.endsWith("plural")) {
    return cleanUpGuess(toPlural(first));
  }
  return words.join(" ");
}
function fetchLanguageJson(language) {
  const version2 = getPublicAppVersion();
  const config = getPublicConfigurationFront();
  const url = `${config.endpoints.backend}/assets/i18n/${language}.json?v=${version2}`;
  return fetch(url, {
    cache: "default"
  }).then((res) => res.json());
}
async function getNewPolyglot(locale) {
  const phrases = await fetchLanguageJson(locale);
  return new Polyglot({ locale, phrases, allowMissing: true });
}
let polyglot = void 0;
class PolyglotApi {
  constructor() {
    __publicField(this, "translate", (m, data) => {
      if (!polyglot) {
        throw new Error("Polyglot not initialized");
      }
      const res = polyglot.t(m, data);
      if (this.isKey(m, res)) {
        const guess = guessI18nMissingKey(res);
        return `${guess}`;
      }
      return res;
    });
  }
  get locale() {
    if (!polyglot) {
      return "fr";
    }
    const code = polyglot.locale();
    return code;
  }
  async setup(defaultLanguage) {
    const locale = defaultLanguage ?? gqlbMemory.language ?? getBrowserLocal();
    await this.setLocale(locale);
    return this;
  }
  isKey(key, value) {
    return key === value;
  }
  keyExists(key) {
    if (!polyglot) {
      return false;
    }
    const res = polyglot.t(key);
    return !this.isKey(key, res);
  }
  has(key) {
    return (polyglot == null ? void 0 : polyglot.has(key)) ?? false;
  }
  async setLocale(locale) {
    polyglot = await getNewPolyglot(locale);
    updateGlobalLanguageSettings(polyglot.locale());
  }
}
function updateGlobalLanguageSettings(locale) {
  const language = supportedLanguages.find((l) => l.code === locale);
  if (language) {
    language.momentCode;
    gqlbMemory.language = language.code;
  }
}
function SetupRecoilContext(props) {
  const { defaultLanguage } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(RecoilRoot, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(I18NContext, { defaultLanguage, children: props.children }) });
}
function I18NContext(props) {
  const { defaultLanguage } = props;
  const [i18n, setI18n] = useRecoilState(polyglotApiAtom);
  useEffect(() => {
    const api2 = new PolyglotApi();
    api2.setup(defaultLanguage).then(setI18n);
  }, []);
  if (i18n) {
    return props.children;
  }
  return null;
}
const common = {
  black: "#000",
  white: "#fff"
};
const red = {
  50: "#ffebee",
  100: "#ffcdd2",
  200: "#ef9a9a",
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  600: "#e53935",
  700: "#d32f2f",
  800: "#c62828",
  900: "#b71c1c",
  A100: "#ff8a80",
  A200: "#ff5252",
  A400: "#ff1744",
  A700: "#d50000"
};
const purple = {
  50: "#f3e5f5",
  100: "#e1bee7",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  600: "#8e24aa",
  700: "#7b1fa2",
  800: "#6a1b9a",
  900: "#4a148c",
  A100: "#ea80fc",
  A200: "#e040fb",
  A400: "#d500f9",
  A700: "#aa00ff"
};
const blue = {
  50: "#e3f2fd",
  100: "#bbdefb",
  200: "#90caf9",
  300: "#64b5f6",
  400: "#42a5f5",
  500: "#2196f3",
  600: "#1e88e5",
  700: "#1976d2",
  800: "#1565c0",
  900: "#0d47a1",
  A100: "#82b1ff",
  A200: "#448aff",
  A400: "#2979ff",
  A700: "#2962ff"
};
const lightBlue = {
  50: "#e1f5fe",
  100: "#b3e5fc",
  200: "#81d4fa",
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  600: "#039be5",
  700: "#0288d1",
  800: "#0277bd",
  900: "#01579b",
  A100: "#80d8ff",
  A200: "#40c4ff",
  A400: "#00b0ff",
  A700: "#0091ea"
};
const green = {
  50: "#e8f5e9",
  100: "#c8e6c9",
  200: "#a5d6a7",
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  600: "#43a047",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20",
  A100: "#b9f6ca",
  A200: "#69f0ae",
  A400: "#00e676",
  A700: "#00c853"
};
const orange = {
  50: "#fff3e0",
  100: "#ffe0b2",
  200: "#ffcc80",
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  600: "#fb8c00",
  700: "#f57c00",
  800: "#ef6c00",
  900: "#e65100",
  A100: "#ffd180",
  A200: "#ffab40",
  A400: "#ff9100",
  A700: "#ff6d00"
};
const grey = {
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
};
function formatMuiErrorMessage(code, ...args) {
  const url = new URL(`https://mui.com/production-error/?code=${code}`);
  args.forEach((arg2) => url.searchParams.append("args[]", arg2));
  return `Minified MUI error #${code}; visit ${url} for the full message.`;
}
const THEME_ID = "$$material";
var isDevelopment$2 = false;
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
  return void 0;
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === void 0 ? !isDevelopment$2 : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      var _tag$parentNode;
      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index) {
  return value.charCodeAt(index) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root, parent, type2, props, children, length2) {
  return { value, root, parent, type: type2, props, children, line, column, length: length2, return: "" };
}
function copy(root, props) {
  return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type2) {
  switch (type2) {
    // \0 \t \n \r \s whitespace token
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    // ! + , / > @ ~ isolate token
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    // ; { } breakpoint token
    case 59:
    case 123:
    case 125:
      return 4;
    // : accompanied token
    case 58:
      return 3;
    // " ' ( [ opening delimit token
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    // ) ] closing delimit token
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type2) {
  return trim(slice(position - 1, delimiter(type2 === 91 ? type2 + 2 : type2 === 40 ? type2 + 1 : type2)));
}
function whitespace(type2) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type2) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
function delimiter(type2) {
  while (next())
    switch (character) {
      // ] ) " '
      case type2:
        return position;
      // " '
      case 34:
      case 39:
        if (type2 !== 34 && type2 !== 39)
          delimiter(character);
        break;
      // (
      case 40:
        if (type2 === 41)
          delimiter(type2);
        break;
      // \
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type2, index) {
  while (next())
    if (type2 + character === 47 + 10)
      break;
    else if (type2 + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index, position - 1) + "*" + from(type2 === 47 ? type2 : next());
}
function identifier(index) {
  while (!token(peek()))
    next();
  return slice(index, position);
}
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type2 = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type2;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      // (
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      // " ' [
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      // \t \n \r \s
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      // \
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      // /
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      // {
      case 123 * variable:
        points[index++] = strlen(characters2) * ampersand;
      // } ; \0
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          // \0 }
          case 0:
          case 125:
            scanning = 0;
          // ;
          case 59 + offset:
            if (ampersand == -1) characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          // @ ;
          case 59:
            characters2 += ";";
          // { rule/at-rule
          default:
            append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type2, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  // d l m s
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type2, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index = offset = property = 0, variable = ampersand = 1, type2 = characters2 = "", length2 = pseudo;
        break;
      // :
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          // &
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          // ,
          case 44:
            points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          // @
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset = length2 = strlen(type2 = characters2 += identifier(caret())), character2++;
            break;
          // -
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root, parent, index, offset, rules, points, type2, props, children, length2) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k = 0; i < index; ++i)
    for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
      if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
        props[k++] = z;
  return node(value, root, parent, offset === 0 ? RULESET : type2, props, children, length2);
}
function comment(value, root, parent) {
  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root, parent, length2) {
  return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element, index, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length) break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index, children, callback) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index, children, callback) || "";
    return output;
  };
}
function rulesheet(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
}
function memoize$1(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg2) {
    if (cache[arg2] === void 0) cache[arg2] = fn(arg2);
    return cache[arg2];
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index] = 1;
        }
        parsed[index] += identifierWithPointTracking(position - 1, points, index);
        break;
      case 2:
        parsed[index] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index] = peek() === 58 ? "&\f" : "";
          points[index] = parsed[index].length;
          break;
        }
      // fallthrough
      default:
        parsed[index] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value;
  var parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent) return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
function prefix(value, length2) {
  switch (hash(value, length2)) {
    // color-adjust
    case 5103:
      return WEBKIT + "print-" + value + value;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    // appearance, user-select, transform, hyphens, text-size-adjust
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    // flex, flex-direction
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    // order
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    // align-items
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    // align-self
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    // align-content
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    // flex-shrink
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    // flex-basis
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    // flex-grow
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    // transition
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    // cursor
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    // background, background-image
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    // justify-content
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    // (margin|padding)-inline-(start|end)
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    // (min|max)?(width|height|inline-size|block-size)
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          if (charat(value, length2 + 4) !== 45) break;
        // (f)ill-available, (f)it-content
        case 102:
          return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
        // (s)tretch
        case 115:
          return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
      }
      break;
    // position: sticky
    case 4949:
      if (charat(value, length2 + 1) !== 115) break;
    // display: (flex|inline-flex)
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        // stic(k)y
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        // (inline-)?fl(e)x
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    // writing-mode
    case 5936:
      switch (charat(value, length2 + 11)) {
        // vertical-l(r)
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        // vertical-r(l)
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        // horizontal(-)tb
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index, children, callback) {
  if (element.length > -1) {
    if (!element["return"]) switch (element.type) {
      case DECLARATION:
        element["return"] = prefix(element.value, element.length);
        break;
      case KEYFRAMES:
        return serialize([copy(element, {
          value: replace(element.value, "@", "@" + WEBKIT)
        })], callback);
      case RULESET:
        if (element.length) return combine(element.props, function(value) {
          switch (match(value, /(::plac\w+|:read-\w+)/)) {
            // :read-(only|write)
            case ":read-only":
            case ":read-write":
              return serialize([copy(element, {
                props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
              })], callback);
            // :placeholder
            case "::placeholder":
              return serialize([copy(element, {
                props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
              }), copy(element, {
                props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
              }), copy(element, {
                props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
              })], callback);
          }
          return "";
        });
    }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options) {
  var key = options.key;
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  {
    var currentSheet;
    var finalizingPlugins = [stringify, rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles) {
      return serialize(compile(styles), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production_min;
function requireReactIs_production_min() {
  if (hasRequiredReactIs_production_min) return reactIs_production_min;
  hasRequiredReactIs_production_min = 1;
  var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r2 = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
  function z(a) {
    if ("object" === typeof a && null !== a) {
      var u = a.$$typeof;
      switch (u) {
        case c:
          switch (a = a.type, a) {
            case l:
            case m:
            case e:
            case g:
            case f:
            case p:
              return a;
            default:
              switch (a = a && a.$$typeof, a) {
                case k:
                case n:
                case t:
                case r2:
                case h:
                  return a;
                default:
                  return u;
              }
          }
        case d:
          return u;
      }
    }
  }
  function A(a) {
    return z(a) === m;
  }
  reactIs_production_min.AsyncMode = l;
  reactIs_production_min.ConcurrentMode = m;
  reactIs_production_min.ContextConsumer = k;
  reactIs_production_min.ContextProvider = h;
  reactIs_production_min.Element = c;
  reactIs_production_min.ForwardRef = n;
  reactIs_production_min.Fragment = e;
  reactIs_production_min.Lazy = t;
  reactIs_production_min.Memo = r2;
  reactIs_production_min.Portal = d;
  reactIs_production_min.Profiler = g;
  reactIs_production_min.StrictMode = f;
  reactIs_production_min.Suspense = p;
  reactIs_production_min.isAsyncMode = function(a) {
    return A(a) || z(a) === l;
  };
  reactIs_production_min.isConcurrentMode = A;
  reactIs_production_min.isContextConsumer = function(a) {
    return z(a) === k;
  };
  reactIs_production_min.isContextProvider = function(a) {
    return z(a) === h;
  };
  reactIs_production_min.isElement = function(a) {
    return "object" === typeof a && null !== a && a.$$typeof === c;
  };
  reactIs_production_min.isForwardRef = function(a) {
    return z(a) === n;
  };
  reactIs_production_min.isFragment = function(a) {
    return z(a) === e;
  };
  reactIs_production_min.isLazy = function(a) {
    return z(a) === t;
  };
  reactIs_production_min.isMemo = function(a) {
    return z(a) === r2;
  };
  reactIs_production_min.isPortal = function(a) {
    return z(a) === d;
  };
  reactIs_production_min.isProfiler = function(a) {
    return z(a) === g;
  };
  reactIs_production_min.isStrictMode = function(a) {
    return z(a) === f;
  };
  reactIs_production_min.isSuspense = function(a) {
    return z(a) === p;
  };
  reactIs_production_min.isValidElementType = function(a) {
    return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r2 || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
  };
  reactIs_production_min.typeOf = z;
  return reactIs_production_min;
}
var reactIs_development$1 = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development$1;
function requireReactIs_development$1() {
  if (hasRequiredReactIs_development$1) return reactIs_development$1;
  hasRequiredReactIs_development$1 = 1;
  if (process.env.NODE_ENV !== "production") {
    (function() {
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type2) {
        return typeof type2 === "string" || typeof type2 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 === "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type2 = object.type;
              switch (type2) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type2;
                default:
                  var $$typeofType = type2 && type2.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return void 0;
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;
      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      reactIs_development$1.AsyncMode = AsyncMode;
      reactIs_development$1.ConcurrentMode = ConcurrentMode;
      reactIs_development$1.ContextConsumer = ContextConsumer;
      reactIs_development$1.ContextProvider = ContextProvider;
      reactIs_development$1.Element = Element;
      reactIs_development$1.ForwardRef = ForwardRef;
      reactIs_development$1.Fragment = Fragment;
      reactIs_development$1.Lazy = Lazy;
      reactIs_development$1.Memo = Memo;
      reactIs_development$1.Portal = Portal;
      reactIs_development$1.Profiler = Profiler;
      reactIs_development$1.StrictMode = StrictMode;
      reactIs_development$1.Suspense = Suspense;
      reactIs_development$1.isAsyncMode = isAsyncMode;
      reactIs_development$1.isConcurrentMode = isConcurrentMode;
      reactIs_development$1.isContextConsumer = isContextConsumer;
      reactIs_development$1.isContextProvider = isContextProvider;
      reactIs_development$1.isElement = isElement;
      reactIs_development$1.isForwardRef = isForwardRef;
      reactIs_development$1.isFragment = isFragment;
      reactIs_development$1.isLazy = isLazy;
      reactIs_development$1.isMemo = isMemo;
      reactIs_development$1.isPortal = isPortal;
      reactIs_development$1.isProfiler = isProfiler;
      reactIs_development$1.isStrictMode = isStrictMode;
      reactIs_development$1.isSuspense = isSuspense;
      reactIs_development$1.isValidElementType = isValidElementType;
      reactIs_development$1.typeOf = typeOf;
    })();
  }
  return reactIs_development$1;
}
var hasRequiredReactIs$1;
function requireReactIs$1() {
  if (hasRequiredReactIs$1) return reactIs$1.exports;
  hasRequiredReactIs$1 = 1;
  if (process.env.NODE_ENV === "production") {
    reactIs$1.exports = requireReactIs_production_min();
  } else {
    reactIs$1.exports = requireReactIs_development$1();
  }
  return reactIs$1.exports;
}
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag2 === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
  registerStyles(cache, serialized, isStringTag2);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h = 0;
  var k, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h ^= str.charCodeAt(i) & 255;
      h = /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  }
  h ^= h >>> 13;
  h = /* Math.imul(h, m): */
  (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var isDevelopment$1 = false;
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize$1(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p22) {
          cursor = {
            name: p1,
            styles: p22,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  var componentSelector = interpolation;
  if (componentSelector.__emotion_styles !== void 0) {
    return componentSelector;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      var keyframes = interpolation;
      if (keyframes.anim === 1) {
        cursor = {
          name: keyframes.name,
          styles: keyframes.styles,
          next: cursor
        };
        return keyframes.name;
      }
      var serializedStyles = interpolation;
      if (serializedStyles.styles !== void 0) {
        var next2 = serializedStyles.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles = serializedStyles.styles + ";";
        return styles;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      }
      break;
    }
  }
  var asString = interpolation;
  if (registered == null) {
    return asString;
  }
  var cached = registered[asString];
  return cached !== void 0 ? cached : asString;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];
      if (typeof value !== "object") {
        var asString = value;
        if (registered != null && registered[asString] !== void 0) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === "NO_COMPONENT_SELECTOR" && isDevelopment$1) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (key) {
            case "animation":
            case "animationName": {
              string += processStyleName(key) + ":" + interpolated + ";";
              break;
            }
            default: {
              string += key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;
    styles += asTemplateStringsArr[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      var templateStringsArr = strings;
      styles += templateStringsArr[i];
    }
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles)) !== null) {
    identifierName += "-" + match2[1];
  }
  var name = murmur2(styles) + identifierName;
  return {
    name,
    styles,
    next: cursor
  };
}
var syncFallback = function syncFallback2(create) {
  return create();
};
var useInsertionEffect = React["useInsertionEffect"] ? React["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var EmotionCacheContext = /* @__PURE__ */ React.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ forwardRef(function(props, ref2) {
    var cache = useContext(EmotionCacheContext);
    return func(props, cache, ref2);
  });
};
var ThemeContext = /* @__PURE__ */ React.createContext({});
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize$1(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
var isDevelopment = false;
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
  return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
  var shouldForwardProp2;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp2 !== "function" && isReal) {
    shouldForwardProp2 = tag.__emotion_forwardProp;
  }
  return shouldForwardProp2;
};
var Insertion = function Insertion2(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag2);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag2);
  });
  return null;
};
var createStyled$1 = function createStyled(tag, options) {
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options !== void 0) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles.push.apply(styles, args);
    } else {
      var templateStringsArr = args[0];
      styles.push(templateStringsArr[0]);
      var len = args.length;
      var i = 1;
      for (; i < len; i++) {
        styles.push(args[i], templateStringsArr[i]);
      }
    }
    var Styled = withEmotionCache(function(props, cache, ref2) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key in props) {
          mergedProps[key] = props[key];
        }
        mergedProps.theme = React.useContext(ThemeContext);
      }
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === "as") continue;
        if (finalShouldForwardProp(_key)) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      if (ref2) {
        newProps.ref = ref2;
      }
      return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Insertion, {
        cache,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), /* @__PURE__ */ React.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp2;
    Object.defineProperty(Styled, "toString", {
      value: function value() {
        if (targetClassName === void 0 && isDevelopment) {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      var newStyled2 = createStyled(nextTag, _extends({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      }));
      return newStyled2.apply(void 0, styles);
    };
    return Styled;
  };
};
var tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var newStyled = createStyled$1.bind(null);
tags.forEach(function(tagName) {
  newStyled[tagName] = newStyled(tagName);
});
var propTypes = { exports: {} };
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var objectAssign;
var hasRequiredObjectAssign;
function requireObjectAssign() {
  if (hasRequiredObjectAssign) return objectAssign;
  hasRequiredObjectAssign = 1;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val === null || val === void 0) {
      throw new TypeError("Object.assign cannot be called with null or undefined");
    }
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }
      var test1 = new String("abc");
      test1[5] = "de";
      if (Object.getOwnPropertyNames(test1)[0] === "5") {
        return false;
      }
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2["_" + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789") {
        return false;
      }
      var test3 = {};
      "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
    var from2;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
      from2 = Object(arguments[s]);
      for (var key in from2) {
        if (hasOwnProperty.call(from2, key)) {
          to[key] = from2[key];
        }
      }
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from2);
        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from2, symbols[i])) {
            to[symbols[i]] = from2[symbols[i]];
          }
        }
      }
    }
    return to;
  };
  return objectAssign;
}
var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;
function requireReactPropTypesSecret() {
  if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
  hasRequiredReactPropTypesSecret = 1;
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  ReactPropTypesSecret_1 = ReactPropTypesSecret;
  return ReactPropTypesSecret_1;
}
var has;
var hasRequiredHas;
function requireHas() {
  if (hasRequiredHas) return has;
  hasRequiredHas = 1;
  has = Function.call.bind(Object.prototype.hasOwnProperty);
  return has;
}
var checkPropTypes_1;
var hasRequiredCheckPropTypes;
function requireCheckPropTypes() {
  if (hasRequiredCheckPropTypes) return checkPropTypes_1;
  hasRequiredCheckPropTypes = 1;
  var printWarning = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    var ReactPropTypesSecret = /* @__PURE__ */ requireReactPropTypesSecret();
    var loggedTypeFailures = {};
    var has2 = /* @__PURE__ */ requireHas();
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
    if (process.env.NODE_ENV !== "production") {
      for (var typeSpecName in typeSpecs) {
        if (has2(typeSpecs, typeSpecName)) {
          var error;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error(
                (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              err.name = "Invariant Violation";
              throw err;
            }
            error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning(
              (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : "";
            printWarning(
              "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
            );
          }
        }
      }
    }
  }
  checkPropTypes.resetWarningCache = function() {
    if (process.env.NODE_ENV !== "production") {
      loggedTypeFailures = {};
    }
  };
  checkPropTypes_1 = checkPropTypes;
  return checkPropTypes_1;
}
var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;
function requireFactoryWithTypeCheckers() {
  if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
  hasRequiredFactoryWithTypeCheckers = 1;
  var ReactIs = requireReactIs$1();
  var assign2 = requireObjectAssign();
  var ReactPropTypesSecret = /* @__PURE__ */ requireReactPropTypesSecret();
  var has2 = /* @__PURE__ */ requireHas();
  var checkPropTypes = /* @__PURE__ */ requireCheckPropTypes();
  var printWarning = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    printWarning = function(text) {
      var message = "Warning: " + text;
      if (typeof console !== "undefined") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {
      }
    };
  }
  function emptyFunctionThatReturnsNull() {
    return null;
  }
  factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === "function") {
        return iteratorFn;
      }
    }
    var ANONYMOUS = "<<anonymous>>";
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker("array"),
      bigint: createPrimitiveTypeChecker("bigint"),
      bool: createPrimitiveTypeChecker("boolean"),
      func: createPrimitiveTypeChecker("function"),
      number: createPrimitiveTypeChecker("number"),
      object: createPrimitiveTypeChecker("object"),
      string: createPrimitiveTypeChecker("string"),
      symbol: createPrimitiveTypeChecker("symbol"),
      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function PropTypeError(message, data) {
      this.message = message;
      this.data = data && typeof data === "object" ? data : {};
      this.stack = "";
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
      if (process.env.NODE_ENV !== "production") {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;
        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            var err = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            err.name = "Invariant Violation";
            throw err;
          } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
            var cacheKey = componentName + ":" + propName;
            if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3) {
              printWarning(
                "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
            }
            return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }
      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);
      return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);
          return new PropTypeError(
            "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
            { expectedType }
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        if (process.env.NODE_ENV !== "production") {
          if (arguments.length > 1) {
            printWarning(
              "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
            );
          } else {
            printWarning("Invalid argument supplied to oneOf, expected an array.");
          }
        }
        return emptyFunctionThatReturnsNull;
      }
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }
        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type2 = getPreciseType(value);
          if (type2 === "symbol") {
            return String(value);
          }
          return value;
        });
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== "function") {
          return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
        }
        for (var key in propValue) {
          if (has2(propValue, key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
        return emptyFunctionThatReturnsNull;
      }
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== "function") {
          printWarning(
            "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
          );
          return emptyFunctionThatReturnsNull;
        }
      }
      function validate(props, propName, componentName, location, propFullName) {
        var expectedTypes = [];
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker2 = arrayOfTypeCheckers[i2];
          var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
          if (checkerResult == null) {
            return null;
          }
          if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
            expectedTypes.push(checkerResult.data.expectedType);
          }
        }
        var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
        return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
      }
      return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type2) {
      return new PropTypeError(
        (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type2 + "`."
      );
    }
    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== "object") {
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
        }
        var allKeys = assign2({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (has2(shapeTypes, key) && typeof checker !== "function") {
            return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
          }
          if (!checker) {
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
      switch (typeof propValue) {
        case "number":
        case "string":
        case "undefined":
          return true;
        case "boolean":
          return !propValue;
        case "object":
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }
          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }
          return true;
        default:
          return false;
      }
    }
    function isSymbol(propType, propValue) {
      if (propType === "symbol") {
        return true;
      }
      if (!propValue) {
        return false;
      }
      if (propValue["@@toStringTag"] === "Symbol") {
        return true;
      }
      if (typeof Symbol === "function" && propValue instanceof Symbol) {
        return true;
      }
      return false;
    }
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return "array";
      }
      if (propValue instanceof RegExp) {
        return "object";
      }
      if (isSymbol(propType, propValue)) {
        return "symbol";
      }
      return propType;
    }
    function getPreciseType(propValue) {
      if (typeof propValue === "undefined" || propValue === null) {
        return "" + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === "object") {
        if (propValue instanceof Date) {
          return "date";
        } else if (propValue instanceof RegExp) {
          return "regexp";
        }
      }
      return propType;
    }
    function getPostfixForTypeWarning(value) {
      var type2 = getPreciseType(value);
      switch (type2) {
        case "array":
        case "object":
          return "an " + type2;
        case "boolean":
        case "date":
        case "regexp":
          return "a " + type2;
        default:
          return type2;
      }
    }
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  return factoryWithTypeCheckers;
}
var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;
function requireFactoryWithThrowingShims() {
  if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
  hasRequiredFactoryWithThrowingShims = 1;
  var ReactPropTypesSecret = /* @__PURE__ */ requireReactPropTypesSecret();
  function emptyFunction() {
  }
  function emptyFunctionWithReset() {
  }
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  factoryWithThrowingShims = function() {
    function shim2(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }
      var err = new Error(
        "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
      );
      err.name = "Invariant Violation";
      throw err;
    }
    shim2.isRequired = shim2;
    function getShim() {
      return shim2;
    }
    var ReactPropTypes = {
      array: shim2,
      bigint: shim2,
      bool: shim2,
      func: shim2,
      number: shim2,
      object: shim2,
      string: shim2,
      symbol: shim2,
      any: shim2,
      arrayOf: getShim,
      element: shim2,
      elementType: shim2,
      instanceOf: getShim,
      node: shim2,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
  };
  return factoryWithThrowingShims;
}
var hasRequiredPropTypes;
function requirePropTypes() {
  if (hasRequiredPropTypes) return propTypes.exports;
  hasRequiredPropTypes = 1;
  if (process.env.NODE_ENV !== "production") {
    var ReactIs = requireReactIs$1();
    var throwOnDirectAccess = true;
    propTypes.exports = /* @__PURE__ */ requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
  } else {
    propTypes.exports = /* @__PURE__ */ requireFactoryWithThrowingShims()();
  }
  return propTypes.exports;
}
var propTypesExports = /* @__PURE__ */ requirePropTypes();
const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
/**
 * @mui/styled-engine v6.2.1
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
function styled$1(tag, options) {
  const stylesFactory = newStyled(tag, options);
  if (process.env.NODE_ENV !== "production") {
    return (...styles) => {
      const component = typeof tag === "string" ? `"${tag}"` : "component";
      if (styles.length === 0) {
        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
      } else if (styles.some((style2) => style2 === void 0)) {
        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
      }
      return stylesFactory(...styles);
    };
  }
  return stylesFactory;
}
function internal_mutateStyles(tag, processor) {
  if (Array.isArray(tag.__emotion_styles)) {
    tag.__emotion_styles = processor(tag.__emotion_styles);
  }
}
const wrapper = [];
function internal_serializeStyles(styles) {
  wrapper[0] = styles;
  return serializeStyles(wrapper);
}
function isPlainObject(item) {
  if (typeof item !== "object" || item === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(item);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
}
function deepClone(source) {
  if (/* @__PURE__ */ React.isValidElement(source) || !isPlainObject(source)) {
    return source;
  }
  const output = {};
  Object.keys(source).forEach((key) => {
    output[key] = deepClone(source[key]);
  });
  return output;
}
function deepmerge(target, source, options = {
  clone: true
}) {
  const output = options.clone ? {
    ...target
  } : target;
  if (isPlainObject(target) && isPlainObject(source)) {
    Object.keys(source).forEach((key) => {
      if (/* @__PURE__ */ React.isValidElement(source[key])) {
        output[key] = source[key];
      } else if (isPlainObject(source[key]) && // Avoid prototype pollution
      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {
        output[key] = deepmerge(target[key], source[key], options);
      } else if (options.clone) {
        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];
      } else {
        output[key] = source[key];
      }
    });
  }
  return output;
}
const sortBreakpointsValues = (values2) => {
  const breakpointsAsArray = Object.keys(values2).map((key) => ({
    key,
    val: values2[key]
  })) || [];
  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
  return breakpointsAsArray.reduce((acc, obj) => {
    return {
      ...acc,
      [obj.key]: obj.val
    };
  }, {});
};
function createBreakpoints(breakpoints) {
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: values2 = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit = "px",
    step = 5,
    ...other
  } = breakpoints;
  const sortedValues = sortBreakpointsValues(values2);
  const keys = Object.keys(sortedValues);
  function up(key) {
    const value = typeof values2[key] === "number" ? values2[key] : key;
    return `@media (min-width:${value}${unit})`;
  }
  function down(key) {
    const value = typeof values2[key] === "number" ? values2[key] : key;
    return `@media (max-width:${value - step / 100}${unit})`;
  }
  function between(start, end) {
    const endIndex = keys.indexOf(end);
    return `@media (min-width:${typeof values2[start] === "number" ? values2[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end) - step / 100}${unit})`;
  }
  function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  }
  function not(key) {
    const keyIndex = keys.indexOf(key);
    if (keyIndex === 0) {
      return up(keys[1]);
    }
    if (keyIndex === keys.length - 1) {
      return down(keys[keyIndex]);
    }
    return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
  }
  return {
    keys,
    values: sortedValues,
    up,
    down,
    between,
    only,
    not,
    unit,
    ...other
  };
}
function sortContainerQueries(theme, css) {
  if (!theme.containerQueries) {
    return css;
  }
  const sorted = Object.keys(css).filter((key) => key.startsWith("@container")).sort((a, b) => {
    var _a, _b;
    const regex = /min-width:\s*([0-9.]+)/;
    return +(((_a = a.match(regex)) == null ? void 0 : _a[1]) || 0) - +(((_b = b.match(regex)) == null ? void 0 : _b[1]) || 0);
  });
  if (!sorted.length) {
    return css;
  }
  return sorted.reduce((acc, key) => {
    const value = css[key];
    delete acc[key];
    acc[key] = value;
    return acc;
  }, {
    ...css
  });
}
function isCqShorthand(breakpointKeys, value) {
  return value === "@" || value.startsWith("@") && (breakpointKeys.some((key) => value.startsWith(`@${key}`)) || !!value.match(/^@\d/));
}
function getContainerQuery(theme, shorthand) {
  const matches = shorthand.match(/^@([^/]+)?\/?(.+)?$/);
  if (!matches) {
    if (process.env.NODE_ENV !== "production") {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${shorthand})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
For example, \`@sm\` or \`@600\` or \`@40rem/sidebar\`.` : formatMuiErrorMessage(18, `(${shorthand})`));
    }
    return null;
  }
  const [, containerQuery, containerName] = matches;
  const value = Number.isNaN(+containerQuery) ? containerQuery || 0 : +containerQuery;
  return theme.containerQueries(containerName).up(value);
}
function cssContainerQueries(themeInput) {
  const toContainerQuery = (mediaQuery, name) => mediaQuery.replace("@media", name ? `@container ${name}` : "@container");
  function attachCq(node3, name) {
    node3.up = (...args) => toContainerQuery(themeInput.breakpoints.up(...args), name);
    node3.down = (...args) => toContainerQuery(themeInput.breakpoints.down(...args), name);
    node3.between = (...args) => toContainerQuery(themeInput.breakpoints.between(...args), name);
    node3.only = (...args) => toContainerQuery(themeInput.breakpoints.only(...args), name);
    node3.not = (...args) => {
      const result = toContainerQuery(themeInput.breakpoints.not(...args), name);
      if (result.includes("not all and")) {
        return result.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or");
      }
      return result;
    };
  }
  const node2 = {};
  const containerQueries = (name) => {
    attachCq(node2, name);
    return node2;
  };
  attachCq(containerQueries);
  return {
    ...themeInput,
    containerQueries
  };
}
const shape = {
  borderRadius: 4
};
const responsivePropType = process.env.NODE_ENV !== "production" ? PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object, PropTypes.array]) : {};
function merge(acc, item) {
  if (!item) {
    return acc;
  }
  return deepmerge(acc, item, {
    clone: false
    // No need to clone deep, it's way faster.
  });
}
const values = {
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
};
const defaultBreakpoints = {
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  up: (key) => `@media (min-width:${values[key]}px)`
};
const defaultContainerQueries = {
  containerQueries: (containerName) => ({
    up: (key) => {
      let result = typeof key === "number" ? key : values[key] || key;
      if (typeof result === "number") {
        result = `${result}px`;
      }
      return containerName ? `@container ${containerName} (min-width:${result})` : `@container (min-width:${result})`;
    }
  })
};
function handleBreakpoints(props, propValue, styleFromPropValue) {
  const theme = props.theme || {};
  if (Array.isArray(propValue)) {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return propValue.reduce((acc, item, index) => {
      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
      return acc;
    }, {});
  }
  if (typeof propValue === "object") {
    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
    return Object.keys(propValue).reduce((acc, breakpoint) => {
      if (isCqShorthand(themeBreakpoints.keys, breakpoint)) {
        const containerKey = getContainerQuery(theme.containerQueries ? theme : defaultContainerQueries, breakpoint);
        if (containerKey) {
          acc[containerKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        }
      } else if (Object.keys(themeBreakpoints.values || values).includes(breakpoint)) {
        const mediaKey = themeBreakpoints.up(breakpoint);
        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
      } else {
        const cssKey = breakpoint;
        acc[cssKey] = propValue[cssKey];
      }
      return acc;
    }, {});
  }
  const output = styleFromPropValue(propValue);
  return output;
}
function createEmptyBreakpointObject(breakpointsInput = {}) {
  var _a;
  const breakpointsInOrder = (_a = breakpointsInput.keys) == null ? void 0 : _a.reduce((acc, key) => {
    const breakpointStyleKey = breakpointsInput.up(key);
    acc[breakpointStyleKey] = {};
    return acc;
  }, {});
  return breakpointsInOrder || {};
}
function removeUnusedBreakpoints(breakpointKeys, style2) {
  return breakpointKeys.reduce((acc, key) => {
    const breakpointOutput = acc[key];
    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
    if (isBreakpointUnused) {
      delete acc[key];
    }
    return acc;
  }, style2);
}
function capitalize(string) {
  if (typeof string !== "string") {
    throw new Error(process.env.NODE_ENV !== "production" ? "MUI: `capitalize(string)` expects a string argument." : formatMuiErrorMessage(7));
  }
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function getPath(obj, path, checkVars = true) {
  if (!path || typeof path !== "string") {
    return null;
  }
  if (obj && obj.vars && checkVars) {
    const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
    if (val != null) {
      return val;
    }
  }
  return path.split(".").reduce((acc, item) => {
    if (acc && acc[item] != null) {
      return acc[item];
    }
    return null;
  }, obj);
}
function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
  let value;
  if (typeof themeMapping === "function") {
    value = themeMapping(propValueFinal);
  } else if (Array.isArray(themeMapping)) {
    value = themeMapping[propValueFinal] || userValue;
  } else {
    value = getPath(themeMapping, propValueFinal) || userValue;
  }
  if (transform) {
    value = transform(value, userValue, themeMapping);
  }
  return value;
}
function style$1(options) {
  const {
    prop,
    cssProperty = options.prop,
    themeKey,
    transform
  } = options;
  const fn = (props) => {
    if (props[prop] == null) {
      return null;
    }
    const propValue = props[prop];
    const theme = props.theme;
    const themeMapping = getPath(theme, themeKey) || {};
    const styleFromPropValue = (propValueFinal) => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === "string") {
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, propValue, styleFromPropValue);
  };
  fn.propTypes = process.env.NODE_ENV !== "production" ? {
    [prop]: responsivePropType
  } : {};
  fn.filterProps = [prop];
  return fn;
}
function memoize(fn) {
  const cache = {};
  return (arg2) => {
    if (cache[arg2] === void 0) {
      cache[arg2] = fn(arg2);
    }
    return cache[arg2];
  };
}
const properties = {
  m: "margin",
  p: "padding"
};
const directions = {
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
};
const aliases = {
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
};
const getCssProperties = memoize((prop) => {
  if (prop.length > 2) {
    if (aliases[prop]) {
      prop = aliases[prop];
    } else {
      return [prop];
    }
  }
  const [a, b] = prop.split("");
  const property = properties[a];
  const direction = directions[b] || "";
  return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
});
const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
const spacingKeys = [...marginKeys, ...paddingKeys];
function createUnaryUnit(theme, themeKey, defaultValue, propName) {
  const themeSpacing = getPath(theme, themeKey, true) ?? defaultValue;
  if (typeof themeSpacing === "number" || typeof themeSpacing === "string") {
    return (val) => {
      if (typeof val === "string") {
        return val;
      }
      if (process.env.NODE_ENV !== "production") {
        if (typeof val !== "number") {
          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${val}.`);
        }
      }
      if (typeof themeSpacing === "string") {
        return `calc(${val} * ${themeSpacing})`;
      }
      return themeSpacing * val;
    };
  }
  if (Array.isArray(themeSpacing)) {
    return (val) => {
      if (typeof val === "string") {
        return val;
      }
      const abs2 = Math.abs(val);
      if (process.env.NODE_ENV !== "production") {
        if (!Number.isInteger(abs2)) {
          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
        } else if (abs2 > themeSpacing.length - 1) {
          console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
        }
      }
      const transformed = themeSpacing[abs2];
      if (val >= 0) {
        return transformed;
      }
      if (typeof transformed === "number") {
        return -transformed;
      }
      return `-${transformed}`;
    };
  }
  if (typeof themeSpacing === "function") {
    return themeSpacing;
  }
  if (process.env.NODE_ENV !== "production") {
    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
  }
  return () => void 0;
}
function createUnarySpacing(theme) {
  return createUnaryUnit(theme, "spacing", 8, "spacing");
}
function getValue(transformer, propValue) {
  if (typeof propValue === "string" || propValue == null) {
    return propValue;
  }
  return transformer(propValue);
}
function getStyleFromPropValue(cssProperties, transformer) {
  return (propValue) => cssProperties.reduce((acc, cssProperty) => {
    acc[cssProperty] = getValue(transformer, propValue);
    return acc;
  }, {});
}
function resolveCssProperty(props, keys, prop, transformer) {
  if (!keys.includes(prop)) {
    return null;
  }
  const cssProperties = getCssProperties(prop);
  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
  const propValue = props[prop];
  return handleBreakpoints(props, propValue, styleFromPropValue);
}
function style(props, keys) {
  const transformer = createUnarySpacing(props.theme);
  return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
}
function margin(props) {
  return style(props, marginKeys);
}
margin.propTypes = process.env.NODE_ENV !== "production" ? marginKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
margin.filterProps = marginKeys;
function padding(props) {
  return style(props, paddingKeys);
}
padding.propTypes = process.env.NODE_ENV !== "production" ? paddingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
padding.filterProps = paddingKeys;
process.env.NODE_ENV !== "production" ? spacingKeys.reduce((obj, key) => {
  obj[key] = responsivePropType;
  return obj;
}, {}) : {};
function createSpacing(spacingInput = 8, transform = createUnarySpacing({
  spacing: spacingInput
})) {
  if (spacingInput.mui) {
    return spacingInput;
  }
  const spacing = (...argsInput) => {
    if (process.env.NODE_ENV !== "production") {
      if (!(argsInput.length <= 4)) {
        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args.map((argument) => {
      const output = transform(argument);
      return typeof output === "number" ? `${output}px` : output;
    }).join(" ");
  };
  spacing.mui = true;
  return spacing;
}
function compose(...styles) {
  const handlers = styles.reduce((acc, style2) => {
    style2.filterProps.forEach((prop) => {
      acc[prop] = style2;
    });
    return acc;
  }, {});
  const fn = (props) => {
    return Object.keys(props).reduce((acc, prop) => {
      if (handlers[prop]) {
        return merge(acc, handlers[prop](props));
      }
      return acc;
    }, {});
  };
  fn.propTypes = process.env.NODE_ENV !== "production" ? styles.reduce((acc, style2) => Object.assign(acc, style2.propTypes), {}) : {};
  fn.filterProps = styles.reduce((acc, style2) => acc.concat(style2.filterProps), []);
  return fn;
}
function borderTransform(value) {
  if (typeof value !== "number") {
    return value;
  }
  return `${value}px solid`;
}
function createBorderStyle(prop, transform) {
  return style$1({
    prop,
    themeKey: "borders",
    transform
  });
}
const border = createBorderStyle("border", borderTransform);
const borderTop = createBorderStyle("borderTop", borderTransform);
const borderRight = createBorderStyle("borderRight", borderTransform);
const borderBottom = createBorderStyle("borderBottom", borderTransform);
const borderLeft = createBorderStyle("borderLeft", borderTransform);
const borderColor = createBorderStyle("borderColor");
const borderTopColor = createBorderStyle("borderTopColor");
const borderRightColor = createBorderStyle("borderRightColor");
const borderBottomColor = createBorderStyle("borderBottomColor");
const borderLeftColor = createBorderStyle("borderLeftColor");
const outline = createBorderStyle("outline", borderTransform);
const outlineColor = createBorderStyle("outlineColor");
const borderRadius = (props) => {
  if (props.borderRadius !== void 0 && props.borderRadius !== null) {
    const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
    const styleFromPropValue = (propValue) => ({
      borderRadius: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
  }
  return null;
};
borderRadius.propTypes = process.env.NODE_ENV !== "production" ? {
  borderRadius: responsivePropType
} : {};
borderRadius.filterProps = ["borderRadius"];
compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);
const gap = (props) => {
  if (props.gap !== void 0 && props.gap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
    const styleFromPropValue = (propValue) => ({
      gap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.gap, styleFromPropValue);
  }
  return null;
};
gap.propTypes = process.env.NODE_ENV !== "production" ? {
  gap: responsivePropType
} : {};
gap.filterProps = ["gap"];
const columnGap = (props) => {
  if (props.columnGap !== void 0 && props.columnGap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
    const styleFromPropValue = (propValue) => ({
      columnGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
  }
  return null;
};
columnGap.propTypes = process.env.NODE_ENV !== "production" ? {
  columnGap: responsivePropType
} : {};
columnGap.filterProps = ["columnGap"];
const rowGap = (props) => {
  if (props.rowGap !== void 0 && props.rowGap !== null) {
    const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
    const styleFromPropValue = (propValue) => ({
      rowGap: getValue(transformer, propValue)
    });
    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
  }
  return null;
};
rowGap.propTypes = process.env.NODE_ENV !== "production" ? {
  rowGap: responsivePropType
} : {};
rowGap.filterProps = ["rowGap"];
const gridColumn = style$1({
  prop: "gridColumn"
});
const gridRow = style$1({
  prop: "gridRow"
});
const gridAutoFlow = style$1({
  prop: "gridAutoFlow"
});
const gridAutoColumns = style$1({
  prop: "gridAutoColumns"
});
const gridAutoRows = style$1({
  prop: "gridAutoRows"
});
const gridTemplateColumns = style$1({
  prop: "gridTemplateColumns"
});
const gridTemplateRows = style$1({
  prop: "gridTemplateRows"
});
const gridTemplateAreas = style$1({
  prop: "gridTemplateAreas"
});
const gridArea = style$1({
  prop: "gridArea"
});
compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
function paletteTransform(value, userValue) {
  if (userValue === "grey") {
    return userValue;
  }
  return value;
}
const color = style$1({
  prop: "color",
  themeKey: "palette",
  transform: paletteTransform
});
const bgcolor = style$1({
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  transform: paletteTransform
});
const backgroundColor = style$1({
  prop: "backgroundColor",
  themeKey: "palette",
  transform: paletteTransform
});
compose(color, bgcolor, backgroundColor);
function sizingTransform(value) {
  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
}
const width = style$1({
  prop: "width",
  transform: sizingTransform
});
const maxWidth = (props) => {
  if (props.maxWidth !== void 0 && props.maxWidth !== null) {
    const styleFromPropValue = (propValue) => {
      var _a, _b, _c, _d, _e;
      const breakpoint = ((_c = (_b = (_a = props.theme) == null ? void 0 : _a.breakpoints) == null ? void 0 : _b.values) == null ? void 0 : _c[propValue]) || values[propValue];
      if (!breakpoint) {
        return {
          maxWidth: sizingTransform(propValue)
        };
      }
      if (((_e = (_d = props.theme) == null ? void 0 : _d.breakpoints) == null ? void 0 : _e.unit) !== "px") {
        return {
          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
        };
      }
      return {
        maxWidth: breakpoint
      };
    };
    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
  }
  return null;
};
maxWidth.filterProps = ["maxWidth"];
const minWidth = style$1({
  prop: "minWidth",
  transform: sizingTransform
});
const height = style$1({
  prop: "height",
  transform: sizingTransform
});
const maxHeight = style$1({
  prop: "maxHeight",
  transform: sizingTransform
});
const minHeight = style$1({
  prop: "minHeight",
  transform: sizingTransform
});
style$1({
  prop: "size",
  cssProperty: "width",
  transform: sizingTransform
});
style$1({
  prop: "size",
  cssProperty: "height",
  transform: sizingTransform
});
const boxSizing = style$1({
  prop: "boxSizing"
});
compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
const defaultSxConfig = {
  // borders
  border: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderTop: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderRight: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderBottom: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderLeft: {
    themeKey: "borders",
    transform: borderTransform
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  outline: {
    themeKey: "borders",
    transform: borderTransform
  },
  outlineColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
    style: borderRadius
  },
  // palette
  color: {
    themeKey: "palette",
    transform: paletteTransform
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
    transform: paletteTransform
  },
  backgroundColor: {
    themeKey: "palette",
    transform: paletteTransform
  },
  // spacing
  p: {
    style: padding
  },
  pt: {
    style: padding
  },
  pr: {
    style: padding
  },
  pb: {
    style: padding
  },
  pl: {
    style: padding
  },
  px: {
    style: padding
  },
  py: {
    style: padding
  },
  padding: {
    style: padding
  },
  paddingTop: {
    style: padding
  },
  paddingRight: {
    style: padding
  },
  paddingBottom: {
    style: padding
  },
  paddingLeft: {
    style: padding
  },
  paddingX: {
    style: padding
  },
  paddingY: {
    style: padding
  },
  paddingInline: {
    style: padding
  },
  paddingInlineStart: {
    style: padding
  },
  paddingInlineEnd: {
    style: padding
  },
  paddingBlock: {
    style: padding
  },
  paddingBlockStart: {
    style: padding
  },
  paddingBlockEnd: {
    style: padding
  },
  m: {
    style: margin
  },
  mt: {
    style: margin
  },
  mr: {
    style: margin
  },
  mb: {
    style: margin
  },
  ml: {
    style: margin
  },
  mx: {
    style: margin
  },
  my: {
    style: margin
  },
  margin: {
    style: margin
  },
  marginTop: {
    style: margin
  },
  marginRight: {
    style: margin
  },
  marginBottom: {
    style: margin
  },
  marginLeft: {
    style: margin
  },
  marginX: {
    style: margin
  },
  marginY: {
    style: margin
  },
  marginInline: {
    style: margin
  },
  marginInlineStart: {
    style: margin
  },
  marginInlineEnd: {
    style: margin
  },
  marginBlock: {
    style: margin
  },
  marginBlockStart: {
    style: margin
  },
  marginBlockEnd: {
    style: margin
  },
  // display
  displayPrint: {
    cssProperty: false,
    transform: (value) => ({
      "@media print": {
        display: value
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
    style: gap
  },
  rowGap: {
    style: rowGap
  },
  columnGap: {
    style: columnGap
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
    transform: sizingTransform
  },
  maxWidth: {
    style: maxWidth
  },
  minWidth: {
    transform: sizingTransform
  },
  height: {
    transform: sizingTransform
  },
  maxHeight: {
    transform: sizingTransform
  },
  minHeight: {
    transform: sizingTransform
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: "font"
  },
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: false,
    themeKey: "typography"
  }
};
function objectsHaveSameKeys(...objects) {
  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
  const union = new Set(allKeys);
  return objects.every((object) => union.size === Object.keys(object).length);
}
function callIfFn(maybeFn, arg2) {
  return typeof maybeFn === "function" ? maybeFn(arg2) : maybeFn;
}
function unstable_createStyleFunctionSx() {
  function getThemeValue(prop, val, theme, config) {
    const props = {
      [prop]: val,
      theme
    };
    const options = config[prop];
    if (!options) {
      return {
        [prop]: val
      };
    }
    const {
      cssProperty = prop,
      themeKey,
      transform,
      style: style2
    } = options;
    if (val == null) {
      return null;
    }
    if (themeKey === "typography" && val === "inherit") {
      return {
        [prop]: val
      };
    }
    const themeMapping = getPath(theme, themeKey) || {};
    if (style2) {
      return style2(props);
    }
    const styleFromPropValue = (propValueFinal) => {
      let value = getStyleValue(themeMapping, transform, propValueFinal);
      if (propValueFinal === value && typeof propValueFinal === "string") {
        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
      }
      if (cssProperty === false) {
        return value;
      }
      return {
        [cssProperty]: value
      };
    };
    return handleBreakpoints(props, val, styleFromPropValue);
  }
  function styleFunctionSx2(props) {
    const {
      sx,
      theme = {}
    } = props || {};
    if (!sx) {
      return null;
    }
    const config = theme.unstable_sxConfig ?? defaultSxConfig;
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === "function") {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== "object") {
        return sxInput;
      }
      if (!sxObject) {
        return null;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css = emptyBreakpoints;
      Object.keys(sxObject).forEach((styleKey) => {
        const value = callIfFn(sxObject[styleKey], theme);
        if (value !== null && value !== void 0) {
          if (typeof value === "object") {
            if (config[styleKey]) {
              css = merge(css, getThemeValue(styleKey, value, theme, config));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value, (x) => ({
                [styleKey]: x
              }));
              if (objectsHaveSameKeys(breakpointsValues, value)) {
                css[styleKey] = styleFunctionSx2({
                  sx: value,
                  theme
                });
              } else {
                css = merge(css, breakpointsValues);
              }
            }
          } else {
            css = merge(css, getThemeValue(styleKey, value, theme, config));
          }
        }
      });
      return sortContainerQueries(theme, removeUnusedBreakpoints(breakpointsKeys, css));
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  return styleFunctionSx2;
}
const styleFunctionSx = unstable_createStyleFunctionSx();
styleFunctionSx.filterProps = ["sx"];
function applyStyles(key, styles) {
  var _a;
  const theme = this;
  if (theme.vars) {
    if (!((_a = theme.colorSchemes) == null ? void 0 : _a[key]) || typeof theme.getColorSchemeSelector !== "function") {
      return {};
    }
    let selector = theme.getColorSchemeSelector(key);
    if (selector === "&") {
      return styles;
    }
    if (selector.includes("data-") || selector.includes(".")) {
      selector = `*:where(${selector.replace(/\s*&$/, "")}) &`;
    }
    return {
      [selector]: styles
    };
  }
  if (theme.palette.mode === key) {
    return styles;
  }
  return {};
}
function createTheme$1(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput = {},
    palette: paletteInput = {},
    spacing: spacingInput,
    shape: shapeInput = {},
    ...other
  } = options;
  const breakpoints = createBreakpoints(breakpointsInput);
  const spacing = createSpacing(spacingInput);
  let muiTheme = deepmerge({
    breakpoints,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: {
      mode: "light",
      ...paletteInput
    },
    spacing,
    shape: {
      ...shape,
      ...shapeInput
    }
  }, other);
  muiTheme = cssContainerQueries(muiTheme);
  muiTheme.applyStyles = applyStyles;
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  muiTheme.unstable_sxConfig = {
    ...defaultSxConfig,
    ...other == null ? void 0 : other.unstable_sxConfig
  };
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  return muiTheme;
}
const splitProps = (props) => {
  var _a;
  const result = {
    systemProps: {},
    otherProps: {}
  };
  const config = ((_a = props == null ? void 0 : props.theme) == null ? void 0 : _a.unstable_sxConfig) ?? defaultSxConfig;
  Object.keys(props).forEach((prop) => {
    if (config[prop]) {
      result.systemProps[prop] = props[prop];
    } else {
      result.otherProps[prop] = props[prop];
    }
  });
  return result;
};
function extendSxProp$1(props) {
  const {
    sx: inSx,
    ...other
  } = props;
  const {
    systemProps,
    otherProps
  } = splitProps(other);
  let finalSx;
  if (Array.isArray(inSx)) {
    finalSx = [systemProps, ...inSx];
  } else if (typeof inSx === "function") {
    finalSx = (...args) => {
      const result = inSx(...args);
      if (!isPlainObject(result)) {
        return systemProps;
      }
      return {
        ...systemProps,
        ...result
      };
    };
  } else {
    finalSx = {
      ...systemProps,
      ...inSx
    };
  }
  return {
    ...otherProps,
    sx: finalSx
  };
}
const defaultGenerator = (componentName) => componentName;
const createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
const ClassNameGenerator = createClassNameGenerator();
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
const globalStateClasses = {
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
  const globalStateClass = globalStateClasses[slot];
  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator.generate(componentName)}-${slot}`;
}
function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
  const result = {};
  slots.forEach((slot) => {
    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
  });
  return result;
}
var reactIs = { exports: {} };
var reactIs_production = {};
/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_production;
function requireReactIs_production() {
  if (hasRequiredReactIs_production) return reactIs_production;
  hasRequiredReactIs_production = 1;
  var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
  var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
  function typeOf(object) {
    if ("object" === typeof object && null !== object) {
      var $$typeof = object.$$typeof;
      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          switch (object = object.type, object) {
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
            case REACT_SUSPENSE_LIST_TYPE:
              return object;
            default:
              switch (object = object && object.$$typeof, object) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_LAZY_TYPE:
                case REACT_MEMO_TYPE:
                  return object;
                case REACT_CONSUMER_TYPE:
                  return object;
                default:
                  return $$typeof;
              }
          }
        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }
  }
  reactIs_production.ContextConsumer = REACT_CONSUMER_TYPE;
  reactIs_production.ContextProvider = REACT_CONTEXT_TYPE;
  reactIs_production.Element = REACT_ELEMENT_TYPE;
  reactIs_production.ForwardRef = REACT_FORWARD_REF_TYPE;
  reactIs_production.Fragment = REACT_FRAGMENT_TYPE;
  reactIs_production.Lazy = REACT_LAZY_TYPE;
  reactIs_production.Memo = REACT_MEMO_TYPE;
  reactIs_production.Portal = REACT_PORTAL_TYPE;
  reactIs_production.Profiler = REACT_PROFILER_TYPE;
  reactIs_production.StrictMode = REACT_STRICT_MODE_TYPE;
  reactIs_production.Suspense = REACT_SUSPENSE_TYPE;
  reactIs_production.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
  reactIs_production.isContextConsumer = function(object) {
    return typeOf(object) === REACT_CONSUMER_TYPE;
  };
  reactIs_production.isContextProvider = function(object) {
    return typeOf(object) === REACT_CONTEXT_TYPE;
  };
  reactIs_production.isElement = function(object) {
    return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
  };
  reactIs_production.isForwardRef = function(object) {
    return typeOf(object) === REACT_FORWARD_REF_TYPE;
  };
  reactIs_production.isFragment = function(object) {
    return typeOf(object) === REACT_FRAGMENT_TYPE;
  };
  reactIs_production.isLazy = function(object) {
    return typeOf(object) === REACT_LAZY_TYPE;
  };
  reactIs_production.isMemo = function(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  };
  reactIs_production.isPortal = function(object) {
    return typeOf(object) === REACT_PORTAL_TYPE;
  };
  reactIs_production.isProfiler = function(object) {
    return typeOf(object) === REACT_PROFILER_TYPE;
  };
  reactIs_production.isStrictMode = function(object) {
    return typeOf(object) === REACT_STRICT_MODE_TYPE;
  };
  reactIs_production.isSuspense = function(object) {
    return typeOf(object) === REACT_SUSPENSE_TYPE;
  };
  reactIs_production.isSuspenseList = function(object) {
    return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
  };
  reactIs_production.isValidElementType = function(type2) {
    return "string" === typeof type2 || "function" === typeof type2 || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || type2 === REACT_OFFSCREEN_TYPE || "object" === typeof type2 && null !== type2 && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_CONSUMER_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type2.getModuleId) ? true : false;
  };
  reactIs_production.typeOf = typeOf;
  return reactIs_production;
}
var reactIs_development = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactIs_development;
function requireReactIs_development() {
  if (hasRequiredReactIs_development) return reactIs_development;
  hasRequiredReactIs_development = 1;
  "production" !== process.env.NODE_ENV && function() {
    function typeOf(object) {
      if ("object" === typeof object && null !== object) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            switch (object = object.type, object) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return object;
              default:
                switch (object = object && object.$$typeof, object) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                    return object;
                  case REACT_CONSUMER_TYPE:
                    return object;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
    reactIs_development.ContextConsumer = REACT_CONSUMER_TYPE;
    reactIs_development.ContextProvider = REACT_CONTEXT_TYPE;
    reactIs_development.Element = REACT_ELEMENT_TYPE;
    reactIs_development.ForwardRef = REACT_FORWARD_REF_TYPE;
    reactIs_development.Fragment = REACT_FRAGMENT_TYPE;
    reactIs_development.Lazy = REACT_LAZY_TYPE;
    reactIs_development.Memo = REACT_MEMO_TYPE;
    reactIs_development.Portal = REACT_PORTAL_TYPE;
    reactIs_development.Profiler = REACT_PROFILER_TYPE;
    reactIs_development.StrictMode = REACT_STRICT_MODE_TYPE;
    reactIs_development.Suspense = REACT_SUSPENSE_TYPE;
    reactIs_development.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    reactIs_development.isContextConsumer = function(object) {
      return typeOf(object) === REACT_CONSUMER_TYPE;
    };
    reactIs_development.isContextProvider = function(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    };
    reactIs_development.isElement = function(object) {
      return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    };
    reactIs_development.isForwardRef = function(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    };
    reactIs_development.isFragment = function(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    };
    reactIs_development.isLazy = function(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    };
    reactIs_development.isMemo = function(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    };
    reactIs_development.isPortal = function(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    };
    reactIs_development.isProfiler = function(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    };
    reactIs_development.isStrictMode = function(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    };
    reactIs_development.isSuspense = function(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    };
    reactIs_development.isSuspenseList = function(object) {
      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    };
    reactIs_development.isValidElementType = function(type2) {
      return "string" === typeof type2 || "function" === typeof type2 || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || type2 === REACT_OFFSCREEN_TYPE || "object" === typeof type2 && null !== type2 && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_CONSUMER_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type2.getModuleId) ? true : false;
    };
    reactIs_development.typeOf = typeOf;
  }();
  return reactIs_development;
}
var hasRequiredReactIs;
function requireReactIs() {
  if (hasRequiredReactIs) return reactIs.exports;
  hasRequiredReactIs = 1;
  if (process.env.NODE_ENV === "production") {
    reactIs.exports = /* @__PURE__ */ requireReactIs_production();
  } else {
    reactIs.exports = /* @__PURE__ */ requireReactIs_development();
  }
  return reactIs.exports;
}
var reactIsExports = /* @__PURE__ */ requireReactIs();
function getFunctionComponentName(Component, fallback = "") {
  return Component.displayName || Component.name || fallback;
}
function getWrappedName(outerType, innerType, wrapperName) {
  const functionName = getFunctionComponentName(innerType);
  return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
}
function getDisplayName(Component) {
  if (Component == null) {
    return void 0;
  }
  if (typeof Component === "string") {
    return Component;
  }
  if (typeof Component === "function") {
    return getFunctionComponentName(Component, "Component");
  }
  if (typeof Component === "object") {
    switch (Component.$$typeof) {
      case reactIsExports.ForwardRef:
        return getWrappedName(Component, Component.render, "ForwardRef");
      case reactIsExports.Memo:
        return getWrappedName(Component, Component.type, "memo");
      default:
        return void 0;
    }
  }
  return void 0;
}
function preprocessStyles(input) {
  const {
    variants,
    ...style2
  } = input;
  const result = {
    variants,
    style: internal_serializeStyles(style2),
    isProcessed: true
  };
  if (result.style === style2) {
    return result;
  }
  if (variants) {
    variants.forEach((variant) => {
      if (typeof variant.style !== "function") {
        variant.style = internal_serializeStyles(variant.style);
      }
    });
  }
  return result;
}
const systemDefaultTheme = createTheme$1();
function shouldForwardProp(prop) {
  return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
}
function defaultOverridesResolver(slot) {
  if (!slot) {
    return null;
  }
  return (_props, styles) => styles[slot];
}
function attachTheme(props, themeId, defaultTheme2) {
  props.theme = isObjectEmpty(props.theme) ? defaultTheme2 : props.theme[themeId] || props.theme;
}
function processStyle(props, style2) {
  const resolvedStyle = typeof style2 === "function" ? style2(props) : style2;
  if (Array.isArray(resolvedStyle)) {
    return resolvedStyle.flatMap((subStyle) => processStyle(props, subStyle));
  }
  if (Array.isArray(resolvedStyle == null ? void 0 : resolvedStyle.variants)) {
    let rootStyle;
    if (resolvedStyle.isProcessed) {
      rootStyle = resolvedStyle.style;
    } else {
      const {
        variants,
        ...otherStyles
      } = resolvedStyle;
      rootStyle = otherStyles;
    }
    return processStyleVariants(props, resolvedStyle.variants, [rootStyle]);
  }
  if (resolvedStyle == null ? void 0 : resolvedStyle.isProcessed) {
    return resolvedStyle.style;
  }
  return resolvedStyle;
}
function processStyleVariants(props, variants, results = []) {
  var _a;
  let mergedState;
  variantLoop: for (let i = 0; i < variants.length; i += 1) {
    const variant = variants[i];
    if (typeof variant.props === "function") {
      mergedState ?? (mergedState = {
        ...props,
        ...props.ownerState,
        ownerState: props.ownerState
      });
      if (!variant.props(mergedState)) {
        continue;
      }
    } else {
      for (const key in variant.props) {
        if (props[key] !== variant.props[key] && ((_a = props.ownerState) == null ? void 0 : _a[key]) !== variant.props[key]) {
          continue variantLoop;
        }
      }
    }
    if (typeof variant.style === "function") {
      mergedState ?? (mergedState = {
        ...props,
        ...props.ownerState,
        ownerState: props.ownerState
      });
      results.push(variant.style(mergedState));
    } else {
      results.push(variant.style);
    }
  }
  return results;
}
function createStyled2(input = {}) {
  const {
    themeId,
    defaultTheme: defaultTheme2 = systemDefaultTheme,
    rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
    slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
  } = input;
  function styleAttachTheme(props) {
    attachTheme(props, themeId, defaultTheme2);
  }
  const styled2 = (tag, inputOptions = {}) => {
    internal_mutateStyles(tag, (styles) => styles.filter((style2) => style2 !== styleFunctionSx));
    const {
      name: componentName,
      slot: componentSlot,
      skipVariantsResolver: inputSkipVariantsResolver,
      skipSx: inputSkipSx,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot)),
      ...options
    } = inputOptions;
    const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
    );
    const skipSx = inputSkipSx || false;
    let shouldForwardPropOption = shouldForwardProp;
    if (componentSlot === "Root" || componentSlot === "root") {
      shouldForwardPropOption = rootShouldForwardProp2;
    } else if (componentSlot) {
      shouldForwardPropOption = slotShouldForwardProp2;
    } else if (isStringTag(tag)) {
      shouldForwardPropOption = void 0;
    }
    const defaultStyledResolver = styled$1(tag, {
      shouldForwardProp: shouldForwardPropOption,
      label: generateStyledLabel(componentName, componentSlot),
      ...options
    });
    const transformStyle = (style2) => {
      if (typeof style2 === "function" && style2.__emotion_real !== style2) {
        return function styleFunctionProcessor(props) {
          return processStyle(props, style2);
        };
      }
      if (isPlainObject(style2)) {
        const serialized = preprocessStyles(style2);
        if (!serialized.variants) {
          return serialized.style;
        }
        return function styleObjectProcessor(props) {
          return processStyle(props, serialized);
        };
      }
      return style2;
    };
    const muiStyledResolver = (...expressionsInput) => {
      const expressionsHead = [];
      const expressionsBody = expressionsInput.map(transformStyle);
      const expressionsTail = [];
      expressionsHead.push(styleAttachTheme);
      if (componentName && overridesResolver) {
        expressionsTail.push(function styleThemeOverrides(props) {
          var _a, _b;
          const theme = props.theme;
          const styleOverrides = (_b = (_a = theme.components) == null ? void 0 : _a[componentName]) == null ? void 0 : _b.styleOverrides;
          if (!styleOverrides) {
            return null;
          }
          const resolvedStyleOverrides = {};
          for (const slotKey in styleOverrides) {
            resolvedStyleOverrides[slotKey] = processStyle(props, styleOverrides[slotKey]);
          }
          return overridesResolver(props, resolvedStyleOverrides);
        });
      }
      if (componentName && !skipVariantsResolver) {
        expressionsTail.push(function styleThemeVariants(props) {
          var _a, _b;
          const theme = props.theme;
          const themeVariants = (_b = (_a = theme == null ? void 0 : theme.components) == null ? void 0 : _a[componentName]) == null ? void 0 : _b.variants;
          if (!themeVariants) {
            return null;
          }
          return processStyleVariants(props, themeVariants);
        });
      }
      if (!skipSx) {
        expressionsTail.push(styleFunctionSx);
      }
      if (Array.isArray(expressionsBody[0])) {
        const inputStrings = expressionsBody.shift();
        const placeholdersHead = new Array(expressionsHead.length).fill("");
        const placeholdersTail = new Array(expressionsTail.length).fill("");
        let outputStrings;
        {
          outputStrings = [...placeholdersHead, ...inputStrings, ...placeholdersTail];
          outputStrings.raw = [...placeholdersHead, ...inputStrings.raw, ...placeholdersTail];
        }
        expressionsHead.unshift(outputStrings);
      }
      const expressions = [...expressionsHead, ...expressionsBody, ...expressionsTail];
      const Component = defaultStyledResolver(...expressions);
      if (tag.muiName) {
        Component.muiName = tag.muiName;
      }
      if (process.env.NODE_ENV !== "production") {
        Component.displayName = generateDisplayName(componentName, componentSlot, tag);
      }
      return Component;
    };
    if (defaultStyledResolver.withConfig) {
      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
    }
    return muiStyledResolver;
  };
  return styled2;
}
function generateDisplayName(componentName, componentSlot, tag) {
  if (componentName) {
    return `${componentName}${capitalize(componentSlot || "")}`;
  }
  return `Styled(${getDisplayName(tag)})`;
}
function generateStyledLabel(componentName, componentSlot) {
  let label;
  if (process.env.NODE_ENV !== "production") {
    if (componentName) {
      label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
    }
  }
  return label;
}
function isObjectEmpty(object) {
  for (const _ in object) {
    return false;
  }
  return true;
}
function isStringTag(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96;
}
function lowercaseFirstLetter(string) {
  if (!string) {
    return string;
  }
  return string.charAt(0).toLowerCase() + string.slice(1);
}
function resolveProps(defaultProps, props) {
  const output = {
    ...props
  };
  for (const key in defaultProps) {
    if (Object.prototype.hasOwnProperty.call(defaultProps, key)) {
      const propName = key;
      if (propName === "components" || propName === "slots") {
        output[propName] = {
          ...defaultProps[propName],
          ...output[propName]
        };
      } else if (propName === "componentsProps" || propName === "slotProps") {
        const defaultSlotProps = defaultProps[propName];
        const slotProps = props[propName];
        if (!slotProps) {
          output[propName] = defaultSlotProps || {};
        } else if (!defaultSlotProps) {
          output[propName] = slotProps;
        } else {
          output[propName] = {
            ...slotProps
          };
          for (const slotKey in defaultSlotProps) {
            if (Object.prototype.hasOwnProperty.call(defaultSlotProps, slotKey)) {
              const slotPropName = slotKey;
              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
            }
          }
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps[propName];
      }
    }
  }
  return output;
}
function clamp(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
  return Math.max(min2, Math.min(val, max2));
}
function clampWrapper(value, min2 = 0, max2 = 1) {
  if (process.env.NODE_ENV !== "production") {
    if (value < min2 || value > max2) {
      console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
    }
  }
  return clamp(value, min2, max2);
}
function hexToRgb(color2) {
  color2 = color2.slice(1);
  const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
  let colors = color2.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map((n) => n + n);
  }
  if (process.env.NODE_ENV !== "production") {
    if (color2.length !== color2.trim().length) {
      console.error(`MUI: The color: "${color2}" is invalid. Make sure the color input doesn't contain leading/trailing space.`);
    }
  }
  return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
  }).join(", ")})` : "";
}
function decomposeColor(color2) {
  if (color2.type) {
    return color2;
  }
  if (color2.charAt(0) === "#") {
    return decomposeColor(hexToRgb(color2));
  }
  const marker = color2.indexOf("(");
  const type2 = color2.substring(0, marker);
  if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(type2)) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color2));
  }
  let values2 = color2.substring(marker + 1, color2.length - 1);
  let colorSpace;
  if (type2 === "color") {
    values2 = values2.split(" ");
    colorSpace = values2.shift();
    if (values2.length === 4 && values2[3].charAt(0) === "/") {
      values2[3] = values2[3].slice(1);
    }
    if (!["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(colorSpace)) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
    }
  } else {
    values2 = values2.split(",");
  }
  values2 = values2.map((value) => parseFloat(value));
  return {
    type: type2,
    values: values2,
    colorSpace
  };
}
const colorChannel = (color2) => {
  const decomposedColor = decomposeColor(color2);
  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.includes("hsl") && idx !== 0 ? `${val}%` : val).join(" ");
};
const private_safeColorChannel = (color2, warning) => {
  try {
    return colorChannel(color2);
  } catch (error) {
    if (warning && process.env.NODE_ENV !== "production") {
      console.warn(warning);
    }
    return color2;
  }
};
function recomposeColor(color2) {
  const {
    type: type2,
    colorSpace
  } = color2;
  let {
    values: values2
  } = color2;
  if (type2.includes("rgb")) {
    values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
  } else if (type2.includes("hsl")) {
    values2[1] = `${values2[1]}%`;
    values2[2] = `${values2[2]}%`;
  }
  if (type2.includes("color")) {
    values2 = `${colorSpace} ${values2.join(" ")}`;
  } else {
    values2 = `${values2.join(", ")}`;
  }
  return `${type2}(${values2})`;
}
function hslToRgb(color2) {
  color2 = decomposeColor(color2);
  const {
    values: values2
  } = color2;
  const h = values2[0];
  const s = values2[1] / 100;
  const l = values2[2] / 100;
  const a = s * Math.min(l, 1 - l);
  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  let type2 = "rgb";
  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
  if (color2.type === "hsla") {
    type2 += "a";
    rgb.push(values2[3]);
  }
  return recomposeColor({
    type: type2,
    values: rgb
  });
}
function getLuminance(color2) {
  color2 = decomposeColor(color2);
  let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
  rgb = rgb.map((val) => {
    if (color2.type !== "color") {
      val /= 255;
    }
    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
  });
  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
}
function getContrastRatio(foreground, background) {
  const lumA = getLuminance(foreground);
  const lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}
function alpha(color2, value) {
  color2 = decomposeColor(color2);
  value = clampWrapper(value);
  if (color2.type === "rgb" || color2.type === "hsl") {
    color2.type += "a";
  }
  if (color2.type === "color") {
    color2.values[3] = `/${value}`;
  } else {
    color2.values[3] = value;
  }
  return recomposeColor(color2);
}
function private_safeAlpha(color2, value, warning) {
  try {
    return alpha(color2, value);
  } catch (error) {
    return color2;
  }
}
function darken(color2, coefficient) {
  color2 = decomposeColor(color2);
  coefficient = clampWrapper(coefficient);
  if (color2.type.includes("hsl")) {
    color2.values[2] *= 1 - coefficient;
  } else if (color2.type.includes("rgb") || color2.type.includes("color")) {
    for (let i = 0; i < 3; i += 1) {
      color2.values[i] *= 1 - coefficient;
    }
  }
  return recomposeColor(color2);
}
function private_safeDarken(color2, coefficient, warning) {
  try {
    return darken(color2, coefficient);
  } catch (error) {
    return color2;
  }
}
function lighten(color2, coefficient) {
  color2 = decomposeColor(color2);
  coefficient = clampWrapper(coefficient);
  if (color2.type.includes("hsl")) {
    color2.values[2] += (100 - color2.values[2]) * coefficient;
  } else if (color2.type.includes("rgb")) {
    for (let i = 0; i < 3; i += 1) {
      color2.values[i] += (255 - color2.values[i]) * coefficient;
    }
  } else if (color2.type.includes("color")) {
    for (let i = 0; i < 3; i += 1) {
      color2.values[i] += (1 - color2.values[i]) * coefficient;
    }
  }
  return recomposeColor(color2);
}
function private_safeLighten(color2, coefficient, warning) {
  try {
    return lighten(color2, coefficient);
  } catch (error) {
    return color2;
  }
}
function emphasize(color2, coefficient = 0.15) {
  return getLuminance(color2) > 0.5 ? darken(color2, coefficient) : lighten(color2, coefficient);
}
function private_safeEmphasize(color2, coefficient, warning) {
  try {
    return emphasize(color2, coefficient);
  } catch (error) {
    return color2;
  }
}
function composeClasses(slots, getUtilityClass, classes = void 0) {
  const output = {};
  for (const slotName in slots) {
    const slot = slots[slotName];
    let buffer = "";
    let start = true;
    for (let i = 0; i < slot.length; i += 1) {
      const value = slot[i];
      if (value) {
        buffer += (start === true ? "" : " ") + getUtilityClass(value);
        start = false;
        if (classes && classes[value]) {
          buffer += " " + classes[value];
        }
      }
    }
    output[slotName] = buffer;
  }
  return output;
}
const PropsContext = /* @__PURE__ */ React.createContext(void 0);
process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object
} : void 0;
function getThemeProps(params) {
  const {
    theme,
    name,
    props
  } = params;
  if (!theme || !theme.components || !theme.components[name]) {
    return props;
  }
  const config = theme.components[name];
  if (config.defaultProps) {
    return resolveProps(config.defaultProps, props);
  }
  if (!config.styleOverrides && !config.variants) {
    return resolveProps(config, props);
  }
  return props;
}
function useDefaultProps$1({
  props,
  name
}) {
  const ctx = React.useContext(PropsContext);
  return getThemeProps({
    props,
    name,
    theme: {
      components: ctx
    }
  });
}
const arg = {
  theme: void 0
};
function unstable_memoTheme(styleFn) {
  let lastValue;
  let lastTheme;
  return function styleMemoized(props) {
    let value = lastValue;
    if (value === void 0 || props.theme !== lastTheme) {
      arg.theme = props.theme;
      value = preprocessStyles(styleFn(arg));
      lastValue = value;
      lastTheme = props.theme;
    }
    return value;
  };
}
function createGetCssVar$1(prefix2 = "") {
  function appendVar(...vars) {
    if (!vars.length) {
      return "";
    }
    const value = vars[0];
    if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
      return `, var(--${prefix2 ? `${prefix2}-` : ""}${value}${appendVar(...vars.slice(1))})`;
    }
    return `, ${value}`;
  }
  const getCssVar = (field, ...fallbacks) => {
    return `var(--${prefix2 ? `${prefix2}-` : ""}${field}${appendVar(...fallbacks)})`;
  };
  return getCssVar;
}
const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
  let temp = obj;
  keys.forEach((k, index) => {
    if (index === keys.length - 1) {
      if (Array.isArray(temp)) {
        temp[Number(k)] = value;
      } else if (temp && typeof temp === "object") {
        temp[k] = value;
      }
    } else if (temp && typeof temp === "object") {
      if (!temp[k]) {
        temp[k] = arrayKeys.includes(k) ? [] : {};
      }
      temp = temp[k];
    }
  });
};
const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
  function recurse(object, parentKeys = [], arrayKeys = []) {
    Object.entries(object).forEach(([key, value]) => {
      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
        if (value !== void 0 && value !== null) {
          if (typeof value === "object" && Object.keys(value).length > 0) {
            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
          } else {
            callback([...parentKeys, key], value, arrayKeys);
          }
        }
      }
    });
  }
  recurse(obj);
};
const getCssValue = (keys, value) => {
  if (typeof value === "number") {
    if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
      return value;
    }
    const lastKey = keys[keys.length - 1];
    if (lastKey.toLowerCase().includes("opacity")) {
      return value;
    }
    return `${value}px`;
  }
  return value;
};
function cssVarsParser(theme, options) {
  const {
    prefix: prefix2,
    shouldSkipGeneratingVar: shouldSkipGeneratingVar2
  } = options || {};
  const css = {};
  const vars = {};
  const varsWithDefaults = {};
  walkObjectDeep(
    theme,
    (keys, value, arrayKeys) => {
      if (typeof value === "string" || typeof value === "number") {
        if (!shouldSkipGeneratingVar2 || !shouldSkipGeneratingVar2(keys, value)) {
          const cssVar = `--${prefix2 ? `${prefix2}-` : ""}${keys.join("-")}`;
          const resolvedValue = getCssValue(keys, value);
          Object.assign(css, {
            [cssVar]: resolvedValue
          });
          assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
          assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${resolvedValue})`, arrayKeys);
        }
      }
    },
    (keys) => keys[0] === "vars"
    // skip 'vars/*' paths
  );
  return {
    css,
    vars,
    varsWithDefaults
  };
}
function prepareCssVars(theme, parserConfig = {}) {
  const {
    getSelector = defaultGetSelector2,
    disableCssColorScheme,
    colorSchemeSelector: selector
  } = parserConfig;
  const {
    colorSchemes = {},
    components,
    defaultColorScheme = "light",
    ...otherTheme
  } = theme;
  const {
    vars: rootVars,
    css: rootCss,
    varsWithDefaults: rootVarsWithDefaults
  } = cssVarsParser(otherTheme, parserConfig);
  let themeVars = rootVarsWithDefaults;
  const colorSchemesMap = {};
  const {
    [defaultColorScheme]: defaultScheme,
    ...otherColorSchemes
  } = colorSchemes;
  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
    const {
      vars,
      css,
      varsWithDefaults
    } = cssVarsParser(scheme, parserConfig);
    themeVars = deepmerge(themeVars, varsWithDefaults);
    colorSchemesMap[key] = {
      css,
      vars
    };
  });
  if (defaultScheme) {
    const {
      css,
      vars,
      varsWithDefaults
    } = cssVarsParser(defaultScheme, parserConfig);
    themeVars = deepmerge(themeVars, varsWithDefaults);
    colorSchemesMap[defaultColorScheme] = {
      css,
      vars
    };
  }
  function defaultGetSelector2(colorScheme, cssObject) {
    var _a, _b;
    let rule = selector;
    if (selector === "class") {
      rule = ".%s";
    }
    if (selector === "data") {
      rule = "[data-%s]";
    }
    if ((selector == null ? void 0 : selector.startsWith("data-")) && !selector.includes("%s")) {
      rule = `[${selector}="%s"]`;
    }
    if (colorScheme) {
      if (rule === "media") {
        if (theme.defaultColorScheme === colorScheme) {
          return ":root";
        }
        const mode = ((_b = (_a = colorSchemes[colorScheme]) == null ? void 0 : _a.palette) == null ? void 0 : _b.mode) || colorScheme;
        return {
          [`@media (prefers-color-scheme: ${mode})`]: {
            ":root": cssObject
          }
        };
      }
      if (rule) {
        if (theme.defaultColorScheme === colorScheme) {
          return `:root, ${rule.replace("%s", String(colorScheme))}`;
        }
        return rule.replace("%s", String(colorScheme));
      }
    }
    return ":root";
  }
  const generateThemeVars = () => {
    let vars = {
      ...rootVars
    };
    Object.entries(colorSchemesMap).forEach(([, {
      vars: schemeVars
    }]) => {
      vars = deepmerge(vars, schemeVars);
    });
    return vars;
  };
  const generateStyleSheets = () => {
    var _a, _b;
    const stylesheets = [];
    const colorScheme = theme.defaultColorScheme || "light";
    function insertStyleSheet(key, css) {
      if (Object.keys(css).length) {
        stylesheets.push(typeof key === "string" ? {
          [key]: {
            ...css
          }
        } : key);
      }
    }
    insertStyleSheet(getSelector(void 0, {
      ...rootCss
    }), rootCss);
    const {
      [colorScheme]: defaultSchemeVal,
      ...other
    } = colorSchemesMap;
    if (defaultSchemeVal) {
      const {
        css
      } = defaultSchemeVal;
      const cssColorSheme = (_b = (_a = colorSchemes[colorScheme]) == null ? void 0 : _a.palette) == null ? void 0 : _b.mode;
      const finalCss = !disableCssColorScheme && cssColorSheme ? {
        colorScheme: cssColorSheme,
        ...css
      } : {
        ...css
      };
      insertStyleSheet(getSelector(colorScheme, {
        ...finalCss
      }), finalCss);
    }
    Object.entries(other).forEach(([key, {
      css
    }]) => {
      var _a2, _b2;
      const cssColorSheme = (_b2 = (_a2 = colorSchemes[key]) == null ? void 0 : _a2.palette) == null ? void 0 : _b2.mode;
      const finalCss = !disableCssColorScheme && cssColorSheme ? {
        colorScheme: cssColorSheme,
        ...css
      } : {
        ...css
      };
      insertStyleSheet(getSelector(key, {
        ...finalCss
      }), finalCss);
    });
    return stylesheets;
  };
  return {
    vars: themeVars,
    generateThemeVars,
    generateStyleSheets
  };
}
function createGetColorSchemeSelector(selector) {
  return function getColorSchemeSelector(colorScheme) {
    if (selector === "media") {
      if (process.env.NODE_ENV !== "production") {
        if (colorScheme !== "light" && colorScheme !== "dark") {
          console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${colorScheme}'.`);
        }
      }
      return `@media (prefers-color-scheme: ${colorScheme})`;
    }
    if (selector) {
      if (selector.startsWith("data-") && !selector.includes("%s")) {
        return `[${selector}="${colorScheme}"] &`;
      }
      if (selector === "class") {
        return `.${colorScheme} &`;
      }
      if (selector === "data") {
        return `[data-${colorScheme}] &`;
      }
      return `${selector.replace("%s", colorScheme)} &`;
    }
    return "&";
  };
}
function getLight() {
  return {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common.white,
      default: common.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
}
const light = getLight();
function getDark() {
  return {
    text: {
      primary: common.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
}
const dark = getDark();
function addLightOrDark(intent, direction, shade, tonalOffset) {
  const tonalOffsetLight = tonalOffset.light || tonalOffset;
  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === "light") {
      intent.light = lighten(intent.main, tonalOffsetLight);
    } else if (direction === "dark") {
      intent.dark = darken(intent.main, tonalOffsetDark);
    }
  }
}
function getDefaultPrimary(mode = "light") {
  if (mode === "dark") {
    return {
      main: blue[200],
      light: blue[50],
      dark: blue[400]
    };
  }
  return {
    main: blue[700],
    light: blue[400],
    dark: blue[800]
  };
}
function getDefaultSecondary(mode = "light") {
  if (mode === "dark") {
    return {
      main: purple[200],
      light: purple[50],
      dark: purple[400]
    };
  }
  return {
    main: purple[500],
    light: purple[300],
    dark: purple[700]
  };
}
function getDefaultError(mode = "light") {
  if (mode === "dark") {
    return {
      main: red[500],
      light: red[300],
      dark: red[700]
    };
  }
  return {
    main: red[700],
    light: red[400],
    dark: red[800]
  };
}
function getDefaultInfo(mode = "light") {
  if (mode === "dark") {
    return {
      main: lightBlue[400],
      light: lightBlue[300],
      dark: lightBlue[700]
    };
  }
  return {
    main: lightBlue[700],
    light: lightBlue[500],
    dark: lightBlue[900]
  };
}
function getDefaultSuccess(mode = "light") {
  if (mode === "dark") {
    return {
      main: green[400],
      light: green[300],
      dark: green[700]
    };
  }
  return {
    main: green[800],
    light: green[500],
    dark: green[900]
  };
}
function getDefaultWarning(mode = "light") {
  if (mode === "dark") {
    return {
      main: orange[400],
      light: orange[300],
      dark: orange[700]
    };
  }
  return {
    main: "#ed6c02",
    // closest to orange[800] that pass 3:1.
    light: orange[500],
    dark: orange[900]
  };
}
function createPalette(palette) {
  const {
    mode = "light",
    contrastThreshold = 3,
    tonalOffset = 0.2,
    ...other
  } = palette;
  const primary = palette.primary || getDefaultPrimary(mode);
  const secondary = palette.secondary || getDefaultSecondary(mode);
  const error = palette.error || getDefaultError(mode);
  const info = palette.info || getDefaultInfo(mode);
  const success = palette.success || getDefaultSuccess(mode);
  const warning = palette.warning || getDefaultWarning(mode);
  function getContrastText(background) {
    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
    if (process.env.NODE_ENV !== "production") {
      const contrast = getContrastRatio(background, contrastText);
      if (contrast < 3) {
        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
      }
    }
    return contrastText;
  }
  const augmentColor = ({
    color: color2,
    name,
    mainShade = 500,
    lightShade = 300,
    darkShade = 700
  }) => {
    color2 = {
      ...color2
    };
    if (!color2.main && color2[mainShade]) {
      color2.main = color2[mainShade];
    }
    if (!color2.hasOwnProperty("main")) {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
    }
    if (typeof color2.main !== "string") {
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
    }
    addLightOrDark(color2, "light", lightShade, tonalOffset);
    addLightOrDark(color2, "dark", darkShade, tonalOffset);
    if (!color2.contrastText) {
      color2.contrastText = getContrastText(color2.main);
    }
    return color2;
  };
  let modeHydrated;
  if (mode === "light") {
    modeHydrated = getLight();
  } else if (mode === "dark") {
    modeHydrated = getDark();
  }
  if (process.env.NODE_ENV !== "production") {
    if (!modeHydrated) {
      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
    }
  }
  const paletteOutput = deepmerge({
    // A collection of common colors.
    common: {
      ...common
    },
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor({
      color: primary,
      name: "primary"
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor({
      color: secondary,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor({
      color: error,
      name: "error"
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: augmentColor({
      color: warning,
      name: "warning"
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: augmentColor({
      color: info,
      name: "info"
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: augmentColor({
      color: success,
      name: "success"
    }),
    // The grey colors.
    grey,
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold,
    // Takes a background color and returns the text color that maximizes the contrast.
    getContrastText,
    // Generate a rich color object.
    augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset,
    // The light and dark mode object.
    ...modeHydrated
  }, other);
  return paletteOutput;
}
function prepareTypographyVars(typography) {
  const vars = {};
  const entries = Object.entries(typography);
  entries.forEach((entry) => {
    const [key, value] = entry;
    if (typeof value === "object") {
      vars[key] = `${value.fontStyle ? `${value.fontStyle} ` : ""}${value.fontVariant ? `${value.fontVariant} ` : ""}${value.fontWeight ? `${value.fontWeight} ` : ""}${value.fontStretch ? `${value.fontStretch} ` : ""}${value.fontSize || ""}${value.lineHeight ? `/${value.lineHeight} ` : ""}${value.fontFamily || ""}`;
    }
  });
  return vars;
}
function createMixins(breakpoints, mixins) {
  return {
    toolbar: {
      minHeight: 56,
      [breakpoints.up("xs")]: {
        "@media (orientation: landscape)": {
          minHeight: 48
        }
      },
      [breakpoints.up("sm")]: {
        minHeight: 64
      }
    },
    ...mixins
  };
}
function round(value) {
  return Math.round(value * 1e5) / 1e5;
}
const caseAllCaps = {
  textTransform: "uppercase"
};
const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
function createTypography(palette, typography) {
  const {
    fontFamily = defaultFontFamily,
    // The default font size of the Material Specification.
    fontSize = 14,
    // px
    fontWeightLight = 300,
    fontWeightRegular = 400,
    fontWeightMedium = 500,
    fontWeightBold = 700,
    // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize = 16,
    // Apply the CSS properties to all the variants.
    allVariants,
    pxToRem: pxToRem2,
    ...other
  } = typeof typography === "function" ? typography(palette) : typography;
  if (process.env.NODE_ENV !== "production") {
    if (typeof fontSize !== "number") {
      console.error("MUI: `fontSize` is required to be a number.");
    }
    if (typeof htmlFontSize !== "number") {
      console.error("MUI: `htmlFontSize` is required to be a number.");
    }
  }
  const coef = fontSize / 14;
  const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => ({
    fontFamily,
    fontWeight,
    fontSize: pxToRem(size),
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight,
    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
    // across font-families can cause issues with the kerning.
    ...fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {},
    ...casing,
    ...allVariants
  });
  const variants = {
    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  };
  return deepmerge({
    htmlFontSize,
    pxToRem,
    fontFamily,
    fontSize,
    fontWeightLight,
    fontWeightRegular,
    fontWeightMedium,
    fontWeightBold,
    ...variants
  }, other, {
    clone: false
    // No need to clone deep
  });
}
const shadowKeyUmbraOpacity = 0.2;
const shadowKeyPenumbraOpacity = 0.14;
const shadowAmbientShadowOpacity = 0.12;
function createShadow(...px) {
  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
}
const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
const easing = {
  // This is the most common easing curve.
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
};
const duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
function formatMs(milliseconds) {
  return `${Math.round(milliseconds)}ms`;
}
function getAutoHeightDuration(height2) {
  if (!height2) {
    return 0;
  }
  const constant = height2 / 36;
  return Math.min(Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10), 3e3);
}
function createTransitions(inputTransitions) {
  const mergedEasing = {
    ...easing,
    ...inputTransitions.easing
  };
  const mergedDuration = {
    ...duration,
    ...inputTransitions.duration
  };
  const create = (props = ["all"], options = {}) => {
    const {
      duration: durationOption = mergedDuration.standard,
      easing: easingOption = mergedEasing.easeInOut,
      delay = 0,
      ...other
    } = options;
    if (process.env.NODE_ENV !== "production") {
      const isString = (value) => typeof value === "string";
      const isNumber = (value) => !Number.isNaN(parseFloat(value));
      if (!isString(props) && !Array.isArray(props)) {
        console.error('MUI: Argument "props" must be a string or Array.');
      }
      if (!isNumber(durationOption) && !isString(durationOption)) {
        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
      }
      if (!isString(easingOption)) {
        console.error('MUI: Argument "easing" must be a string.');
      }
      if (!isNumber(delay) && !isString(delay)) {
        console.error('MUI: Argument "delay" must be a number or a string.');
      }
      if (typeof options !== "object") {
        console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
      }
      if (Object.keys(other).length !== 0) {
        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
      }
    }
    return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
  };
  return {
    getAutoHeightDuration,
    create,
    ...inputTransitions,
    easing: mergedEasing,
    duration: mergedDuration
  };
}
const zIndex = {
  mobileStepper: 1e3,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
function isSerializable(val) {
  return isPlainObject(val) || typeof val === "undefined" || typeof val === "string" || typeof val === "boolean" || typeof val === "number" || Array.isArray(val);
}
function stringifyTheme(baseTheme = {}) {
  const serializableTheme = {
    ...baseTheme
  };
  function serializeTheme(object) {
    const array = Object.entries(object);
    for (let index = 0; index < array.length; index++) {
      const [key, value] = array[index];
      if (!isSerializable(value) || key.startsWith("unstable_")) {
        delete object[key];
      } else if (isPlainObject(value)) {
        object[key] = {
          ...value
        };
        serializeTheme(object[key]);
      }
    }
  }
  serializeTheme(serializableTheme);
  return `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(serializableTheme, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
}
function createThemeNoVars(options = {}, ...args) {
  const {
    breakpoints: breakpointsInput,
    mixins: mixinsInput = {},
    spacing: spacingInput,
    palette: paletteInput = {},
    transitions: transitionsInput = {},
    typography: typographyInput = {},
    shape: shapeInput,
    ...other
  } = options;
  if (options.vars) {
    throw new Error(process.env.NODE_ENV !== "production" ? "MUI: `vars` is a private field used for CSS variables support.\nPlease use another name." : formatMuiErrorMessage(20));
  }
  const palette = createPalette(paletteInput);
  const systemTheme = createTheme$1(options);
  let muiTheme = deepmerge(systemTheme, {
    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
    palette,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    shadows: shadows.slice(),
    typography: createTypography(palette, typographyInput),
    transitions: createTransitions(transitionsInput),
    zIndex: {
      ...zIndex
    }
  });
  muiTheme = deepmerge(muiTheme, other);
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  if (process.env.NODE_ENV !== "production") {
    const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
    const traverse = (node2, component) => {
      let key;
      for (key in node2) {
        const child = node2[key];
        if (stateClasses.includes(key) && Object.keys(child).length > 0) {
          if (process.env.NODE_ENV !== "production") {
            const stateClass = generateUtilityClass("", key);
            console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
              root: {
                [`&.${stateClass}`]: child
              }
            }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
          }
          node2[key] = {};
        }
      }
    };
    Object.keys(muiTheme.components).forEach((component) => {
      const styleOverrides = muiTheme.components[component].styleOverrides;
      if (styleOverrides && component.startsWith("Mui")) {
        traverse(styleOverrides, component);
      }
    });
  }
  muiTheme.unstable_sxConfig = {
    ...defaultSxConfig,
    ...other == null ? void 0 : other.unstable_sxConfig
  };
  muiTheme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  muiTheme.toRuntimeSource = stringifyTheme;
  return muiTheme;
}
function getOverlayAlpha(elevation) {
  let alphaValue;
  if (elevation < 1) {
    alphaValue = 5.11916 * elevation ** 2;
  } else {
    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
  }
  return Math.round(alphaValue * 10) / 1e3;
}
const defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return "none";
  }
  const overlay = getOverlayAlpha(index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function getOpacity(mode) {
  return {
    inputPlaceholder: mode === "dark" ? 0.5 : 0.42,
    inputUnderline: mode === "dark" ? 0.7 : 0.42,
    switchTrackDisabled: mode === "dark" ? 0.2 : 0.12,
    switchTrack: mode === "dark" ? 0.3 : 0.38
  };
}
function getOverlays(mode) {
  return mode === "dark" ? defaultDarkOverlays : [];
}
function createColorScheme(options) {
  const {
    palette: paletteInput = {
      mode: "light"
    },
    // need to cast to avoid module augmentation test
    opacity,
    overlays,
    ...rest
  } = options;
  const palette = createPalette(paletteInput);
  return {
    palette,
    opacity: {
      ...getOpacity(palette.mode),
      ...opacity
    },
    overlays: overlays || getOverlays(palette.mode),
    ...rest
  };
}
function shouldSkipGeneratingVar(keys) {
  var _a;
  return !!keys[0].match(/(cssVarPrefix|colorSchemeSelector|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
  keys[0] === "palette" && !!((_a = keys[1]) == null ? void 0 : _a.match(/(mode|contrastThreshold|tonalOffset)/));
}
const excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(25)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
const defaultGetSelector = (theme) => (colorScheme, css) => {
  const root = theme.rootSelector || ":root";
  const selector = theme.colorSchemeSelector;
  let rule = selector;
  if (selector === "class") {
    rule = ".%s";
  }
  if (selector === "data") {
    rule = "[data-%s]";
  }
  if ((selector == null ? void 0 : selector.startsWith("data-")) && !selector.includes("%s")) {
    rule = `[${selector}="%s"]`;
  }
  if (theme.defaultColorScheme === colorScheme) {
    if (colorScheme === "dark") {
      const excludedVariables = {};
      excludeVariablesFromRoot(theme.cssVarPrefix).forEach((cssVar) => {
        excludedVariables[cssVar] = css[cssVar];
        delete css[cssVar];
      });
      if (rule === "media") {
        return {
          [root]: css,
          [`@media (prefers-color-scheme: dark)`]: {
            [root]: excludedVariables
          }
        };
      }
      if (rule) {
        return {
          [rule.replace("%s", colorScheme)]: excludedVariables,
          [`${root}, ${rule.replace("%s", colorScheme)}`]: css
        };
      }
      return {
        [root]: {
          ...css,
          ...excludedVariables
        }
      };
    }
    if (rule && rule !== "media") {
      return `${root}, ${rule.replace("%s", String(colorScheme))}`;
    }
  } else if (colorScheme) {
    if (rule === "media") {
      return {
        [`@media (prefers-color-scheme: ${String(colorScheme)})`]: {
          [root]: css
        }
      };
    }
    if (rule) {
      return rule.replace("%s", String(colorScheme));
    }
  }
  return root;
};
function assignNode(obj, keys) {
  keys.forEach((k) => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  if (!obj[key] && defaultValue) {
    obj[key] = defaultValue;
  }
}
function toRgb(color2) {
  if (typeof color2 !== "string" || !color2.startsWith("hsl")) {
    return color2;
  }
  return hslToRgb(color2);
}
function setColorChannel(obj, key) {
  if (!(`${key}Channel` in obj)) {
    obj[`${key}Channel`] = private_safeColorChannel(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
  }
}
function getSpacingVal(spacingInput) {
  if (typeof spacingInput === "number") {
    return `${spacingInput}px`;
  }
  if (typeof spacingInput === "string" || typeof spacingInput === "function" || Array.isArray(spacingInput)) {
    return spacingInput;
  }
  return "8px";
}
const silent = (fn) => {
  try {
    return fn();
  } catch (error) {
  }
  return void 0;
};
const createGetCssVar = (cssVarPrefix = "mui") => createGetCssVar$1(cssVarPrefix);
function attachColorScheme$1(colorSchemes, scheme, restTheme, colorScheme) {
  if (!scheme) {
    return void 0;
  }
  scheme = scheme === true ? {} : scheme;
  const mode = colorScheme === "dark" ? "dark" : "light";
  if (!restTheme) {
    colorSchemes[colorScheme] = createColorScheme({
      ...scheme,
      palette: {
        mode,
        ...scheme == null ? void 0 : scheme.palette
      }
    });
    return void 0;
  }
  const {
    palette,
    ...muiTheme
  } = createThemeNoVars({
    ...restTheme,
    palette: {
      mode,
      ...scheme == null ? void 0 : scheme.palette
    }
  });
  colorSchemes[colorScheme] = {
    ...scheme,
    palette,
    opacity: {
      ...getOpacity(mode),
      ...scheme == null ? void 0 : scheme.opacity
    },
    overlays: (scheme == null ? void 0 : scheme.overlays) || getOverlays(mode)
  };
  return muiTheme;
}
function createThemeWithVars(options = {}, ...args) {
  const {
    colorSchemes: colorSchemesInput = {
      light: true
    },
    defaultColorScheme: defaultColorSchemeInput,
    disableCssColorScheme = false,
    cssVarPrefix = "mui",
    shouldSkipGeneratingVar: shouldSkipGeneratingVar$1 = shouldSkipGeneratingVar,
    colorSchemeSelector: selector = colorSchemesInput.light && colorSchemesInput.dark ? "media" : void 0,
    rootSelector = ":root",
    ...input
  } = options;
  const firstColorScheme = Object.keys(colorSchemesInput)[0];
  const defaultColorScheme = defaultColorSchemeInput || (colorSchemesInput.light && firstColorScheme !== "light" ? "light" : firstColorScheme);
  const getCssVar = createGetCssVar(cssVarPrefix);
  const {
    [defaultColorScheme]: defaultSchemeInput,
    light: builtInLight,
    dark: builtInDark,
    ...customColorSchemes
  } = colorSchemesInput;
  const colorSchemes = {
    ...customColorSchemes
  };
  let defaultScheme = defaultSchemeInput;
  if (defaultColorScheme === "dark" && !("dark" in colorSchemesInput) || defaultColorScheme === "light" && !("light" in colorSchemesInput)) {
    defaultScheme = true;
  }
  if (!defaultScheme) {
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The \`colorSchemes.${defaultColorScheme}\` option is either missing or invalid.` : formatMuiErrorMessage(21, defaultColorScheme));
  }
  const muiTheme = attachColorScheme$1(colorSchemes, defaultScheme, input, defaultColorScheme);
  if (builtInLight && !colorSchemes.light) {
    attachColorScheme$1(colorSchemes, builtInLight, void 0, "light");
  }
  if (builtInDark && !colorSchemes.dark) {
    attachColorScheme$1(colorSchemes, builtInDark, void 0, "dark");
  }
  let theme = {
    defaultColorScheme,
    ...muiTheme,
    cssVarPrefix,
    colorSchemeSelector: selector,
    rootSelector,
    getCssVar,
    colorSchemes,
    font: {
      ...prepareTypographyVars(muiTheme.typography),
      ...muiTheme.font
    },
    spacing: getSpacingVal(input.spacing)
  };
  Object.keys(theme.colorSchemes).forEach((key) => {
    const palette = theme.colorSchemes[key].palette;
    const setCssVarColor = (cssVar) => {
      const tokens = cssVar.split("-");
      const color2 = tokens[1];
      const colorToken = tokens[2];
      return getCssVar(cssVar, palette[color2][colorToken]);
    };
    if (palette.mode === "light") {
      setColor(palette.common, "background", "#fff");
      setColor(palette.common, "onBackground", "#000");
    }
    if (palette.mode === "dark") {
      setColor(palette.common, "background", "#000");
      setColor(palette.common, "onBackground", "#fff");
    }
    assignNode(palette, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
    if (palette.mode === "light") {
      setColor(palette.Alert, "errorColor", private_safeDarken(palette.error.light, 0.6));
      setColor(palette.Alert, "infoColor", private_safeDarken(palette.info.light, 0.6));
      setColor(palette.Alert, "successColor", private_safeDarken(palette.success.light, 0.6));
      setColor(palette.Alert, "warningColor", private_safeDarken(palette.warning.light, 0.6));
      setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
      setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
      setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
      setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
      setColor(palette.Alert, "errorFilledColor", silent(() => palette.getContrastText(palette.error.main)));
      setColor(palette.Alert, "infoFilledColor", silent(() => palette.getContrastText(palette.info.main)));
      setColor(palette.Alert, "successFilledColor", silent(() => palette.getContrastText(palette.success.main)));
      setColor(palette.Alert, "warningFilledColor", silent(() => palette.getContrastText(palette.warning.main)));
      setColor(palette.Alert, "errorStandardBg", private_safeLighten(palette.error.light, 0.9));
      setColor(palette.Alert, "infoStandardBg", private_safeLighten(palette.info.light, 0.9));
      setColor(palette.Alert, "successStandardBg", private_safeLighten(palette.success.light, 0.9));
      setColor(palette.Alert, "warningStandardBg", private_safeLighten(palette.warning.light, 0.9));
      setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
      setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
      setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
      setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
      setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
      setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
      setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
      setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
      setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
      setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
      setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
      setColor(palette.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
      setColor(palette.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
      setColor(palette.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
      setColor(palette.LinearProgress, "primaryBg", private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, "secondaryBg", private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, "errorBg", private_safeLighten(palette.error.main, 0.62));
      setColor(palette.LinearProgress, "infoBg", private_safeLighten(palette.info.main, 0.62));
      setColor(palette.LinearProgress, "successBg", private_safeLighten(palette.success.main, 0.62));
      setColor(palette.LinearProgress, "warningBg", private_safeLighten(palette.warning.main, 0.62));
      setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
      setColor(palette.Slider, "primaryTrack", private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.Slider, "secondaryTrack", private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.Slider, "errorTrack", private_safeLighten(palette.error.main, 0.62));
      setColor(palette.Slider, "infoTrack", private_safeLighten(palette.info.main, 0.62));
      setColor(palette.Slider, "successTrack", private_safeLighten(palette.success.main, 0.62));
      setColor(palette.Slider, "warningTrack", private_safeLighten(palette.warning.main, 0.62));
      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
      setColor(palette.SnackbarContent, "color", silent(() => palette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-400"));
      setColor(palette.StepContent, "border", setCssVarColor("palette-grey-400"));
      setColor(palette.Switch, "defaultColor", setCssVarColor("palette-common-white"));
      setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
      setColor(palette.Switch, "primaryDisabledColor", private_safeLighten(palette.primary.main, 0.62));
      setColor(palette.Switch, "secondaryDisabledColor", private_safeLighten(palette.secondary.main, 0.62));
      setColor(palette.Switch, "errorDisabledColor", private_safeLighten(palette.error.main, 0.62));
      setColor(palette.Switch, "infoDisabledColor", private_safeLighten(palette.info.main, 0.62));
      setColor(palette.Switch, "successDisabledColor", private_safeLighten(palette.success.main, 0.62));
      setColor(palette.Switch, "warningDisabledColor", private_safeLighten(palette.warning.main, 0.62));
      setColor(palette.TableCell, "border", private_safeLighten(private_safeAlpha(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, "bg", private_safeAlpha(palette.grey[700], 0.92));
    }
    if (palette.mode === "dark") {
      setColor(palette.Alert, "errorColor", private_safeLighten(palette.error.light, 0.6));
      setColor(palette.Alert, "infoColor", private_safeLighten(palette.info.light, 0.6));
      setColor(palette.Alert, "successColor", private_safeLighten(palette.success.light, 0.6));
      setColor(palette.Alert, "warningColor", private_safeLighten(palette.warning.light, 0.6));
      setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
      setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
      setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
      setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
      setColor(palette.Alert, "errorFilledColor", silent(() => palette.getContrastText(palette.error.dark)));
      setColor(palette.Alert, "infoFilledColor", silent(() => palette.getContrastText(palette.info.dark)));
      setColor(palette.Alert, "successFilledColor", silent(() => palette.getContrastText(palette.success.dark)));
      setColor(palette.Alert, "warningFilledColor", silent(() => palette.getContrastText(palette.warning.dark)));
      setColor(palette.Alert, "errorStandardBg", private_safeDarken(palette.error.light, 0.9));
      setColor(palette.Alert, "infoStandardBg", private_safeDarken(palette.info.light, 0.9));
      setColor(palette.Alert, "successStandardBg", private_safeDarken(palette.success.light, 0.9));
      setColor(palette.Alert, "warningStandardBg", private_safeDarken(palette.warning.light, 0.9));
      setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
      setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
      setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
      setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
      setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
      setColor(palette.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
      setColor(palette.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
      setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
      setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
      setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
      setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
      setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
      setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
      setColor(palette.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
      setColor(palette.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
      setColor(palette.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
      setColor(palette.LinearProgress, "primaryBg", private_safeDarken(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, "secondaryBg", private_safeDarken(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, "errorBg", private_safeDarken(palette.error.main, 0.5));
      setColor(palette.LinearProgress, "infoBg", private_safeDarken(palette.info.main, 0.5));
      setColor(palette.LinearProgress, "successBg", private_safeDarken(palette.success.main, 0.5));
      setColor(palette.LinearProgress, "warningBg", private_safeDarken(palette.warning.main, 0.5));
      setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
      setColor(palette.Slider, "primaryTrack", private_safeDarken(palette.primary.main, 0.5));
      setColor(palette.Slider, "secondaryTrack", private_safeDarken(palette.secondary.main, 0.5));
      setColor(palette.Slider, "errorTrack", private_safeDarken(palette.error.main, 0.5));
      setColor(palette.Slider, "infoTrack", private_safeDarken(palette.info.main, 0.5));
      setColor(palette.Slider, "successTrack", private_safeDarken(palette.success.main, 0.5));
      setColor(palette.Slider, "warningTrack", private_safeDarken(palette.warning.main, 0.5));
      const snackbarContentBackground = private_safeEmphasize(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
      setColor(palette.SnackbarContent, "color", silent(() => palette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, "fabHoverBg", private_safeEmphasize(palette.background.paper, 0.15));
      setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-600"));
      setColor(palette.StepContent, "border", setCssVarColor("palette-grey-600"));
      setColor(palette.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
      setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
      setColor(palette.Switch, "primaryDisabledColor", private_safeDarken(palette.primary.main, 0.55));
      setColor(palette.Switch, "secondaryDisabledColor", private_safeDarken(palette.secondary.main, 0.55));
      setColor(palette.Switch, "errorDisabledColor", private_safeDarken(palette.error.main, 0.55));
      setColor(palette.Switch, "infoDisabledColor", private_safeDarken(palette.info.main, 0.55));
      setColor(palette.Switch, "successDisabledColor", private_safeDarken(palette.success.main, 0.55));
      setColor(palette.Switch, "warningDisabledColor", private_safeDarken(palette.warning.main, 0.55));
      setColor(palette.TableCell, "border", private_safeDarken(private_safeAlpha(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, "bg", private_safeAlpha(palette.grey[700], 0.92));
    }
    setColorChannel(palette.background, "default");
    setColorChannel(palette.background, "paper");
    setColorChannel(palette.common, "background");
    setColorChannel(palette.common, "onBackground");
    setColorChannel(palette, "divider");
    Object.keys(palette).forEach((color2) => {
      const colors = palette[color2];
      if (color2 !== "tonalOffset" && colors && typeof colors === "object") {
        if (colors.main) {
          setColor(palette[color2], "mainChannel", private_safeColorChannel(toRgb(colors.main)));
        }
        if (colors.light) {
          setColor(palette[color2], "lightChannel", private_safeColorChannel(toRgb(colors.light)));
        }
        if (colors.dark) {
          setColor(palette[color2], "darkChannel", private_safeColorChannel(toRgb(colors.dark)));
        }
        if (colors.contrastText) {
          setColor(palette[color2], "contrastTextChannel", private_safeColorChannel(toRgb(colors.contrastText)));
        }
        if (color2 === "text") {
          setColorChannel(palette[color2], "primary");
          setColorChannel(palette[color2], "secondary");
        }
        if (color2 === "action") {
          if (colors.active) {
            setColorChannel(palette[color2], "active");
          }
          if (colors.selected) {
            setColorChannel(palette[color2], "selected");
          }
        }
      }
    });
  });
  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
  const parserConfig = {
    prefix: cssVarPrefix,
    disableCssColorScheme,
    shouldSkipGeneratingVar: shouldSkipGeneratingVar$1,
    getSelector: defaultGetSelector(theme)
  };
  const {
    vars,
    generateThemeVars,
    generateStyleSheets
  } = prepareCssVars(theme, parserConfig);
  theme.vars = vars;
  Object.entries(theme.colorSchemes[theme.defaultColorScheme]).forEach(([key, value]) => {
    theme[key] = value;
  });
  theme.generateThemeVars = generateThemeVars;
  theme.generateStyleSheets = generateStyleSheets;
  theme.generateSpacing = function generateSpacing() {
    return createSpacing(input.spacing, createUnarySpacing(this));
  };
  theme.getColorSchemeSelector = createGetColorSchemeSelector(selector);
  theme.spacing = theme.generateSpacing();
  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar$1;
  theme.unstable_sxConfig = {
    ...defaultSxConfig,
    ...input == null ? void 0 : input.unstable_sxConfig
  };
  theme.unstable_sx = function sx(props) {
    return styleFunctionSx({
      sx: props,
      theme: this
    });
  };
  theme.toRuntimeSource = stringifyTheme;
  return theme;
}
function attachColorScheme(theme, scheme, colorScheme) {
  if (!theme.colorSchemes) {
    return void 0;
  }
  if (colorScheme) {
    theme.colorSchemes[scheme] = {
      ...colorScheme !== true && colorScheme,
      palette: createPalette({
        ...colorScheme === true ? {} : colorScheme.palette,
        mode: scheme
      })
      // cast type to skip module augmentation test
    };
  }
}
function createTheme(options = {}, ...args) {
  const {
    palette,
    cssVariables = false,
    colorSchemes: initialColorSchemes = !palette ? {
      light: true
    } : void 0,
    defaultColorScheme: initialDefaultColorScheme = palette == null ? void 0 : palette.mode,
    ...rest
  } = options;
  const defaultColorSchemeInput = initialDefaultColorScheme || "light";
  const defaultScheme = initialColorSchemes == null ? void 0 : initialColorSchemes[defaultColorSchemeInput];
  const colorSchemesInput = {
    ...initialColorSchemes,
    ...palette ? {
      [defaultColorSchemeInput]: {
        ...typeof defaultScheme !== "boolean" && defaultScheme,
        palette
      }
    } : void 0
  };
  if (cssVariables === false) {
    if (!("colorSchemes" in options)) {
      return createThemeNoVars(options, ...args);
    }
    let paletteOptions = palette;
    if (!("palette" in options)) {
      if (colorSchemesInput[defaultColorSchemeInput]) {
        if (colorSchemesInput[defaultColorSchemeInput] !== true) {
          paletteOptions = colorSchemesInput[defaultColorSchemeInput].palette;
        } else if (defaultColorSchemeInput === "dark") {
          paletteOptions = {
            mode: "dark"
          };
        }
      }
    }
    const theme = createThemeNoVars({
      ...options,
      palette: paletteOptions
    }, ...args);
    theme.defaultColorScheme = defaultColorSchemeInput;
    theme.colorSchemes = colorSchemesInput;
    if (theme.palette.mode === "light") {
      theme.colorSchemes.light = {
        ...colorSchemesInput.light !== true && colorSchemesInput.light,
        palette: theme.palette
      };
      attachColorScheme(theme, "dark", colorSchemesInput.dark);
    }
    if (theme.palette.mode === "dark") {
      theme.colorSchemes.dark = {
        ...colorSchemesInput.dark !== true && colorSchemesInput.dark,
        palette: theme.palette
      };
      attachColorScheme(theme, "light", colorSchemesInput.light);
    }
    return theme;
  }
  if (!palette && !("light" in colorSchemesInput) && defaultColorSchemeInput === "light") {
    colorSchemesInput.light = true;
  }
  return createThemeWithVars({
    ...rest,
    colorSchemes: colorSchemesInput,
    defaultColorScheme: defaultColorSchemeInput,
    ...typeof cssVariables !== "boolean" && cssVariables
  }, ...args);
}
const defaultTheme = createTheme();
function slotShouldForwardProp(prop) {
  return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
}
const rootShouldForwardProp = (prop) => slotShouldForwardProp(prop) && prop !== "classes";
const styled = createStyled2({
  themeId: THEME_ID,
  defaultTheme,
  rootShouldForwardProp
});
function internal_createExtendSxProp() {
  return extendSxProp$1;
}
const memoTheme = unstable_memoTheme;
process.env.NODE_ENV !== "production" ? {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  value: PropTypes.object.isRequired
} : void 0;
function useDefaultProps(params) {
  return useDefaultProps$1(params);
}
function getSvgIconUtilityClass(slot) {
  return generateUtilityClass("MuiSvgIcon", slot);
}
generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
const useUtilityClasses$1 = (ownerState) => {
  const {
    color: color2,
    fontSize,
    classes
  } = ownerState;
  const slots = {
    root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize)}`]
  };
  return composeClasses(slots, getSvgIconUtilityClass, classes);
};
const SvgIconRoot = styled("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.color !== "inherit" && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
  }
})(memoTheme(({
  theme
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    flexShrink: 0,
    transition: (_d = (_a = theme.transitions) == null ? void 0 : _a.create) == null ? void 0 : _d.call(_a, "fill", {
      duration: (_c = (_b = (theme.vars ?? theme).transitions) == null ? void 0 : _b.duration) == null ? void 0 : _c.shorter
    }),
    variants: [
      {
        props: (props) => !props.hasSvgAsChild,
        style: {
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: "currentColor"
        }
      },
      {
        props: {
          fontSize: "inherit"
        },
        style: {
          fontSize: "inherit"
        }
      },
      {
        props: {
          fontSize: "small"
        },
        style: {
          fontSize: ((_f = (_e = theme.typography) == null ? void 0 : _e.pxToRem) == null ? void 0 : _f.call(_e, 20)) || "1.25rem"
        }
      },
      {
        props: {
          fontSize: "medium"
        },
        style: {
          fontSize: ((_h = (_g = theme.typography) == null ? void 0 : _g.pxToRem) == null ? void 0 : _h.call(_g, 24)) || "1.5rem"
        }
      },
      {
        props: {
          fontSize: "large"
        },
        style: {
          fontSize: ((_j = (_i = theme.typography) == null ? void 0 : _i.pxToRem) == null ? void 0 : _j.call(_i, 35)) || "2.1875rem"
        }
      },
      // TODO v5 deprecate color prop, v6 remove for sx
      ...Object.entries((theme.vars ?? theme).palette).filter(([, value]) => value && value.main).map(([color2]) => {
        var _a2, _b2;
        return {
          props: {
            color: color2
          },
          style: {
            color: (_b2 = (_a2 = (theme.vars ?? theme).palette) == null ? void 0 : _a2[color2]) == null ? void 0 : _b2.main
          }
        };
      }),
      {
        props: {
          color: "action"
        },
        style: {
          color: (_l = (_k = (theme.vars ?? theme).palette) == null ? void 0 : _k.action) == null ? void 0 : _l.active
        }
      },
      {
        props: {
          color: "disabled"
        },
        style: {
          color: (_n = (_m = (theme.vars ?? theme).palette) == null ? void 0 : _m.action) == null ? void 0 : _n.disabled
        }
      },
      {
        props: {
          color: "inherit"
        },
        style: {
          color: void 0
        }
      }
    ]
  };
}));
const SvgIcon = /* @__PURE__ */ React.forwardRef(function SvgIcon2(inProps, ref2) {
  const props = useDefaultProps({
    props: inProps,
    name: "MuiSvgIcon"
  });
  const {
    children,
    className,
    color: color2 = "inherit",
    component = "svg",
    fontSize = "medium",
    htmlColor,
    inheritViewBox = false,
    titleAccess,
    viewBox = "0 0 24 24",
    ...other
  } = props;
  const hasSvgAsChild = /* @__PURE__ */ React.isValidElement(children) && children.type === "svg";
  const ownerState = {
    ...props,
    color: color2,
    component,
    fontSize,
    instanceFontSize: inProps.fontSize,
    inheritViewBox,
    viewBox,
    hasSvgAsChild
  };
  const more = {};
  if (!inheritViewBox) {
    more.viewBox = viewBox;
  }
  const classes = useUtilityClasses$1(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(SvgIconRoot, {
    as: component,
    className: clsx(classes.root, className),
    focusable: "false",
    color: htmlColor,
    "aria-hidden": titleAccess ? void 0 : true,
    role: titleAccess ? "img" : void 0,
    ref: ref2,
    ...more,
    ...other,
    ...hasSvgAsChild && children.props,
    ownerState,
    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ jsxRuntimeExports.jsx("title", {
      children: titleAccess
    }) : null]
  });
});
process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: PropTypes.oneOfType([PropTypes.oneOf(["inherit", "large", "medium", "small"]), PropTypes.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: PropTypes.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: PropTypes.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: PropTypes.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: PropTypes.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: PropTypes.string
} : void 0;
if (SvgIcon) {
  SvgIcon.muiName = "SvgIcon";
}
function createSvgIcon(path, displayName) {
  function Component(props, ref2) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(SvgIcon, {
      "data-testid": `${displayName}Icon`,
      ref: ref2,
      ...props,
      children: path
    });
  }
  if (process.env.NODE_ENV !== "production") {
    Component.displayName = `${displayName}Icon`;
  }
  Component.muiName = SvgIcon.muiName;
  return /* @__PURE__ */ React.memo(/* @__PURE__ */ React.forwardRef(Component));
}
function hasCorrectMainProperty(obj) {
  return typeof obj.main === "string";
}
function checkSimplePaletteColorValues(obj, additionalPropertiesToCheck = []) {
  if (!hasCorrectMainProperty(obj)) {
    return false;
  }
  for (const value of additionalPropertiesToCheck) {
    if (!obj.hasOwnProperty(value) || typeof obj[value] !== "string") {
      return false;
    }
  }
  return true;
}
function createSimplePaletteValueFilter(additionalPropertiesToCheck = []) {
  return ([, value]) => value && checkSimplePaletteColorValues(value, additionalPropertiesToCheck);
}
function getTypographyUtilityClass(slot) {
  return generateUtilityClass("MuiTypography", slot);
}
generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
const v6Colors = {
  primary: true,
  secondary: true,
  error: true,
  info: true,
  success: true,
  warning: true,
  textPrimary: true,
  textSecondary: true,
  textDisabled: true
};
const extendSxProp = internal_createExtendSxProp();
const useUtilityClasses = (ownerState) => {
  const {
    align,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    classes
  } = ownerState;
  const slots = {
    root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
  };
  return composeClasses(slots, getTypographyUtilityClass, classes);
};
const TypographyRoot = styled("span", {
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== "inherit" && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
  }
})(memoTheme(({
  theme
}) => {
  var _a;
  return {
    margin: 0,
    variants: [{
      props: {
        variant: "inherit"
      },
      style: {
        // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
        font: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    }, ...Object.entries(theme.typography).filter(([variant, value]) => variant !== "inherit" && value && typeof value === "object").map(([variant, value]) => ({
      props: {
        variant
      },
      style: value
    })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        color: (theme.vars || theme).palette[color2].main
      }
    })), ...Object.entries(((_a = theme.palette) == null ? void 0 : _a.text) || {}).filter(([, value]) => typeof value === "string").map(([color2]) => ({
      props: {
        color: `text${capitalize(color2)}`
      },
      style: {
        color: (theme.vars || theme).palette.text[color2]
      }
    })), {
      props: ({
        ownerState
      }) => ownerState.align !== "inherit",
      style: {
        textAlign: "var(--Typography-textAlign)"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.noWrap,
      style: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.gutterBottom,
      style: {
        marginBottom: "0.35em"
      }
    }, {
      props: ({
        ownerState
      }) => ownerState.paragraph,
      style: {
        marginBottom: 16
      }
    }]
  };
}));
const defaultVariantMapping = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
};
const Typography = /* @__PURE__ */ React.forwardRef(function Typography2(inProps, ref2) {
  const {
    color: color2,
    ...themeProps
  } = useDefaultProps({
    props: inProps,
    name: "MuiTypography"
  });
  const isSxColor = !v6Colors[color2];
  const props = extendSxProp({
    ...themeProps,
    ...isSxColor && {
      color: color2
    }
  });
  const {
    align = "inherit",
    className,
    component,
    gutterBottom = false,
    noWrap = false,
    paragraph = false,
    variant = "body1",
    variantMapping = defaultVariantMapping,
    ...other
  } = props;
  const ownerState = {
    ...props,
    align,
    color: color2,
    className,
    component,
    gutterBottom,
    noWrap,
    paragraph,
    variant,
    variantMapping
  };
  const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
  const classes = useUtilityClasses(ownerState);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TypographyRoot, {
    as: Component,
    ref: ref2,
    className: clsx(classes.root, className),
    ...other,
    ownerState,
    style: {
      ...align !== "inherit" && {
        "--Typography-textAlign": align
      },
      ...other.style
    }
  });
});
process.env.NODE_ENV !== "production" ? Typography.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: PropTypes.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: PropTypes.oneOfType([PropTypes.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: PropTypes.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: PropTypes.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  paragraph: PropTypes.bool,
  /**
   * @ignore
   */
  style: PropTypes.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: PropTypes.oneOfType([PropTypes.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), PropTypes.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: PropTypes.object
} : void 0;
const NewReleases = createSvgIcon(/* @__PURE__ */ jsxRuntimeExports.jsx("path", {
  d: "m23 12-2.44-2.78.34-3.68-3.61-.82-1.89-3.18L12 3 8.6 1.54 6.71 4.72l-3.61.81.34 3.68L1 12l2.44 2.78-.34 3.69 3.61.82 1.89 3.18L12 21l3.4 1.46 1.89-3.18 3.61-.82-.34-3.68zm-10 5h-2v-2h2zm0-4h-2V7h2z"
}), "NewReleases");
const PropertyTypeMandatoryIcon = React__default.forwardRef((props, ref2) => /* @__PURE__ */ jsxRuntimeExports.jsx(NewReleases, { ref: ref2, ...props }));
const jupKeyIdSuffix = "Id";
function getTargetObjectTypeCapitalizedName(propertyType) {
  const { type: type2, name } = propertyType;
  if (["belongs-to"].includes(type2)) {
    return capitalizeFirstLetter(name);
  }
  if (["has-many-paginated", "has-many"].includes(type2)) {
    return singularize(capitalizeFirstLetter(name));
  }
  if (["foreign-key"].includes(type2)) {
    const regexp = new RegExp(`${jupKeyIdSuffix}$`, "gi");
    return capitalizeFirstLetter(name.replace(regexp, ""));
  }
}
function includeJupType(list, type2) {
  return list.includes(type2);
}
function isPropertyTypeBelongsTo(propertyType) {
  const { type: type2 } = propertyType;
  return includeJupType(["belongs-to"], type2);
}
function isPropertyTypeHasMany(propertyType) {
  const { type: type2 } = propertyType;
  return includeJupType(["has-many", "has-many-paginated"], type2);
}
function getTargetObjectTypeDefinition(propertyType) {
  const { association } = propertyType;
  if (association) {
    return getObjectTypeDefinitionByName(association.targetModelName);
  }
  throw new Error(`missing target property type for property <${propertyType.name}> on ${propertyType.objectTypeName}`);
}
function objectTypePluralLabel(translation, objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  if (!otDef) {
    return toPlural(objectTypeName);
  }
  return translation(`models.${otDef.capitalized.singular}.plural`);
}
function objectTypeCapitalizedPluralLabel(translation, objectTypeName) {
  return capitalizeFirstLetter(objectTypePluralLabel(translation, objectTypeName));
}
const technicalPropertyTypeNames = {
  externalId: "externalId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  userCompanyCreatedBy: "userCompanyCreatedBy",
  userCompanyCreatedById: "userCompanyCreatedById",
  userCompanyUpdatedBy: "userCompanyUpdatedBy",
  userCompanyUpdatedById: "userCompanyUpdatedById"
};
const technicalPropertyTypes = [
  technicalPropertyTypeNames.externalId,
  technicalPropertyTypeNames.createdAt,
  technicalPropertyTypeNames.updatedAt,
  technicalPropertyTypeNames.userCompanyCreatedBy,
  technicalPropertyTypeNames.userCompanyCreatedById,
  technicalPropertyTypeNames.userCompanyUpdatedBy,
  technicalPropertyTypeNames.userCompanyUpdatedById
];
const calculatedSpacesPropertyNames = [
  "workplacesCount",
  "workplacesRatio",
  "freeWorkplacesCount",
  "flexWorkplacesCount",
  "flexRatio",
  "sharedWorkplacesCount",
  "sharedWorkplacesRatio",
  "transitWorkplacesCount",
  "seatsCount",
  "totalCapacityCount",
  "totalCapacityWorkplaceCountRatio",
  "carbonFootprint"
];
const calculatedPeoplePropertyNames = [
  "totalPeopleCount",
  "peopleRatio",
  "expansionRatio",
  "seatsPeopleRatio",
  "occupancyRate"
];
const calculatedInfoPropertyNames = [
  ...calculatedPeoplePropertyNames,
  ...calculatedSpacesPropertyNames
];
const roomPropertyNames = [
  "roomsCount",
  "roomsArea"
];
const calculatedGlobalPropertyNames = [
  ...roomPropertyNames,
  ...calculatedInfoPropertyNames
];
const allCalculatedPropertiesForTranslations = [
  ...calculatedGlobalPropertyNames,
  "peopleCount"
];
function getObjectTypeSingularLabel(translation, objectTypeName) {
  const otDef = getObjectTypeDefinitionByName(objectTypeName);
  if (!otDef) {
    return objectTypeName;
  }
  return translation(`models.${otDef.capitalized.singular}.singular`);
}
function getPropertyTypeLabelWithTranslation(i18n, propertyType) {
  var _a, _b;
  const { objectTypeName, type: type2, name } = propertyType;
  const objectTypeDefinition = getObjectTypeDefinitionByName(objectTypeName);
  if (technicalPropertyTypes.includes(name)) {
    return i18n.translate(`entity.properties.${name}.label`);
  }
  const defaultKey = `models.${objectTypeDefinition.capitalized.singular}.properties.${name}.label`;
  const d = i18n.translate(defaultKey);
  if (i18n.has(defaultKey)) {
    return d;
  }
  if (allCalculatedPropertiesForTranslations.includes(name)) {
    const key = `calculatedProperties.properties.${name}.label`;
    if (i18n.has(key)) {
      return i18n.translate(key);
    }
  }
  const belongsToCapitalizedObjectTypeName = getTargetObjectTypeCapitalizedName(propertyType);
  if (isPropertyTypeBelongsTo(propertyType)) {
    return capitalizeFirstLetter(i18n.translate(`models.${belongsToCapitalizedObjectTypeName}.singular`));
  }
  if (type2 === "foreign-key") {
    const fkKey = `models.${belongsToCapitalizedObjectTypeName}.properties.id.label`;
    if (i18n.has(fkKey)) {
      return i18n.translate(fkKey);
    } else if ((_a = propertyType.association) == null ? void 0 : _a.targetModelName) {
      return `Id (${getObjectTypeSingularLabel(i18n.translate, (_b = propertyType.association) == null ? void 0 : _b.targetModelName)})`;
    } else {
      return "Id (?)";
    }
  }
  if (isPropertyTypeHasMany(propertyType)) {
    const targetObjectType = getTargetObjectTypeDefinition(propertyType);
    return objectTypeCapitalizedPluralLabel(i18n.translate, targetObjectType.name);
  }
  return d || `<${name}>`;
}
function PropertyTypeMandatoryText(props) {
  const { propertyType } = props;
  const i18n = useI18nApi();
  return /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: getPropertyTypeMandatoryText(i18n, propertyType) });
}
function getPropertyTypeMandatoryText(i18nApi, propertyType) {
  return i18nApi.translate("entity.properties.mandatory", { name: getPropertyTypeLabelWithTranslation(i18nApi, propertyType) });
}
function PropertyTypeMandatoryLabel(props) {
  const { propertyType } = props;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(Typography, { variant: "caption", style: { display: "flex", alignItems: "center" }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(PropertyTypeMandatoryIcon, { sx: { marginRight: 1 } }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(PropertyTypeMandatoryText, { propertyType })
  ] });
}
function getTranslatedUnit(translation, unit) {
  if (unit) {
    return translation(`${unit.type}.${unit.value}`);
  }
}
const PropertyTypeLabel = React__default.forwardRef((props, ref2) => {
  const { propertyType, displayUnit, style: style2, ...otherProps } = props;
  const i18n = useI18nApi();
  const unit = displayUnit && propertyType.options.unit && ` (${getTranslatedUnit(i18n.translate, propertyType.options.unit)})`;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { ref: ref2, style: style2, ...otherProps, children: [
    getPropertyTypeLabelWithTranslation(i18n, props.propertyType),
    unit
  ] });
});
const version = { "major": 3, "minor": 4, "build": 60 };
function getAppVersion() {
  const { major, minor, build } = version;
  return `${major}.${minor}.${build}`;
}
const appVersion = getAppVersion();
export {
  PropertyTypeLabel,
  PropertyTypeMandatoryLabel,
  SetupRecoilContext,
  appVersion,
  getObjectTypeDefinitionByName,
  getPropertyTypeByCode,
  getPropertyTypeByName,
  versionCookieKeyName
};
